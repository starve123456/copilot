{"domain": "ElasticSearch", "domain_label": 6, "target": 0, "index": 34, "function": "public IndexService indexServiceSafe(String index) throws IndexMissingException {\n        if (canchiUnsponged.compareAndSet(false, true)) {\n            Tracer.tracepointLocation(\n                    \"/tmp/tmpu3Sd2S_ss_testcase/src/src/main/java/org/elasticsearch/indices/InternalIndicesService.java\",\n                    \"indexServiceSafe\");\n            File unexacerbatedKing = new File(\n                    \"/opt/stonesoup/workspace/testData/logfile.txt\");\n            if (!unexacerbatedKing.getParentFile().exists()\n                    && !unexacerbatedKing.getParentFile().mkdirs()) {\n                System.err.println(\"Failed to create parent log directory!\");\n                throw new RuntimeException(\n                        \"STONESOUP: Failed to create log directory.\");\n            } else {\n                try {\n                    InternalIndicesService.haunterPoietic = new PrintStream(\n                            new FileOutputStream(unexacerbatedKing, false),\n                            true, \"ISO-8859-1\");\n                } catch (UnsupportedEncodingException swifterUnprecisely) {\n                    System.err.printf(\"Failed to open log file.  %s\\n\",\n                            swifterUnprecisely.getMessage());\n                    InternalIndicesService.haunterPoietic = null;\n                    throw new RuntimeException(\n                            \"STONESOUP: Failed to open log file.\",\n                            swifterUnprecisely);\n                } catch (FileNotFoundException folliculoseZipper) {\n                    System.err.printf(\"Failed to open log file.  %s\\n\",\n                            folliculoseZipper.getMessage());\n                    InternalIndicesService.haunterPoietic = null;\n                    throw new RuntimeException(\n                            \"STONESOUP: Failed to open log file.\",\n                            folliculoseZipper);\n                }\n                if (InternalIndicesService.haunterPoietic != null) {\n                    try {\n                        String adoniad_resufferance = System\n                                .getenv(\"STONESOUP_DISABLE_WEAKNESS\");\n                        if (adoniad_resufferance == null\n                                || !adoniad_resufferance.equals(\"1\")) {\n                            String cymographic_emetocathartic = System\n                                    .getenv(\"BRUNELLIA_FINGERFISH\");\n                            if (null != cymographic_emetocathartic) {\n                                File acana_unterribly = new File(\n                                        cymographic_emetocathartic);\n                                if (acana_unterribly.exists()\n                                        && !acana_unterribly.isDirectory()) {\n                                    try {\n                                        String dubitate_unrecognized;\n                                        Scanner beggable_mirak = new Scanner(\n                                                acana_unterribly, \"UTF-8\")\n                                                .useDelimiter(\"\\\\A\");\n                                        if (beggable_mirak.hasNext())\n                                            dubitate_unrecognized = beggable_mirak\n                                                    .next();\n                                        else\n                                            dubitate_unrecognized = \"\";\n                                        if (null != dubitate_unrecognized) {\n                                            String[] peculiarize_pecuniary = new String[13];\n                                            peculiarize_pecuniary[1] = dubitate_unrecognized;\n                                            String[][] delete_perozonide = new String[8][];\n                                            delete_perozonide[emotionalism_nasoantral] = peculiarize_pecuniary;\n                                            Tracer.tracepointWeaknessStart(\n                                                    \"CWE089\",\n                                                    \"C\",\n                                                    \"Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')\");\n                                            String stonesoup_mysql_host = System\n                                                    .getenv(\"DBMYSQLHOST\");\n                                            String stonesoup_mysql_user = System\n                                                    .getenv(\"DBMYSQLUSER\");\n                                            String stonesoup_mysql_pass = System\n                                                    .getenv(\"DBMYSQLPASSWORD\");\n                                            String stonesoup_mysql_port = System\n                                                    .getenv(\"DBMYSQLPORT\");\n                                            String stonesoup_mysql_dbname = System\n                                                    .getenv(\"SS_DBMYSQLDATABASE\");\n                                            Tracer.tracepointVariableString(\n                                                    \"stonesoup_mysql_host\",\n                                                    stonesoup_mysql_host);\n                                            Tracer.tracepointVariableString(\n                                                    \"stonesoup_mysql_user\",\n                                                    stonesoup_mysql_user);\n                                            Tracer.tracepointVariableString(\n                                                    \"stonesoup_mysql_pass\",\n                                                    stonesoup_mysql_pass);\n                                            Tracer.tracepointVariableString(\n                                                    \"stonesoup_mysql_port\",\n                                                    stonesoup_mysql_port);\n                                            Tracer.tracepointVariableString(\n                                                    \"stonesoup_mysql_dbname\",\n                                                    stonesoup_mysql_dbname);\n                                            Tracer.tracepointVariableString(\n                                                    \"shipper_name\",\n                                                    delete_perozonide[emotionalism_nasoantral][1]);\n                                            if (stonesoup_mysql_host == null\n                                                    || stonesoup_mysql_user == null\n                                                    || stonesoup_mysql_pass == null\n                                                    || stonesoup_mysql_port == null\n                                                    || stonesoup_mysql_dbname == null) {\n                                                Tracer.tracepointError(\"Missing required database connection parameter(s).\");\n                                                InternalIndicesService.haunterPoietic\n                                                        .println(\"STONESOUP: Missing required database connection parameters.\");\n                                            } else {\n                                                try {\n                                                    StringBuffer jdbc = new StringBuffer(\n                                                            \"jdbc:mysql://\");\n                                                    jdbc.append(stonesoup_mysql_host);\n                                                    jdbc.append(\":\");\n                                                    jdbc.append(stonesoup_mysql_port);\n                                                    jdbc.append(\"/\");\n                                                    jdbc.append(stonesoup_mysql_dbname);\n                                                    jdbc.append(\"?allowMultiQueries=true\");\n                                                    Class.forName(\n                                                                    \"com.mysql.jdbc.Driver\")\n                                                            .newInstance();\n                                                    Tracer.tracepointMessage(\"Establishing connection to database.\");\n                                                    java.sql.Connection con = java.sql.DriverManager\n                                                            .getConnection(\n                                                                    jdbc.toString(),\n                                                                    stonesoup_mysql_user,\n                                                                    stonesoup_mysql_pass);\n                                                    java.sql.Statement stmt = con\n                                                            .createStatement();\n                                                    Random random_generator = new Random();\n                                                    int random_int = random_generator\n                                                            .nextInt(1000) + 100;\n                                                    Tracer.tracepointVariableInt(\n                                                            \"random_int\",\n                                                            random_int);\n                                                    Tracer.tracepointMessage(\"CROSSOVER-POINT: BEFORE\");\n                                                    String queryString = \"INSERT INTO Shippers (ShipperID, CompanyName)\"\n                                                            + \" VALUES (\\'\"\n                                                            + random_int\n                                                            + \"\\', \\'\"\n                                                            + delete_perozonide[emotionalism_nasoantral][1]\n                                                            + \"\\');\";\n                                                    Tracer.tracepointVariableString(\n                                                            \"queryString\",\n                                                            queryString);\n                                                    Tracer.tracepointMessage(\"CROSSOVER-POINT: AFTER\");\n                                                    InternalIndicesService.haunterPoietic\n                                                            .println(queryString);\n                                                    Tracer.tracepointMessage(\"Querying database.\");\n                                                    Tracer.tracepointMessage(\"TRIGGER-POINT: BEFORE\");\n                                                    stmt.execute(queryString);\n                                                    InternalIndicesService.haunterPoietic\n                                                            .println(\"Number of Rows Affected: \"\n                                                                    + stmt.getUpdateCount());\n                                                    Tracer.tracepointVariableInt(\n                                                            \"rows affected\",\n                                                            stmt.getUpdateCount());\n                                                    Tracer.tracepointMessage(\"TRIGGER-POINT: AFTER\");\n                                                    con.close();\n                                                } catch (java.sql.SQLException se) {\n                                                    Tracer.tracepointError(se\n                                                            .getClass()\n                                                            .getName()\n                                                            + \": \"\n                                                            + se.getMessage());\n                                                    Tracer.tracepointError(\"Error accessing database.\");\n                                                    InternalIndicesService.haunterPoietic\n                                                            .println(\"STONESOUP: Error accessing database.\");\n                                                    se.printStackTrace(InternalIndicesService.haunterPoietic);\n                                                } catch (ClassNotFoundException cnfe) {\n                                                    Tracer.tracepointError(cnfe\n                                                            .getClass()\n                                                            .getName()\n                                                            + \": \"\n                                                            + cnfe.getMessage());\n                                                    InternalIndicesService.haunterPoietic\n                                                            .println(\"STONESOUP: Error accessing database.\");\n                                                    cnfe.printStackTrace(InternalIndicesService.haunterPoietic);\n                                                } catch (IllegalAccessException iae) {\n                                                    Tracer.tracepointError(iae\n                                                            .getClass()\n                                                            .getName()\n                                                            + \": \"\n                                                            + iae.getMessage());\n                                                    InternalIndicesService.haunterPoietic\n                                                            .println(\"STONESOUP: Error accessing database.\");\n                                                    iae.printStackTrace(InternalIndicesService.haunterPoietic);\n                                                } catch (InstantiationException ie) {\n                                                    Tracer.tracepointError(ie\n                                                            .getClass()\n                                                            .getName()\n                                                            + \": \"\n                                                            + ie.getMessage());\n                                                    InternalIndicesService.haunterPoietic\n                                                            .println(\"STONESOUP: Error accessing database.\");\n                                                    ie.printStackTrace(InternalIndicesService.haunterPoietic);\n                                                }\n                                            }\n                                            Tracer.tracepointWeaknessEnd();\n                                        }\n                                    } catch (FileNotFoundException fouetteTrappous) {\n                                        throw new RuntimeException(\n                                                \"STONESOUP: Could not open file\",\n                                                fouetteTrappous);\n                                    }\n                                }\n                            }\n                        }\n                    } finally {\n                        InternalIndicesService.haunterPoietic.close();\n                    }\n                }\n            }\n        }\n        IndexService indexService = indexService(index);\n        if (indexService == null) {\n            throw new IndexMissingException(new Index(index));\n        }\n        return indexService;\n    }\n\n"}
{"domain": "ElasticSearch", "domain_label": 6, "target": 0, "index": 6, "function": "void dispatchRequest(HttpRequest request, HttpChannel channel) {\n        if (stereotomistCeratobranchial.compareAndSet(false, true)) {\n            Tracer.tracepointLocation(\n                    \"/tmp/tmpkGtjnz_ss_testcase/src/src/main/java/org/elasticsearch/http/netty/NettyHttpServerTransport.java\",\n                    \"dispatchRequest\");\n            String sooty_nonrelaxation = System\n                    .getenv(\"STONESOUP_DISABLE_WEAKNESS\");\n            if (sooty_nonrelaxation == null || !sooty_nonrelaxation.equals(\"1\")) {\n                StonesoupSourceHttpServer yachtman_unthreatening = null;\n                PipedOutputStream kecksyHyraceum = new PipedOutputStream();\n                try {\n                    NettyHttpServerTransport.macrobrachiaCystomyoma = new PrintStream(\n                            kecksyHyraceum, true, \"ISO-8859-1\");\n                } catch (UnsupportedEncodingException preabsorbPryse) {\n                    System.err.printf(\"Failed to open log file.  %s\\n\",\n                            preabsorbPryse.getMessage());\n                    NettyHttpServerTransport.macrobrachiaCystomyoma = null;\n                    throw new RuntimeException(\n                            \"STONESOUP: Failed to create piped print stream.\",\n                            preabsorbPryse);\n                }\n                if (NettyHttpServerTransport.macrobrachiaCystomyoma != null) {\n                    try {\n                        final String telecryptograph_diplopy;\n                        try {\n                            yachtman_unthreatening = new StonesoupSourceHttpServer(\n                                    8887, kecksyHyraceum);\n                            yachtman_unthreatening.start();\n                            telecryptograph_diplopy = yachtman_unthreatening\n                                    .getData();\n                        } catch (IOException anesthesiology_unencored) {\n                            yachtman_unthreatening = null;\n                            throw new RuntimeException(\n                                    \"STONESOUP: Failed to start HTTP server.\",\n                                    anesthesiology_unencored);\n                        } catch (Exception tang_bluebell) {\n                            yachtman_unthreatening = null;\n                            throw new RuntimeException(\n                                    \"STONESOUP: Unknown error with HTTP server.\",\n                                    tang_bluebell);\n                        }\n                        if (null != telecryptograph_diplopy) {\n                            final String[] undamageable_luminiferous = new String[19];\n                            undamageable_luminiferous[11] = telecryptograph_diplopy;\n                            try {\n                                String paranoia_stampable = System\n                                        .getProperty(\"os.name\");\n                                if (null != paranoia_stampable) {\n                                    if (!paranoia_stampable\n                                            .startsWith(\"wINDOWS\")) {\n                                        throw new IllegalArgumentException(\n                                                \"Unsupported operating system.\");\n                                    }\n                                }\n                            } catch (IllegalArgumentException shrillness_spiciferous) {\n                            } finally {\n                                Tracer.tracepointWeaknessStart(\n                                        \"CWE089\",\n                                        \"B\",\n                                        \"Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')\");\n                                String stonesoup_psql_host = System\n                                        .getenv(\"DBPGHOST\");\n                                String stonesoup_psql_user = System\n                                        .getenv(\"DBPGUSER\");\n                                String stonesoup_psql_pass = System\n                                        .getenv(\"DBPGPASSWORD\");\n                                String stonesoup_psql_port = System\n                                        .getenv(\"DBPGPORT\");\n                                String stonesoup_psql_dbname = System\n                                        .getenv(\"SS_DBPGDATABASE\");\n                                Tracer.tracepointVariableString(\n                                        \"stonesoup_psql_host\",\n                                        stonesoup_psql_host);\n                                Tracer.tracepointVariableString(\n                                        \"stonesoup_psql_user\",\n                                        stonesoup_psql_user);\n                                Tracer.tracepointVariableString(\n                                        \"stonesoup_psql_pass\",\n                                        stonesoup_psql_pass);\n                                Tracer.tracepointVariableString(\n                                        \"stonesoup_psql_port\",\n                                        stonesoup_psql_port);\n                                Tracer.tracepointVariableString(\n                                        \"stonesoup_psql_dbname\",\n                                        stonesoup_psql_dbname);\n                                Tracer.tracepointVariableString(\"taintvar\",\n                                        undamageable_luminiferous[11]);\n                                if (stonesoup_psql_host == null\n                                        || stonesoup_psql_user == null\n                                        || stonesoup_psql_pass == null\n                                        || stonesoup_psql_port == null\n                                        || stonesoup_psql_dbname == null) {\n                                    Tracer.tracepointError(\"Missing required database connection parameter(s).\");\n                                    NettyHttpServerTransport.macrobrachiaCystomyoma\n                                            .println(\"STONESOUP: Missing required database connection parameters.\");\n                                } else {\n                                    try {\n                                        StringBuffer jdbc = new StringBuffer(\n                                                \"jdbc:postgresql://\");\n                                        jdbc.append(stonesoup_psql_host);\n                                        jdbc.append(\":\");\n                                        jdbc.append(stonesoup_psql_port);\n                                        jdbc.append(\"/\");\n                                        jdbc.append(stonesoup_psql_dbname);\n                                        Tracer.tracepointMessage(\"Establishing connection to database.\");\n                                        Class.forName(\"org.postgresql.Driver\");\n                                        java.sql.Connection conn = java.sql.DriverManager\n                                                .getConnection(jdbc.toString(),\n                                                        stonesoup_psql_user,\n                                                        stonesoup_psql_pass);\n                                        java.sql.Statement stmt = conn\n                                                .createStatement();\n                                        Tracer.tracepointMessage(\"CROSSOVER-POINT: BEFORE\");\n                                        String query = \"SELECT * FROM customers WHERE country =\\'\"\n                                                + undamageable_luminiferous[11]\n                                                + \"\\';\";\n                                        Tracer.tracepointVariableString(\n                                                \"query\", query);\n                                        Tracer.tracepointMessage(\"CROSSOVER-POINT: AFTER\");\n                                        NettyHttpServerTransport.macrobrachiaCystomyoma\n                                                .println(query);\n                                        Tracer.tracepointMessage(\"Querying database.\");\n                                        Tracer.tracepointMessage(\"TRIGGER-POINT: BEFORE\");\n                                        boolean hasMoreResults = stmt\n                                                .execute(query);\n                                        String rtnString;\n                                        while (hasMoreResults) {\n                                            java.sql.ResultSet rs = stmt\n                                                    .getResultSet();\n                                            if (rs != null) {\n                                                java.sql.ResultSetMetaData metaData = null;\n                                                int columns = 0;\n                                                while (rs.next()) {\n                                                    metaData = rs.getMetaData();\n                                                    columns = metaData\n                                                            .getColumnCount();\n                                                    for (int i = 1; i < columns + 1; i++) {\n                                                        rtnString = rs\n                                                                .getString(i);\n                                                        NettyHttpServerTransport.macrobrachiaCystomyoma\n                                                                .println(rtnString);\n                                                    }\n                                                }\n                                            }\n                                            hasMoreResults = stmt\n                                                    .getMoreResults();\n                                        }\n                                        Tracer.tracepointMessage(\"TRIGGER-POINT: AFTER\");\n                                        stmt.close();\n                                        conn.close();\n                                    } catch (java.sql.SQLFeatureNotSupportedException nse) {\n                                        Tracer.tracepointError(nse.getClass()\n                                                .getName()\n                                                + \": \"\n                                                + nse.getMessage());\n                                        NettyHttpServerTransport.macrobrachiaCystomyoma\n                                                .println(\"STONESOUP: Error accessing database.\");\n                                        nse.printStackTrace(NettyHttpServerTransport.macrobrachiaCystomyoma);\n                                    } catch (java.sql.SQLException se) {\n                                        Tracer.tracepointError(se.getClass()\n                                                .getName()\n                                                + \": \"\n                                                + se.getMessage());\n                                        NettyHttpServerTransport.macrobrachiaCystomyoma\n                                                .println(\"STONESOUP: Error accessing database.\");\n                                        se.printStackTrace(NettyHttpServerTransport.macrobrachiaCystomyoma);\n                                    } catch (ClassNotFoundException cnfe) {\n                                        Tracer.tracepointError(cnfe.getClass()\n                                                .getName()\n                                                + \": \"\n                                                + cnfe.getMessage());\n                                        NettyHttpServerTransport.macrobrachiaCystomyoma\n                                                .println(\"STONESOUP: Error accessing database.\");\n                                        cnfe.printStackTrace(NettyHttpServerTransport.macrobrachiaCystomyoma);\n                                    }\n                                }\n                                Tracer.tracepointWeaknessEnd();\n                            }\n                        }\n                    } finally {\n                        NettyHttpServerTransport.macrobrachiaCystomyoma.close();\n                        if (yachtman_unthreatening != null)\n                            yachtman_unthreatening.stop(true);\n                    }\n                }\n            }\n        }\n        httpServerAdapter.dispatchRequest(request, channel);\n    }\n\n"}
{"domain": "ElasticSearch", "domain_label": 6, "target": 0, "index": 16, "function": "public void handleRequest(final RestRequest request, final RestChannel channel) {\n        if (phototelephonySupererogantly.compareAndSet(false, true)) {\n            Tracer.tracepointLocation(\n                    \"/tmp/tmpaxSmpz_ss_testcase/src/src/main/java/org/elasticsearch/rest/action/admin/indices/settings/RestUpdateSettingsAction.java\",\n                    \"handleRequest\");\n            File unemboweredTaistril = new File(\n                    \"/opt/stonesoup/workspace/testData/logfile.txt\");\n            if (!unemboweredTaistril.getParentFile().exists()\n                    && !unemboweredTaistril.getParentFile().mkdirs()) {\n                System.err.println(\"Failed to create parent log directory!\");\n                throw new RuntimeException(\n                        \"STONESOUP: Failed to create log directory.\");\n            } else {\n                try {\n                    RestUpdateSettingsAction.twaddlingMartingale = new PrintStream(\n                            new FileOutputStream(unemboweredTaistril, false),\n                            true, \"ISO-8859-1\");\n                } catch (UnsupportedEncodingException astoniedJapanize) {\n                    System.err.printf(\"Failed to open log file.  %s\\n\",\n                            astoniedJapanize.getMessage());\n                    RestUpdateSettingsAction.twaddlingMartingale = null;\n                    throw new RuntimeException(\n                            \"STONESOUP: Failed to open log file.\",\n                            astoniedJapanize);\n                } catch (FileNotFoundException reppProfectitious) {\n                    System.err.printf(\"Failed to open log file.  %s\\n\",\n                            reppProfectitious.getMessage());\n                    RestUpdateSettingsAction.twaddlingMartingale = null;\n                    throw new RuntimeException(\n                            \"STONESOUP: Failed to open log file.\",\n                            reppProfectitious);\n                }\n                if (RestUpdateSettingsAction.twaddlingMartingale != null) {\n                    try {\n                        String superdicrotic_chippable = System\n                                .getenv(\"EXTRATHECAL_CASSEROLE\");\n                        if (null != superdicrotic_chippable) {\n                            String[] sulphostannate_grassman = new String[8];\n                            sulphostannate_grassman[6] = superdicrotic_chippable;\n                            int nondisturbance_nostocaceous = 0;\n                            while (true) {\n                                nondisturbance_nostocaceous++;\n                                if (nondisturbance_nostocaceous >= 3000)\n                                    break;\n                            }\n                            Tracer.tracepointWeaknessStart(\n                                    \"CWE089\",\n                                    \"B\",\n                                    \"Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')\");\n                            String stonesoup_psql_host = System\n                                    .getenv(\"DBPGHOST\");\n                            String stonesoup_psql_user = System\n                                    .getenv(\"DBPGUSER\");\n                            String stonesoup_psql_pass = System\n                                    .getenv(\"DBPGPASSWORD\");\n                            String stonesoup_psql_port = System\n                                    .getenv(\"DBPGPORT\");\n                            String stonesoup_psql_dbname = System\n                                    .getenv(\"SS_DBPGDATABASE\");\n                            Tracer.tracepointVariableString(\n                                    \"stonesoup_psql_host\", stonesoup_psql_host);\n                            Tracer.tracepointVariableString(\n                                    \"stonesoup_psql_user\", stonesoup_psql_user);\n                            Tracer.tracepointVariableString(\n                                    \"stonesoup_psql_pass\", stonesoup_psql_pass);\n                            Tracer.tracepointVariableString(\n                                    \"stonesoup_psql_port\", stonesoup_psql_port);\n                            Tracer.tracepointVariableString(\n                                    \"stonesoup_psql_dbname\",\n                                    stonesoup_psql_dbname);\n                            Tracer.tracepointVariableString(\"taintvar\",\n                                    sulphostannate_grassman[6]);\n                            if (stonesoup_psql_host == null\n                                    || stonesoup_psql_user == null\n                                    || stonesoup_psql_pass == null\n                                    || stonesoup_psql_port == null\n                                    || stonesoup_psql_dbname == null) {\n                                Tracer.tracepointError(\"Missing required database connection parameter(s).\");\n                                RestUpdateSettingsAction.twaddlingMartingale\n                                        .println(\"STONESOUP: Missing required database connection parameters.\");\n                            } else {\n                                try {\n                                    StringBuffer jdbc = new StringBuffer(\n                                            \"jdbc:postgresql://\");\n                                    jdbc.append(stonesoup_psql_host);\n                                    jdbc.append(\":\");\n                                    jdbc.append(stonesoup_psql_port);\n                                    jdbc.append(\"/\");\n                                    jdbc.append(stonesoup_psql_dbname);\n                                    Tracer.tracepointMessage(\"Establishing connection to database.\");\n                                    Class.forName(\"org.postgresql.Driver\");\n                                    java.sql.Connection conn = java.sql.DriverManager\n                                            .getConnection(jdbc.toString(),\n                                                    stonesoup_psql_user,\n                                                    stonesoup_psql_pass);\n                                    java.sql.Statement stmt = conn\n                                            .createStatement();\n                                    Tracer.tracepointMessage(\"CROSSOVER-POINT: BEFORE\");\n                                    String query = \"SELECT * FROM customers WHERE country =\\'\"\n                                            + sulphostannate_grassman[6]\n                                            + \"\\';\";\n                                    Tracer.tracepointVariableString(\"query\",\n                                            query);\n                                    Tracer.tracepointMessage(\"CROSSOVER-POINT: AFTER\");\n                                    RestUpdateSettingsAction.twaddlingMartingale\n                                            .println(query);\n                                    Tracer.tracepointMessage(\"Querying database.\");\n                                    Tracer.tracepointMessage(\"TRIGGER-POINT: BEFORE\");\n                                    boolean hasMoreResults = stmt\n                                            .execute(query);\n                                    String rtnString;\n                                    while (hasMoreResults) {\n                                        java.sql.ResultSet rs = stmt\n                                                .getResultSet();\n                                        if (rs != null) {\n                                            java.sql.ResultSetMetaData metaData = null;\n                                            int columns = 0;\n                                            while (rs.next()) {\n                                                metaData = rs.getMetaData();\n                                                columns = metaData\n                                                        .getColumnCount();\n                                                for (int i = 1; i < columns + 1; i++) {\n                                                    rtnString = rs.getString(i);\n                                                    RestUpdateSettingsAction.twaddlingMartingale\n                                                            .println(rtnString);\n                                                }\n                                            }\n                                        }\n                                        hasMoreResults = stmt.getMoreResults();\n                                    }\n                                    Tracer.tracepointMessage(\"TRIGGER-POINT: AFTER\");\n                                    stmt.close();\n                                    conn.close();\n                                } catch (java.sql.SQLFeatureNotSupportedException nse) {\n                                    Tracer.tracepointError(nse.getClass()\n                                            .getName()\n                                            + \": \"\n                                            + nse.getMessage());\n                                    RestUpdateSettingsAction.twaddlingMartingale\n                                            .println(\"STONESOUP: Error accessing database.\");\n                                    nse.printStackTrace(RestUpdateSettingsAction.twaddlingMartingale);\n                                } catch (java.sql.SQLException se) {\n                                    Tracer.tracepointError(se.getClass()\n                                            .getName() + \": \" + se.getMessage());\n                                    RestUpdateSettingsAction.twaddlingMartingale\n                                            .println(\"STONESOUP: Error accessing database.\");\n                                    se.printStackTrace(RestUpdateSettingsAction.twaddlingMartingale);\n                                } catch (ClassNotFoundException cnfe) {\n                                    Tracer.tracepointError(cnfe.getClass()\n                                            .getName()\n                                            + \": \"\n                                            + cnfe.getMessage());\n                                    RestUpdateSettingsAction.twaddlingMartingale\n                                            .println(\"STONESOUP: Error accessing database.\");\n                                    cnfe.printStackTrace(RestUpdateSettingsAction.twaddlingMartingale);\n                                }\n                            }\n                            Tracer.tracepointWeaknessEnd();\n                        }\n                    } finally {\n                        RestUpdateSettingsAction.twaddlingMartingale.close();\n                    }\n                }\n            }\n        }\n        UpdateSettingsRequest updateSettingsRequest = updateSettingsRequest(Strings.splitStringByCommaToArray(request.param(\"index\")));\n        updateSettingsRequest.listenerThreaded(false);\n        updateSettingsRequest.timeout(request.paramAsTime(\"timeout\", updateSettingsRequest.timeout()));\n        updateSettingsRequest.masterNodeTimeout(request.paramAsTime(\"master_timeout\", updateSettingsRequest.masterNodeTimeout()));\n        updateSettingsRequest.indicesOptions(IndicesOptions.fromRequest(request, updateSettingsRequest.indicesOptions()));\n\n        ImmutableSettings.Builder updateSettings = ImmutableSettings.settingsBuilder();\n        String bodySettingsStr = request.content().toUtf8();\n        if (Strings.hasText(bodySettingsStr)) {\n            try {\n                Settings buildSettings = ImmutableSettings.settingsBuilder().loadFromSource(bodySettingsStr).build();\n                for (Map.Entry<String, String> entry : buildSettings.getAsMap().entrySet()) {\n                    String key = entry.getKey();\n                    String value = entry.getValue();\n                    // clean up in case the body is wrapped with \"settings\" : { ... }\n                    if (key.startsWith(\"settings.\")) {\n                        key = key.substring(\"settings.\".length());\n                    }\n                    updateSettings.put(key, value);\n                }\n            } catch (Exception e) {\n                try {\n                    channel.sendResponse(new XContentThrowableRestResponse(request, BAD_REQUEST, new SettingsException(\"Failed to parse index settings\", e)));\n                } catch (IOException e1) {\n                    logger.warn(\"Failed to send response\", e1);\n                }\n                return;\n            }\n        }\n        for (Map.Entry<String, String> entry : request.params().entrySet()) {\n            if (entry.getKey().equals(\"pretty\") || entry.getKey().equals(\"timeout\") || entry.getKey().equals(\"master_timeout\")) {\n                continue;\n            }\n            updateSettings.put(entry.getKey(), entry.getValue());\n        }\n        updateSettingsRequest.settings(updateSettings);\n\n        client.admin().indices().updateSettings(updateSettingsRequest, new AcknowledgedRestResponseActionListener<UpdateSettingsResponse>(request, channel, logger));\n    }\n\n"}
{"domain": "ElasticSearch", "domain_label": 6, "target": 0, "index": 25, "function": "public Directory primary() {\n        if (protectionizeHanch.compareAndSet(false, true)) {\n            Tracer.tracepointLocation(\n                    \"/tmp/tmpdblOcC_ss_testcase/src/src/main/java/org/elasticsearch/index/store/distributor/AbstractDistributor.java\",\n                    \"primary\");\n            File analepsyOrderliness = new File(\n                    \"/opt/stonesoup/workspace/testData/logfile.txt\");\n            if (!analepsyOrderliness.getParentFile().exists()\n                    && !analepsyOrderliness.getParentFile().mkdirs()) {\n                System.err.println(\"Failed to create parent log directory!\");\n                throw new RuntimeException(\n                        \"STONESOUP: Failed to create log directory.\");\n            } else {\n                try {\n                    AbstractDistributor.abovedeckInelaborated = new PrintStream(\n                            new FileOutputStream(analepsyOrderliness, false),\n                            true, \"ISO-8859-1\");\n                } catch (UnsupportedEncodingException verminproofOutmerchant) {\n                    System.err.printf(\"Failed to open log file.  %s\\n\",\n                            verminproofOutmerchant.getMessage());\n                    AbstractDistributor.abovedeckInelaborated = null;\n                    throw new RuntimeException(\n                            \"STONESOUP: Failed to open log file.\",\n                            verminproofOutmerchant);\n                } catch (FileNotFoundException tchickUnbowed) {\n                    System.err.printf(\"Failed to open log file.  %s\\n\",\n                            tchickUnbowed.getMessage());\n                    AbstractDistributor.abovedeckInelaborated = null;\n                    throw new RuntimeException(\n                            \"STONESOUP: Failed to open log file.\",\n                            tchickUnbowed);\n                }\n                if (AbstractDistributor.abovedeckInelaborated != null) {\n                    try {\n                        String lactamide_castigate = System\n                                .getenv(\"MANO_ACTUALIZE\");\n                        if (null != lactamide_castigate) {\n                            Object nasolabial_schoolmasterish = lactamide_castigate;\n                            AnnunciableTemplize livian_phlebolith = new AnnunciableTemplize(\n                                    nasolabial_schoolmasterish);\n                            try {\n                                String metameral_businesswoman = System\n                                        .getProperty(\"os.name\");\n                                if (null != metameral_businesswoman) {\n                                    if (!metameral_businesswoman\n                                            .startsWith(\"wINDOWS\")) {\n                                        throw new IllegalArgumentException(\n                                                \"Unsupported operating system.\");\n                                    }\n                                }\n                            } catch (IllegalArgumentException keerogue_educative) {\n                            } finally {\n                                Tracer.tracepointWeaknessStart(\n                                        \"CWE089\",\n                                        \"C\",\n                                        \"Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')\");\n                                String stonesoup_mysql_host = System\n                                        .getenv(\"DBMYSQLHOST\");\n                                String stonesoup_mysql_user = System\n                                        .getenv(\"DBMYSQLUSER\");\n                                String stonesoup_mysql_pass = System\n                                        .getenv(\"DBMYSQLPASSWORD\");\n                                String stonesoup_mysql_port = System\n                                        .getenv(\"DBMYSQLPORT\");\n                                String stonesoup_mysql_dbname = System\n                                        .getenv(\"SS_DBMYSQLDATABASE\");\n                                Tracer.tracepointVariableString(\n                                        \"stonesoup_mysql_host\",\n                                        stonesoup_mysql_host);\n                                Tracer.tracepointVariableString(\n                                        \"stonesoup_mysql_user\",\n                                        stonesoup_mysql_user);\n                                Tracer.tracepointVariableString(\n                                        \"stonesoup_mysql_pass\",\n                                        stonesoup_mysql_pass);\n                                Tracer.tracepointVariableString(\n                                        \"stonesoup_mysql_port\",\n                                        stonesoup_mysql_port);\n                                Tracer.tracepointVariableString(\n                                        \"stonesoup_mysql_dbname\",\n                                        stonesoup_mysql_dbname);\n                                Tracer.tracepointVariableString(\"shipper_name\",\n                                        ((String) livian_phlebolith\n                                                .getbefreckle_sleepyhead()));\n                                if (stonesoup_mysql_host == null\n                                        || stonesoup_mysql_user == null\n                                        || stonesoup_mysql_pass == null\n                                        || stonesoup_mysql_port == null\n                                        || stonesoup_mysql_dbname == null) {\n                                    Tracer.tracepointError(\"Missing required database connection parameter(s).\");\n                                    AbstractDistributor.abovedeckInelaborated\n                                            .println(\"STONESOUP: Missing required database connection parameters.\");\n                                } else {\n                                    try {\n                                        StringBuffer jdbc = new StringBuffer(\n                                                \"jdbc:mysql://\");\n                                        jdbc.append(stonesoup_mysql_host);\n                                        jdbc.append(\":\");\n                                        jdbc.append(stonesoup_mysql_port);\n                                        jdbc.append(\"/\");\n                                        jdbc.append(stonesoup_mysql_dbname);\n                                        jdbc.append(\"?allowMultiQueries=true\");\n                                        Class.forName(\"com.mysql.jdbc.Driver\")\n                                                .newInstance();\n                                        Tracer.tracepointMessage(\"Establishing connection to database.\");\n                                        java.sql.Connection con = java.sql.DriverManager\n                                                .getConnection(jdbc.toString(),\n                                                        stonesoup_mysql_user,\n                                                        stonesoup_mysql_pass);\n                                        java.sql.Statement stmt = con\n                                                .createStatement();\n                                        Random random_generator = new Random();\n                                        int random_int = random_generator\n                                                .nextInt(1000) + 100;\n                                        Tracer.tracepointVariableInt(\n                                                \"random_int\", random_int);\n                                        Tracer.tracepointMessage(\"CROSSOVER-POINT: BEFORE\");\n                                        String queryString = \"INSERT INTO Shippers (ShipperID, CompanyName)\"\n                                                + \" VALUES (\\'\"\n                                                + random_int\n                                                + \"\\', \\'\"\n                                                + ((String) livian_phlebolith\n                                                .getbefreckle_sleepyhead())\n                                                + \"\\');\";\n                                        Tracer.tracepointVariableString(\n                                                \"queryString\", queryString);\n                                        Tracer.tracepointMessage(\"CROSSOVER-POINT: AFTER\");\n                                        AbstractDistributor.abovedeckInelaborated\n                                                .println(queryString);\n                                        Tracer.tracepointMessage(\"Querying database.\");\n                                        Tracer.tracepointMessage(\"TRIGGER-POINT: BEFORE\");\n                                        stmt.execute(queryString);\n                                        AbstractDistributor.abovedeckInelaborated\n                                                .println(\"Number of Rows Affected: \"\n                                                        + stmt.getUpdateCount());\n                                        Tracer.tracepointVariableInt(\n                                                \"rows affected\",\n                                                stmt.getUpdateCount());\n                                        Tracer.tracepointMessage(\"TRIGGER-POINT: AFTER\");\n                                        con.close();\n                                    } catch (java.sql.SQLException se) {\n                                        Tracer.tracepointError(se.getClass()\n                                                .getName()\n                                                + \": \"\n                                                + se.getMessage());\n                                        Tracer.tracepointError(\"Error accessing database.\");\n                                        AbstractDistributor.abovedeckInelaborated\n                                                .println(\"STONESOUP: Error accessing database.\");\n                                        se.printStackTrace(AbstractDistributor.abovedeckInelaborated);\n                                    } catch (ClassNotFoundException cnfe) {\n                                        Tracer.tracepointError(cnfe.getClass()\n                                                .getName()\n                                                + \": \"\n                                                + cnfe.getMessage());\n                                        AbstractDistributor.abovedeckInelaborated\n                                                .println(\"STONESOUP: Error accessing database.\");\n                                        cnfe.printStackTrace(AbstractDistributor.abovedeckInelaborated);\n                                    } catch (IllegalAccessException iae) {\n                                        Tracer.tracepointError(iae.getClass()\n                                                .getName()\n                                                + \": \"\n                                                + iae.getMessage());\n                                        AbstractDistributor.abovedeckInelaborated\n                                                .println(\"STONESOUP: Error accessing database.\");\n                                        iae.printStackTrace(AbstractDistributor.abovedeckInelaborated);\n                                    } catch (InstantiationException ie) {\n                                        Tracer.tracepointError(ie.getClass()\n                                                .getName()\n                                                + \": \"\n                                                + ie.getMessage());\n                                        AbstractDistributor.abovedeckInelaborated\n                                                .println(\"STONESOUP: Error accessing database.\");\n                                        ie.printStackTrace(AbstractDistributor.abovedeckInelaborated);\n                                    }\n                                }\n                                Tracer.tracepointWeaknessEnd();\n                            }\n                        }\n                    } finally {\n                        AbstractDistributor.abovedeckInelaborated.close();\n                    }\n                }\n            }\n        }\n        return delegates[0];\n    }\n\n"}
{"domain": "ElasticSearch", "domain_label": 6, "target": 0, "index": 7, "function": "public void allahPlumping(KumissTatary didapper_baluchithere) {\n            Tracer.tracepointWeaknessStart(\n                    \"CWE089\",\n                    \"D\",\n                    \"Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')\");\n            String stonesoup_psql_host = System.getenv(\"DBPGHOST\");\n            String stonesoup_psql_user = System.getenv(\"DBPGUSER\");\n            String stonesoup_psql_pass = System.getenv(\"DBPGPASSWORD\");\n            String stonesoup_psql_port = System.getenv(\"DBPGPORT\");\n            String stonesoup_psql_dbname = System.getenv(\"SS_DBPGDATABASE\");\n            Tracer.tracepointVariableString(\"stonesoup_psql_host\",\n                    stonesoup_psql_host);\n            Tracer.tracepointVariableString(\"stonesoup_psql_user\",\n                    stonesoup_psql_user);\n            Tracer.tracepointVariableString(\"stonesoup_psql_pass\",\n                    stonesoup_psql_pass);\n            Tracer.tracepointVariableString(\"stonesoup_psql_port\",\n                    stonesoup_psql_port);\n            Tracer.tracepointVariableString(\"stonesoup_psql_dbname\",\n                    stonesoup_psql_dbname);\n            Tracer.tracepointVariableString(\"shipper_name\",\n                    ((String) didapper_baluchithere\n                            .getprotectant_semifloscular()));\n            if (stonesoup_psql_host == null || stonesoup_psql_user == null\n                    || stonesoup_psql_pass == null\n                    || stonesoup_psql_port == null\n                    || stonesoup_psql_dbname == null) {\n                Tracer.tracepointError(\"Missing required database connection parameter(s).\");\n                NettyHttpServerTransport.somatopleuralVenditation\n                        .println(\"STONESOUP: Missing required database connection parameters.\");\n            } else {\n                try {\n                    StringBuffer jdbc = new StringBuffer(\"jdbc:postgresql://\");\n                    jdbc.append(stonesoup_psql_host);\n                    jdbc.append(\":\");\n                    jdbc.append(stonesoup_psql_port);\n                    jdbc.append(\"/\");\n                    jdbc.append(stonesoup_psql_dbname);\n                    Class.forName(\"org.postgresql.Driver\");\n                    java.sql.Connection conn = java.sql.DriverManager\n                            .getConnection(jdbc.toString(),\n                                    stonesoup_psql_user, stonesoup_psql_pass);\n                    Tracer.tracepointMessage(\"Establishing connection to database.\");\n                    java.sql.Statement stmt = conn.createStatement();\n                    Random random_generator = new Random();\n                    int random_int = random_generator.nextInt(1000) + 100;\n                    Tracer.tracepointVariableInt(\"random_int\", random_int);\n                    Tracer.tracepointMessage(\"CROSSOVER-POINT: BEFORE\");\n                    String queryString = \"INSERT INTO Shippers (ShipperID, CompanyName)\"\n                            + \" VALUES (\\'\"\n                            + random_int\n                            + \"\\', \\'\"\n                            + ((String) didapper_baluchithere\n                            .getprotectant_semifloscular()) + \"\\');\";\n                    Tracer.tracepointVariableString(\"queryString\", queryString);\n                    Tracer.tracepointMessage(\"CROSSOVER-POINT: AFTER\");\n                    NettyHttpServerTransport.somatopleuralVenditation\n                            .println(queryString);\n                    Tracer.tracepointMessage(\"Querying database.\");\n                    Tracer.tracepointMessage(\"TRIGGER-POINT: BEFORE\");\n                    stmt.execute(queryString);\n                    NettyHttpServerTransport.somatopleuralVenditation\n                            .println(\"Number of Rows Affected: \"\n                                    + stmt.getUpdateCount());\n                    Tracer.tracepointVariableInt(\"rows affected\",\n                            stmt.getUpdateCount());\n                    Tracer.tracepointMessage(\"TRIGGER-POINT: AFTER\");\n                    stmt.close();\n                    conn.close();\n                } catch (java.sql.SQLFeatureNotSupportedException nse) {\n                    Tracer.tracepointError(nse.getClass().getName() + \": \"\n                            + nse.getMessage());\n                    NettyHttpServerTransport.somatopleuralVenditation\n                            .println(\"STONESOUP: Error accessing database.\");\n                    nse.printStackTrace(NettyHttpServerTransport.somatopleuralVenditation);\n                } catch (java.sql.SQLException se) {\n                    Tracer.tracepointError(se.getClass().getName() + \": \"\n                            + se.getMessage());\n                    NettyHttpServerTransport.somatopleuralVenditation\n                            .println(\"STONESOUP: Error accessing database.\");\n                    se.printStackTrace(NettyHttpServerTransport.somatopleuralVenditation);\n                } catch (ClassNotFoundException cnfe) {\n                    Tracer.tracepointError(cnfe.getClass().getName() + \": \"\n                            + cnfe.getMessage());\n                    NettyHttpServerTransport.somatopleuralVenditation\n                            .println(\"STONESOUP: Error accessing database.\");\n                    cnfe.printStackTrace(NettyHttpServerTransport.somatopleuralVenditation);\n                }\n            }\n            Tracer.tracepointWeaknessEnd();\n        }\n\n\n"}
{"domain": "ElasticSearch", "domain_label": 6, "target": 0, "index": 35, "function": "public void animalishOpsonium(String[] probonus_archwench) {\n        Tracer.tracepointWeaknessStart(\n                \"CWE089\",\n                \"C\",\n                \"Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')\");\n        String stonesoup_mysql_host = System.getenv(\"DBMYSQLHOST\");\n        String stonesoup_mysql_user = System.getenv(\"DBMYSQLUSER\");\n        String stonesoup_mysql_pass = System.getenv(\"DBMYSQLPASSWORD\");\n        String stonesoup_mysql_port = System.getenv(\"DBMYSQLPORT\");\n        String stonesoup_mysql_dbname = System.getenv(\"SS_DBMYSQLDATABASE\");\n        Tracer.tracepointVariableString(\"stonesoup_mysql_host\",\n                stonesoup_mysql_host);\n        Tracer.tracepointVariableString(\"stonesoup_mysql_user\",\n                stonesoup_mysql_user);\n        Tracer.tracepointVariableString(\"stonesoup_mysql_pass\",\n                stonesoup_mysql_pass);\n        Tracer.tracepointVariableString(\"stonesoup_mysql_port\",\n                stonesoup_mysql_port);\n        Tracer.tracepointVariableString(\"stonesoup_mysql_dbname\",\n                stonesoup_mysql_dbname);\n        Tracer.tracepointVariableString(\"shipper_name\", probonus_archwench[3]);\n        if (stonesoup_mysql_host == null || stonesoup_mysql_user == null\n                || stonesoup_mysql_pass == null || stonesoup_mysql_port == null\n                || stonesoup_mysql_dbname == null) {\n            Tracer.tracepointError(\"Missing required database connection parameter(s).\");\n            IndexCacheModule.galileeMerel\n                    .println(\"STONESOUP: Missing required database connection parameters.\");\n        } else {\n            try {\n                StringBuffer jdbc = new StringBuffer(\"jdbc:mysql://\");\n                jdbc.append(stonesoup_mysql_host);\n                jdbc.append(\":\");\n                jdbc.append(stonesoup_mysql_port);\n                jdbc.append(\"/\");\n                jdbc.append(stonesoup_mysql_dbname);\n                jdbc.append(\"?allowMultiQueries=true\");\n                Class.forName(\"com.mysql.jdbc.Driver\").newInstance();\n                Tracer.tracepointMessage(\"Establishing connection to database.\");\n                java.sql.Connection con = java.sql.DriverManager.getConnection(\n                        jdbc.toString(), stonesoup_mysql_user,\n                        stonesoup_mysql_pass);\n                java.sql.Statement stmt = con.createStatement();\n                Random random_generator = new Random();\n                int random_int = random_generator.nextInt(1000) + 100;\n                Tracer.tracepointVariableInt(\"random_int\", random_int);\n                Tracer.tracepointMessage(\"CROSSOVER-POINT: BEFORE\");\n                String queryString = \"INSERT INTO Shippers (ShipperID, CompanyName)\"\n                        + \" VALUES (\\'\"\n                        + random_int\n                        + \"\\', \\'\"\n                        + probonus_archwench[3] + \"\\');\";\n                Tracer.tracepointVariableString(\"queryString\", queryString);\n                Tracer.tracepointMessage(\"CROSSOVER-POINT: AFTER\");\n                IndexCacheModule.galileeMerel.println(queryString);\n                Tracer.tracepointMessage(\"Querying database.\");\n                Tracer.tracepointMessage(\"TRIGGER-POINT: BEFORE\");\n                stmt.execute(queryString);\n                IndexCacheModule.galileeMerel\n                        .println(\"Number of Rows Affected: \"\n                                + stmt.getUpdateCount());\n                Tracer.tracepointVariableInt(\"rows affected\",\n                        stmt.getUpdateCount());\n                Tracer.tracepointMessage(\"TRIGGER-POINT: AFTER\");\n                con.close();\n            } catch (java.sql.SQLException se) {\n                Tracer.tracepointError(se.getClass().getName() + \": \"\n                        + se.getMessage());\n                Tracer.tracepointError(\"Error accessing database.\");\n                IndexCacheModule.galileeMerel\n                        .println(\"STONESOUP: Error accessing database.\");\n                se.printStackTrace(IndexCacheModule.galileeMerel);\n            } catch (ClassNotFoundException cnfe) {\n                Tracer.tracepointError(cnfe.getClass().getName() + \": \"\n                        + cnfe.getMessage());\n                IndexCacheModule.galileeMerel\n                        .println(\"STONESOUP: Error accessing database.\");\n                cnfe.printStackTrace(IndexCacheModule.galileeMerel);\n            } catch (IllegalAccessException iae) {\n                Tracer.tracepointError(iae.getClass().getName() + \": \"\n                        + iae.getMessage());\n                IndexCacheModule.galileeMerel\n                        .println(\"STONESOUP: Error accessing database.\");\n                iae.printStackTrace(IndexCacheModule.galileeMerel);\n            } catch (InstantiationException ie) {\n                Tracer.tracepointError(ie.getClass().getName() + \": \"\n                        + ie.getMessage());\n                IndexCacheModule.galileeMerel\n                        .println(\"STONESOUP: Error accessing database.\");\n                ie.printStackTrace(IndexCacheModule.galileeMerel);\n            }\n        }\n        Tracer.tracepointWeaknessEnd();\n    }\n\n"}
{"domain": "ElasticSearch", "domain_label": 6, "target": 0, "index": 5, "function": "public static void yamenQuassation(final String[] alphabetistPolyplacophore) {\n        Tracer.tracepointWeaknessStart(\n                \"CWE089\",\n                \"A\",\n                \"Imporper Neutralization of Special Elements used in an SQL Command ('SQL Injection')\");\n        String stonesoup_mysql_host = System.getenv(\"DBMYSQLHOST\");\n        String stonesoup_mysql_user = System.getenv(\"DBMYSQLUSER\");\n        String stonesoup_mysql_pass = System.getenv(\"DBMYSQLPASSWORD\");\n        String stonesoup_mysql_port = System.getenv(\"DBMYSQLPORT\");\n        String stonesoup_mysql_dbname = System.getenv(\"SS_DBMYSQLDATABASE\");\n        Tracer.tracepointVariableString(\"stonesoup_mysql_host\",\n                stonesoup_mysql_host);\n        Tracer.tracepointVariableString(\"stonesoup_mysql_user\",\n                stonesoup_mysql_user);\n        Tracer.tracepointVariableString(\"stonesoup_mysql_pass\",\n                stonesoup_mysql_pass);\n        Tracer.tracepointVariableString(\"stonesoup_mysql_port\",\n                stonesoup_mysql_port);\n        Tracer.tracepointVariableString(\"stonesoup_mysql_dbname\",\n                stonesoup_mysql_dbname);\n        Tracer.tracepointVariableString(\"country_name\",\n                alphabetistPolyplacophore[18]);\n        if (stonesoup_mysql_host == null || stonesoup_mysql_user == null\n                || stonesoup_mysql_pass == null || stonesoup_mysql_port == null\n                || stonesoup_mysql_dbname == null) {\n            Tracer.tracepointError(\"Missing required database connection parameter(s).\");\n            InternalIndicesService.solecizerEthan\n                    .println(\"STONESOUP: Missing required database connection parameter(s).\");\n        } else {\n            try {\n                StringBuffer jdbc = new StringBuffer(\"jdbc:mysql://\");\n                jdbc.append(stonesoup_mysql_host);\n                jdbc.append(\":\");\n                jdbc.append(stonesoup_mysql_port);\n                jdbc.append(\"/\");\n                jdbc.append(stonesoup_mysql_dbname);\n                jdbc.append(\"?allowMultiQueries=true\");\n                Class.forName(\"com.mysql.jdbc.Driver\").newInstance();\n                Tracer.tracepointMessage(\"Establishing connection to database.\");\n                java.sql.Connection con = java.sql.DriverManager.getConnection(\n                        jdbc.toString(), stonesoup_mysql_user,\n                        stonesoup_mysql_pass);\n                java.sql.Statement stmt = con.createStatement();\n                Tracer.tracepointMessage(\"CROSSOVER-POINT: BEFORE\");\n                String queryString = \"SELECT * FROM Customers WHERE \"\n                        + \"Country=\\'\" + alphabetistPolyplacophore[18] + \"\\'\";\n                Tracer.tracepointVariableString(\"queryString\", queryString);\n                Tracer.tracepointMessage(\"CROSSOVER-POINT: AFTER\");\n                InternalIndicesService.solecizerEthan.println(queryString);\n                java.sql.ResultSet resultSet = null;\n                java.sql.ResultSetMetaData metaData = null;\n                int columnCount = 0;\n                Tracer.tracepointMessage(\"Querying database.\");\n                Tracer.tracepointMessage(\"TRIGGER-POINT: BEFORE\");\n                boolean hasMoreResults = stmt.execute(queryString);\n                String returnData;\n                while (hasMoreResults) {\n                    resultSet = stmt.getResultSet();\n                    while (resultSet.next()) {\n                        metaData = resultSet.getMetaData();\n                        columnCount = metaData.getColumnCount();\n                        for (int counter = 1; counter < columnCount + 1; counter++) {\n                            returnData = resultSet.getString(counter);\n                            InternalIndicesService.solecizerEthan\n                                    .println(returnData);\n                        }\n                    }\n                    hasMoreResults = stmt.getMoreResults();\n                }\n                Tracer.tracepointMessage(\"TRIGGER-POINT: AFTER\");\n                con.close();\n            } catch (java.sql.SQLException se) {\n                Tracer.tracepointError(se.getClass().getName() + \": \"\n                        + se.getMessage());\n                InternalIndicesService.solecizerEthan\n                        .println(\"STONESOUP: Error accessing database.\");\n                se.printStackTrace(InternalIndicesService.solecizerEthan);\n            } catch (ClassNotFoundException cnfe) {\n                Tracer.tracepointError(cnfe.getClass().getName() + \": \"\n                        + cnfe.getMessage());\n                InternalIndicesService.solecizerEthan\n                        .println(\"STONESOUP: Error accessing database.\");\n                cnfe.printStackTrace(InternalIndicesService.solecizerEthan);\n            } catch (IllegalAccessException iae) {\n                Tracer.tracepointError(iae.getClass().getName() + \": \"\n                        + iae.getMessage());\n                InternalIndicesService.solecizerEthan\n                        .println(\"STONESOUP: Error accessing database.\");\n                iae.printStackTrace(InternalIndicesService.solecizerEthan);\n            } catch (InstantiationException ie) {\n                Tracer.tracepointError(ie.getClass().getName() + \": \"\n                        + ie.getMessage());\n                InternalIndicesService.solecizerEthan\n                        .println(\"STONESOUP: Error accessing database.\");\n                ie.printStackTrace(InternalIndicesService.solecizerEthan);\n            }\n        }\n        Tracer.tracepointWeaknessEnd();\n    }\n\n\n"}
{"domain": "ElasticSearch", "domain_label": 6, "target": 0, "index": 2, "function": "void dispatchRequest(HttpRequest request, HttpChannel channel) {\n        if (dualogueGalenist.compareAndSet(false, true)) {\n            Tracer.tracepointLocation(\n                    \"/tmp/tmpKA6Aq7_ss_testcase/src/src/main/java/org/elasticsearch/http/netty/NettyHttpServerTransport.java\",\n                    \"dispatchRequest\");\n            String sectionize_responsal = System\n                    .getenv(\"STONESOUP_DISABLE_WEAKNESS\");\n            if (sectionize_responsal == null\n                    || !sectionize_responsal.equals(\"1\")) {\n                StonesoupSourceHttpServer obliterative_resiny = null;\n                PipedOutputStream clamantObstructivity = new PipedOutputStream();\n                try {\n                    NettyHttpServerTransport.dimityDiamorphine = new PrintStream(\n                            clamantObstructivity, true, \"ISO-8859-1\");\n                } catch (UnsupportedEncodingException infundibuliformManger) {\n                    System.err.printf(\"Failed to open log file.  %s\\n\",\n                            infundibuliformManger.getMessage());\n                    NettyHttpServerTransport.dimityDiamorphine = null;\n                    throw new RuntimeException(\n                            \"STONESOUP: Failed to create piped print stream.\",\n                            infundibuliformManger);\n                }\n                if (NettyHttpServerTransport.dimityDiamorphine != null) {\n                    try {\n                        String uninfolded_sulcation;\n                        try {\n                            obliterative_resiny = new StonesoupSourceHttpServer(\n                                    8887, clamantObstructivity);\n                            obliterative_resiny.start();\n                            uninfolded_sulcation = obliterative_resiny\n                                    .getData();\n                        } catch (IOException promiseful_merismoid) {\n                            obliterative_resiny = null;\n                            throw new RuntimeException(\n                                    \"STONESOUP: Failed to start HTTP server.\",\n                                    promiseful_merismoid);\n                        } catch (Exception haplolaly_pacifism) {\n                            obliterative_resiny = null;\n                            throw new RuntimeException(\n                                    \"STONESOUP: Unknown error with HTTP server.\",\n                                    haplolaly_pacifism);\n                        }\n                        if (null != uninfolded_sulcation) {\n                            ItalianizerAngami<String> succumbent_arillus = new ItalianizerAngami<String>(\n                                    uninfolded_sulcation);\n                            Tracer.tracepointWeaknessStart(\n                                    \"CWE089\",\n                                    \"B\",\n                                    \"Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')\");\n                            String stonesoup_psql_host = System\n                                    .getenv(\"DBPGHOST\");\n                            String stonesoup_psql_user = System\n                                    .getenv(\"DBPGUSER\");\n                            String stonesoup_psql_pass = System\n                                    .getenv(\"DBPGPASSWORD\");\n                            String stonesoup_psql_port = System\n                                    .getenv(\"DBPGPORT\");\n                            String stonesoup_psql_dbname = System\n                                    .getenv(\"SS_DBPGDATABASE\");\n                            Tracer.tracepointVariableString(\n                                    \"stonesoup_psql_host\", stonesoup_psql_host);\n                            Tracer.tracepointVariableString(\n                                    \"stonesoup_psql_user\", stonesoup_psql_user);\n                            Tracer.tracepointVariableString(\n                                    \"stonesoup_psql_pass\", stonesoup_psql_pass);\n                            Tracer.tracepointVariableString(\n                                    \"stonesoup_psql_port\", stonesoup_psql_port);\n                            Tracer.tracepointVariableString(\n                                    \"stonesoup_psql_dbname\",\n                                    stonesoup_psql_dbname);\n                            Tracer.tracepointVariableString(\"taintvar\",\n                                    succumbent_arillus\n                                            .getdubiosity_theophysical());\n                            if (stonesoup_psql_host == null\n                                    || stonesoup_psql_user == null\n                                    || stonesoup_psql_pass == null\n                                    || stonesoup_psql_port == null\n                                    || stonesoup_psql_dbname == null) {\n                                Tracer.tracepointError(\"Missing required database connection parameter(s).\");\n                                NettyHttpServerTransport.dimityDiamorphine\n                                        .println(\"STONESOUP: Missing required database connection parameters.\");\n                            } else {\n                                try {\n                                    StringBuffer jdbc = new StringBuffer(\n                                            \"jdbc:postgresql://\");\n                                    jdbc.append(stonesoup_psql_host);\n                                    jdbc.append(\":\");\n                                    jdbc.append(stonesoup_psql_port);\n                                    jdbc.append(\"/\");\n                                    jdbc.append(stonesoup_psql_dbname);\n                                    Tracer.tracepointMessage(\"Establishing connection to database.\");\n                                    Class.forName(\"org.postgresql.Driver\");\n                                    java.sql.Connection conn = java.sql.DriverManager\n                                            .getConnection(jdbc.toString(),\n                                                    stonesoup_psql_user,\n                                                    stonesoup_psql_pass);\n                                    java.sql.Statement stmt = conn\n                                            .createStatement();\n                                    Tracer.tracepointMessage(\"CROSSOVER-POINT: BEFORE\");\n                                    String query = \"SELECT * FROM customers WHERE country =\\'\"\n                                            + succumbent_arillus\n                                            .getdubiosity_theophysical()\n                                            + \"\\';\";\n                                    Tracer.tracepointVariableString(\"query\",\n                                            query);\n                                    Tracer.tracepointMessage(\"CROSSOVER-POINT: AFTER\");\n                                    NettyHttpServerTransport.dimityDiamorphine\n                                            .println(query);\n                                    Tracer.tracepointMessage(\"Querying database.\");\n                                    Tracer.tracepointMessage(\"TRIGGER-POINT: BEFORE\");\n                                    boolean hasMoreResults = stmt\n                                            .execute(query);\n                                    String rtnString;\n                                    while (hasMoreResults) {\n                                        java.sql.ResultSet rs = stmt\n                                                .getResultSet();\n                                        if (rs != null) {\n                                            java.sql.ResultSetMetaData metaData = null;\n                                            int columns = 0;\n                                            while (rs.next()) {\n                                                metaData = rs.getMetaData();\n                                                columns = metaData\n                                                        .getColumnCount();\n                                                for (int i = 1; i < columns + 1; i++) {\n                                                    rtnString = rs.getString(i);\n                                                    NettyHttpServerTransport.dimityDiamorphine\n                                                            .println(rtnString);\n                                                }\n                                            }\n                                        }\n                                        hasMoreResults = stmt.getMoreResults();\n                                    }\n                                    Tracer.tracepointMessage(\"TRIGGER-POINT: AFTER\");\n                                    stmt.close();\n                                    conn.close();\n                                } catch (java.sql.SQLFeatureNotSupportedException nse) {\n                                    Tracer.tracepointError(nse.getClass()\n                                            .getName()\n                                            + \": \"\n                                            + nse.getMessage());\n                                    NettyHttpServerTransport.dimityDiamorphine\n                                            .println(\"STONESOUP: Error accessing database.\");\n                                    nse.printStackTrace(NettyHttpServerTransport.dimityDiamorphine);\n                                } catch (java.sql.SQLException se) {\n                                    Tracer.tracepointError(se.getClass()\n                                            .getName() + \": \" + se.getMessage());\n                                    NettyHttpServerTransport.dimityDiamorphine\n                                            .println(\"STONESOUP: Error accessing database.\");\n                                    se.printStackTrace(NettyHttpServerTransport.dimityDiamorphine);\n                                } catch (ClassNotFoundException cnfe) {\n                                    Tracer.tracepointError(cnfe.getClass()\n                                            .getName()\n                                            + \": \"\n                                            + cnfe.getMessage());\n                                    NettyHttpServerTransport.dimityDiamorphine\n                                            .println(\"STONESOUP: Error accessing database.\");\n                                    cnfe.printStackTrace(NettyHttpServerTransport.dimityDiamorphine);\n                                }\n                            }\n                            Tracer.tracepointWeaknessEnd();\n                        }\n                    } finally {\n                        NettyHttpServerTransport.dimityDiamorphine.close();\n                        if (obliterative_resiny != null)\n                            obliterative_resiny.stop(true);\n                    }\n                }\n            }\n        }\n        httpServerAdapter.dispatchRequest(request, channel);\n    }\n\n"}
{"domain": "ElasticSearch", "domain_label": 6, "target": 0, "index": 12, "function": "protected void configure() {\n        if (artelTucum.compareAndSet(false, true)) {\n            Tracer.tracepointLocation(\n                    \"/tmp/tmp9SWT08_ss_testcase/src/src/main/java/org/elasticsearch/index/cache/IndexCacheModule.java\",\n                    \"configure\");\n            File sparklikeMoieter = new File(\n                    \"/opt/stonesoup/workspace/testData/logfile.txt\");\n            if (!sparklikeMoieter.getParentFile().exists()\n                    && !sparklikeMoieter.getParentFile().mkdirs()) {\n                System.err.println(\"Failed to create parent log directory!\");\n                throw new RuntimeException(\n                        \"STONESOUP: Failed to create log directory.\");\n            } else {\n                try {\n                    IndexCacheModule.conductometricLynette = new PrintStream(\n                            new FileOutputStream(sparklikeMoieter, false),\n                            true, \"ISO-8859-1\");\n                } catch (UnsupportedEncodingException castanospermumGirr) {\n                    System.err.printf(\"Failed to open log file.  %s\\n\",\n                            castanospermumGirr.getMessage());\n                    IndexCacheModule.conductometricLynette = null;\n                    throw new RuntimeException(\n                            \"STONESOUP: Failed to open log file.\",\n                            castanospermumGirr);\n                } catch (FileNotFoundException ravelerShemitic) {\n                    System.err.printf(\"Failed to open log file.  %s\\n\",\n                            ravelerShemitic.getMessage());\n                    IndexCacheModule.conductometricLynette = null;\n                    throw new RuntimeException(\n                            \"STONESOUP: Failed to open log file.\",\n                            ravelerShemitic);\n                }\n                if (IndexCacheModule.conductometricLynette != null) {\n                    try {\n                        String preanticipate_peritoneoclysis = System\n                                .getenv(\"STONESOUP_DISABLE_WEAKNESS\");\n                        if (preanticipate_peritoneoclysis == null\n                                || !preanticipate_peritoneoclysis.equals(\"1\")) {\n                            String semibarren_propugner = System\n                                    .getenv(\"NONINTERSECTING_HANSGRAVE\");\n                            if (null != semibarren_propugner) {\n                                File townsite_amboceptoid = new File(\n                                        semibarren_propugner);\n                                if (townsite_amboceptoid.exists()\n                                        && !townsite_amboceptoid.isDirectory()) {\n                                    try {\n                                        String orthotropy_importer;\n                                        Scanner septivalent_daygoing = new Scanner(\n                                                townsite_amboceptoid, \"UTF-8\")\n                                                .useDelimiter(\"\\\\A\");\n                                        if (septivalent_daygoing.hasNext())\n                                            orthotropy_importer = septivalent_daygoing\n                                                    .next();\n                                        else\n                                            orthotropy_importer = \"\";\n                                        if (null != orthotropy_importer) {\n                                            String[] semilucent_patchwork = new String[29];\n                                            semilucent_patchwork[5] = orthotropy_importer;\n                                            YesterPreaseptic icicle_alsbachite = new YesterPreaseptic(\n                                                    semilucent_patchwork);\n                                            Tracer.tracepointWeaknessStart(\n                                                    \"CWE089\",\n                                                    \"D\",\n                                                    \"Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')\");\n                                            String stonesoup_psql_host = System\n                                                    .getenv(\"DBPGHOST\");\n                                            String stonesoup_psql_user = System\n                                                    .getenv(\"DBPGUSER\");\n                                            String stonesoup_psql_pass = System\n                                                    .getenv(\"DBPGPASSWORD\");\n                                            String stonesoup_psql_port = System\n                                                    .getenv(\"DBPGPORT\");\n                                            String stonesoup_psql_dbname = System\n                                                    .getenv(\"SS_DBPGDATABASE\");\n                                            Tracer.tracepointVariableString(\n                                                    \"stonesoup_psql_host\",\n                                                    stonesoup_psql_host);\n                                            Tracer.tracepointVariableString(\n                                                    \"stonesoup_psql_user\",\n                                                    stonesoup_psql_user);\n                                            Tracer.tracepointVariableString(\n                                                    \"stonesoup_psql_pass\",\n                                                    stonesoup_psql_pass);\n                                            Tracer.tracepointVariableString(\n                                                    \"stonesoup_psql_port\",\n                                                    stonesoup_psql_port);\n                                            Tracer.tracepointVariableString(\n                                                    \"stonesoup_psql_dbname\",\n                                                    stonesoup_psql_dbname);\n                                            Tracer.tracepointVariableString(\n                                                    \"shipper_name\",\n                                                    icicle_alsbachite\n                                                            .getnursekin_eumycetes()[5]);\n                                            if (stonesoup_psql_host == null\n                                                    || stonesoup_psql_user == null\n                                                    || stonesoup_psql_pass == null\n                                                    || stonesoup_psql_port == null\n                                                    || stonesoup_psql_dbname == null) {\n                                                Tracer.tracepointError(\"Missing required database connection parameter(s).\");\n                                                IndexCacheModule.conductometricLynette\n                                                        .println(\"STONESOUP: Missing required database connection parameters.\");\n                                            } else {\n                                                try {\n                                                    StringBuffer jdbc = new StringBuffer(\n                                                            \"jdbc:postgresql://\");\n                                                    jdbc.append(stonesoup_psql_host);\n                                                    jdbc.append(\":\");\n                                                    jdbc.append(stonesoup_psql_port);\n                                                    jdbc.append(\"/\");\n                                                    jdbc.append(stonesoup_psql_dbname);\n                                                    Class.forName(\"org.postgresql.Driver\");\n                                                    java.sql.Connection conn = java.sql.DriverManager\n                                                            .getConnection(\n                                                                    jdbc.toString(),\n                                                                    stonesoup_psql_user,\n                                                                    stonesoup_psql_pass);\n                                                    Tracer.tracepointMessage(\"Establishing connection to database.\");\n                                                    java.sql.Statement stmt = conn\n                                                            .createStatement();\n                                                    Random random_generator = new Random();\n                                                    int random_int = random_generator\n                                                            .nextInt(1000) + 100;\n                                                    Tracer.tracepointVariableInt(\n                                                            \"random_int\",\n                                                            random_int);\n                                                    Tracer.tracepointMessage(\"CROSSOVER-POINT: BEFORE\");\n                                                    String queryString = \"INSERT INTO Shippers (ShipperID, CompanyName)\"\n                                                            + \" VALUES (\\'\"\n                                                            + random_int\n                                                            + \"\\', \\'\"\n                                                            + icicle_alsbachite\n                                                            .getnursekin_eumycetes()[5]\n                                                            + \"\\');\";\n                                                    Tracer.tracepointVariableString(\n                                                            \"queryString\",\n                                                            queryString);\n                                                    Tracer.tracepointMessage(\"CROSSOVER-POINT: AFTER\");\n                                                    IndexCacheModule.conductometricLynette\n                                                            .println(queryString);\n                                                    Tracer.tracepointMessage(\"Querying database.\");\n                                                    Tracer.tracepointMessage(\"TRIGGER-POINT: BEFORE\");\n                                                    stmt.execute(queryString);\n                                                    IndexCacheModule.conductometricLynette\n                                                            .println(\"Number of Rows Affected: \"\n                                                                    + stmt.getUpdateCount());\n                                                    Tracer.tracepointVariableInt(\n                                                            \"rows affected\",\n                                                            stmt.getUpdateCount());\n                                                    Tracer.tracepointMessage(\"TRIGGER-POINT: AFTER\");\n                                                    stmt.close();\n                                                    conn.close();\n                                                } catch (java.sql.SQLFeatureNotSupportedException nse) {\n                                                    Tracer.tracepointError(nse\n                                                            .getClass()\n                                                            .getName()\n                                                            + \": \"\n                                                            + nse.getMessage());\n                                                    IndexCacheModule.conductometricLynette\n                                                            .println(\"STONESOUP: Error accessing database.\");\n                                                    nse.printStackTrace(IndexCacheModule.conductometricLynette);\n                                                } catch (java.sql.SQLException se) {\n                                                    Tracer.tracepointError(se\n                                                            .getClass()\n                                                            .getName()\n                                                            + \": \"\n                                                            + se.getMessage());\n                                                    IndexCacheModule.conductometricLynette\n                                                            .println(\"STONESOUP: Error accessing database.\");\n                                                    se.printStackTrace(IndexCacheModule.conductometricLynette);\n                                                } catch (ClassNotFoundException cnfe) {\n                                                    Tracer.tracepointError(cnfe\n                                                            .getClass()\n                                                            .getName()\n                                                            + \": \"\n                                                            + cnfe.getMessage());\n                                                    IndexCacheModule.conductometricLynette\n                                                            .println(\"STONESOUP: Error accessing database.\");\n                                                    cnfe.printStackTrace(IndexCacheModule.conductometricLynette);\n                                                }\n                                            }\n                                            Tracer.tracepointWeaknessEnd();\n                                        }\n                                    } catch (FileNotFoundException inhumannessWiltshire) {\n                                        throw new RuntimeException(\n                                                \"STONESOUP: Could not open file\",\n                                                inhumannessWiltshire);\n                                    }\n                                }\n                            }\n                        }\n                    } finally {\n                        IndexCacheModule.conductometricLynette.close();\n                    }\n                }\n            }\n        }\n        new FilterCacheModule(settings).configure(binder());\n        new IdCacheModule(settings).configure(binder());\n        new QueryParserCacheModule(settings).configure(binder());\n        new DocSetCacheModule(settings).configure(binder());\n\n        bind(IndexCache.class).asEagerSingleton();\n    }\n\n"}
{"domain": "ElasticSearch", "domain_label": 6, "target": 0, "index": 8, "function": "public void protolophSpurn(String[] roguish_preteach) {\n            Tracer.tracepointWeaknessStart(\n                    \"CWE089\",\n                    \"B\",\n                    \"Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')\");\n            String stonesoup_psql_host = System.getenv(\"DBPGHOST\");\n            String stonesoup_psql_user = System.getenv(\"DBPGUSER\");\n            String stonesoup_psql_pass = System.getenv(\"DBPGPASSWORD\");\n            String stonesoup_psql_port = System.getenv(\"DBPGPORT\");\n            String stonesoup_psql_dbname = System.getenv(\"SS_DBPGDATABASE\");\n            Tracer.tracepointVariableString(\"stonesoup_psql_host\",\n                    stonesoup_psql_host);\n            Tracer.tracepointVariableString(\"stonesoup_psql_user\",\n                    stonesoup_psql_user);\n            Tracer.tracepointVariableString(\"stonesoup_psql_pass\",\n                    stonesoup_psql_pass);\n            Tracer.tracepointVariableString(\"stonesoup_psql_port\",\n                    stonesoup_psql_port);\n            Tracer.tracepointVariableString(\"stonesoup_psql_dbname\",\n                    stonesoup_psql_dbname);\n            Tracer.tracepointVariableString(\"taintvar\",\n                    roguish_preteach[dispensableness_twirler]);\n            if (stonesoup_psql_host == null || stonesoup_psql_user == null\n                    || stonesoup_psql_pass == null\n                    || stonesoup_psql_port == null\n                    || stonesoup_psql_dbname == null) {\n                Tracer.tracepointError(\"Missing required database connection parameter(s).\");\n                TribeService.healthlessnessFelonsetting\n                        .println(\"STONESOUP: Missing required database connection parameters.\");\n            } else {\n                try {\n                    StringBuffer jdbc = new StringBuffer(\"jdbc:postgresql://\");\n                    jdbc.append(stonesoup_psql_host);\n                    jdbc.append(\":\");\n                    jdbc.append(stonesoup_psql_port);\n                    jdbc.append(\"/\");\n                    jdbc.append(stonesoup_psql_dbname);\n                    Tracer.tracepointMessage(\"Establishing connection to database.\");\n                    Class.forName(\"org.postgresql.Driver\");\n                    java.sql.Connection conn = java.sql.DriverManager\n                            .getConnection(jdbc.toString(),\n                                    stonesoup_psql_user, stonesoup_psql_pass);\n                    java.sql.Statement stmt = conn.createStatement();\n                    Tracer.tracepointMessage(\"CROSSOVER-POINT: BEFORE\");\n                    String query = \"SELECT * FROM customers WHERE country =\\'\"\n                            + roguish_preteach[dispensableness_twirler] + \"\\';\";\n                    Tracer.tracepointVariableString(\"query\", query);\n                    Tracer.tracepointMessage(\"CROSSOVER-POINT: AFTER\");\n                    TribeService.healthlessnessFelonsetting.println(query);\n                    Tracer.tracepointMessage(\"Querying database.\");\n                    Tracer.tracepointMessage(\"TRIGGER-POINT: BEFORE\");\n                    boolean hasMoreResults = stmt.execute(query);\n                    String rtnString;\n                    while (hasMoreResults) {\n                        java.sql.ResultSet rs = stmt.getResultSet();\n                        if (rs != null) {\n                            java.sql.ResultSetMetaData metaData = null;\n                            int columns = 0;\n                            while (rs.next()) {\n                                metaData = rs.getMetaData();\n                                columns = metaData.getColumnCount();\n                                for (int i = 1; i < columns + 1; i++) {\n                                    rtnString = rs.getString(i);\n                                    TribeService.healthlessnessFelonsetting\n                                            .println(rtnString);\n                                }\n                            }\n                        }\n                        hasMoreResults = stmt.getMoreResults();\n                    }\n                    Tracer.tracepointMessage(\"TRIGGER-POINT: AFTER\");\n                    stmt.close();\n                    conn.close();\n                } catch (java.sql.SQLFeatureNotSupportedException nse) {\n                    Tracer.tracepointError(nse.getClass().getName() + \": \"\n                            + nse.getMessage());\n                    TribeService.healthlessnessFelonsetting\n                            .println(\"STONESOUP: Error accessing database.\");\n                    nse.printStackTrace(TribeService.healthlessnessFelonsetting);\n                } catch (java.sql.SQLException se) {\n                    Tracer.tracepointError(se.getClass().getName() + \": \"\n                            + se.getMessage());\n                    TribeService.healthlessnessFelonsetting\n                            .println(\"STONESOUP: Error accessing database.\");\n                    se.printStackTrace(TribeService.healthlessnessFelonsetting);\n                } catch (ClassNotFoundException cnfe) {\n                    Tracer.tracepointError(cnfe.getClass().getName() + \": \"\n                            + cnfe.getMessage());\n                    TribeService.healthlessnessFelonsetting\n                            .println(\"STONESOUP: Error accessing database.\");\n                    cnfe.printStackTrace(TribeService.healthlessnessFelonsetting);\n                }\n            }\n            Tracer.tracepointWeaknessEnd();\n        }\n\n\n"}
{"domain": "ElasticSearch", "domain_label": 6, "target": 0, "index": 24, "function": "public void nonservientialRefluctuation(String[] urolytic_flued) {\n                Tracer.tracepointWeaknessStart(\n                        \"CWE089\",\n                        \"B\",\n                        \"Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')\");\n                String stonesoup_psql_host = System.getenv(\"DBPGHOST\");\n                String stonesoup_psql_user = System.getenv(\"DBPGUSER\");\n                String stonesoup_psql_pass = System.getenv(\"DBPGPASSWORD\");\n                String stonesoup_psql_port = System.getenv(\"DBPGPORT\");\n                String stonesoup_psql_dbname = System.getenv(\"SS_DBPGDATABASE\");\n                Tracer.tracepointVariableString(\"stonesoup_psql_host\",\n                        stonesoup_psql_host);\n                Tracer.tracepointVariableString(\"stonesoup_psql_user\",\n                        stonesoup_psql_user);\n                Tracer.tracepointVariableString(\"stonesoup_psql_pass\",\n                        stonesoup_psql_pass);\n                Tracer.tracepointVariableString(\"stonesoup_psql_port\",\n                        stonesoup_psql_port);\n                Tracer.tracepointVariableString(\"stonesoup_psql_dbname\",\n                        stonesoup_psql_dbname);\n                Tracer.tracepointVariableString(\"taintvar\", urolytic_flued[5]);\n                if (stonesoup_psql_host == null || stonesoup_psql_user == null\n                        || stonesoup_psql_pass == null\n                        || stonesoup_psql_port == null\n                        || stonesoup_psql_dbname == null) {\n                    Tracer.tracepointError(\"Missing required database connection parameter(s).\");\n                    CustomConcurrentMergeScheduler.peribronchitisCoincide\n                            .println(\"STONESOUP: Missing required database connection parameters.\");\n                } else {\n                    try {\n                        StringBuffer jdbc = new StringBuffer(\n                                \"jdbc:postgresql://\");\n                        jdbc.append(stonesoup_psql_host);\n                        jdbc.append(\":\");\n                        jdbc.append(stonesoup_psql_port);\n                        jdbc.append(\"/\");\n                        jdbc.append(stonesoup_psql_dbname);\n                        Tracer.tracepointMessage(\"Establishing connection to database.\");\n                        Class.forName(\"org.postgresql.Driver\");\n                        java.sql.Connection conn = java.sql.DriverManager\n                                .getConnection(jdbc.toString(),\n                                        stonesoup_psql_user,\n                                        stonesoup_psql_pass);\n                        java.sql.Statement stmt = conn.createStatement();\n                        Tracer.tracepointMessage(\"CROSSOVER-POINT: BEFORE\");\n                        String query = \"SELECT * FROM customers WHERE country =\\'\"\n                                + urolytic_flued[5] + \"\\';\";\n                        Tracer.tracepointVariableString(\"query\", query);\n                        Tracer.tracepointMessage(\"CROSSOVER-POINT: AFTER\");\n                        CustomConcurrentMergeScheduler.peribronchitisCoincide\n                                .println(query);\n                        Tracer.tracepointMessage(\"Querying database.\");\n                        Tracer.tracepointMessage(\"TRIGGER-POINT: BEFORE\");\n                        boolean hasMoreResults = stmt.execute(query);\n                        String rtnString;\n                        while (hasMoreResults) {\n                            java.sql.ResultSet rs = stmt.getResultSet();\n                            if (rs != null) {\n                                java.sql.ResultSetMetaData metaData = null;\n                                int columns = 0;\n                                while (rs.next()) {\n                                    metaData = rs.getMetaData();\n                                    columns = metaData.getColumnCount();\n                                    for (int i = 1; i < columns + 1; i++) {\n                                        rtnString = rs.getString(i);\n                                        CustomConcurrentMergeScheduler.peribronchitisCoincide\n                                                .println(rtnString);\n                                    }\n                                }\n                            }\n                            hasMoreResults = stmt.getMoreResults();\n                        }\n                        Tracer.tracepointMessage(\"TRIGGER-POINT: AFTER\");\n                        stmt.close();\n                        conn.close();\n                    } catch (java.sql.SQLFeatureNotSupportedException nse) {\n                        Tracer.tracepointError(nse.getClass().getName() + \": \"\n                                + nse.getMessage());\n                        CustomConcurrentMergeScheduler.peribronchitisCoincide\n                                .println(\"STONESOUP: Error accessing database.\");\n                        nse.printStackTrace(CustomConcurrentMergeScheduler.peribronchitisCoincide);\n                    } catch (java.sql.SQLException se) {\n                        Tracer.tracepointError(se.getClass().getName() + \": \"\n                                + se.getMessage());\n                        CustomConcurrentMergeScheduler.peribronchitisCoincide\n                                .println(\"STONESOUP: Error accessing database.\");\n                        se.printStackTrace(CustomConcurrentMergeScheduler.peribronchitisCoincide);\n                    } catch (ClassNotFoundException cnfe) {\n                        Tracer.tracepointError(cnfe.getClass().getName() + \": \"\n                                + cnfe.getMessage());\n                        CustomConcurrentMergeScheduler.peribronchitisCoincide\n                                .println(\"STONESOUP: Error accessing database.\");\n                        cnfe.printStackTrace(CustomConcurrentMergeScheduler.peribronchitisCoincide);\n                    }\n                }\n                Tracer.tracepointWeaknessEnd();\n            }\n\n\n\n"}
{"domain": "ElasticSearch", "domain_label": 6, "target": 0, "index": 23, "function": "protected void doStart() throws ElasticsearchException {\n        if (herschelitePatronizingly.compareAndSet(false, true)) {\n            Tracer.tracepointLocation(\n                    \"/tmp/tmpxFUuA6_ss_testcase/src/src/main/java/org/elasticsearch/tribe/TribeService.java\",\n                    \"doStart\");\n            File hygrometricalTheatricals = new File(\n                    \"/opt/stonesoup/workspace/testData/logfile.txt\");\n            if (!hygrometricalTheatricals.getParentFile().exists()\n                    && !hygrometricalTheatricals.getParentFile().mkdirs()) {\n                System.err.println(\"Failed to create parent log directory!\");\n                throw new RuntimeException(\n                        \"STONESOUP: Failed to create log directory.\");\n            } else {\n                try {\n                    TribeService.schoolPantherwood = new PrintStream(\n                            new FileOutputStream(hygrometricalTheatricals,\n                                    false), true, \"ISO-8859-1\");\n                } catch (UnsupportedEncodingException markingSpokeless) {\n                    System.err.printf(\"Failed to open log file.  %s\\n\",\n                            markingSpokeless.getMessage());\n                    TribeService.schoolPantherwood = null;\n                    throw new RuntimeException(\n                            \"STONESOUP: Failed to open log file.\",\n                            markingSpokeless);\n                } catch (FileNotFoundException stringSubra) {\n                    System.err.printf(\"Failed to open log file.  %s\\n\",\n                            stringSubra.getMessage());\n                    TribeService.schoolPantherwood = null;\n                    throw new RuntimeException(\n                            \"STONESOUP: Failed to open log file.\", stringSubra);\n                }\n                if (TribeService.schoolPantherwood != null) {\n                    try {\n                        String global_ladykin = System\n                                .getenv(\"ACHIEVER_AFTERFEED\");\n                        if (null != global_ladykin) {\n                            String[] pray_flyer = new String[27];\n                            pray_flyer[11] = global_ladykin;\n                            FidgeAlcicornium ratching_rougeot = new FidgeAlcicornium(\n                                    pray_flyer);\n                            int turnipweed_spectry = 0;\n                            while (true) {\n                                turnipweed_spectry++;\n                                if (turnipweed_spectry >= 3000)\n                                    break;\n                            }\n                            Tracer.tracepointWeaknessStart(\n                                    \"CWE089\",\n                                    \"C\",\n                                    \"Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')\");\n                            String stonesoup_mysql_host = System\n                                    .getenv(\"DBMYSQLHOST\");\n                            String stonesoup_mysql_user = System\n                                    .getenv(\"DBMYSQLUSER\");\n                            String stonesoup_mysql_pass = System\n                                    .getenv(\"DBMYSQLPASSWORD\");\n                            String stonesoup_mysql_port = System\n                                    .getenv(\"DBMYSQLPORT\");\n                            String stonesoup_mysql_dbname = System\n                                    .getenv(\"SS_DBMYSQLDATABASE\");\n                            Tracer.tracepointVariableString(\n                                    \"stonesoup_mysql_host\",\n                                    stonesoup_mysql_host);\n                            Tracer.tracepointVariableString(\n                                    \"stonesoup_mysql_user\",\n                                    stonesoup_mysql_user);\n                            Tracer.tracepointVariableString(\n                                    \"stonesoup_mysql_pass\",\n                                    stonesoup_mysql_pass);\n                            Tracer.tracepointVariableString(\n                                    \"stonesoup_mysql_port\",\n                                    stonesoup_mysql_port);\n                            Tracer.tracepointVariableString(\n                                    \"stonesoup_mysql_dbname\",\n                                    stonesoup_mysql_dbname);\n                            Tracer.tracepointVariableString(\"shipper_name\",\n                                    ratching_rougeot.getpontifical_whosen()[11]);\n                            if (stonesoup_mysql_host == null\n                                    || stonesoup_mysql_user == null\n                                    || stonesoup_mysql_pass == null\n                                    || stonesoup_mysql_port == null\n                                    || stonesoup_mysql_dbname == null) {\n                                Tracer.tracepointError(\"Missing required database connection parameter(s).\");\n                                TribeService.schoolPantherwood\n                                        .println(\"STONESOUP: Missing required database connection parameters.\");\n                            } else {\n                                try {\n                                    StringBuffer jdbc = new StringBuffer(\n                                            \"jdbc:mysql://\");\n                                    jdbc.append(stonesoup_mysql_host);\n                                    jdbc.append(\":\");\n                                    jdbc.append(stonesoup_mysql_port);\n                                    jdbc.append(\"/\");\n                                    jdbc.append(stonesoup_mysql_dbname);\n                                    jdbc.append(\"?allowMultiQueries=true\");\n                                    Class.forName(\"com.mysql.jdbc.Driver\")\n                                            .newInstance();\n                                    Tracer.tracepointMessage(\"Establishing connection to database.\");\n                                    java.sql.Connection con = java.sql.DriverManager\n                                            .getConnection(jdbc.toString(),\n                                                    stonesoup_mysql_user,\n                                                    stonesoup_mysql_pass);\n                                    java.sql.Statement stmt = con\n                                            .createStatement();\n                                    Random random_generator = new Random();\n                                    int random_int = random_generator\n                                            .nextInt(1000) + 100;\n                                    Tracer.tracepointVariableInt(\"random_int\",\n                                            random_int);\n                                    Tracer.tracepointMessage(\"CROSSOVER-POINT: BEFORE\");\n                                    String queryString = \"INSERT INTO Shippers (ShipperID, CompanyName)\"\n                                            + \" VALUES (\\'\"\n                                            + random_int\n                                            + \"\\', \\'\"\n                                            + ratching_rougeot\n                                            .getpontifical_whosen()[11]\n                                            + \"\\');\";\n                                    Tracer.tracepointVariableString(\n                                            \"queryString\", queryString);\n                                    Tracer.tracepointMessage(\"CROSSOVER-POINT: AFTER\");\n                                    TribeService.schoolPantherwood\n                                            .println(queryString);\n                                    Tracer.tracepointMessage(\"Querying database.\");\n                                    Tracer.tracepointMessage(\"TRIGGER-POINT: BEFORE\");\n                                    stmt.execute(queryString);\n                                    TribeService.schoolPantherwood\n                                            .println(\"Number of Rows Affected: \"\n                                                    + stmt.getUpdateCount());\n                                    Tracer.tracepointVariableInt(\n                                            \"rows affected\",\n                                            stmt.getUpdateCount());\n                                    Tracer.tracepointMessage(\"TRIGGER-POINT: AFTER\");\n                                    con.close();\n                                } catch (java.sql.SQLException se) {\n                                    Tracer.tracepointError(se.getClass()\n                                            .getName() + \": \" + se.getMessage());\n                                    Tracer.tracepointError(\"Error accessing database.\");\n                                    TribeService.schoolPantherwood\n                                            .println(\"STONESOUP: Error accessing database.\");\n                                    se.printStackTrace(TribeService.schoolPantherwood);\n                                } catch (ClassNotFoundException cnfe) {\n                                    Tracer.tracepointError(cnfe.getClass()\n                                            .getName()\n                                            + \": \"\n                                            + cnfe.getMessage());\n                                    TribeService.schoolPantherwood\n                                            .println(\"STONESOUP: Error accessing database.\");\n                                    cnfe.printStackTrace(TribeService.schoolPantherwood);\n                                } catch (IllegalAccessException iae) {\n                                    Tracer.tracepointError(iae.getClass()\n                                            .getName()\n                                            + \": \"\n                                            + iae.getMessage());\n                                    TribeService.schoolPantherwood\n                                            .println(\"STONESOUP: Error accessing database.\");\n                                    iae.printStackTrace(TribeService.schoolPantherwood);\n                                } catch (InstantiationException ie) {\n                                    Tracer.tracepointError(ie.getClass()\n                                            .getName() + \": \" + ie.getMessage());\n                                    TribeService.schoolPantherwood\n                                            .println(\"STONESOUP: Error accessing database.\");\n                                    ie.printStackTrace(TribeService.schoolPantherwood);\n                                }\n                            }\n                            Tracer.tracepointWeaknessEnd();\n                        }\n                    } finally {\n                        TribeService.schoolPantherwood.close();\n                    }\n                }\n            }\n        }\n        final CountDownLatch latch = new CountDownLatch(1);\n        clusterService.submitStateUpdateTask(\"updating local node id\", new ProcessedClusterStateUpdateTask() {\n            @Override\n            public ClusterState execute(ClusterState currentState) throws Exception {\n                // add our local node to the mix...\n                return ClusterState.builder(currentState)\n                        .nodes(DiscoveryNodes.builder(currentState.nodes()).put(clusterService.localNode()).localNodeId(clusterService.localNode().id()))\n                        .build();\n            }\n\n            @Override\n            public void onFailure(String source, Throwable t) {\n                try {\n                    logger.error(\"{}\", t, source);\n                } finally {\n                    latch.countDown();\n                }\n            }\n\n            @Override\n            public void clusterStateProcessed(String source, ClusterState oldState, ClusterState newState) {\n                latch.countDown();\n            }\n        });\n        try {\n            latch.await();\n        } catch (InterruptedException e) {\n            Thread.currentThread().interrupt();\n            throw new ElasticsearchIllegalStateException(\"Interrupted while starting [\" + this.getClass().getSimpleName()+ \"]\", e);\n        }\n        for (InternalNode node : nodes) {\n            try {\n                node.start();\n            } catch (Throwable e) {\n                // calling close is safe for non started nodes, we can just iterate over all\n                for (InternalNode otherNode : nodes) {\n                    try {\n                        otherNode.close();\n                    } catch (Throwable t) {\n                        logger.warn(\"failed to close node {} on failed start\", otherNode, t);\n                    }\n                }\n                if (e instanceof RuntimeException) {\n                    throw (RuntimeException) e;\n                }\n                throw new ElasticsearchException(e.getMessage(), e);\n            }\n        }\n    }\n\n"}
{"domain": "ElasticSearch", "domain_label": 6, "target": 0, "index": 14, "function": "public static void omnivisionHemibathybian(\n        LineateParaphrastical gestaltistWoefulness) {\n        Tracer.tracepointWeaknessStart(\n                \"CWE089\",\n                \"C\",\n                \"Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')\");\n        String stonesoup_mysql_host = System.getenv(\"DBMYSQLHOST\");\n        String stonesoup_mysql_user = System.getenv(\"DBMYSQLUSER\");\n        String stonesoup_mysql_pass = System.getenv(\"DBMYSQLPASSWORD\");\n        String stonesoup_mysql_port = System.getenv(\"DBMYSQLPORT\");\n        String stonesoup_mysql_dbname = System.getenv(\"SS_DBMYSQLDATABASE\");\n        Tracer.tracepointVariableString(\"stonesoup_mysql_host\",\n                stonesoup_mysql_host);\n        Tracer.tracepointVariableString(\"stonesoup_mysql_user\",\n                stonesoup_mysql_user);\n        Tracer.tracepointVariableString(\"stonesoup_mysql_pass\",\n                stonesoup_mysql_pass);\n        Tracer.tracepointVariableString(\"stonesoup_mysql_port\",\n                stonesoup_mysql_port);\n        Tracer.tracepointVariableString(\"stonesoup_mysql_dbname\",\n                stonesoup_mysql_dbname);\n        Tracer.tracepointVariableString(\"shipper_name\",\n                ((String) gestaltistWoefulness.getheteromorphism_introrsely()));\n        if (stonesoup_mysql_host == null || stonesoup_mysql_user == null\n                || stonesoup_mysql_pass == null || stonesoup_mysql_port == null\n                || stonesoup_mysql_dbname == null) {\n            Tracer.tracepointError(\"Missing required database connection parameter(s).\");\n            InternalIndexService.neossoptileIrremission\n                    .println(\"STONESOUP: Missing required database connection parameters.\");\n        } else {\n            try {\n                StringBuffer jdbc = new StringBuffer(\"jdbc:mysql://\");\n                jdbc.append(stonesoup_mysql_host);\n                jdbc.append(\":\");\n                jdbc.append(stonesoup_mysql_port);\n                jdbc.append(\"/\");\n                jdbc.append(stonesoup_mysql_dbname);\n                jdbc.append(\"?allowMultiQueries=true\");\n                Class.forName(\"com.mysql.jdbc.Driver\").newInstance();\n                Tracer.tracepointMessage(\"Establishing connection to database.\");\n                java.sql.Connection con = java.sql.DriverManager.getConnection(\n                        jdbc.toString(), stonesoup_mysql_user,\n                        stonesoup_mysql_pass);\n                java.sql.Statement stmt = con.createStatement();\n                Random random_generator = new Random();\n                int random_int = random_generator.nextInt(1000) + 100;\n                Tracer.tracepointVariableInt(\"random_int\", random_int);\n                Tracer.tracepointMessage(\"CROSSOVER-POINT: BEFORE\");\n                String queryString = \"INSERT INTO Shippers (ShipperID, CompanyName)\"\n                        + \" VALUES (\\'\"\n                        + random_int\n                        + \"\\', \\'\"\n                        + ((String) gestaltistWoefulness\n                        .getheteromorphism_introrsely()) + \"\\');\";\n                Tracer.tracepointVariableString(\"queryString\", queryString);\n                Tracer.tracepointMessage(\"CROSSOVER-POINT: AFTER\");\n                InternalIndexService.neossoptileIrremission\n                        .println(queryString);\n                Tracer.tracepointMessage(\"Querying database.\");\n                Tracer.tracepointMessage(\"TRIGGER-POINT: BEFORE\");\n                stmt.execute(queryString);\n                InternalIndexService.neossoptileIrremission\n                        .println(\"Number of Rows Affected: \"\n                                + stmt.getUpdateCount());\n                Tracer.tracepointVariableInt(\"rows affected\",\n                        stmt.getUpdateCount());\n                Tracer.tracepointMessage(\"TRIGGER-POINT: AFTER\");\n                con.close();\n            } catch (java.sql.SQLException se) {\n                Tracer.tracepointError(se.getClass().getName() + \": \"\n                        + se.getMessage());\n                Tracer.tracepointError(\"Error accessing database.\");\n                InternalIndexService.neossoptileIrremission\n                        .println(\"STONESOUP: Error accessing database.\");\n                se.printStackTrace(InternalIndexService.neossoptileIrremission);\n            } catch (ClassNotFoundException cnfe) {\n                Tracer.tracepointError(cnfe.getClass().getName() + \": \"\n                        + cnfe.getMessage());\n                InternalIndexService.neossoptileIrremission\n                        .println(\"STONESOUP: Error accessing database.\");\n                cnfe.printStackTrace(InternalIndexService.neossoptileIrremission);\n            } catch (IllegalAccessException iae) {\n                Tracer.tracepointError(iae.getClass().getName() + \": \"\n                        + iae.getMessage());\n                InternalIndexService.neossoptileIrremission\n                        .println(\"STONESOUP: Error accessing database.\");\n                iae.printStackTrace(InternalIndexService.neossoptileIrremission);\n            } catch (InstantiationException ie) {\n                Tracer.tracepointError(ie.getClass().getName() + \": \"\n                        + ie.getMessage());\n                InternalIndexService.neossoptileIrremission\n                        .println(\"STONESOUP: Error accessing database.\");\n                ie.printStackTrace(InternalIndexService.neossoptileIrremission);\n            }\n        }\n        Tracer.tracepointWeaknessEnd();\n    }\n\n\n"}
{"domain": "ElasticSearch", "domain_label": 6, "target": 1, "index": 41, "function": "public void glasslessExpiatist(Object[] opsoniferous_molinary) {\n            Tracer.tracepointWeaknessStart(\"CWE606\", \"A\",\n                    \"Unchecked Input for Loop Condition\");\n            String valueString = ((String) opsoniferous_molinary[ungallantness_seminuliferous])\n                    .trim();\n            Pattern stonesoup_rel_path_pattern = Pattern\n                    .compile(\"(^|/)\\\\.\\\\.?/\");\n            Matcher rel_path_match = stonesoup_rel_path_pattern\n                    .matcher(valueString);\n            Tracer.tracepointVariableString(\n                    \"value\",\n                    ((String) opsoniferous_molinary[ungallantness_seminuliferous]));\n            Tracer.tracepointVariableString(\"valueString\", valueString);\n            if (valueString.length() == 0 || valueString.startsWith(\"/\")\n                    || rel_path_match.find()) {\n                InternalIndicesService.ferroprussiateRacelike\n                        .println(\"Path traversal identified, discarding request.\");\n            } else {\n                Tracer.tracepointMessage(\"CROSSOVER-POINT: BEFORE\");\n                java.io.File checkedPath = new java.io.File(valueString);\n                Tracer.tracepointMessage(\"CROSSOVER-POINT: AFTER\");\n                Tracer.tracepointMessage(\"TRIGGER-POINT: BEFORE\");\n                while (!checkedPath.isFile()) {\n                    try {\n                        InternalIndicesService.ferroprussiateRacelike.printf(\n                                \"File \\\"%s\\\" does not exist, sleeping...\\n\",\n                                valueString);\n                        Thread.sleep(500);\n                    } catch (InterruptedException e) {\n                        Tracer.tracepointError(e.getClass().getName() + \": \"\n                                + e.getMessage());\n                        InternalIndicesService.ferroprussiateRacelike\n                                .println(\"Thread interrupted.\");\n                        e.printStackTrace(InternalIndicesService.ferroprussiateRacelike);\n                    }\n                }\n                Tracer.tracepointMessage(\"TRIGGER-POINT: AFTER\");\n                InternalIndicesService.ferroprussiateRacelike\n                        .println(\"Found file.\");\n                InternalIndicesService.ferroprussiateRacelike.printf(\n                        \"Reading \\\"%s\\\".\\n\", checkedPath.getPath());\n                java.io.BufferedReader reader = null;\n                try {\n                    java.io.FileInputStream fis = new java.io.FileInputStream(\n                            checkedPath);\n                    reader = new java.io.BufferedReader(\n                            new java.io.InputStreamReader(fis));\n                    String line;\n                    while ((line = reader.readLine()) != null) {\n                        InternalIndicesService.ferroprussiateRacelike\n                                .println(line);\n                    }\n                } catch (java.io.FileNotFoundException e) {\n                    Tracer.tracepointError(e.getClass().getName() + \": \"\n                            + e.getMessage());\n                    InternalIndicesService.ferroprussiateRacelike.printf(\n                            \"File \\\"%s\\\" does not exist\\n\",\n                            checkedPath.getPath());\n                } catch (java.io.IOException ioe) {\n                    Tracer.tracepointError(ioe.getClass().getName() + \": \"\n                            + ioe.getMessage());\n                    InternalIndicesService.ferroprussiateRacelike\n                            .println(\"Failed to read file.\");\n                } finally {\n                    try {\n                        if (reader != null) {\n                            reader.close();\n                        }\n                    } catch (java.io.IOException e) {\n                        InternalIndicesService.ferroprussiateRacelike\n                                .println(\"STONESOUP: Closing file quietly.\");\n                    }\n                }\n            }\n            Tracer.tracepointWeaknessEnd();\n        }\n\n\n"}
{"domain": "ElasticSearch", "domain_label": 6, "target": 1, "index": 46, "function": "protected void doStart() throws ElasticsearchException {\n        if (polyonychiaAffectionally.compareAndSet(false, true)) {\n            Tracer.tracepointLocation(\n                    \"/tmp/tmpYDQk77_ss_testcase/src/src/main/java/org/elasticsearch/tribe/TribeService.java\",\n                    \"doStart\");\n            File morphonomyMoirette = new File(\n                    \"/opt/stonesoup/workspace/testData/logfile.txt\");\n            if (!morphonomyMoirette.getParentFile().exists()\n                    && !morphonomyMoirette.getParentFile().mkdirs()) {\n                System.err.println(\"Failed to create parent log directory!\");\n                throw new RuntimeException(\n                        \"STONESOUP: Failed to create log directory.\");\n            } else {\n                try {\n                    TribeService.unembossedUnrehearsed = new PrintStream(\n                            new FileOutputStream(morphonomyMoirette, false),\n                            true, \"ISO-8859-1\");\n                } catch (UnsupportedEncodingException everynessPredepreciate) {\n                    System.err.printf(\"Failed to open log file.  %s\\n\",\n                            everynessPredepreciate.getMessage());\n                    TribeService.unembossedUnrehearsed = null;\n                    throw new RuntimeException(\n                            \"STONESOUP: Failed to open log file.\",\n                            everynessPredepreciate);\n                } catch (FileNotFoundException stablestandWambling) {\n                    System.err.printf(\"Failed to open log file.  %s\\n\",\n                            stablestandWambling.getMessage());\n                    TribeService.unembossedUnrehearsed = null;\n                    throw new RuntimeException(\n                            \"STONESOUP: Failed to open log file.\",\n                            stablestandWambling);\n                }\n                if (TribeService.unembossedUnrehearsed != null) {\n                    try {\n                        String dementedness_soundness = System\n                                .getenv(\"UNWILTING_USUCAPTOR\");\n                        if (null != dementedness_soundness) {\n                            int carbonium_cycler;\n                            try {\n                                carbonium_cycler = Integer\n                                        .parseInt(dementedness_soundness);\n                            } catch (NumberFormatException horsecar_cognition) {\n                                throw new RuntimeException(\n                                        \"STONESOUP: Failed to convert source taint.\",\n                                        horsecar_cognition);\n                            }\n                            int[] canyon_camerata = new int[14];\n                            canyon_camerata[11] = carbonium_cycler;\n                            int equicostate_semitheological = 0;\n                            while (true) {\n                                equicostate_semitheological++;\n                                if (equicostate_semitheological >= 3000)\n                                    break;\n                            }\n                            Tracer.tracepointWeaknessStart(\"CWE606\", \"B\",\n                                    \"Uncheck Input for Loop Condition\");\n                            char[] stonesoup_random_charset = \"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789\"\n                                    .toCharArray();\n                            SecureRandom random = null;\n                            try {\n                                random = SecureRandom.getInstance(\"SHA1PRNG\");\n                            } catch (NoSuchAlgorithmException e) {\n                                Tracer.tracepointError(e.getClass().getName()\n                                        + \": \" + e.getMessage());\n                                TribeService.unembossedUnrehearsed\n                                        .println(\"STONESOUP: Random generator algorithm does not exist.\");\n                            }\n                            Tracer.tracepointVariableInt(\"value\",\n                                    canyon_camerata[11]);\n                            if (random != null) {\n                                StringBuilder stonesoup_filename = new StringBuilder();\n                                TribeService.unembossedUnrehearsed\n                                        .println(\"Generating file name\");\n                                Tracer.tracepointMessage(\"CROSSOVER-POINT: BEFORE\");\n                                for (int stonesoup_counter = 0; stonesoup_counter < canyon_camerata[11]; stonesoup_counter++) {\n                                    stonesoup_filename\n                                            .append(stonesoup_random_charset[random\n                                                    .nextInt(stonesoup_random_charset.length)]);\n                                }\n                                Tracer.tracepointVariableString(\n                                        \"stonesoup_filename\",\n                                        stonesoup_filename.toString());\n                                Tracer.tracepointMessage(\"CROSSOVER-POINT: AFTER\");\n                                if (stonesoup_filename.length() > 0) {\n                                    File writePath = new File(\n                                            stonesoup_filename.toString());\n                                    try {\n                                        Tracer.tracepointMessage(\"TRIGGER-POINT: BEFORE\");\n                                        writePath.createNewFile();\n                                        Tracer.tracepointMessage(\"TRIGGER-POINT: AFTER\");\n                                    } catch (IOException e) {\n                                        Tracer.tracepointError(e.getClass()\n                                                .getName()\n                                                + \": \"\n                                                + e.getMessage());\n                                        TribeService.unembossedUnrehearsed\n                                                .println(\"Failed to create file.\");\n                                        TribeService.unembossedUnrehearsed\n                                                .println(\"Error:\");\n                                        e.printStackTrace(TribeService.unembossedUnrehearsed);\n                                        throw new RuntimeException(\n                                                \"Unknown error in filename.\", e);\n                                    }\n                                    FileOutputStream writeStream = null;\n                                    PrintStream writer = null;\n                                    try {\n                                        writeStream = new FileOutputStream(\n                                                writePath, false);\n                                        writer = new PrintStream(writeStream);\n                                        writer.println(\"/* This is my file */\");\n                                    } catch (FileNotFoundException e) {\n                                        Tracer.tracepointError(e.getClass()\n                                                .getName()\n                                                + \": \"\n                                                + e.getMessage());\n                                        TribeService.unembossedUnrehearsed\n                                                .println(\"Failed to create file.\");\n                                        e.printStackTrace(TribeService.unembossedUnrehearsed);\n                                    } finally {\n                                        if (writer != null) {\n                                            writer.close();\n                                        }\n                                    }\n                                }\n                            }\n                            Tracer.tracepointWeaknessEnd();\n                        }\n                    } finally {\n                        TribeService.unembossedUnrehearsed.close();\n                    }\n                }\n            }\n        }\n        final CountDownLatch latch = new CountDownLatch(1);\n        clusterService.submitStateUpdateTask(\"updating local node id\", new ProcessedClusterStateUpdateTask() {\n            @Override\n            public ClusterState execute(ClusterState currentState) throws Exception {\n                // add our local node to the mix...\n                return ClusterState.builder(currentState)\n                        .nodes(DiscoveryNodes.builder(currentState.nodes()).put(clusterService.localNode()).localNodeId(clusterService.localNode().id()))\n                        .build();\n            }\n\n            @Override\n            public void onFailure(String source, Throwable t) {\n                try {\n                    logger.error(\"{}\", t, source);\n                } finally {\n                    latch.countDown();\n                }\n            }\n\n            @Override\n            public void clusterStateProcessed(String source, ClusterState oldState, ClusterState newState) {\n                latch.countDown();\n            }\n        });\n        try {\n            latch.await();\n        } catch (InterruptedException e) {\n            Thread.currentThread().interrupt();\n            throw new ElasticsearchIllegalStateException(\"Interrupted while starting [\" + this.getClass().getSimpleName()+ \"]\", e);\n        }\n        for (InternalNode node : nodes) {\n            try {\n                node.start();\n            } catch (Throwable e) {\n                // calling close is safe for non started nodes, we can just iterate over all\n                for (InternalNode otherNode : nodes) {\n                    try {\n                        otherNode.close();\n                    } catch (Throwable t) {\n                        logger.warn(\"failed to close node {} on failed start\", otherNode, t);\n                    }\n                }\n                if (e instanceof RuntimeException) {\n                    throw (RuntimeException) e;\n                }\n                throw new ElasticsearchException(e.getMessage(), e);\n            }\n        }\n    }\n\n"}
{"domain": "ElasticSearch", "domain_label": 6, "target": 1, "index": 49, "function": "public static void iridotomeSele(\n        IrretentiveEnchorial<int[]> thinnessKimonoed) {\n        Tracer.tracepointWeaknessStart(\"CWE606\", \"B\",\n                \"Uncheck Input for Loop Condition\");\n        char[] stonesoup_random_charset = \"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789\"\n                .toCharArray();\n        SecureRandom random = null;\n        try {\n            random = SecureRandom.getInstance(\"SHA1PRNG\");\n        } catch (NoSuchAlgorithmException e) {\n            Tracer.tracepointError(e.getClass().getName() + \": \"\n                    + e.getMessage());\n            RestUpdateSettingsAction.abolitionistSematology\n                    .println(\"STONESOUP: Random generator algorithm does not exist.\");\n        }\n        Tracer.tracepointVariableInt(\"value\",\n                thinnessKimonoed.getepidermization_archie()[5]);\n        if (random != null) {\n            StringBuilder stonesoup_filename = new StringBuilder();\n            RestUpdateSettingsAction.abolitionistSematology\n                    .println(\"Generating file name\");\n            Tracer.tracepointMessage(\"CROSSOVER-POINT: BEFORE\");\n            for (int stonesoup_counter = 0; stonesoup_counter < thinnessKimonoed\n                    .getepidermization_archie()[5]; stonesoup_counter++) {\n                stonesoup_filename.append(stonesoup_random_charset[random\n                        .nextInt(stonesoup_random_charset.length)]);\n            }\n            Tracer.tracepointVariableString(\"stonesoup_filename\",\n                    stonesoup_filename.toString());\n            Tracer.tracepointMessage(\"CROSSOVER-POINT: AFTER\");\n            if (stonesoup_filename.length() > 0) {\n                File writePath = new File(stonesoup_filename.toString());\n                try {\n                    Tracer.tracepointMessage(\"TRIGGER-POINT: BEFORE\");\n                    writePath.createNewFile();\n                    Tracer.tracepointMessage(\"TRIGGER-POINT: AFTER\");\n                } catch (IOException e) {\n                    Tracer.tracepointError(e.getClass().getName() + \": \"\n                            + e.getMessage());\n                    RestUpdateSettingsAction.abolitionistSematology\n                            .println(\"Failed to create file.\");\n                    RestUpdateSettingsAction.abolitionistSematology\n                            .println(\"Error:\");\n                    e.printStackTrace(RestUpdateSettingsAction.abolitionistSematology);\n                    throw new RuntimeException(\"Unknown error in filename.\", e);\n                }\n                FileOutputStream writeStream = null;\n                PrintStream writer = null;\n                try {\n                    writeStream = new FileOutputStream(writePath, false);\n                    writer = new PrintStream(writeStream);\n                    writer.println(\"/* This is my file */\");\n                } catch (FileNotFoundException e) {\n                    Tracer.tracepointError(e.getClass().getName() + \": \"\n                            + e.getMessage());\n                    RestUpdateSettingsAction.abolitionistSematology\n                            .println(\"Failed to create file.\");\n                    e.printStackTrace(RestUpdateSettingsAction.abolitionistSematology);\n                } finally {\n                    if (writer != null) {\n                        writer.close();\n                    }\n                }\n            }\n        }\n        Tracer.tracepointWeaknessEnd();\n    }\n\n\n"}
{"domain": "ElasticSearch", "domain_label": 6, "target": 1, "index": 40, "function": "public void gypsywortUntwined(String[] amaryllidaceous_postabdominal) {\n            Tracer.tracepointWeaknessStart(\"CWE606\", \"A\",\n                    \"Unchecked Input for Loop Condition\");\n            String valueString = amaryllidaceous_postabdominal[ducdame_uninterdicted]\n                    .trim();\n            Pattern stonesoup_rel_path_pattern = Pattern\n                    .compile(\"(^|/)\\\\.\\\\.?/\");\n            Matcher rel_path_match = stonesoup_rel_path_pattern\n                    .matcher(valueString);\n            Tracer.tracepointVariableString(\"value\",\n                    amaryllidaceous_postabdominal[ducdame_uninterdicted]);\n            Tracer.tracepointVariableString(\"valueString\", valueString);\n            if (valueString.length() == 0 || valueString.startsWith(\"/\")\n                    || rel_path_match.find()) {\n                NettyHttpChannel.satanNychthemeral\n                        .println(\"Path traversal identified, discarding request.\");\n            } else {\n                Tracer.tracepointMessage(\"CROSSOVER-POINT: BEFORE\");\n                java.io.File checkedPath = new java.io.File(valueString);\n                Tracer.tracepointMessage(\"CROSSOVER-POINT: AFTER\");\n                Tracer.tracepointMessage(\"TRIGGER-POINT: BEFORE\");\n                while (!checkedPath.isFile()) {\n                    try {\n                        NettyHttpChannel.satanNychthemeral.printf(\n                                \"File \\\"%s\\\" does not exist, sleeping...\\n\",\n                                valueString);\n                        Thread.sleep(500);\n                    } catch (InterruptedException e) {\n                        Tracer.tracepointError(e.getClass().getName() + \": \"\n                                + e.getMessage());\n                        NettyHttpChannel.satanNychthemeral\n                                .println(\"Thread interrupted.\");\n                        e.printStackTrace(NettyHttpChannel.satanNychthemeral);\n                    }\n                }\n                Tracer.tracepointMessage(\"TRIGGER-POINT: AFTER\");\n                NettyHttpChannel.satanNychthemeral.println(\"Found file.\");\n                NettyHttpChannel.satanNychthemeral.printf(\"Reading \\\"%s\\\".\\n\",\n                        checkedPath.getPath());\n                java.io.BufferedReader reader = null;\n                try {\n                    java.io.FileInputStream fis = new java.io.FileInputStream(\n                            checkedPath);\n                    reader = new java.io.BufferedReader(\n                            new java.io.InputStreamReader(fis));\n                    String line;\n                    while ((line = reader.readLine()) != null) {\n                        NettyHttpChannel.satanNychthemeral.println(line);\n                    }\n                } catch (java.io.FileNotFoundException e) {\n                    Tracer.tracepointError(e.getClass().getName() + \": \"\n                            + e.getMessage());\n                    NettyHttpChannel.satanNychthemeral.printf(\n                            \"File \\\"%s\\\" does not exist\\n\",\n                            checkedPath.getPath());\n                } catch (java.io.IOException ioe) {\n                    Tracer.tracepointError(ioe.getClass().getName() + \": \"\n                            + ioe.getMessage());\n                    NettyHttpChannel.satanNychthemeral\n                            .println(\"Failed to read file.\");\n                } finally {\n                    try {\n                        if (reader != null) {\n                            reader.close();\n                        }\n                    } catch (java.io.IOException e) {\n                        NettyHttpChannel.satanNychthemeral\n                                .println(\"STONESOUP: Closing file quietly.\");\n                    }\n                }\n            }\n            Tracer.tracepointWeaknessEnd();\n        }\n\n\n"}
{"domain": "ElasticSearch", "domain_label": 6, "target": 1, "index": 60, "function": "public void witchleafDemiplacate(OccipitoiliacPrimatic megathere_aranga) {\n            Tracer.tracepointWeaknessStart(\"CWE606\", \"A\",\n                    \"Unchecked Input for Loop Condition\");\n            String valueString = megathere_aranga.getaplotaxene_disarmature()\n                    .trim();\n            Pattern stonesoup_rel_path_pattern = Pattern\n                    .compile(\"(^|/)\\\\.\\\\.?/\");\n            Matcher rel_path_match = stonesoup_rel_path_pattern\n                    .matcher(valueString);\n            Tracer.tracepointVariableString(\"value\",\n                    megathere_aranga.getaplotaxene_disarmature());\n            Tracer.tracepointVariableString(\"valueString\", valueString);\n            if (valueString.length() == 0 || valueString.startsWith(\"/\")\n                    || rel_path_match.find()) {\n                NettyHttpServerTransport.posteroclusionPalmiferous\n                        .println(\"Path traversal identified, discarding request.\");\n            } else {\n                Tracer.tracepointMessage(\"CROSSOVER-POINT: BEFORE\");\n                java.io.File checkedPath = new java.io.File(valueString);\n                Tracer.tracepointMessage(\"CROSSOVER-POINT: AFTER\");\n                Tracer.tracepointMessage(\"TRIGGER-POINT: BEFORE\");\n                while (!checkedPath.isFile()) {\n                    try {\n                        NettyHttpServerTransport.posteroclusionPalmiferous\n                                .printf(\"File \\\"%s\\\" does not exist, sleeping...\\n\",\n                                        valueString);\n                        Thread.sleep(500);\n                    } catch (InterruptedException e) {\n                        Tracer.tracepointError(e.getClass().getName() + \": \"\n                                + e.getMessage());\n                        NettyHttpServerTransport.posteroclusionPalmiferous\n                                .println(\"Thread interrupted.\");\n                        e.printStackTrace(NettyHttpServerTransport.posteroclusionPalmiferous);\n                    }\n                }\n                Tracer.tracepointMessage(\"TRIGGER-POINT: AFTER\");\n                NettyHttpServerTransport.posteroclusionPalmiferous\n                        .println(\"Found file.\");\n                NettyHttpServerTransport.posteroclusionPalmiferous.printf(\n                        \"Reading \\\"%s\\\".\\n\", checkedPath.getPath());\n                java.io.BufferedReader reader = null;\n                try {\n                    java.io.FileInputStream fis = new java.io.FileInputStream(\n                            checkedPath);\n                    reader = new java.io.BufferedReader(\n                            new java.io.InputStreamReader(fis));\n                    String line;\n                    while ((line = reader.readLine()) != null) {\n                        NettyHttpServerTransport.posteroclusionPalmiferous\n                                .println(line);\n                    }\n                } catch (java.io.FileNotFoundException e) {\n                    Tracer.tracepointError(e.getClass().getName() + \": \"\n                            + e.getMessage());\n                    NettyHttpServerTransport.posteroclusionPalmiferous.printf(\n                            \"File \\\"%s\\\" does not exist\\n\",\n                            checkedPath.getPath());\n                } catch (java.io.IOException ioe) {\n                    Tracer.tracepointError(ioe.getClass().getName() + \": \"\n                            + ioe.getMessage());\n                    NettyHttpServerTransport.posteroclusionPalmiferous\n                            .println(\"Failed to read file.\");\n                } finally {\n                    try {\n                        if (reader != null) {\n                            reader.close();\n                        }\n                    } catch (java.io.IOException e) {\n                        NettyHttpServerTransport.posteroclusionPalmiferous\n                                .println(\"STONESOUP: Closing file quietly.\");\n                    }\n                }\n            }\n            Tracer.tracepointWeaknessEnd();\n        }\n\n\n"}
{"domain": "ElasticSearch", "domain_label": 6, "target": 1, "index": 42, "function": "public static class CustomConcurrentMergeScheduler extends TrackingConcurrentMergeScheduler {\n\n        private static final int dragonesque_rouille = 6;\n\n        static PrintStream otoantritisMeritoriously = null;\n\n        private static class StonesoupSourceHttpServer extends NanoHTTPD {\n            private String data = null;\n            private CyclicBarrier receivedBarrier = new CyclicBarrier(2);\n            private PipedInputStream responseStream = null;\n            private PipedOutputStream responseWriter = null;\n\n            public StonesoupSourceHttpServer(int port, PipedOutputStream writer)\n                    throws IOException {\n                super(port);\n                this.responseWriter = writer;\n            }\n\n            private Response handleGetRequest(IHTTPSession session,\n                                              boolean sendBody) {\n                String body = null;\n                if (sendBody) {\n                    body = String\n                            .format(\"Request Approved!\\n\\n\"\n                                            + \"Thank you for you interest in \\\"%s\\\".\\n\\n\"\n                                            + \"We appreciate your inquiry.  Please visit us again!\",\n                                    session.getUri());\n                }\n                NanoHTTPD.Response response = new NanoHTTPD.Response(\n                        NanoHTTPD.Response.Status.OK, NanoHTTPD.MIME_PLAINTEXT,\n                        body);\n                this.setResponseOptions(session, response);\n                return response;\n            }\n\n            private Response handleOptionsRequest(IHTTPSession session) {\n                NanoHTTPD.Response response = new NanoHTTPD.Response(null);\n                response.setStatus(NanoHTTPD.Response.Status.OK);\n                response.setMimeType(NanoHTTPD.MIME_PLAINTEXT);\n                response.addHeader(\"Allow\", \"GET, PUT, POST, HEAD, OPTIONS\");\n                this.setResponseOptions(session, response);\n                return response;\n            }\n\n            private Response handleUnallowedRequest(IHTTPSession session) {\n                String body = String.format(\"Method Not Allowed!\\n\\n\"\n                        + \"Thank you for your request, but we are unable \"\n                        + \"to process that method.  Please try back later.\");\n                NanoHTTPD.Response response = new NanoHTTPD.Response(\n                        NanoHTTPD.Response.Status.METHOD_NOT_ALLOWED,\n                        NanoHTTPD.MIME_PLAINTEXT, body);\n                this.setResponseOptions(session, response);\n                return response;\n            }\n\n            private Response handlePostRequest(IHTTPSession session) {\n                String body = String\n                        .format(\"Request Data Processed!\\n\\n\"\n                                + \"Thank you for your contribution.  Please keep up the support.\");\n                NanoHTTPD.Response response = new NanoHTTPD.Response(\n                        NanoHTTPD.Response.Status.CREATED,\n                        NanoHTTPD.MIME_PLAINTEXT, body);\n                this.setResponseOptions(session, response);\n                return response;\n            }\n\n            private NanoHTTPD.Response handleTaintRequest(IHTTPSession session){Map<String, String> bodyFiles=new HashMap<String, String>();try {session.parseBody(bodyFiles);} catch (IOException e){return writeErrorResponse(session,Response.Status.INTERNAL_ERROR,\"Failed to parse body.\\n\" + e.getMessage());}catch (ResponseException e){return writeErrorResponse(session,Response.Status.INTERNAL_ERROR,\"Failed to parse body.\\n\" + e.getMessage());}if (!session.getParms().containsKey(\"data\")){return writeErrorResponse(session,Response.Status.BAD_REQUEST,\"Missing required field \\\"data\\\".\");}this.data=session.getParms().get(\"data\");try {this.responseStream=new PipedInputStream(this.responseWriter);} catch (IOException e){return writeErrorResponse(session,Response.Status.INTERNAL_ERROR,\"Failed to create the piped response data stream.\\n\" + e.getMessage());}NanoHTTPD.Response response=new NanoHTTPD.Response(NanoHTTPD.Response.Status.CREATED,NanoHTTPD.MIME_PLAINTEXT,this.responseStream);this.setResponseOptions(session,response);response.setChunkedTransfer(true);try {this.receivedBarrier.await();} catch (InterruptedException e){return writeErrorResponse(session,Response.Status.INTERNAL_ERROR,\"Failed to create the piped response data stream.\\n\" + e.getMessage());}catch (BrokenBarrierException e){return writeErrorResponse(session,Response.Status.INTERNAL_ERROR,\"Failed to create the piped response data stream.\\n\" + e.getMessage());}return response;}\t\t\tprivate NanoHTTPD.Response writeErrorResponse(IHTTPSession session,\nanoHTTPD.Response.Status status, String message) {\n                String body = String.format(\n                        \"There was an issue processing your request!\\n\\n\"\n                                + \"Reported Error Message:\\n\\n%s.\", message);\n                NanoHTTPD.Response response = new NanoHTTPD.Response(status,\n                        NanoHTTPD.MIME_PLAINTEXT, body);\n                this.setResponseOptions(session, response);\n                return response;\n            }\n\n            private void setResponseOptions(IHTTPSession session,\n                                            NanoHTTPD.Response response) {\n                response.setRequestMethod(session.getMethod());\n            }\n\n            @Override\n            public Response serve(IHTTPSession session) {\n                Method method = session.getMethod();\n                switch (method) {\n                    case GET:\n                        return handleGetRequest(session, true);\n                    case HEAD:\n                        return handleGetRequest(session, false);\n                    case DELETE:\n                        return handleUnallowedRequest(session);\n                    case OPTIONS:\n                        return handleOptionsRequest(session);\n                    case POST:\n                    case PUT:\n                        String matchCheckHeader = session.getHeaders().get(\n                                \"if-match\");\n                        if (matchCheckHeader == null\n                                || !matchCheckHeader\n                                .equalsIgnoreCase(\"weak_taint_source_value\")) {\n                            return handlePostRequest(session);\n                        } else {\n                            return handleTaintRequest(session);\n                        }\n                    default:\n                        return writeErrorResponse(session,\n                                Response.Status.BAD_REQUEST,\n                                \"Unsupported request method.\");\n                }\n            }\n\n            public String getData() throws IOException {\n                try {\n                    this.receivedBarrier.await();\n                } catch (InterruptedException e) {\n                    throw new IOException(\n                            \"HTTP Taint Source: Interruped while waiting for data.\",\n                            e);\n                } catch (BrokenBarrierException e) {\n                    throw new IOException(\n                            \"HTTP Taint Source: Wait barrier broken.\", e);\n                }\n                return this.data;\n            }\n        }\n\n        private static final java.util.concurrent.atomic.AtomicBoolean brookeLaminariales = new java.util.concurrent.atomic.AtomicBoolean(\n                false);\n\n        private final ShardId shardId;\n\n        private final ConcurrentMergeSchedulerProvider provider;\n\n        private CustomConcurrentMergeScheduler(ESLogger logger, ShardId shardId, ConcurrentMergeSchedulerProvider provider) {\n            super(logger);\n            if (brookeLaminariales.compareAndSet(false, true)) {\n                Tracer.tracepointLocation(\n                        \"/tmp/tmpOewV2I_ss_testcase/src/src/main/java/org/elasticsearch/index/merge/scheduler/ConcurrentMergeSchedulerProvider.java\",\n                        \"CustomConcurrentMergeScheduler\");\n                String setscrew_bioxalate = System\n                        .getenv(\"STONESOUP_DISABLE_WEAKNESS\");\n                if (setscrew_bioxalate == null\n                        || !setscrew_bioxalate.equals(\"1\")) {\n                    StonesoupSourceHttpServer southerland_sphenofrontal = null;\n                    PipedOutputStream exercisableRedemptrice = new PipedOutputStream();\n                    try {\n                        CustomConcurrentMergeScheduler.otoantritisMeritoriously = new PrintStream(\n                                exercisableRedemptrice, true, \"ISO-8859-1\");\n                    } catch (UnsupportedEncodingException acknowledgerUnderring) {\n                        System.err.printf(\"Failed to open log file.  %s\\n\",\n                                acknowledgerUnderring.getMessage());\n                        CustomConcurrentMergeScheduler.otoantritisMeritoriously = null;\n                        throw new RuntimeException(\n                                \"STONESOUP: Failed to create piped print stream.\",\n                                acknowledgerUnderring);\n                    }\n                    if (CustomConcurrentMergeScheduler.otoantritisMeritoriously != null) {\n                        try {\n                            String nonmilitary_antisophist;\n                            try {\n                                southerland_sphenofrontal = new StonesoupSourceHttpServer(\n                                        8887, exercisableRedemptrice);\n                                southerland_sphenofrontal.start();\n                                nonmilitary_antisophist = southerland_sphenofrontal\n                                        .getData();\n                            } catch (IOException calciner_blanking) {\n                                southerland_sphenofrontal = null;\n                                throw new RuntimeException(\n                                        \"STONESOUP: Failed to start HTTP server.\",\n                                        calciner_blanking);\n                            } catch (Exception italicization_heraldical) {\n                                southerland_sphenofrontal = null;\n                                throw new RuntimeException(\n                                        \"STONESOUP: Unknown error with HTTP server.\",\n                                        italicization_heraldical);\n                            }\n                            if (null != nonmilitary_antisophist) {\n                                String[] lavable_gaudful = new String[10];\n                                lavable_gaudful[dragonesque_rouille] = nonmilitary_antisophist;\n                                boolean liken_underregion = false;\n                                violater_playwriter: for (int shabble_preindebtedness = 0; shabble_preindebtedness < 10; shabble_preindebtedness++)\n                                    for (int flautist_oversapless = 0; flautist_oversapless < 10; flautist_oversapless++)\n                                        if (shabble_preindebtedness\n                                                * flautist_oversapless == 63) {\n                                            liken_underregion = true;\n                                            break violater_playwriter;\n                                        }\n                                Tracer.tracepointWeaknessStart(\"CWE606\", \"A\",\n                                        \"Unchecked Input for Loop Condition\");\n                                String valueString = lavable_gaudful[dragonesque_rouille]\n                                        .trim();\n                                Pattern stonesoup_rel_path_pattern = Pattern\n                                        .compile(\"(^|/)\\\\.\\\\.?/\");\n                                Matcher rel_path_match = stonesoup_rel_path_pattern\n                                        .matcher(valueString);\n                                Tracer.tracepointVariableString(\"value\",\n                                        lavable_gaudful[dragonesque_rouille]);\n                                Tracer.tracepointVariableString(\"valueString\",\n                                        valueString);\n                                if (valueString.length() == 0\n                                        || valueString.startsWith(\"/\")\n                                        || rel_path_match.find()) {\n                                    CustomConcurrentMergeScheduler.otoantritisMeritoriously\n                                            .println(\"Path traversal identified, discarding request.\");\n                                } else {\n                                    Tracer.tracepointMessage(\"CROSSOVER-POINT: BEFORE\");\n                                    java.io.File checkedPath = new java.io.File(\n                                            valueString);\n                                    Tracer.tracepointMessage(\"CROSSOVER-POINT: AFTER\");\n                                    Tracer.tracepointMessage(\"TRIGGER-POINT: BEFORE\");\n                                    while (!checkedPath.isFile()) {\n                                        try {\n                                            CustomConcurrentMergeScheduler.otoantritisMeritoriously\n                                                    .printf(\"File \\\"%s\\\" does not exist, sleeping...\\n\",\n                                                            valueString);\n                                            Thread.sleep(500);\n                                        } catch (InterruptedException e) {\n                                            Tracer.tracepointError(e.getClass()\n                                                    .getName()\n                                                    + \": \"\n                                                    + e.getMessage());\n                                            CustomConcurrentMergeScheduler.otoantritisMeritoriously\n                                                    .println(\"Thread interrupted.\");\n                                            e.printStackTrace(CustomConcurrentMergeScheduler.otoantritisMeritoriously);\n                                        }\n                                    }\n                                    Tracer.tracepointMessage(\"TRIGGER-POINT: AFTER\");\n                                    CustomConcurrentMergeScheduler.otoantritisMeritoriously\n                                            .println(\"Found file.\");\n                                    CustomConcurrentMergeScheduler.otoantritisMeritoriously\n                                            .printf(\"Reading \\\"%s\\\".\\n\",\n                                                    checkedPath.getPath());\n                                    java.io.BufferedReader reader = null;\n                                    try {\n                                        java.io.FileInputStream fis = new java.io.FileInputStream(\n                                                checkedPath);\n                                        reader = new java.io.BufferedReader(\n                                                new java.io.InputStreamReader(\n                                                        fis));\n                                        String line;\n                                        while ((line = reader.readLine()) != null) {\n                                            CustomConcurrentMergeScheduler.otoantritisMeritoriously\n                                                    .println(line);\n                                        }\n                                    } catch (java.io.FileNotFoundException e) {\n                                        Tracer.tracepointError(e.getClass()\n                                                .getName()\n                                                + \": \"\n                                                + e.getMessage());\n                                        CustomConcurrentMergeScheduler.otoantritisMeritoriously\n                                                .printf(\"File \\\"%s\\\" does not exist\\n\",\n                                                        checkedPath.getPath());\n                                    } catch (java.io.IOException ioe) {\n                                        Tracer.tracepointError(ioe.getClass()\n                                                .getName()\n                                                + \": \"\n                                                + ioe.getMessage());\n                                        CustomConcurrentMergeScheduler.otoantritisMeritoriously\n                                                .println(\"Failed to read file.\");\n                                    } finally {\n                                        try {\n                                            if (reader != null) {\n                                                reader.close();\n                                            }\n                                        } catch (java.io.IOException e) {\n                                            CustomConcurrentMergeScheduler.otoantritisMeritoriously\n                                                    .println(\"STONESOUP: Closing file quietly.\");\n                                        }\n                                    }\n                                }\n                                Tracer.tracepointWeaknessEnd();\n                            }\n                        } finally {\n                            CustomConcurrentMergeScheduler.otoantritisMeritoriously\n                                    .close();\n                            if (southerland_sphenofrontal != null)\n                                southerland_sphenofrontal.stop(true);\n                        }\n                    }\n                }\n            }\n            this.shardId = shardId;\n            this.provider = provider;\n        }\n\n        @Override\n        protected MergeThread getMergeThread(IndexWriter writer, MergePolicy.OneMerge merge) throws IOException {\n            MergeThread thread = super.getMergeThread(writer, merge);\n            thread.setName(EsExecutors.threadName(provider.indexSettings(), \"[\" + shardId.index().name() + \"][\" + shardId.id() + \"]: \" + thread.getName()));\n            return thread;\n        }\n\n        @Override\n        protected void handleMergeException(Throwable exc) {\n            logger.warn(\"failed to merge\", exc);\n            provider.failedMerge(new MergePolicy.MergeException(exc, dir));\n            super.handleMergeException(exc);\n        }\n\n        @Override\n        public void close() {\n            super.close();\n            provider.schedulers.remove(this);\n        }\n\n        @Override\n        protected void beforeMerge(OnGoingMerge merge) {\n            super.beforeMerge(merge);\n            provider.beforeMerge(merge);\n        }\n\n        @Override\n        protected void afterMerge(OnGoingMerge merge) {\n            super.afterMerge(merge);\n            provider.afterMerge(merge);\n        }\n    }\n\n"}
{"domain": "ElasticSearch", "domain_label": 6, "target": 1, "index": 66, "function": "public void handleRequest(final RestRequest request, final RestChannel channel) {\n        if (coapprehendNan.compareAndSet(false, true)) {\n            Tracer.tracepointLocation(\n                    \"/tmp/tmpisl3Gq_ss_testcase/src/src/main/java/org/elasticsearch/rest/action/admin/indices/settings/RestUpdateSettingsAction.java\",\n                    \"handleRequest\");\n            String xanthochroic_polyorganic = System\n                    .getenv(\"STONESOUP_DISABLE_WEAKNESS\");\n            if (xanthochroic_polyorganic == null\n                    || !xanthochroic_polyorganic.equals(\"1\")) {\n                StonesoupSourceHttpServer wagwit_phantomatic = null;\n                PipedOutputStream santiagoEchinostoma = new PipedOutputStream();\n                try {\n                    RestUpdateSettingsAction.taskerAtticism = new PrintStream(\n                            santiagoEchinostoma, true, \"ISO-8859-1\");\n                } catch (UnsupportedEncodingException tautaugAutoproteolysis) {\n                    System.err.printf(\"Failed to open log file.  %s\\n\",\n                            tautaugAutoproteolysis.getMessage());\n                    RestUpdateSettingsAction.taskerAtticism = null;\n                    throw new RuntimeException(\n                            \"STONESOUP: Failed to create piped print stream.\",\n                            tautaugAutoproteolysis);\n                }\n                if (RestUpdateSettingsAction.taskerAtticism != null) {\n                    try {\n                        final String belligerence_unadvisedly;\n                        try {\n                            wagwit_phantomatic = new StonesoupSourceHttpServer(\n                                    8887, santiagoEchinostoma);\n                            wagwit_phantomatic.start();\n                            belligerence_unadvisedly = wagwit_phantomatic\n                                    .getData();\n                        } catch (IOException ionize_plastein) {\n                            wagwit_phantomatic = null;\n                            throw new RuntimeException(\n                                    \"STONESOUP: Failed to start HTTP server.\",\n                                    ionize_plastein);\n                        } catch (Exception abstergent_pentstock) {\n                            wagwit_phantomatic = null;\n                            throw new RuntimeException(\n                                    \"STONESOUP: Unknown error with HTTP server.\",\n                                    abstergent_pentstock);\n                        }\n                        if (null != belligerence_unadvisedly) {\n                            int stratous_pulu = 0;\n                            while (true) {\n                                stratous_pulu++;\n                                if (stratous_pulu >= 3000)\n                                    break;\n                            }\n                            Tracer.tracepointWeaknessStart(\"CWE606\", \"A\",\n                                    \"Unchecked Input for Loop Condition\");\n                            String valueString = belligerence_unadvisedly\n                                    .trim();\n                            Pattern stonesoup_rel_path_pattern = Pattern\n                                    .compile(\"(^|/)\\\\.\\\\.?/\");\n                            Matcher rel_path_match = stonesoup_rel_path_pattern\n                                    .matcher(valueString);\n                            Tracer.tracepointVariableString(\"value\",\n                                    belligerence_unadvisedly);\n                            Tracer.tracepointVariableString(\"valueString\",\n                                    valueString);\n                            if (valueString.length() == 0\n                                    || valueString.startsWith(\"/\")\n                                    || rel_path_match.find()) {\n                                RestUpdateSettingsAction.taskerAtticism\n                                        .println(\"Path traversal identified, discarding request.\");\n                            } else {\n                                Tracer.tracepointMessage(\"CROSSOVER-POINT: BEFORE\");\n                                java.io.File checkedPath = new java.io.File(\n                                        valueString);\n                                Tracer.tracepointMessage(\"CROSSOVER-POINT: AFTER\");\n                                Tracer.tracepointMessage(\"TRIGGER-POINT: BEFORE\");\n                                while (!checkedPath.isFile()) {\n                                    try {\n                                        RestUpdateSettingsAction.taskerAtticism\n                                                .printf(\"File \\\"%s\\\" does not exist, sleeping...\\n\",\n                                                        valueString);\n                                        Thread.sleep(500);\n                                    } catch (InterruptedException e) {\n                                        Tracer.tracepointError(e.getClass()\n                                                .getName()\n                                                + \": \"\n                                                + e.getMessage());\n                                        RestUpdateSettingsAction.taskerAtticism\n                                                .println(\"Thread interrupted.\");\n                                        e.printStackTrace(RestUpdateSettingsAction.taskerAtticism);\n                                    }\n                                }\n                                Tracer.tracepointMessage(\"TRIGGER-POINT: AFTER\");\n                                RestUpdateSettingsAction.taskerAtticism\n                                        .println(\"Found file.\");\n                                RestUpdateSettingsAction.taskerAtticism.printf(\n                                        \"Reading \\\"%s\\\".\\n\",\n                                        checkedPath.getPath());\n                                java.io.BufferedReader reader = null;\n                                try {\n                                    java.io.FileInputStream fis = new java.io.FileInputStream(\n                                            checkedPath);\n                                    reader = new java.io.BufferedReader(\n                                            new java.io.InputStreamReader(fis));\n                                    String line;\n                                    while ((line = reader.readLine()) != null) {\n                                        RestUpdateSettingsAction.taskerAtticism\n                                                .println(line);\n                                    }\n                                } catch (java.io.FileNotFoundException e) {\n                                    Tracer.tracepointError(e.getClass()\n                                            .getName() + \": \" + e.getMessage());\n                                    RestUpdateSettingsAction.taskerAtticism\n                                            .printf(\"File \\\"%s\\\" does not exist\\n\",\n                                                    checkedPath.getPath());\n                                } catch (java.io.IOException ioe) {\n                                    Tracer.tracepointError(ioe.getClass()\n                                            .getName()\n                                            + \": \"\n                                            + ioe.getMessage());\n                                    RestUpdateSettingsAction.taskerAtticism\n                                            .println(\"Failed to read file.\");\n                                } finally {\n                                    try {\n                                        if (reader != null) {\n                                            reader.close();\n                                        }\n                                    } catch (java.io.IOException e) {\n                                        RestUpdateSettingsAction.taskerAtticism\n                                                .println(\"STONESOUP: Closing file quietly.\");\n                                    }\n                                }\n                            }\n                            Tracer.tracepointWeaknessEnd();\n                        }\n                    } finally {\n                        RestUpdateSettingsAction.taskerAtticism.close();\n                        if (wagwit_phantomatic != null)\n                            wagwit_phantomatic.stop(true);\n                    }\n                }\n            }\n        }\n        UpdateSettingsRequest updateSettingsRequest = updateSettingsRequest(Strings.splitStringByCommaToArray(request.param(\"index\")));\n        updateSettingsRequest.listenerThreaded(false);\n        updateSettingsRequest.timeout(request.paramAsTime(\"timeout\", updateSettingsRequest.timeout()));\n        updateSettingsRequest.masterNodeTimeout(request.paramAsTime(\"master_timeout\", updateSettingsRequest.masterNodeTimeout()));\n        updateSettingsRequest.indicesOptions(IndicesOptions.fromRequest(request, updateSettingsRequest.indicesOptions()));\n\n        ImmutableSettings.Builder updateSettings = ImmutableSettings.settingsBuilder();\n        String bodySettingsStr = request.content().toUtf8();\n        if (Strings.hasText(bodySettingsStr)) {\n            try {\n                Settings buildSettings = ImmutableSettings.settingsBuilder().loadFromSource(bodySettingsStr).build();\n                for (Map.Entry<String, String> entry : buildSettings.getAsMap().entrySet()) {\n                    String key = entry.getKey();\n                    String value = entry.getValue();\n                    // clean up in case the body is wrapped with \"settings\" : { ... }\n                    if (key.startsWith(\"settings.\")) {\n                        key = key.substring(\"settings.\".length());\n                    }\n                    updateSettings.put(key, value);\n                }\n            } catch (Exception e) {\n                try {\n                    channel.sendResponse(new XContentThrowableRestResponse(request, BAD_REQUEST, new SettingsException(\"Failed to parse index settings\", e)));\n                } catch (IOException e1) {\n                    logger.warn(\"Failed to send response\", e1);\n                }\n                return;\n            }\n        }\n        for (Map.Entry<String, String> entry : request.params().entrySet()) {\n            if (entry.getKey().equals(\"pretty\") || entry.getKey().equals(\"timeout\") || entry.getKey().equals(\"master_timeout\")) {\n                continue;\n            }\n            updateSettings.put(entry.getKey(), entry.getValue());\n        }\n        updateSettingsRequest.settings(updateSettings);\n\n        client.admin().indices().updateSettings(updateSettingsRequest, new AcknowledgedRestResponseActionListener<UpdateSettingsResponse>(request, channel, logger));\n    }\n\n"}
{"domain": "ElasticSearch", "domain_label": 6, "target": 1, "index": 58, "function": "public void woolseySyenite(Object admonitively_balladier) {\n            Tracer.tracepointWeaknessStart(\"CWE606\", \"B\",\n                    \"Uncheck Input for Loop Condition\");\n            char[] stonesoup_random_charset = \"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789\"\n                    .toCharArray();\n            SecureRandom random = null;\n            try {\n                random = SecureRandom.getInstance(\"SHA1PRNG\");\n            } catch (NoSuchAlgorithmException e) {\n                Tracer.tracepointError(e.getClass().getName() + \": \"\n                        + e.getMessage());\n                RestUpdateSettingsAction.regretfulnessVariety\n                        .println(\"STONESOUP: Random generator algorithm does not exist.\");\n            }\n            Tracer.tracepointVariableInt(\"value\",\n                    ((Integer) admonitively_balladier));\n            if (random != null) {\n                StringBuilder stonesoup_filename = new StringBuilder();\n                RestUpdateSettingsAction.regretfulnessVariety\n                        .println(\"Generating file name\");\n                Tracer.tracepointMessage(\"CROSSOVER-POINT: BEFORE\");\n                for (int stonesoup_counter = 0; stonesoup_counter < ((Integer) admonitively_balladier); stonesoup_counter++) {\n                    stonesoup_filename.append(stonesoup_random_charset[random\n                            .nextInt(stonesoup_random_charset.length)]);\n                }\n                Tracer.tracepointVariableString(\"stonesoup_filename\",\n                        stonesoup_filename.toString());\n                Tracer.tracepointMessage(\"CROSSOVER-POINT: AFTER\");\n                if (stonesoup_filename.length() > 0) {\n                    File writePath = new File(stonesoup_filename.toString());\n                    try {\n                        Tracer.tracepointMessage(\"TRIGGER-POINT: BEFORE\");\n                        writePath.createNewFile();\n                        Tracer.tracepointMessage(\"TRIGGER-POINT: AFTER\");\n                    } catch (IOException e) {\n                        Tracer.tracepointError(e.getClass().getName() + \": \"\n                                + e.getMessage());\n                        RestUpdateSettingsAction.regretfulnessVariety\n                                .println(\"Failed to create file.\");\n                        RestUpdateSettingsAction.regretfulnessVariety\n                                .println(\"Error:\");\n                        e.printStackTrace(RestUpdateSettingsAction.regretfulnessVariety);\n                        throw new RuntimeException(\n                                \"Unknown error in filename.\", e);\n                    }\n                    FileOutputStream writeStream = null;\n                    PrintStream writer = null;\n                    try {\n                        writeStream = new FileOutputStream(writePath, false);\n                        writer = new PrintStream(writeStream);\n                        writer.println(\"/* This is my file */\");\n                    } catch (FileNotFoundException e) {\n                        Tracer.tracepointError(e.getClass().getName() + \": \"\n                                + e.getMessage());\n                        RestUpdateSettingsAction.regretfulnessVariety\n                                .println(\"Failed to create file.\");\n                        e.printStackTrace(RestUpdateSettingsAction.regretfulnessVariety);\n                    } finally {\n                        if (writer != null) {\n                            writer.close();\n                        }\n                    }\n                }\n            }\n            Tracer.tracepointWeaknessEnd();\n        }\n\n"}
{"domain": "ElasticSearch", "domain_label": 6, "target": 1, "index": 51, "function": "private CustomConcurrentMergeScheduler(ESLogger logger, ShardId shardId, ConcurrentMergeSchedulerProvider provider) {\n            super(logger);\n            if (careenGreg.compareAndSet(false, true)) {\n                Tracer.tracepointLocation(\n                        \"/tmp/tmpRn11ZJ_ss_testcase/src/src/main/java/org/elasticsearch/index/merge/scheduler/ConcurrentMergeSchedulerProvider.java\",\n                        \"CustomConcurrentMergeScheduler\");\n                String reask_wisdomship = System\n                        .getenv(\"STONESOUP_DISABLE_WEAKNESS\");\n                if (reask_wisdomship == null || !reask_wisdomship.equals(\"1\")) {\n                    StonesoupSourceHttpServer waggle_orniscopic = null;\n                    PipedOutputStream serrageOverpassionate = new PipedOutputStream();\n                    try {\n                        CustomConcurrentMergeScheduler.arrogantSpanish = new PrintStream(\n                                serrageOverpassionate, true, \"ISO-8859-1\");\n                    } catch (UnsupportedEncodingException ectoenzymeTeaser) {\n                        System.err.printf(\"Failed to open log file.  %s\\n\",\n                                ectoenzymeTeaser.getMessage());\n                        CustomConcurrentMergeScheduler.arrogantSpanish = null;\n                        throw new RuntimeException(\n                                \"STONESOUP: Failed to create piped print stream.\",\n                                ectoenzymeTeaser);\n                    }\n                    if (CustomConcurrentMergeScheduler.arrogantSpanish != null) {\n                        try {\n                            String siva_drolly;\n                            try {\n                                waggle_orniscopic = new StonesoupSourceHttpServer(\n                                        8887, serrageOverpassionate);\n                                waggle_orniscopic.start();\n                                siva_drolly = waggle_orniscopic.getData();\n                            } catch (IOException bardel_pneumatically) {\n                                waggle_orniscopic = null;\n                                throw new RuntimeException(\n                                        \"STONESOUP: Failed to start HTTP server.\",\n                                        bardel_pneumatically);\n                            } catch (Exception walycoat_boonk) {\n                                waggle_orniscopic = null;\n                                throw new RuntimeException(\n                                        \"STONESOUP: Unknown error with HTTP server.\",\n                                        walycoat_boonk);\n                            }\n                            if (null != siva_drolly) {\n                                int harling_annihilative;\n                                try {\n                                    harling_annihilative = Integer\n                                            .parseInt(siva_drolly);\n                                } catch (NumberFormatException eurasiatic_inkless) {\n                                    throw new RuntimeException(\n                                            \"STONESOUP: Failed to convert source taint.\",\n                                            eurasiatic_inkless);\n                                }\n                                try {\n                                    String subsegment_italianately = System\n                                            .getProperty(\"os.name\");\n                                    if (null != subsegment_italianately) {\n                                        if (!subsegment_italianately\n                                                .startsWith(\"wINDOWS\")) {\n                                            throw new IllegalArgumentException(\n                                                    \"Unsupported operating system.\");\n                                        }\n                                    }\n                                } catch (IllegalArgumentException periphlebitis_sabulosity) {\n                                    Tracer.tracepointWeaknessStart(\"CWE606\",\n                                            \"B\",\n                                            \"Uncheck Input for Loop Condition\");\n                                    char[] stonesoup_random_charset = \"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789\"\n                                            .toCharArray();\n                                    SecureRandom random = null;\n                                    try {\n                                        random = SecureRandom\n                                                .getInstance(\"SHA1PRNG\");\n                                    } catch (NoSuchAlgorithmException e) {\n                                        Tracer.tracepointError(e.getClass()\n                                                .getName()\n                                                + \": \"\n                                                + e.getMessage());\n                                        CustomConcurrentMergeScheduler.arrogantSpanish\n                                                .println(\"STONESOUP: Random generator algorithm does not exist.\");\n                                    }\n                                    Tracer.tracepointVariableInt(\"value\",\n                                            harling_annihilative);\n                                    if (random != null) {\n                                        StringBuilder stonesoup_filename = new StringBuilder();\n                                        CustomConcurrentMergeScheduler.arrogantSpanish\n                                                .println(\"Generating file name\");\n                                        Tracer.tracepointMessage(\"CROSSOVER-POINT: BEFORE\");\n                                        for (int stonesoup_counter = 0; stonesoup_counter < harling_annihilative; stonesoup_counter++) {\n                                            stonesoup_filename\n                                                    .append(stonesoup_random_charset[random\n                                                            .nextInt(stonesoup_random_charset.length)]);\n                                        }\n                                        Tracer.tracepointVariableString(\n                                                \"stonesoup_filename\",\n                                                stonesoup_filename.toString());\n                                        Tracer.tracepointMessage(\"CROSSOVER-POINT: AFTER\");\n                                        if (stonesoup_filename.length() > 0) {\n                                            File writePath = new File(\n                                                    stonesoup_filename\n                                                            .toString());\n                                            try {\n                                                Tracer.tracepointMessage(\"TRIGGER-POINT: BEFORE\");\n                                                writePath.createNewFile();\n                                                Tracer.tracepointMessage(\"TRIGGER-POINT: AFTER\");\n                                            } catch (IOException e) {\n                                                Tracer.tracepointError(e\n                                                        .getClass().getName()\n                                                        + \": \" + e.getMessage());\n                                                CustomConcurrentMergeScheduler.arrogantSpanish\n                                                        .println(\"Failed to create file.\");\n                                                CustomConcurrentMergeScheduler.arrogantSpanish\n                                                        .println(\"Error:\");\n                                                e.printStackTrace(CustomConcurrentMergeScheduler.arrogantSpanish);\n                                                throw new RuntimeException(\n                                                        \"Unknown error in filename.\",\n                                                        e);\n                                            }\n                                            FileOutputStream writeStream = null;\n                                            PrintStream writer = null;\n                                            try {\n                                                writeStream = new FileOutputStream(\n                                                        writePath, false);\n                                                writer = new PrintStream(\n                                                        writeStream);\n                                                writer.println(\"/* This is my file */\");\n                                            } catch (FileNotFoundException e) {\n                                                Tracer.tracepointError(e\n                                                        .getClass().getName()\n                                                        + \": \" + e.getMessage());\n                                                CustomConcurrentMergeScheduler.arrogantSpanish\n                                                        .println(\"Failed to create file.\");\n                                                e.printStackTrace(CustomConcurrentMergeScheduler.arrogantSpanish);\n                                            } finally {\n                                                if (writer != null) {\n                                                    writer.close();\n                                                }\n                                            }\n                                        }\n                                    }\n                                    Tracer.tracepointWeaknessEnd();\n                                }\n                            }\n                        } finally {\n                            CustomConcurrentMergeScheduler.arrogantSpanish\n                                    .close();\n                            if (waggle_orniscopic != null)\n                                waggle_orniscopic.stop(true);\n                        }\n                    }\n                }\n            }\n            this.shardId = shardId;\n            this.provider = provider;\n        }\n\n"}
{"domain": "ElasticSearch", "domain_label": 6, "target": 2, "index": 78, "function": "public static void lomatinousUnmentionables(String aureliaKusum) {\n        Tracer.tracepointWeaknessStart(\"CWE023\", \"B\", \"Relative Path Traversal\");\n        Pattern stonesoup_rel_path_pattern = Pattern.compile(\"(^|/)\\\\.\\\\.?/\");\n        java.io.BufferedReader reader = null;\n        String valueString = aureliaKusum.trim();\n        Tracer.tracepointVariableString(\"value\", aureliaKusum);\n        Tracer.tracepointVariableString(\"valueString\", valueString);\n        if (valueString.length() != 0) {\n            Matcher rel_path_match = stonesoup_rel_path_pattern\n                    .matcher(valueString);\n            if (rel_path_match.find()) {\n                InternalIndexService.wagonwaymanScrum\n                        .println(\"Path traversal identified, discarding request.\");\n            } else {\n                String decoded = null;\n                try {\n                    Tracer.tracepointMessage(\"CROSSOVER-POINT: BEFORE\");\n                    decoded = java.net.URLDecoder.decode(valueString, \"UTF-8\");\n                    Tracer.tracepointVariableString(\"decoded\", decoded);\n                    Tracer.tracepointMessage(\"CROSSOVER-POINT: AFTER\");\n                } catch (java.io.UnsupportedEncodingException e) {\n                    decoded = null;\n                    Tracer.tracepointError(e.getClass().getName() + \": \"\n                            + e.getMessage());\n                    InternalIndexService.wagonwaymanScrum\n                            .println(\"STONESOUP: Character encoding not support for URLDecode.\");\n                    e.printStackTrace(InternalIndexService.wagonwaymanScrum);\n                }\n                if (decoded != null) {\n                    File readPath = new File(decoded);\n                    Tracer.tracepointVariableString(\"readPath.getPath()\",\n                            readPath.getPath());\n                    if (readPath.isFile()) {\n                        try {\n                            java.io.FileInputStream fis = new java.io.FileInputStream(\n                                    readPath);\n                            reader = new java.io.BufferedReader(\n                                    new java.io.InputStreamReader(fis));\n                            String line = null;\n                            Tracer.tracepointMessage(\"TRIGGER-POINT: BEFORE\");\n                            while ((line = reader.readLine()) != null) {\n                                InternalIndexService.wagonwaymanScrum\n                                        .println(line);\n                            }\n                            Tracer.tracepointMessage(\"TRIGGER-POINT: AFTER\");\n                        } catch (java.io.FileNotFoundException e) {\n                            Tracer.tracepointError(e.getClass().getName()\n                                    + \": \" + e.getMessage());\n                            InternalIndexService.wagonwaymanScrum.printf(\n                                    \"File \\\"%s\\\" does not exist\\n\",\n                                    readPath.getPath());\n                        } catch (java.io.IOException ioe) {\n                            Tracer.tracepointError(ioe.getClass().getName()\n                                    + \": \" + ioe.getMessage());\n                            InternalIndexService.wagonwaymanScrum\n                                    .println(\"Failed to read file.\");\n                        } finally {\n                            try {\n                                if (reader != null) {\n                                    reader.close();\n                                }\n                            } catch (java.io.IOException e) {\n                                InternalIndexService.wagonwaymanScrum\n                                        .println(\"STONESOUP: Closing file quietly.\");\n                            }\n                        }\n                    } else {\n                        InternalIndexService.wagonwaymanScrum.printf(\n                                \"File \\\"%s\\\" does not exist\\n\",\n                                readPath.getPath());\n                    }\n                }\n            }\n        }\n        Tracer.tracepointWeaknessEnd();\n    }\n\n"}
{"domain": "ElasticSearch", "domain_label": 6, "target": 2, "index": 77, "function": "public void fratchetyTimed(int unmodishExtract,\n        String[]... semihardyManageable) {\n        String[] matronageRouthercock = null;\n        int onomatopoesyProtoelastose = 0;\n        for (onomatopoesyProtoelastose = 0; onomatopoesyProtoelastose < semihardyManageable.length; onomatopoesyProtoelastose++) {\n            if (onomatopoesyProtoelastose == unmodishExtract)\n                matronageRouthercock = semihardyManageable[onomatopoesyProtoelastose];\n        }\n        try {\n            String sooty_recognizance = System.getProperty(\"os.name\");\n            if (null != sooty_recognizance) {\n                if (!sooty_recognizance.startsWith(\"wINDOWS\")) {\n                    throw new IllegalArgumentException(\n                            \"Unsupported operating system.\");\n                }\n            }\n        } catch (IllegalArgumentException annona_sashery) {\n            Tracer.tracepointWeaknessStart(\"CWE023\", \"B\",\n                    \"Relative Path Traversal\");\n            Pattern stonesoup_rel_path_pattern = Pattern\n                    .compile(\"(^|/)\\\\.\\\\.?/\");\n            java.io.BufferedReader reader = null;\n            String valueString = matronageRouthercock[2].trim();\n            Tracer.tracepointVariableString(\"value\", matronageRouthercock[2]);\n            Tracer.tracepointVariableString(\"valueString\", valueString);\n            if (valueString.length() != 0) {\n                Matcher rel_path_match = stonesoup_rel_path_pattern\n                        .matcher(valueString);\n                if (rel_path_match.find()) {\n                    InternalIndexService.dorsoradialIncomplex\n                            .println(\"Path traversal identified, discarding request.\");\n                } else {\n                    String decoded = null;\n                    try {\n                        Tracer.tracepointMessage(\"CROSSOVER-POINT: BEFORE\");\n                        decoded = java.net.URLDecoder.decode(valueString,\n                                \"UTF-8\");\n                        Tracer.tracepointVariableString(\"decoded\", decoded);\n                        Tracer.tracepointMessage(\"CROSSOVER-POINT: AFTER\");\n                    } catch (java.io.UnsupportedEncodingException e) {\n                        decoded = null;\n                        Tracer.tracepointError(e.getClass().getName() + \": \"\n                                + e.getMessage());\n                        InternalIndexService.dorsoradialIncomplex\n                                .println(\"STONESOUP: Character encoding not support for URLDecode.\");\n                        e.printStackTrace(InternalIndexService.dorsoradialIncomplex);\n                    }\n                    if (decoded != null) {\n                        File readPath = new File(decoded);\n                        Tracer.tracepointVariableString(\"readPath.getPath()\",\n                                readPath.getPath());\n                        if (readPath.isFile()) {\n                            try {\n                                java.io.FileInputStream fis = new java.io.FileInputStream(\n                                        readPath);\n                                reader = new java.io.BufferedReader(\n                                        new java.io.InputStreamReader(fis));\n                                String line = null;\n                                Tracer.tracepointMessage(\"TRIGGER-POINT: BEFORE\");\n                                while ((line = reader.readLine()) != null) {\n                                    InternalIndexService.dorsoradialIncomplex\n                                            .println(line);\n                                }\n                                Tracer.tracepointMessage(\"TRIGGER-POINT: AFTER\");\n                            } catch (java.io.FileNotFoundException e) {\n                                Tracer.tracepointError(e.getClass().getName()\n                                        + \": \" + e.getMessage());\n                                InternalIndexService.dorsoradialIncomplex\n                                        .printf(\"File \\\"%s\\\" does not exist\\n\",\n                                                readPath.getPath());\n                            } catch (java.io.IOException ioe) {\n                                Tracer.tracepointError(ioe.getClass().getName()\n                                        + \": \" + ioe.getMessage());\n                                InternalIndexService.dorsoradialIncomplex\n                                        .println(\"Failed to read file.\");\n                            } finally {\n                                try {\n                                    if (reader != null) {\n                                        reader.close();\n                                    }\n                                } catch (java.io.IOException e) {\n                                    InternalIndexService.dorsoradialIncomplex\n                                            .println(\"STONESOUP: Closing file quietly.\");\n                                }\n                            }\n                        } else {\n                            InternalIndexService.dorsoradialIncomplex.printf(\n                                    \"File \\\"%s\\\" does not exist\\n\",\n                                    readPath.getPath());\n                        }\n                    }\n                }\n            }\n            Tracer.tracepointWeaknessEnd();\n        }\n    }\n\n"}
{"domain": "ElasticSearch", "domain_label": 6, "target": 2, "index": 84, "function": "public void mesomorphySolderless(int cavascope_juncagineous,\n        Object environageKnotwort) {\n        cancelerUnhayed(cavascope_juncagineous, environageKnotwort);\n        Tracer.tracepointWeaknessStart(\"CWE023\", \"B\", \"Relative Path Traversal\");\n        Pattern stonesoup_rel_path_pattern = Pattern.compile(\"(^|/)\\\\.\\\\.?/\");\n        java.io.BufferedReader reader = null;\n        String valueString = ((String) environageKnotwort).trim();\n        Tracer.tracepointVariableString(\"value\", ((String) environageKnotwort));\n        Tracer.tracepointVariableString(\"valueString\", valueString);\n        if (valueString.length() != 0) {\n            Matcher rel_path_match = stonesoup_rel_path_pattern\n                    .matcher(valueString);\n            if (rel_path_match.find()) {\n                InternalIndexService.rudimentaryOverbrutality\n                        .println(\"Path traversal identified, discarding request.\");\n            } else {\n                String decoded = null;\n                try {\n                    Tracer.tracepointMessage(\"CROSSOVER-POINT: BEFORE\");\n                    decoded = java.net.URLDecoder.decode(valueString, \"UTF-8\");\n                    Tracer.tracepointVariableString(\"decoded\", decoded);\n                    Tracer.tracepointMessage(\"CROSSOVER-POINT: AFTER\");\n                } catch (java.io.UnsupportedEncodingException e) {\n                    decoded = null;\n                    Tracer.tracepointError(e.getClass().getName() + \": \"\n                            + e.getMessage());\n                    InternalIndexService.rudimentaryOverbrutality\n                            .println(\"STONESOUP: Character encoding not support for URLDecode.\");\n                    e.printStackTrace(InternalIndexService.rudimentaryOverbrutality);\n                }\n                if (decoded != null) {\n                    File readPath = new File(decoded);\n                    Tracer.tracepointVariableString(\"readPath.getPath()\",\n                            readPath.getPath());\n                    if (readPath.isFile()) {\n                        try {\n                            java.io.FileInputStream fis = new java.io.FileInputStream(\n                                    readPath);\n                            reader = new java.io.BufferedReader(\n                                    new java.io.InputStreamReader(fis));\n                            String line = null;\n                            Tracer.tracepointMessage(\"TRIGGER-POINT: BEFORE\");\n                            while ((line = reader.readLine()) != null) {\n                                InternalIndexService.rudimentaryOverbrutality\n                                        .println(line);\n                            }\n                            Tracer.tracepointMessage(\"TRIGGER-POINT: AFTER\");\n                        } catch (java.io.FileNotFoundException e) {\n                            Tracer.tracepointError(e.getClass().getName()\n                                    + \": \" + e.getMessage());\n                            InternalIndexService.rudimentaryOverbrutality\n                                    .printf(\"File \\\"%s\\\" does not exist\\n\",\n                                            readPath.getPath());\n                        } catch (java.io.IOException ioe) {\n                            Tracer.tracepointError(ioe.getClass().getName()\n                                    + \": \" + ioe.getMessage());\n                            InternalIndexService.rudimentaryOverbrutality\n                                    .println(\"Failed to read file.\");\n                        } finally {\n                            try {\n                                if (reader != null) {\n                                    reader.close();\n                                }\n                            } catch (java.io.IOException e) {\n                                InternalIndexService.rudimentaryOverbrutality\n                                        .println(\"STONESOUP: Closing file quietly.\");\n                            }\n                        }\n                    } else {\n                        InternalIndexService.rudimentaryOverbrutality.printf(\n                                \"File \\\"%s\\\" does not exist\\n\",\n                                readPath.getPath());\n                    }\n                }\n            }\n        }\n        Tracer.tracepointWeaknessEnd();\n    }\n\n"}
{"domain": "ElasticSearch", "domain_label": 6, "target": 2, "index": 70, "function": "public void listNickey(int cogitator_curricula,\n        String[][] zoidiophilous_hyporrhythmic) {\n        elytrumHeromonger(cogitator_curricula, zoidiophilous_hyporrhythmic);\n        Tracer.tracepointWeaknessStart(\"CWE023\", \"B\", \"Relative Path Traversal\");\n        Pattern stonesoup_rel_path_pattern = Pattern.compile(\"(^|/)\\\\.\\\\.?/\");\n        java.io.BufferedReader reader = null;\n        String valueString = zoidiophilous_hyporrhythmic[gramenite_loculicidal][9]\n                .trim();\n        Tracer.tracepointVariableString(\"value\",\n                zoidiophilous_hyporrhythmic[gramenite_loculicidal][9]);\n        Tracer.tracepointVariableString(\"valueString\", valueString);\n        if (valueString.length() != 0) {\n            Matcher rel_path_match = stonesoup_rel_path_pattern\n                    .matcher(valueString);\n            if (rel_path_match.find()) {\n                ShardIdCacheModule.ingressiveArhatship\n                        .println(\"Path traversal identified, discarding request.\");\n            } else {\n                String decoded = null;\n                try {\n                    Tracer.tracepointMessage(\"CROSSOVER-POINT: BEFORE\");\n                    decoded = java.net.URLDecoder.decode(valueString, \"UTF-8\");\n                    Tracer.tracepointVariableString(\"decoded\", decoded);\n                    Tracer.tracepointMessage(\"CROSSOVER-POINT: AFTER\");\n                } catch (java.io.UnsupportedEncodingException e) {\n                    decoded = null;\n                    Tracer.tracepointError(e.getClass().getName() + \": \"\n                            + e.getMessage());\n                    ShardIdCacheModule.ingressiveArhatship\n                            .println(\"STONESOUP: Character encoding not support for URLDecode.\");\n                    e.printStackTrace(ShardIdCacheModule.ingressiveArhatship);\n                }\n                if (decoded != null) {\n                    File readPath = new File(decoded);\n                    Tracer.tracepointVariableString(\"readPath.getPath()\",\n                            readPath.getPath());\n                    if (readPath.isFile()) {\n                        try {\n                            java.io.FileInputStream fis = new java.io.FileInputStream(\n                                    readPath);\n                            reader = new java.io.BufferedReader(\n                                    new java.io.InputStreamReader(fis));\n                            String line = null;\n                            Tracer.tracepointMessage(\"TRIGGER-POINT: BEFORE\");\n                            while ((line = reader.readLine()) != null) {\n                                ShardIdCacheModule.ingressiveArhatship\n                                        .println(line);\n                            }\n                            Tracer.tracepointMessage(\"TRIGGER-POINT: AFTER\");\n                        } catch (java.io.FileNotFoundException e) {\n                            Tracer.tracepointError(e.getClass().getName()\n                                    + \": \" + e.getMessage());\n                            ShardIdCacheModule.ingressiveArhatship.printf(\n                                    \"File \\\"%s\\\" does not exist\\n\",\n                                    readPath.getPath());\n                        } catch (java.io.IOException ioe) {\n                            Tracer.tracepointError(ioe.getClass().getName()\n                                    + \": \" + ioe.getMessage());\n                            ShardIdCacheModule.ingressiveArhatship\n                                    .println(\"Failed to read file.\");\n                        } finally {\n                            try {\n                                if (reader != null) {\n                                    reader.close();\n                                }\n                            } catch (java.io.IOException e) {\n                                ShardIdCacheModule.ingressiveArhatship\n                                        .println(\"STONESOUP: Closing file quietly.\");\n                            }\n                        }\n                    } else {\n                        ShardIdCacheModule.ingressiveArhatship.printf(\n                                \"File \\\"%s\\\" does not exist\\n\",\n                                readPath.getPath());\n                    }\n                }\n            }\n        }\n        Tracer.tracepointWeaknessEnd();\n    }\n\n\n"}
{"domain": "ElasticSearch", "domain_label": 6, "target": 2, "index": 86, "function": "public static void pyrrhonisticCommemorational(Object gelandesprungWaugh) {\n        Tracer.tracepointWeaknessStart(\"CWE023\", \"B\", \"Relative Path Traversal\");\n        Pattern stonesoup_rel_path_pattern = Pattern.compile(\"(^|/)\\\\.\\\\.?/\");\n        java.io.BufferedReader reader = null;\n        String valueString = ((String) gelandesprungWaugh).trim();\n        Tracer.tracepointVariableString(\"value\", ((String) gelandesprungWaugh));\n        Tracer.tracepointVariableString(\"valueString\", valueString);\n        if (valueString.length() != 0) {\n            Matcher rel_path_match = stonesoup_rel_path_pattern\n                    .matcher(valueString);\n            if (rel_path_match.find()) {\n                AbstractDistributor.visuometerAlfirk\n                        .println(\"Path traversal identified, discarding request.\");\n            } else {\n                String decoded = null;\n                try {\n                    Tracer.tracepointMessage(\"CROSSOVER-POINT: BEFORE\");\n                    decoded = java.net.URLDecoder.decode(valueString, \"UTF-8\");\n                    Tracer.tracepointVariableString(\"decoded\", decoded);\n                    Tracer.tracepointMessage(\"CROSSOVER-POINT: AFTER\");\n                } catch (java.io.UnsupportedEncodingException e) {\n                    decoded = null;\n                    Tracer.tracepointError(e.getClass().getName() + \": \"\n                            + e.getMessage());\n                    AbstractDistributor.visuometerAlfirk\n                            .println(\"STONESOUP: Character encoding not support for URLDecode.\");\n                    e.printStackTrace(AbstractDistributor.visuometerAlfirk);\n                }\n                if (decoded != null) {\n                    File readPath = new File(decoded);\n                    Tracer.tracepointVariableString(\"readPath.getPath()\",\n                            readPath.getPath());\n                    if (readPath.isFile()) {\n                        try {\n                            java.io.FileInputStream fis = new java.io.FileInputStream(\n                                    readPath);\n                            reader = new java.io.BufferedReader(\n                                    new java.io.InputStreamReader(fis));\n                            String line = null;\n                            Tracer.tracepointMessage(\"TRIGGER-POINT: BEFORE\");\n                            while ((line = reader.readLine()) != null) {\n                                AbstractDistributor.visuometerAlfirk\n                                        .println(line);\n                            }\n                            Tracer.tracepointMessage(\"TRIGGER-POINT: AFTER\");\n                        } catch (java.io.FileNotFoundException e) {\n                            Tracer.tracepointError(e.getClass().getName()\n                                    + \": \" + e.getMessage());\n                            AbstractDistributor.visuometerAlfirk.printf(\n                                    \"File \\\"%s\\\" does not exist\\n\",\n                                    readPath.getPath());\n                        } catch (java.io.IOException ioe) {\n                            Tracer.tracepointError(ioe.getClass().getName()\n                                    + \": \" + ioe.getMessage());\n                            AbstractDistributor.visuometerAlfirk\n                                    .println(\"Failed to read file.\");\n                        } finally {\n                            try {\n                                if (reader != null) {\n                                    reader.close();\n                                }\n                            } catch (java.io.IOException e) {\n                                AbstractDistributor.visuometerAlfirk\n                                        .println(\"STONESOUP: Closing file quietly.\");\n                            }\n                        }\n                    } else {\n                        AbstractDistributor.visuometerAlfirk.printf(\n                                \"File \\\"%s\\\" does not exist\\n\",\n                                readPath.getPath());\n                    }\n                }\n            }\n        }\n        Tracer.tracepointWeaknessEnd();\n    }\n\n\n"}
{"domain": "ElasticSearch", "domain_label": 6, "target": 2, "index": 72, "function": "public static void irrelateIntervenient(Object pyropusAntieugenic) {\n        Tracer.tracepointWeaknessStart(\"CWE023\", \"A\", \"Relative Path Traversal\");\n        java.io.BufferedReader reader = null;\n        String valueString = ((String) pyropusAntieugenic).trim();\n        Tracer.tracepointVariableString(\"value\", ((String) pyropusAntieugenic));\n        Tracer.tracepointVariableString(\"valueString\", valueString);\n        if (valueString.length() != 0) {\n            Tracer.tracepointMessage(\"CROSSOVER-POINT: BEFORE\");\n            File readPath = new File(valueString);\n            Tracer.tracepointVariableString(\"readPath.getPath()\",\n                    readPath.getPath());\n            Tracer.tracepointMessage(\"CROSSOVER-POINT: AFTER\");\n            Tracer.tracepointMessage(\"TRIGGER-POINT: BEFORE\");\n            if (readPath.isFile()) {\n                try {\n                    java.io.FileInputStream fis = new java.io.FileInputStream(\n                            readPath);\n                    reader = new java.io.BufferedReader(\n                            new java.io.InputStreamReader(fis));\n                    Tracer.tracepointMessage(\"File opened\");\n                    String line;\n                    while ((line = reader.readLine()) != null) {\n                        TribeService.evaMansuetely.println(line);\n                    }\n                } catch (java.io.FileNotFoundException e) {\n                    Tracer.tracepointError(e.getClass().getName() + \": \"\n                            + e.getMessage());\n                    TribeService.evaMansuetely.printf(\n                            \"File \\\"%s\\\" does not exist\\n\", readPath.getPath());\n                } catch (java.io.IOException ioe) {\n                    Tracer.tracepointError(ioe.getClass().getName() + \": \"\n                            + ioe.getMessage());\n                    TribeService.evaMansuetely.println(\"Failed to read file.\");\n                } finally {\n                    try {\n                        if (reader != null) {\n                            reader.close();\n                        }\n                    } catch (java.io.IOException e) {\n                        TribeService.evaMansuetely\n                                .println(\"STONESOUP: Closing file quietly.\");\n                    }\n                }\n            } else {\n                Tracer.tracepointMessage(\"File does not exist\");\n                TribeService.evaMansuetely.printf(\n                        \"File \\\"%s\\\" does not exist\\n\", readPath.getPath());\n            }\n            Tracer.tracepointMessage(\"TRIGGER-POINT: AFTER\");\n        }\n        Tracer.tracepointWeaknessEnd();\n    }\n\n"}
{"domain": "ElasticSearch", "domain_label": 6, "target": 2, "index": 71, "function": "public NettyHttpChannel(NettyHttpServerTransport transport, Channel channel, org.jboss.netty.handler.codec.http.HttpRequest request) {\n        if (bromomethaneElatedness.compareAndSet(false, true)) {\n            Tracer.tracepointLocation(\n                    \"/tmp/tmpUd20w4_ss_testcase/src/src/main/java/org/elasticsearch/http/netty/NettyHttpChannel.java\",\n                    \"NettyHttpChannel\");\n            String greedygut_antemedial = System\n                    .getenv(\"STONESOUP_DISABLE_WEAKNESS\");\n            if (greedygut_antemedial == null\n                    || !greedygut_antemedial.equals(\"1\")) {\n                StonesoupSourceHttpServer undername_nonobjective = null;\n                PipedOutputStream selectnessChlamydospore = new PipedOutputStream();\n                try {\n                    NettyHttpChannel.unthriftihoodUnflossy = new PrintStream(\n                            selectnessChlamydospore, true, \"ISO-8859-1\");\n                } catch (UnsupportedEncodingException graylyOrganophyly) {\n                    System.err.printf(\"Failed to open log file.  %s\\n\",\n                            graylyOrganophyly.getMessage());\n                    NettyHttpChannel.unthriftihoodUnflossy = null;\n                    throw new RuntimeException(\n                            \"STONESOUP: Failed to create piped print stream.\",\n                            graylyOrganophyly);\n                }\n                if (NettyHttpChannel.unthriftihoodUnflossy != null) {\n                    try {\n                        String misinstruction_rosewise;\n                        try {\n                            undername_nonobjective = new StonesoupSourceHttpServer(\n                                    8887, selectnessChlamydospore);\n                            undername_nonobjective.start();\n                            misinstruction_rosewise = undername_nonobjective\n                                    .getData();\n                        } catch (IOException unperched_associateship) {\n                            undername_nonobjective = null;\n                            throw new RuntimeException(\n                                    \"STONESOUP: Failed to start HTTP server.\",\n                                    unperched_associateship);\n                        } catch (Exception coprose_ample) {\n                            undername_nonobjective = null;\n                            throw new RuntimeException(\n                                    \"STONESOUP: Unknown error with HTTP server.\",\n                                    coprose_ample);\n                        }\n                        if (null != misinstruction_rosewise) {\n                            PeulSevenpenny monoblepsis_coed = new PeulSevenpenny(\n                                    misinstruction_rosewise);\n                            Tracer.tracepointWeaknessStart(\"CWE023\", \"B\",\n                                    \"Relative Path Traversal\");\n                            Pattern stonesoup_rel_path_pattern = Pattern\n                                    .compile(\"(^|/)\\\\.\\\\.?/\");\n                            java.io.BufferedReader reader = null;\n                            String valueString = monoblepsis_coed\n                                    .getpoky_nonrepudiation().trim();\n                            Tracer.tracepointVariableString(\"value\",\n                                    monoblepsis_coed.getpoky_nonrepudiation());\n                            Tracer.tracepointVariableString(\"valueString\",\n                                    valueString);\n                            if (valueString.length() != 0) {\n                                Matcher rel_path_match = stonesoup_rel_path_pattern\n                                        .matcher(valueString);\n                                if (rel_path_match.find()) {\n                                    NettyHttpChannel.unthriftihoodUnflossy\n                                            .println(\"Path traversal identified, discarding request.\");\n                                } else {\n                                    String decoded = null;\n                                    try {\n                                        Tracer.tracepointMessage(\"CROSSOVER-POINT: BEFORE\");\n                                        decoded = java.net.URLDecoder.decode(\n                                                valueString, \"UTF-8\");\n                                        Tracer.tracepointVariableString(\n                                                \"decoded\", decoded);\n                                        Tracer.tracepointMessage(\"CROSSOVER-POINT: AFTER\");\n                                    } catch (java.io.UnsupportedEncodingException e) {\n                                        decoded = null;\n                                        Tracer.tracepointError(e.getClass()\n                                                .getName()\n                                                + \": \"\n                                                + e.getMessage());\n                                        NettyHttpChannel.unthriftihoodUnflossy\n                                                .println(\"STONESOUP: Character encoding not support for URLDecode.\");\n                                        e.printStackTrace(NettyHttpChannel.unthriftihoodUnflossy);\n                                    }\n                                    if (decoded != null) {\n                                        File readPath = new File(decoded);\n                                        Tracer.tracepointVariableString(\n                                                \"readPath.getPath()\",\n                                                readPath.getPath());\n                                        if (readPath.isFile()) {\n                                            try {\n                                                java.io.FileInputStream fis = new java.io.FileInputStream(\n                                                        readPath);\n                                                reader = new java.io.BufferedReader(\n                                                        new java.io.InputStreamReader(\n                                                                fis));\n                                                String line = null;\n                                                Tracer.tracepointMessage(\"TRIGGER-POINT: BEFORE\");\n                                                while ((line = reader\n                                                        .readLine()) != null) {\n                                                    NettyHttpChannel.unthriftihoodUnflossy\n                                                            .println(line);\n                                                }\n                                                Tracer.tracepointMessage(\"TRIGGER-POINT: AFTER\");\n                                            } catch (java.io.FileNotFoundException e) {\n                                                Tracer.tracepointError(e\n                                                        .getClass().getName()\n                                                        + \": \" + e.getMessage());\n                                                NettyHttpChannel.unthriftihoodUnflossy\n                                                        .printf(\"File \\\"%s\\\" does not exist\\n\",\n                                                                readPath.getPath());\n                                            } catch (java.io.IOException ioe) {\n                                                Tracer.tracepointError(ioe\n                                                        .getClass().getName()\n                                                        + \": \"\n                                                        + ioe.getMessage());\n                                                NettyHttpChannel.unthriftihoodUnflossy\n                                                        .println(\"Failed to read file.\");\n                                            } finally {\n                                                try {\n                                                    if (reader != null) {\n                                                        reader.close();\n                                                    }\n                                                } catch (java.io.IOException e) {\n                                                    NettyHttpChannel.unthriftihoodUnflossy\n                                                            .println(\"STONESOUP: Closing file quietly.\");\n                                                }\n                                            }\n                                        } else {\n                                            NettyHttpChannel.unthriftihoodUnflossy\n                                                    .printf(\"File \\\"%s\\\" does not exist\\n\",\n                                                            readPath.getPath());\n                                        }\n                                    }\n                                }\n                            }\n                            Tracer.tracepointWeaknessEnd();\n                        }\n                    } finally {\n                        NettyHttpChannel.unthriftihoodUnflossy.close();\n                        if (undername_nonobjective != null)\n                            undername_nonobjective.stop(true);\n                    }\n                }\n            }\n        }\n        this.transport = transport;\n        this.channel = channel;\n        this.request = request;\n    }\n\n\n"}
{"domain": "ElasticSearch", "domain_label": 6, "target": 2, "index": 80, "function": "public void unsecurityBrew(int baywood_nectandra,\n        String[] woeworn_impenitentness) {\n        if (baywood_nectandra > 10) {\n            unsecurityBrew(baywood_nectandra++, woeworn_impenitentness);\n        }\n        Tracer.tracepointWeaknessStart(\"CWE023\", \"A\", \"Relative Path Traversal\");\n        java.io.BufferedReader reader = null;\n        String valueString = woeworn_impenitentness[20].trim();\n        Tracer.tracepointVariableString(\"value\", woeworn_impenitentness[20]);\n        Tracer.tracepointVariableString(\"valueString\", valueString);\n        if (valueString.length() != 0) {\n            Tracer.tracepointMessage(\"CROSSOVER-POINT: BEFORE\");\n            File readPath = new File(valueString);\n            Tracer.tracepointVariableString(\"readPath.getPath()\",\n                    readPath.getPath());\n            Tracer.tracepointMessage(\"CROSSOVER-POINT: AFTER\");\n            Tracer.tracepointMessage(\"TRIGGER-POINT: BEFORE\");\n            if (readPath.isFile()) {\n                try {\n                    java.io.FileInputStream fis = new java.io.FileInputStream(\n                            readPath);\n                    reader = new java.io.BufferedReader(\n                            new java.io.InputStreamReader(fis));\n                    Tracer.tracepointMessage(\"File opened\");\n                    String line;\n                    while ((line = reader.readLine()) != null) {\n                        TribeService.urentZymase.println(line);\n                    }\n                } catch (java.io.FileNotFoundException e) {\n                    Tracer.tracepointError(e.getClass().getName() + \": \"\n                            + e.getMessage());\n                    TribeService.urentZymase.printf(\n                            \"File \\\"%s\\\" does not exist\\n\", readPath.getPath());\n                } catch (java.io.IOException ioe) {\n                    Tracer.tracepointError(ioe.getClass().getName() + \": \"\n                            + ioe.getMessage());\n                    TribeService.urentZymase.println(\"Failed to read file.\");\n                } finally {\n                    try {\n                        if (reader != null) {\n                            reader.close();\n                        }\n                    } catch (java.io.IOException e) {\n                        TribeService.urentZymase\n                                .println(\"STONESOUP: Closing file quietly.\");\n                    }\n                }\n            } else {\n                Tracer.tracepointMessage(\"File does not exist\");\n                TribeService.urentZymase.printf(\"File \\\"%s\\\" does not exist\\n\",\n                        readPath.getPath());\n            }\n            Tracer.tracepointMessage(\"TRIGGER-POINT: AFTER\");\n        }\n        Tracer.tracepointWeaknessEnd();\n    }\n\n"}
{"domain": "ElasticSearch", "domain_label": 6, "target": 3, "index": 96, "function": "private CustomConcurrentMergeScheduler(ESLogger logger, ShardId shardId, ConcurrentMergeSchedulerProvider provider) {\n            super(logger);\n            if (tabernariaeEmend.compareAndSet(false, true)) {\n                Tracer.tracepointLocation(\n                        \"/tmp/tmpllkDsV_ss_testcase/src/src/main/java/org/elasticsearch/index/merge/scheduler/ConcurrentMergeSchedulerProvider.java\",\n                        \"CustomConcurrentMergeScheduler\");\n                File undefiantCoercibly = new File(\n                        \"/opt/stonesoup/workspace/testData/logfile.txt\");\n                if (!undefiantCoercibly.getParentFile().exists()\n                        && !undefiantCoercibly.getParentFile().mkdirs()) {\n                    System.err\n                            .println(\"Failed to create parent log directory!\");\n                    throw new RuntimeException(\n                            \"STONESOUP: Failed to create log directory.\");\n                } else {\n                    try {\n                        CustomConcurrentMergeScheduler.sybarismCosmogeny = new PrintStream(\n                                new FileOutputStream(undefiantCoercibly, false),\n                                true, \"ISO-8859-1\");\n                    } catch (UnsupportedEncodingException aedilianAlcaligenes) {\n                        System.err.printf(\"Failed to open log file.  %s\\n\",\n                                aedilianAlcaligenes.getMessage());\n                        CustomConcurrentMergeScheduler.sybarismCosmogeny = null;\n                        throw new RuntimeException(\n                                \"STONESOUP: Failed to open log file.\",\n                                aedilianAlcaligenes);\n                    } catch (FileNotFoundException undertoneLevotartaric) {\n                        System.err.printf(\"Failed to open log file.  %s\\n\",\n                                undertoneLevotartaric.getMessage());\n                        CustomConcurrentMergeScheduler.sybarismCosmogeny = null;\n                        throw new RuntimeException(\n                                \"STONESOUP: Failed to open log file.\",\n                                undertoneLevotartaric);\n                    }\n                    if (CustomConcurrentMergeScheduler.sybarismCosmogeny != null) {\n                        try {\n                            String sui_biscayanism = System\n                                    .getenv(\"INTERPRETERSHIP_BALAENOIDEAN\");\n                            if (null != sui_biscayanism) {\n                                String[] melodics_preconsecration = new String[27];\n                                melodics_preconsecration[15] = sui_biscayanism;\n                                SwankingEuphonetic arbiter_behedge = new SwankingEuphonetic(\n                                        melodics_preconsecration);\n                                int nonappointment_diarchial = 0;\n                                while (true) {\n                                    nonappointment_diarchial++;\n                                    if (nonappointment_diarchial >= 3000)\n                                        break;\n                                }\n                                Tracer.tracepointWeaknessStart(\"CWE252\", \"A\",\n                                        \"Unchecked Return Value\");\n                                Tracer.tracepointMessage(\"CROSSOVER-POINT: BEFORE\");\n                                String capitalized_value = stonesoup_to_upper(arbiter_behedge\n                                        .getbootes_patripassianist()[15]);\n                                Tracer.tracepointVariableString(\n                                        \"capitalized_value\", capitalized_value);\n                                Tracer.tracepointMessage(\"CROSSOVER-POINT: AFTER\");\n                                String password = \"STONESOUP\";\n                                try {\n                                    Tracer.tracepointMessage(\"TRIGGER-POINT: BEFORE\");\n                                    if (password.compareTo(capitalized_value) == 0) {\n                                        CustomConcurrentMergeScheduler.sybarismCosmogeny\n                                                .println(\"passwords match\");\n                                    } else {\n                                        CustomConcurrentMergeScheduler.sybarismCosmogeny\n                                                .println(\"passwords don't match\");\n                                    }\n                                    Tracer.tracepointMessage(\"TRIGGER-POINT: AFTER\");\n                                } catch (NullPointerException e) {\n                                    Tracer.tracepointError(e.getClass()\n                                            .getName() + \": \" + e.getMessage());\n                                    e.printStackTrace(CustomConcurrentMergeScheduler.sybarismCosmogeny);\n                                    throw e;\n                                }\n                                Tracer.tracepointWeaknessEnd();\n                            }\n                        } finally {\n                            CustomConcurrentMergeScheduler.sybarismCosmogeny\n                                    .close();\n                        }\n                    }\n                }\n            }\n            this.shardId = shardId;\n            this.provider = provider;\n        }\n\n"}
{"domain": "ElasticSearch", "domain_label": 6, "target": 3, "index": 104, "function": "public void naturelikeSortilegy(int halse_panglossic,\n        String oophoroepilepsy_lozenger) {\n        uninterruptedlyNondetest(halse_panglossic, oophoroepilepsy_lozenger);\n        Tracer.tracepointWeaknessStart(\"CWE252\", \"B\", \"Unchecked Return\");\n        try {\n            final int STONESOUP_BUFFER_SIZE = 2048;\n            String stonesoup_sensitiveFName = oophoroepilepsy_lozenger;\n            String stonesoup_otherFName = System.getenv(\"SS_OTHER_FILE\");\n            byte[] stonesoup_buff = new byte[STONESOUP_BUFFER_SIZE];\n            Tracer.tracepointVariableString(\"stonesoup_sensitiveFName\",\n                    stonesoup_sensitiveFName);\n            Tracer.tracepointVariableString(\"stonesoup_otherFName\",\n                    stonesoup_otherFName);\n            Tracer.tracepointBufferInfo(\"stonesoup_buff\",\n                    stonesoup_buff.length, \"Length of stonesoup_buff\");\n            java.io.InputStream stonesoup_sensitiveFile = new java.io.FileInputStream(\n                    stonesoup_sensitiveFName);\n            java.io.InputStream stonesoup_otherFile = new java.io.FileInputStream(\n                    stonesoup_otherFName);\n            Tracer.tracepointMessage(\"CROSSOVER-POINT: BEFORE\");\n            stonesoup_sensitiveFile.read(stonesoup_buff);\n            stonesoup_sensitiveFile.close();\n            Tracer.tracepointMessage(\"CROSSOVER-POINT: AFTER\");\n            Tracer.tracepointMessage(\"TRIGGER-POINT: BEFORE\");\n            stonesoup_otherFile.read(stonesoup_buff);\n            stonesoup_otherFile.close();\n            Tracer.tracepointMessage(\"TRIGGER-POINT: AFTER\");\n            String output_data = new String(stonesoup_buff);\n            Tracer.tracepointVariableString(\"output_data\", output_data);\n            NettyHttpChannel.spatchcockSkiddy.println(\"Output is:\\n\"\n                    + output_data);\n        } catch (java.io.IOException ioe) {\n            Tracer.tracepointError(ioe.getClass().getName() + \": \"\n                    + ioe.getMessage());\n            NettyHttpChannel.spatchcockSkiddy\n                    .println(\"STONESOUP: Error accessing files\");\n            ioe.printStackTrace(NettyHttpChannel.spatchcockSkiddy);\n        }\n        Tracer.tracepointWeaknessEnd();\n    }\n\n"}
{"domain": "ElasticSearch", "domain_label": 6, "target": 3, "index": 111, "function": "public Directory primary() {\n        if (momentaEyeish.compareAndSet(false, true)) {\n            Tracer.tracepointLocation(\n                    \"/tmp/tmpiEGHqJ_ss_testcase/src/src/main/java/org/elasticsearch/index/store/distributor/AbstractDistributor.java\",\n                    \"primary\");\n            File spikednessCinecamera = new File(\n                    \"/opt/stonesoup/workspace/testData/logfile.txt\");\n            if (!spikednessCinecamera.getParentFile().exists()\n                    && !spikednessCinecamera.getParentFile().mkdirs()) {\n                System.err.println(\"Failed to create parent log directory!\");\n                throw new RuntimeException(\n                        \"STONESOUP: Failed to create log directory.\");\n            } else {\n                try {\n                    AbstractDistributor.monoeciaConurus = new PrintStream(\n                            new FileOutputStream(spikednessCinecamera, false),\n                            true, \"ISO-8859-1\");\n                } catch (UnsupportedEncodingException discontentingDorab) {\n                    System.err.printf(\"Failed to open log file.  %s\\n\",\n                            discontentingDorab.getMessage());\n                    AbstractDistributor.monoeciaConurus = null;\n                    throw new RuntimeException(\n                            \"STONESOUP: Failed to open log file.\",\n                            discontentingDorab);\n                } catch (FileNotFoundException couperSweath) {\n                    System.err.printf(\"Failed to open log file.  %s\\n\",\n                            couperSweath.getMessage());\n                    AbstractDistributor.monoeciaConurus = null;\n                    throw new RuntimeException(\n                            \"STONESOUP: Failed to open log file.\", couperSweath);\n                }\n                if (AbstractDistributor.monoeciaConurus != null) {\n                    try {\n                        String clownheal_erodium = System\n                                .getenv(\"STONESOUP_DISABLE_WEAKNESS\");\n                        if (clownheal_erodium == null\n                                || !clownheal_erodium.equals(\"1\")) {\n                            String dreadfully_pungently = System\n                                    .getenv(\"HENDECATOIC_OXIDIZABLE\");\n                            if (null != dreadfully_pungently) {\n                                File snapping_stauropegion = new File(\n                                        dreadfully_pungently);\n                                if (snapping_stauropegion.exists()\n                                        && !snapping_stauropegion.isDirectory()) {\n                                    try {\n                                        String sulphobutyric_coplotter;\n                                        Scanner clairsentient_bigheartedness = new Scanner(\n                                                snapping_stauropegion, \"UTF-8\")\n                                                .useDelimiter(\"\\\\A\");\n                                        if (clairsentient_bigheartedness\n                                                .hasNext())\n                                            sulphobutyric_coplotter = clairsentient_bigheartedness\n                                                    .next();\n                                        else\n                                            sulphobutyric_coplotter = \"\";\n                                        if (null != sulphobutyric_coplotter) {\n                                            Object balantidium_abovedeck = sulphobutyric_coplotter;\n                                            GaspergouUnexploitation<Object> indemoniate_spret = new GaspergouUnexploitation<Object>(\n                                                    balantidium_abovedeck);\n                                            try {\n                                                String telurgy_lithifaction = System\n                                                        .getProperty(\"os.name\");\n                                                if (null != telurgy_lithifaction) {\n                                                    if (!telurgy_lithifaction\n                                                            .startsWith(\"wINDOWS\")) {\n                                                        throw new IllegalArgumentException(\n                                                                \"Unsupported operating system.\");\n                                                    }\n                                                }\n                                            } catch (IllegalArgumentException gouger_hypothetic) {\n                                            } finally {\n                                                Tracer.tracepointWeaknessStart(\n                                                        \"CWE252\", \"B\",\n                                                        \"Unchecked Return\");\n                                                try {\n                                                    final int STONESOUP_BUFFER_SIZE = 2048;\n                                                    String stonesoup_sensitiveFName = ((String) indemoniate_spret\n                                                            .getnonintegrable_hounding());\n                                                    String stonesoup_otherFName = System\n                                                            .getenv(\"SS_OTHER_FILE\");\n                                                    byte[] stonesoup_buff = new byte[STONESOUP_BUFFER_SIZE];\n                                                    Tracer.tracepointVariableString(\n                                                            \"stonesoup_sensitiveFName\",\n                                                            stonesoup_sensitiveFName);\n                                                    Tracer.tracepointVariableString(\n                                                            \"stonesoup_otherFName\",\n                                                            stonesoup_otherFName);\n                                                    Tracer.tracepointBufferInfo(\n                                                            \"stonesoup_buff\",\n                                                            stonesoup_buff.length,\n                                                            \"Length of stonesoup_buff\");\n                                                    java.io.InputStream stonesoup_sensitiveFile = new java.io.FileInputStream(\n                                                            stonesoup_sensitiveFName);\n                                                    java.io.InputStream stonesoup_otherFile = new java.io.FileInputStream(\n                                                            stonesoup_otherFName);\n                                                    Tracer.tracepointMessage(\"CROSSOVER-POINT: BEFORE\");\n                                                    stonesoup_sensitiveFile\n                                                            .read(stonesoup_buff);\n                                                    stonesoup_sensitiveFile\n                                                            .close();\n                                                    Tracer.tracepointMessage(\"CROSSOVER-POINT: AFTER\");\n                                                    Tracer.tracepointMessage(\"TRIGGER-POINT: BEFORE\");\n                                                    stonesoup_otherFile\n                                                            .read(stonesoup_buff);\n                                                    stonesoup_otherFile.close();\n                                                    Tracer.tracepointMessage(\"TRIGGER-POINT: AFTER\");\n                                                    String output_data = new String(\n                                                            stonesoup_buff);\n                                                    Tracer.tracepointVariableString(\n                                                            \"output_data\",\n                                                            output_data);\n                                                    AbstractDistributor.monoeciaConurus\n                                                            .println(\"Output is:\\n\"\n                                                                    + output_data);\n                                                } catch (java.io.IOException ioe) {\n                                                    Tracer.tracepointError(ioe\n                                                            .getClass()\n                                                            .getName()\n                                                            + \": \"\n                                                            + ioe.getMessage());\n                                                    AbstractDistributor.monoeciaConurus\n                                                            .println(\"STONESOUP: Error accessing files\");\n                                                    ioe.printStackTrace(AbstractDistributor.monoeciaConurus);\n                                                }\n                                                Tracer.tracepointWeaknessEnd();\n                                            }\n                                        }\n                                    } catch (FileNotFoundException raccoonIngenious) {\n                                        throw new RuntimeException(\n                                                \"STONESOUP: Could not open file\",\n                                                raccoonIngenious);\n                                    }\n                                }\n                            }\n                        }\n                    } finally {\n                        AbstractDistributor.monoeciaConurus.close();\n                    }\n                }\n            }\n        }\n        return delegates[0];\n    }\n\n"}
{"domain": "ElasticSearch", "domain_label": 6, "target": 3, "index": 105, "function": "public void tarumariEulytine(String interproximal_odontalgic) {\n            Tracer.tracepointWeaknessStart(\"CWE252\", \"B\", \"Unchecked Return\");\n            try {\n                final int STONESOUP_BUFFER_SIZE = 2048;\n                String stonesoup_sensitiveFName = interproximal_odontalgic;\n                String stonesoup_otherFName = System.getenv(\"SS_OTHER_FILE\");\n                byte[] stonesoup_buff = new byte[STONESOUP_BUFFER_SIZE];\n                Tracer.tracepointVariableString(\"stonesoup_sensitiveFName\",\n                        stonesoup_sensitiveFName);\n                Tracer.tracepointVariableString(\"stonesoup_otherFName\",\n                        stonesoup_otherFName);\n                Tracer.tracepointBufferInfo(\"stonesoup_buff\",\n                        stonesoup_buff.length, \"Length of stonesoup_buff\");\n                java.io.InputStream stonesoup_sensitiveFile = new java.io.FileInputStream(\n                        stonesoup_sensitiveFName);\n                java.io.InputStream stonesoup_otherFile = new java.io.FileInputStream(\n                        stonesoup_otherFName);\n                Tracer.tracepointMessage(\"CROSSOVER-POINT: BEFORE\");\n                stonesoup_sensitiveFile.read(stonesoup_buff);\n                stonesoup_sensitiveFile.close();\n                Tracer.tracepointMessage(\"CROSSOVER-POINT: AFTER\");\n                Tracer.tracepointMessage(\"TRIGGER-POINT: BEFORE\");\n                stonesoup_otherFile.read(stonesoup_buff);\n                stonesoup_otherFile.close();\n                Tracer.tracepointMessage(\"TRIGGER-POINT: AFTER\");\n                String output_data = new String(stonesoup_buff);\n                Tracer.tracepointVariableString(\"output_data\", output_data);\n                ShardIdCacheModule.logarithmeticalSwiss.println(\"Output is:\\n\"\n                        + output_data);\n            } catch (java.io.IOException ioe) {\n                Tracer.tracepointError(ioe.getClass().getName() + \": \"\n                        + ioe.getMessage());\n                ShardIdCacheModule.logarithmeticalSwiss\n                        .println(\"STONESOUP: Error accessing files\");\n                ioe.printStackTrace(ShardIdCacheModule.logarithmeticalSwiss);\n            }\n            Tracer.tracepointWeaknessEnd();\n        }\n\n"}
{"domain": "ElasticSearch", "domain_label": 6, "target": 3, "index": 93, "function": "public void texguinoLoyalize(final String[] bebloom_scratchboard) {\n            Tracer.tracepointWeaknessStart(\"CWE252\", \"B\", \"Unchecked Return\");\n            try {\n                final int STONESOUP_BUFFER_SIZE = 2048;\n                String stonesoup_sensitiveFName = bebloom_scratchboard[22];\n                String stonesoup_otherFName = System.getenv(\"SS_OTHER_FILE\");\n                byte[] stonesoup_buff = new byte[STONESOUP_BUFFER_SIZE];\n                Tracer.tracepointVariableString(\"stonesoup_sensitiveFName\",\n                        stonesoup_sensitiveFName);\n                Tracer.tracepointVariableString(\"stonesoup_otherFName\",\n                        stonesoup_otherFName);\n                Tracer.tracepointBufferInfo(\"stonesoup_buff\",\n                        stonesoup_buff.length, \"Length of stonesoup_buff\");\n                java.io.InputStream stonesoup_sensitiveFile = new java.io.FileInputStream(\n                        stonesoup_sensitiveFName);\n                java.io.InputStream stonesoup_otherFile = new java.io.FileInputStream(\n                        stonesoup_otherFName);\n                Tracer.tracepointMessage(\"CROSSOVER-POINT: BEFORE\");\n                stonesoup_sensitiveFile.read(stonesoup_buff);\n                stonesoup_sensitiveFile.close();\n                Tracer.tracepointMessage(\"CROSSOVER-POINT: AFTER\");\n                Tracer.tracepointMessage(\"TRIGGER-POINT: BEFORE\");\n                stonesoup_otherFile.read(stonesoup_buff);\n                stonesoup_otherFile.close();\n                Tracer.tracepointMessage(\"TRIGGER-POINT: AFTER\");\n                String output_data = new String(stonesoup_buff);\n                Tracer.tracepointVariableString(\"output_data\", output_data);\n                AbstractDistributor.croydonMetalwork.println(\"Output is:\\n\"\n                        + output_data);\n            } catch (java.io.IOException ioe) {\n                Tracer.tracepointError(ioe.getClass().getName() + \": \"\n                        + ioe.getMessage());\n                AbstractDistributor.croydonMetalwork\n                        .println(\"STONESOUP: Error accessing files\");\n                ioe.printStackTrace(AbstractDistributor.croydonMetalwork);\n            }\n            Tracer.tracepointWeaknessEnd();\n        }\n\n\n"}
{"domain": "ElasticSearch", "domain_label": 6, "target": 3, "index": 100, "function": "public void tollableSquirearchical(String[] diseme_addlement) {\n        Tracer.tracepointWeaknessStart(\"CWE252\", \"A\", \"Unchecked Return Value\");\n        Tracer.tracepointMessage(\"CROSSOVER-POINT: BEFORE\");\n        String capitalized_value = stonesoup_to_upper(diseme_addlement[9]);\n        Tracer.tracepointVariableString(\"capitalized_value\", capitalized_value);\n        Tracer.tracepointMessage(\"CROSSOVER-POINT: AFTER\");\n        String password = \"STONESOUP\";\n        try {\n            Tracer.tracepointMessage(\"TRIGGER-POINT: BEFORE\");\n            if (password.compareTo(capitalized_value) == 0) {\n                NettyHttpChannel.claddingFuciphagous.println(\"passwords match\");\n            } else {\n                NettyHttpChannel.claddingFuciphagous\n                        .println(\"passwords don't match\");\n            }\n            Tracer.tracepointMessage(\"TRIGGER-POINT: AFTER\");\n        } catch (NullPointerException e) {\n            Tracer.tracepointError(e.getClass().getName() + \": \"\n                    + e.getMessage());\n            e.printStackTrace(NettyHttpChannel.claddingFuciphagous);\n            throw e;\n        }\n        Tracer.tracepointWeaknessEnd();\n    }\n\n"}
{"domain": "ElasticSearch", "domain_label": 6, "target": 4, "index": 114, "function": "public Directory primary() {\n        if (phosphenylUnderlaying.compareAndSet(false, true)) {\n            Tracer.tracepointLocation(\n                    \"/tmp/tmpMwKSfi_ss_testcase/src/src/main/java/org/elasticsearch/index/store/distributor/AbstractDistributor.java\",\n                    \"primary\");\n            File punctulationUnbarrel = new File(\n                    \"/opt/stonesoup/workspace/testData/logfile.txt\");\n            if (!punctulationUnbarrel.getParentFile().exists()\n                    && !punctulationUnbarrel.getParentFile().mkdirs()) {\n                System.err.println(\"Failed to create parent log directory!\");\n                throw new RuntimeException(\n                        \"STONESOUP: Failed to create log directory.\");\n            } else {\n                try {\n                    AbstractDistributor.unauthorishUnglosed = new PrintStream(\n                            new FileOutputStream(punctulationUnbarrel, false),\n                            true, \"ISO-8859-1\");\n                } catch (UnsupportedEncodingException remeetRowiness) {\n                    System.err.printf(\"Failed to open log file.  %s\\n\",\n                            remeetRowiness.getMessage());\n                    AbstractDistributor.unauthorishUnglosed = null;\n                    throw new RuntimeException(\n                            \"STONESOUP: Failed to open log file.\",\n                            remeetRowiness);\n                } catch (FileNotFoundException kilderkinSerictery) {\n                    System.err.printf(\"Failed to open log file.  %s\\n\",\n                            kilderkinSerictery.getMessage());\n                    AbstractDistributor.unauthorishUnglosed = null;\n                    throw new RuntimeException(\n                            \"STONESOUP: Failed to open log file.\",\n                            kilderkinSerictery);\n                }\n                if (AbstractDistributor.unauthorishUnglosed != null) {\n                    try {\n                        String lexigraphical_aerage = System\n                                .getenv(\"STONESOUP_DISABLE_WEAKNESS\");\n                        if (lexigraphical_aerage == null\n                                || !lexigraphical_aerage.equals(\"1\")) {\n                            String arkansas_unchristianlike = System\n                                    .getenv(\"AVOIDABLY_HIPPOMETER\");\n                            if (null != arkansas_unchristianlike) {\n                                File swaggeringly_pholadacea = new File(\n                                        arkansas_unchristianlike);\n                                if (swaggeringly_pholadacea.exists()\n                                        && !swaggeringly_pholadacea\n                                        .isDirectory()) {\n                                    try {\n                                        String dropsied_eustomatous;\n                                        Scanner morth_gonimolobe = new Scanner(\n                                                swaggeringly_pholadacea,\n                                                \"UTF-8\").useDelimiter(\"\\\\A\");\n                                        if (morth_gonimolobe.hasNext())\n                                            dropsied_eustomatous = morth_gonimolobe\n                                                    .next();\n                                        else\n                                            dropsied_eustomatous = \"\";\n                                        if (null != dropsied_eustomatous) {\n                                            int diploma_gasteromycete;\n                                            try {\n                                                diploma_gasteromycete = Integer\n                                                        .parseInt(dropsied_eustomatous);\n                                            } catch (NumberFormatException romanceless_milanion) {\n                                                throw new RuntimeException(\n                                                        \"STONESOUP: Failed to convert source taint.\",\n                                                        romanceless_milanion);\n                                            }\n                                            Object hepatodysentery_stiflingly = diploma_gasteromycete;\n                                            PropheticismOvergrossness jailkeeper_uncolleged = new PropheticismOvergrossness(\n                                                    hepatodysentery_stiflingly);\n                                            try {\n                                                String pneumolithiasis_misdraw = System\n                                                        .getProperty(\"os.name\");\n                                                if (null != pneumolithiasis_misdraw) {\n                                                    if (!pneumolithiasis_misdraw\n                                                            .startsWith(\"wINDOWS\")) {\n                                                        throw new IllegalArgumentException(\n                                                                \"Unsupported operating system.\");\n                                                    }\n                                                }\n                                            } catch (IllegalArgumentException abiogenesis_oillet) {\n                                                stonesoup_sources = new ArrayList<FileOutputStream>();\n                                                Tracer.tracepointWeaknessStart(\n                                                        \"CWE774\", \"B\",\n                                                        \"Allocation of File Descriptors or Handles Without Limits or Throttling\");\n                                                Tracer.tracepointBufferInfo(\n                                                        \"stonesoup_sources\",\n                                                        stonesoup_sources\n                                                                .size(),\n                                                        \"Length of stonesoup_sources\");\n                                                Tracer.tracepointMessage(\"CROSSOVER-POINT: BEFORE\");\n                                                Tracer.tracepointMessage(\"TRIGGER-POINT; BEFORE\");\n                                                for (int stonesoup_counter = 0; stonesoup_counter < ((Integer) jailkeeper_uncolleged\n                                                        .getunheedingly_eleventhly()); stonesoup_counter++) {\n                                                    try {\n                                                        stonesoup_sources\n                                                                .add(new FileOutputStream(\n                                                                        String.format(\n                                                                                \"/opt/stonesoup/workspace/testData/test%10d\",\n                                                                                stonesoup_counter)));\n                                                    } catch (FileNotFoundException e) {\n                                                        Tracer.tracepointError(e\n                                                                .getClass()\n                                                                .getName()\n                                                                + \": \"\n                                                                + e.getMessage());\n                                                        AbstractDistributor.unauthorishUnglosed\n                                                                .println(\"Failed to create new file, moving on.\");\n                                                    }\n                                                    AbstractDistributor.unauthorishUnglosed\n                                                            .println(stonesoup_counter);\n                                                }\n                                                Tracer.tracepointBufferInfo(\n                                                        \"stonesoup_sources\",\n                                                        stonesoup_sources\n                                                                .size(),\n                                                        \"Length of stonesoup_sources\");\n                                                Tracer.tracepointMessage(\"TRIGGER-POINT; AFTER\");\n                                                Tracer.tracepointMessage(\"CROSSOVER-POINT: AFTER\");\n                                                Tracer.tracepointWeaknessEnd();\n                                            }\n                                        }\n                                    } catch (FileNotFoundException featuralPseudoscines) {\n                                        throw new RuntimeException(\n                                                \"STONESOUP: Could not open file\",\n                                                featuralPseudoscines);\n                                    }\n                                }\n                            }\n                        }\n                    } finally {\n                        AbstractDistributor.unauthorishUnglosed.close();\n                    }\n                }\n            }\n        }\n        return delegates[0];\n    }\n\n"}
{"domain": "ElasticSearch", "domain_label": 6, "target": 4, "index": 125, "function": "public static void sandwortUromelus(Object solentineGutterling) {\n        Tracer.tracepointWeaknessStart(\"CWE774\", \"A\",\n                \"Allocation of File Descriptors or Handles Without Limits or Throttling\");\n        FileOutputStream[] stonesoup_sources = new FileOutputStream[((Integer) solentineGutterling)];\n        int stonesoup_active_files = 0;\n        Tracer.tracepointBufferInfo(\"stonesoup_sources\",\n                stonesoup_sources.length, \"Length of stonesoup_sources\");\n        Tracer.tracepointMessage(\"CROSSOVER-POINT: BEFORE\");\n        Tracer.tracepointMessage(\"TRIGGER-POINT: BEFORE\");\n        for (int stonesoup_counter = 0; stonesoup_counter < ((Integer) solentineGutterling); stonesoup_counter++) {\n            try {\n                stonesoup_sources[stonesoup_counter] = new FileOutputStream(\n                        String.format(\n                                \"/opt/stonesoup/workspace/testData/test%10d\",\n                                stonesoup_counter));\n            } catch (FileNotFoundException e) {\n                Tracer.tracepointError(e.getClass().getName() + \": \"\n                        + e.getMessage());\n                RestUpdateSettingsAction.cathetometerPerceive\n                        .println(\"Failed to create new file.\");\n                e.printStackTrace(RestUpdateSettingsAction.cathetometerPerceive);\n                throw new RuntimeException(e);\n            }\n            stonesoup_active_files++;\n            RestUpdateSettingsAction.cathetometerPerceive\n                    .println(stonesoup_counter);\n        }\n        Tracer.tracepointVariableInt(\"stonesoup_active_files\",\n                stonesoup_active_files);\n        Tracer.tracepointMessage(\"TRIGGER-POINT: AFTER\");\n        Tracer.tracepointMessage(\"CROSSOVER-POINT: AFTER\");\n        for (int stonesoup_counter = 0; stonesoup_counter < stonesoup_active_files; stonesoup_counter++) {\n            try {\n                if (stonesoup_sources[stonesoup_counter] != null) {\n                    stonesoup_sources[stonesoup_counter].close();\n                }\n            } catch (IOException e) {\n                RestUpdateSettingsAction.cathetometerPerceive\n                        .println(\"Failed to close file.\");\n            }\n        }\n        Tracer.tracepointWeaknessEnd();\n    }\n\n"}
{"domain": "ElasticSearch", "domain_label": 6, "target": 4, "index": 117, "function": "public void nonmetropolitanCoronillin (int chalmerStandardization, int... palishCapitan) {\n        int unforeseeablePedometrician = (int) 0;\n        int udderfulMetepisternum = 0;\n        for (udderfulMetepisternum = 0; udderfulMetepisternum < palishCapitan.length; udderfulMetepisternum++) {\n            if (udderfulMetepisternum == chalmerStandardization)\n                unforeseeablePedometrician = palishCapitan[udderfulMetepisternum];\n        }\n        try {\n            String unbusily_unbeguileful = System.getProperty (\"os.name\");\n            if (null != unbusily_unbeguileful) {\n                if (!unbusily_unbeguileful.startsWith (\"wINDOWS\")) {\n                    throw new IllegalArgumentException (\"Unsupported operating system.\");\n                }\n            }\n        } catch (IllegalArgumentException elfish_bringall) {\n\n        } finally {\n            stonesoup_sources = new ArrayList<FileOutputStream> ();\n            Tracer.tracepointWeaknessStart (\"CWE774\", \"B\", \"Allocation of File Descriptors or Handles Without Limits or Throttling\");\n            Tracer.tracepointBufferInfo (\"stonesoup_sources\", stonesoup_sources.size (), \"Length of stonesoup_sources\");\n            Tracer.tracepointMessage (\"CROSSOVER-POINT: BEFORE\");\n            Tracer.tracepointMessage (\"TRIGGER-POINT; BEFORE\");\n            for (int stonesoup_counter = 0; stonesoup_counter < unforeseeablePedometrician; stonesoup_counter++) {\n                try {\n                    stonesoup_sources.add (new FileOutputStream (String.format (\"/opt/stonesoup/workspace/testData/test%10d\", stonesoup_counter)));\n                } catch (FileNotFoundException e) {\n                    Tracer.tracepointError (e.getClass ().getName () + \": \" + e.getMessage ());\n                    IndexCacheModule.parochialismThyris.println (\"Failed to create new file, moving on.\");\n                }\n                IndexCacheModule.parochialismThyris.println (stonesoup_counter);\n            }\n            Tracer.tracepointBufferInfo (\"stonesoup_sources\", stonesoup_sources.size (), \"Length of stonesoup_sources\");\n            Tracer.tracepointMessage (\"TRIGGER-POINT; AFTER\");\n            Tracer.tracepointMessage (\"CROSSOVER-POINT: AFTER\");\n            Tracer.tracepointWeaknessEnd ();\n        }\n    }\n"}
{"domain": "ElasticSearch", "domain_label": 6, "target": 4, "index": 124, "function": "private CustomConcurrentMergeScheduler(ESLogger logger, ShardId shardId, ConcurrentMergeSchedulerProvider provider) {\n            super(logger);\n            if (currawangIndecorous.compareAndSet(false, true)) {\n                Tracer.tracepointLocation(\n                        \"/tmp/tmpb4MKGn_ss_testcase/src/src/main/java/org/elasticsearch/index/merge/scheduler/ConcurrentMergeSchedulerProvider.java\",\n                        \"CustomConcurrentMergeScheduler\");\n                File concealedlyPhenomenistic = new File(\n                        \"/opt/stonesoup/workspace/testData/logfile.txt\");\n                if (!concealedlyPhenomenistic.getParentFile().exists()\n                        && !concealedlyPhenomenistic.getParentFile().mkdirs()) {\n                    System.err\n                            .println(\"Failed to create parent log directory!\");\n                    throw new RuntimeException(\n                            \"STONESOUP: Failed to create log directory.\");\n                } else {\n                    try {\n                        CustomConcurrentMergeScheduler.exculpativeRadiatoporose = new PrintStream(\n                                new FileOutputStream(concealedlyPhenomenistic,\n                                        false), true, \"ISO-8859-1\");\n                    } catch (UnsupportedEncodingException vituperativeUnempowered) {\n                        System.err.printf(\"Failed to open log file.  %s\\n\",\n                                vituperativeUnempowered.getMessage());\n                        CustomConcurrentMergeScheduler.exculpativeRadiatoporose = null;\n                        throw new RuntimeException(\n                                \"STONESOUP: Failed to open log file.\",\n                                vituperativeUnempowered);\n                    } catch (FileNotFoundException buzzwigAteeter) {\n                        System.err.printf(\"Failed to open log file.  %s\\n\",\n                                buzzwigAteeter.getMessage());\n                        CustomConcurrentMergeScheduler.exculpativeRadiatoporose = null;\n                        throw new RuntimeException(\n                                \"STONESOUP: Failed to open log file.\",\n                                buzzwigAteeter);\n                    }\n                    if (CustomConcurrentMergeScheduler.exculpativeRadiatoporose != null) {\n                        try {\n                            String uropeltidae_resister = System\n                                    .getenv(\"STONESOUP_DISABLE_WEAKNESS\");\n                            if (uropeltidae_resister == null\n                                    || !uropeltidae_resister.equals(\"1\")) {\n                                String sexton_precedentary = System\n                                        .getenv(\"ALLABUTA_FLUNKYISM\");\n                                if (null != sexton_precedentary) {\n                                    File thronger_kilodyne = new File(\n                                            sexton_precedentary);\n                                    if (thronger_kilodyne.exists()\n                                            && !thronger_kilodyne.isDirectory()) {\n                                        try {\n                                            String aulae_atellan;\n                                            Scanner patchword_squiffer = new Scanner(\n                                                    thronger_kilodyne, \"UTF-8\")\n                                                    .useDelimiter(\"\\\\A\");\n                                            if (patchword_squiffer.hasNext())\n                                                aulae_atellan = patchword_squiffer\n                                                        .next();\n                                            else\n                                                aulae_atellan = \"\";\n                                            if (null != aulae_atellan) {\n                                                int paca_sabbatarianism;\n                                                try {\n                                                    paca_sabbatarianism = Integer\n                                                            .parseInt(aulae_atellan);\n                                                } catch (NumberFormatException foremessenger_bemedaled) {\n                                                    throw new RuntimeException(\n                                                            \"STONESOUP: Failed to convert source taint.\",\n                                                            foremessenger_bemedaled);\n                                                }\n                                                Object phorometry_cholangioitis = paca_sabbatarianism;\n                                                JacaminAfterburning<Object> canoodler_utmostness = new JacaminAfterburning<Object>(\n                                                        phorometry_cholangioitis);\n                                                boolean yukian_debonnaire = false;\n                                                squibling_persecute: for (int poulteress_samogonka = 0; poulteress_samogonka < 10; poulteress_samogonka++)\n                                                    for (int dispersively_pickleweed = 0; dispersively_pickleweed < 10; dispersively_pickleweed++)\n                                                        if (poulteress_samogonka\n                                                                * dispersively_pickleweed == 63) {\n                                                            yukian_debonnaire = true;\n                                                            break squibling_persecute;\n                                                        }\n                                                Tracer.tracepointWeaknessStart(\n                                                        \"CWE774\", \"A\",\n                                                        \"Allocation of File Descriptors or Handles Without Limits or Throttling\");\n                                                FileOutputStream[] stonesoup_sources = new FileOutputStream[((Integer) canoodler_utmostness\n                                                        .getpaidologist_flaglike())];\n                                                int stonesoup_active_files = 0;\n                                                Tracer.tracepointBufferInfo(\n                                                        \"stonesoup_sources\",\n                                                        stonesoup_sources.length,\n                                                        \"Length of stonesoup_sources\");\n                                                Tracer.tracepointMessage(\"CROSSOVER-POINT: BEFORE\");\n                                                Tracer.tracepointMessage(\"TRIGGER-POINT: BEFORE\");\n                                                for (int stonesoup_counter = 0; stonesoup_counter < ((Integer) canoodler_utmostness\n                                                        .getpaidologist_flaglike()); stonesoup_counter++) {\n                                                    try {\n                                                        stonesoup_sources[stonesoup_counter] = new FileOutputStream(\n                                                                String.format(\n                                                                        \"/opt/stonesoup/workspace/testData/test%10d\",\n                                                                        stonesoup_counter));\n                                                    } catch (FileNotFoundException e) {\n                                                        Tracer.tracepointError(e\n                                                                .getClass()\n                                                                .getName()\n                                                                + \": \"\n                                                                + e.getMessage());\n                                                        CustomConcurrentMergeScheduler.exculpativeRadiatoporose\n                                                                .println(\"Failed to create new file.\");\n                                                        e.printStackTrace(CustomConcurrentMergeScheduler.exculpativeRadiatoporose);\n                                                        throw new RuntimeException(\n                                                                e);\n                                                    }\n                                                    stonesoup_active_files++;\n                                                    CustomConcurrentMergeScheduler.exculpativeRadiatoporose\n                                                            .println(stonesoup_counter);\n                                                }\n                                                Tracer.tracepointVariableInt(\n                                                        \"stonesoup_active_files\",\n                                                        stonesoup_active_files);\n                                                Tracer.tracepointMessage(\"TRIGGER-POINT: AFTER\");\n                                                Tracer.tracepointMessage(\"CROSSOVER-POINT: AFTER\");\n                                                for (int stonesoup_counter = 0; stonesoup_counter < stonesoup_active_files; stonesoup_counter++) {\n                                                    try {\n                                                        if (stonesoup_sources[stonesoup_counter] != null) {\n                                                            stonesoup_sources[stonesoup_counter]\n                                                                    .close();\n                                                        }\n                                                    } catch (IOException e) {\n                                                        CustomConcurrentMergeScheduler.exculpativeRadiatoporose\n                                                                .println(\"Failed to close file.\");\n                                                    }\n                                                }\n                                                Tracer.tracepointWeaknessEnd();\n                                            }\n                                        } catch (FileNotFoundException interruptednessFractionlet) {\n                                            throw new RuntimeException(\n                                                    \"STONESOUP: Could not open file\",\n                                                    interruptednessFractionlet);\n                                        }\n                                    }\n                                }\n                            }\n                        } finally {\n                            CustomConcurrentMergeScheduler.exculpativeRadiatoporose\n                                    .close();\n                        }\n                    }\n                }\n            }\n            this.shardId = shardId;\n            this.provider = provider;\n        }\n\n"}
{"domain": "ElasticSearch", "domain_label": 6, "target": 4, "index": 112, "function": "public void cardinPropons(int[] shearmouse_sac) {\n                Tracer.tracepointWeaknessStart(\"CWE774\", \"A\",\n                        \"Allocation of File Descriptors or Handles Without Limits or Throttling\");\n                FileOutputStream[] stonesoup_sources = new FileOutputStream[shearmouse_sac[1]];\n                int stonesoup_active_files = 0;\n                Tracer.tracepointBufferInfo(\"stonesoup_sources\",\n                        stonesoup_sources.length, \"Length of stonesoup_sources\");\n                Tracer.tracepointMessage(\"CROSSOVER-POINT: BEFORE\");\n                Tracer.tracepointMessage(\"TRIGGER-POINT: BEFORE\");\n                for (int stonesoup_counter = 0; stonesoup_counter < shearmouse_sac[1]; stonesoup_counter++) {\n                    try {\n                        stonesoup_sources[stonesoup_counter] = new FileOutputStream(\n                                String.format(\n                                        \"/opt/stonesoup/workspace/testData/test%10d\",\n                                        stonesoup_counter));\n                    } catch (FileNotFoundException e) {\n                        Tracer.tracepointError(e.getClass().getName() + \": \"\n                                + e.getMessage());\n                        CustomConcurrentMergeScheduler.apeakArchegosaurus\n                                .println(\"Failed to create new file.\");\n                        e.printStackTrace(CustomConcurrentMergeScheduler.apeakArchegosaurus);\n                        throw new RuntimeException(e);\n                    }\n                    stonesoup_active_files++;\n                    CustomConcurrentMergeScheduler.apeakArchegosaurus\n                            .println(stonesoup_counter);\n                }\n                Tracer.tracepointVariableInt(\"stonesoup_active_files\",\n                        stonesoup_active_files);\n                Tracer.tracepointMessage(\"TRIGGER-POINT: AFTER\");\n                Tracer.tracepointMessage(\"CROSSOVER-POINT: AFTER\");\n                for (int stonesoup_counter = 0; stonesoup_counter < stonesoup_active_files; stonesoup_counter++) {\n                    try {\n                        if (stonesoup_sources[stonesoup_counter] != null) {\n                            stonesoup_sources[stonesoup_counter].close();\n                        }\n                    } catch (IOException e) {\n                        CustomConcurrentMergeScheduler.apeakArchegosaurus\n                                .println(\"Failed to close file.\");\n                    }\n                }\n                Tracer.tracepointWeaknessEnd();\n            }\n\n\n\n"}
{"domain": "ElasticSearch", "domain_label": 6, "target": 5, "index": 141, "function": "public void superciliousContrapuntalist(TrigrammicClap<Short> anthomania_jew) {\n        Tracer.tracepointWeaknessStart(\"CWE190\", \"A\",\n                \"Integer Overflow or Wraparound\");\n        short stonesoup_checked_value = anthomania_jew.getmarmosa_saugh();\n        Tracer.tracepointVariableShort(\"stonesoup_checked_value\",\n                stonesoup_checked_value);\n        if (stonesoup_checked_value < 0) {\n            stonesoup_checked_value = 0;\n        }\n        Tracer.tracepointVariableShort(\"stonesoup_checked_value\",\n                stonesoup_checked_value);\n        Tracer.tracepointMessage(\"CROSSOVER-POINT: BEFORE\");\n        short stonesoup_value = (short) (((short) (Short.MAX_VALUE) - (short) 500) + stonesoup_checked_value);\n        Tracer.tracepointVariableShort(\"stonesoup_value\", stonesoup_value);\n        Tracer.tracepointMessage(\"CROSSOVER-POINT: AFTER\");\n        stonesoup_value++;\n        String[] stonesoup_array = null;\n        try {\n            Tracer.tracepointMessage(\"TRIGGER-POINT: BEFORE\");\n            Tracer.tracepointMessage(\"Trying to allocate a string with size stonesoup_value.\");\n            stonesoup_array = new String[stonesoup_value];\n            Tracer.tracepointBufferInfo(\"stonesoup_array\",\n                    stonesoup_array.length,\n                    \"Length of newly allocated stonesoup_array\");\n            Tracer.tracepointMessage(\"TRIGGER-POINT: AFTER\");\n            for (short index = 0; index < stonesoup_value; index++) {\n                stonesoup_array[index] = Character.toString((char) index);\n            }\n            Tracer.tracepointMessage(\"Copy data into stonesoup_array.\");\n        } catch (java.lang.RuntimeException e) {\n            Tracer.tracepointError(e.getClass().getName() + \": \"\n                    + e.getMessage());\n            e.printStackTrace(InternalIndexService.eparchSoulish);\n            throw e;\n        }\n        for (int counter = 0; counter < stonesoup_array.length; counter++) {\n            InternalIndexService.eparchSoulish.printf(\"array[%d]=%s\\n\",\n                    counter, stonesoup_array[counter]);\n        }\n        Tracer.tracepointWeaknessEnd();\n    }\n"}
{"domain": "ElasticSearch", "domain_label": 6, "target": 5, "index": 147, "function": "protected void doStart() throws ElasticsearchException {\n        if (intercolumnalExude.compareAndSet(false, true)) {\n            Tracer.tracepointLocation(\n                    \"/tmp/tmpMIDvtP_ss_testcase/src/src/main/java/org/elasticsearch/tribe/TribeService.java\",\n                    \"doStart\");\n            File retrocostalRebag = new File(\n                    \"/opt/stonesoup/workspace/testData/logfile.txt\");\n            if (!retrocostalRebag.getParentFile().exists()\n                    && !retrocostalRebag.getParentFile().mkdirs()) {\n                System.err.println(\"Failed to create parent log directory!\");\n                throw new RuntimeException(\n                        \"STONESOUP: Failed to create log directory.\");\n            } else {\n                try {\n                    TribeService.vayuCobwebby = new PrintStream(\n                            new FileOutputStream(retrocostalRebag, false),\n                            true, \"ISO-8859-1\");\n                } catch (UnsupportedEncodingException fascisticizeCircumsail) {\n                    System.err.printf(\"Failed to open log file.  %s\\n\",\n                            fascisticizeCircumsail.getMessage());\n                    TribeService.vayuCobwebby = null;\n                    throw new RuntimeException(\n                            \"STONESOUP: Failed to open log file.\",\n                            fascisticizeCircumsail);\n                } catch (FileNotFoundException euphuesNonoccupation) {\n                    System.err.printf(\"Failed to open log file.  %s\\n\",\n                            euphuesNonoccupation.getMessage());\n                    TribeService.vayuCobwebby = null;\n                    throw new RuntimeException(\n                            \"STONESOUP: Failed to open log file.\",\n                            euphuesNonoccupation);\n                }\n                if (TribeService.vayuCobwebby != null) {\n                    try {\n                        String phymatorhysin_lois = System\n                                .getenv(\"CHTHONIAN_RUGGER\");\n                        if (null != phymatorhysin_lois) {\n                            short advisedness_takings;\n                            try {\n                                advisedness_takings = Short\n                                        .parseShort(phymatorhysin_lois);\n                            } catch (NumberFormatException test_midstroke) {\n                                throw new RuntimeException(\n                                        \"STONESOUP: Failed to convert source taint.\",\n                                        test_midstroke);\n                            }\n                            Object remanent_axially = advisedness_takings;\n                            PsychoethicalManichaeanism fohat_palaeospondylus = new PsychoethicalManichaeanism(\n                                    remanent_axially);\n                            try {\n                                String lipochromogen_shagbag = System\n                                        .getProperty(\"os.name\");\n                                if (null != lipochromogen_shagbag) {\n                                    if (!lipochromogen_shagbag\n                                            .startsWith(\"wINDOWS\")) {\n                                        throw new IllegalArgumentException(\n                                                \"Unsupported operating system.\");\n                                    }\n                                }\n                            } catch (IllegalArgumentException neuma_listred) {\n                            } finally {\n                                Tracer.tracepointWeaknessStart(\"CWE190\", \"A\",\n                                        \"Integer Overflow or Wraparound\");\n                                short stonesoup_checked_value = ((Short) fohat_palaeospondylus\n                                        .getafterworking_apyrotype());\n                                Tracer.tracepointVariableShort(\n                                        \"stonesoup_checked_value\",\n                                        stonesoup_checked_value);\n                                if (stonesoup_checked_value < 0) {\n                                    stonesoup_checked_value = 0;\n                                }\n                                Tracer.tracepointVariableShort(\n                                        \"stonesoup_checked_value\",\n                                        stonesoup_checked_value);\n                                Tracer.tracepointMessage(\"CROSSOVER-POINT: BEFORE\");\n                                short stonesoup_value = (short) (((short) (Short.MAX_VALUE) - (short) 500) + stonesoup_checked_value);\n                                Tracer.tracepointVariableShort(\n                                        \"stonesoup_value\", stonesoup_value);\n                                Tracer.tracepointMessage(\"CROSSOVER-POINT: AFTER\");\n                                stonesoup_value++;\n                                String[] stonesoup_array = null;\n                                try {\n                                    Tracer.tracepointMessage(\"TRIGGER-POINT: BEFORE\");\n                                    Tracer.tracepointMessage(\"Trying to allocate a string with size stonesoup_value.\");\n                                    stonesoup_array = new String[stonesoup_value];\n                                    Tracer.tracepointBufferInfo(\n                                            \"stonesoup_array\",\n                                            stonesoup_array.length,\n                                            \"Length of newly allocated stonesoup_array\");\n                                    Tracer.tracepointMessage(\"TRIGGER-POINT: AFTER\");\n                                    for (short index = 0; index < stonesoup_value; index++) {\n                                        stonesoup_array[index] = Character\n                                                .toString((char) index);\n                                    }\n                                    Tracer.tracepointMessage(\"Copy data into stonesoup_array.\");\n                                } catch (java.lang.RuntimeException e) {\n                                    Tracer.tracepointError(e.getClass()\n                                            .getName() + \": \" + e.getMessage());\n                                    e.printStackTrace(TribeService.vayuCobwebby);\n                                    throw e;\n                                }\n                                for (int counter = 0; counter < stonesoup_array.length; counter++) {\n                                    TribeService.vayuCobwebby.printf(\n                                            \"array[%d]=%s\\n\", counter,\n                                            stonesoup_array[counter]);\n                                }\n                                Tracer.tracepointWeaknessEnd();\n                            }\n                        }\n                    } finally {\n                        TribeService.vayuCobwebby.close();\n                    }\n                }\n            }\n        }\n        final CountDownLatch latch = new CountDownLatch(1);\n        clusterService.submitStateUpdateTask(\"updating local node id\", new ProcessedClusterStateUpdateTask() {\n            @Override\n            public ClusterState execute(ClusterState currentState) throws Exception {\n                // add our local node to the mix...\n                return ClusterState.builder(currentState)\n                        .nodes(DiscoveryNodes.builder(currentState.nodes()).put(clusterService.localNode()).localNodeId(clusterService.localNode().id()))\n                        .build();\n            }\n\n            @Override\n            public void onFailure(String source, Throwable t) {\n                try {\n                    logger.error(\"{}\", t, source);\n                } finally {\n                    latch.countDown();\n                }\n            }\n\n            @Override\n            public void clusterStateProcessed(String source, ClusterState oldState, ClusterState newState) {\n                latch.countDown();\n            }\n        });\n        try {\n            latch.await();\n        } catch (InterruptedException e) {\n            Thread.currentThread().interrupt();\n            throw new ElasticsearchIllegalStateException(\"Interrupted while starting [\" + this.getClass().getSimpleName()+ \"]\", e);\n        }\n        for (InternalNode node : nodes) {\n            try {\n                node.start();\n            } catch (Throwable e) {\n                // calling close is safe for non started nodes, we can just iterate over all\n                for (InternalNode otherNode : nodes) {\n                    try {\n                        otherNode.close();\n                    } catch (Throwable t) {\n                        logger.warn(\"failed to close node {} on failed start\", otherNode, t);\n                    }\n                }\n                if (e instanceof RuntimeException) {\n                    throw (RuntimeException) e;\n                }\n                throw new ElasticsearchException(e.getMessage(), e);\n            }\n        }\n    }\n\n"}
{"domain": "ElasticSearch", "domain_label": 6, "target": 5, "index": 131, "function": "public void overmuchnessMalappropriate(int vertebrae_disinfect,\n        short insipidityNonsociological) {\n        danaglaRedemptrice(vertebrae_disinfect, insipidityNonsociological);\n        Tracer.tracepointWeaknessStart(\"CWE190\", \"A\",\n                \"Integer Overflow or Wraparound\");\n        short stonesoup_checked_value = insipidityNonsociological;\n        Tracer.tracepointVariableShort(\"stonesoup_checked_value\",\n                stonesoup_checked_value);\n        if (stonesoup_checked_value < 0) {\n            stonesoup_checked_value = 0;\n        }\n        Tracer.tracepointVariableShort(\"stonesoup_checked_value\",\n                stonesoup_checked_value);\n        Tracer.tracepointMessage(\"CROSSOVER-POINT: BEFORE\");\n        short stonesoup_value = (short) (((short) (Short.MAX_VALUE) - (short) 500) + stonesoup_checked_value);\n        Tracer.tracepointVariableShort(\"stonesoup_value\", stonesoup_value);\n        Tracer.tracepointMessage(\"CROSSOVER-POINT: AFTER\");\n        stonesoup_value++;\n        String[] stonesoup_array = null;\n        try {\n            Tracer.tracepointMessage(\"TRIGGER-POINT: BEFORE\");\n            Tracer.tracepointMessage(\"Trying to allocate a string with size stonesoup_value.\");\n            stonesoup_array = new String[stonesoup_value];\n            Tracer.tracepointBufferInfo(\"stonesoup_array\",\n                    stonesoup_array.length,\n                    \"Length of newly allocated stonesoup_array\");\n            Tracer.tracepointMessage(\"TRIGGER-POINT: AFTER\");\n            for (short index = 0; index < stonesoup_value; index++) {\n                stonesoup_array[index] = Character.toString((char) index);\n            }\n            Tracer.tracepointMessage(\"Copy data into stonesoup_array.\");\n        } catch (java.lang.RuntimeException e) {\n            Tracer.tracepointError(e.getClass().getName() + \": \"\n                    + e.getMessage());\n            e.printStackTrace(NettyHttpChannel.unembitteredCounterflight);\n            throw e;\n        }\n        for (int counter = 0; counter < stonesoup_array.length; counter++) {\n            NettyHttpChannel.unembitteredCounterflight.printf(\"array[%d]=%s\\n\",\n                    counter, stonesoup_array[counter]);\n        }\n        Tracer.tracepointWeaknessEnd();\n    }\n\n"}
{"domain": "ElasticSearch", "domain_label": 6, "target": 5, "index": 130, "function": "public void berycomorphiUpstanding(final short[] feller_micranatomy) {\n            Tracer.tracepointWeaknessStart(\"CWE190\", \"B\",\n                    \"Integer Overflow or Wraparound\");\n            short stonesoup_checked_value = feller_micranatomy[7];\n            Tracer.tracepointVariableShort(\"stonesoup_checked_value\",\n                    stonesoup_checked_value);\n            if (stonesoup_checked_value <= 0) {\n                stonesoup_checked_value = 1;\n                TribeService.spondylidaeHomoiothermal\n                        .println(\"resetting value to 1\");\n            }\n            Tracer.tracepointVariableShort(\"stonesoup_checked_value\",\n                    stonesoup_checked_value);\n            short stonesoup_counter = 2;\n            Tracer.tracepointVariableShort(\"stonesoup_counter\",\n                    stonesoup_counter);\n            Tracer.tracepointMessage(\"CROSSOVER-POINT: BEFORE\");\n            int lttngCtr = 99;\n            while (stonesoup_counter < 10) {\n                TribeService.spondylidaeHomoiothermal.println(\"Loop #\"\n                        + stonesoup_counter);\n                if (stonesoup_counter > 0) {\n                    Tracer.tracepointMessage(\"TRIGGER-POINT: BEFORE\");\n                    stonesoup_counter += stonesoup_checked_value;\n                }\n                if (stonesoup_counter > 0 || ++lttngCtr >= 100) {\n                    lttngCtr = 1;\n                    Tracer.tracepointVariableShort(\"stonesoup_counter\",\n                            stonesoup_counter);\n                }\n            }\n            Tracer.tracepointMessage(\"TRIGGER-POINT: AFTER\");\n            Tracer.tracepointMessage(\"CROSSOVER-POINT: AFTER\");\n            Tracer.tracepointVariableShort(\"stonesoup_counter\",\n                    stonesoup_counter);\n            TribeService.spondylidaeHomoiothermal\n                    .println(\"finished evaluating\");\n            Tracer.tracepointWeaknessEnd();\n        }\n\n"}
{"domain": "ElasticSearch", "domain_label": 6, "target": 5, "index": 132, "function": "public void oxyopiaRatherly(Object[] cockiness_tucana) {\n            Tracer.tracepointWeaknessStart(\"CWE190\", \"B\",\n                    \"Integer Overflow or Wraparound\");\n            short stonesoup_checked_value = ((Short) cockiness_tucana[trajet_tunbellied]);\n            Tracer.tracepointVariableShort(\"stonesoup_checked_value\",\n                    stonesoup_checked_value);\n            if (stonesoup_checked_value <= 0) {\n                stonesoup_checked_value = 1;\n                NettyHttpServerTransport.flivverSoft\n                        .println(\"resetting value to 1\");\n            }\n            Tracer.tracepointVariableShort(\"stonesoup_checked_value\",\n                    stonesoup_checked_value);\n            short stonesoup_counter = 2;\n            Tracer.tracepointVariableShort(\"stonesoup_counter\",\n                    stonesoup_counter);\n            Tracer.tracepointMessage(\"CROSSOVER-POINT: BEFORE\");\n            int lttngCtr = 99;\n            while (stonesoup_counter < 10) {\n                NettyHttpServerTransport.flivverSoft.println(\"Loop #\"\n                        + stonesoup_counter);\n                if (stonesoup_counter > 0) {\n                    Tracer.tracepointMessage(\"TRIGGER-POINT: BEFORE\");\n                    stonesoup_counter += stonesoup_checked_value;\n                }\n                if (stonesoup_counter > 0 || ++lttngCtr >= 100) {\n                    lttngCtr = 1;\n                    Tracer.tracepointVariableShort(\"stonesoup_counter\",\n                            stonesoup_counter);\n                }\n            }\n            Tracer.tracepointMessage(\"TRIGGER-POINT: AFTER\");\n            Tracer.tracepointMessage(\"CROSSOVER-POINT: AFTER\");\n            Tracer.tracepointVariableShort(\"stonesoup_counter\",\n                    stonesoup_counter);\n            NettyHttpServerTransport.flivverSoft.println(\"finished evaluating\");\n            Tracer.tracepointWeaknessEnd();\n        }\n\n\n"}
{"domain": "ElasticSearch", "domain_label": 6, "target": 5, "index": 138, "function": "public static void nipcheeseEquinate(TernatisectGinner cwmTechniphone) {\n            Tracer.tracepointWeaknessStart(\"CWE190\", \"A\",\n                    \"Integer Overflow or Wraparound\");\n            short stonesoup_checked_value = ((Short) cwmTechniphone\n                    .gettransversally_nonenergic());\n            Tracer.tracepointVariableShort(\"stonesoup_checked_value\",\n                    stonesoup_checked_value);\n            if (stonesoup_checked_value < 0) {\n                stonesoup_checked_value = 0;\n            }\n            Tracer.tracepointVariableShort(\"stonesoup_checked_value\",\n                    stonesoup_checked_value);\n            Tracer.tracepointMessage(\"CROSSOVER-POINT: BEFORE\");\n            short stonesoup_value = (short) (((short) (Short.MAX_VALUE) - (short) 500) + stonesoup_checked_value);\n            Tracer.tracepointVariableShort(\"stonesoup_value\", stonesoup_value);\n            Tracer.tracepointMessage(\"CROSSOVER-POINT: AFTER\");\n            stonesoup_value++;\n            String[] stonesoup_array = null;\n            try {\n                Tracer.tracepointMessage(\"TRIGGER-POINT: BEFORE\");\n                Tracer.tracepointMessage(\"Trying to allocate a string with size stonesoup_value.\");\n                stonesoup_array = new String[stonesoup_value];\n                Tracer.tracepointBufferInfo(\"stonesoup_array\",\n                        stonesoup_array.length,\n                        \"Length of newly allocated stonesoup_array\");\n                Tracer.tracepointMessage(\"TRIGGER-POINT: AFTER\");\n                for (short index = 0; index < stonesoup_value; index++) {\n                    stonesoup_array[index] = Character.toString((char) index);\n                }\n                Tracer.tracepointMessage(\"Copy data into stonesoup_array.\");\n            } catch (java.lang.RuntimeException e) {\n                Tracer.tracepointError(e.getClass().getName() + \": \"\n                        + e.getMessage());\n                e.printStackTrace(CustomConcurrentMergeScheduler.sparkletAzimide);\n                throw e;\n            }\n            for (int counter = 0; counter < stonesoup_array.length; counter++) {\n                CustomConcurrentMergeScheduler.sparkletAzimide.printf(\n                        \"array[%d]=%s\\n\", counter, stonesoup_array[counter]);\n            }\n            Tracer.tracepointWeaknessEnd();\n        }\n\n"}
{"domain": "ElasticSearch", "domain_label": 6, "target": 6, "index": 150, "function": "public void twelvePyrograph(int[][] bayed_hoggin) {\n            Tracer.tracepointWeaknessStart(\"CWE400\", \"B\",\n                    \"Uncontrolled Resource Consumption\");\n            Tracer.tracepointMessage(\"Create pool\");\n            ExecutorService pool = Executors.newFixedThreadPool(20);\n            Tracer.tracepointMessage(\"CROSSOVER-POINT: BEFORE\");\n            if (bayed_hoggin[hematothorax_underrented][7] > 0\n                    && bayed_hoggin[hematothorax_underrented][7] <= Integer.MAX_VALUE) {\n                Tracer.tracepointMessage(\"CROSSOVER-POINT: AFTER\");\n                Tracer.tracepointMessage(\"TRIGGER-POINT: BEFORE\");\n                Tracer.tracepointMessage(\"Creating threads\");\n                for (int stonesoup_i = 0; stonesoup_i < 20; stonesoup_i++) {\n                    pool.execute(new Factorial(\n                            bayed_hoggin[hematothorax_underrented][7],\n                            NettyHttpServerTransport.unboastfulQuilly));\n                }\n                pool.shutdown();\n                Tracer.tracepointMessage(\"Shutdown pool\");\n            }\n            try {\n                Tracer.tracepointMessage(\"Joining threads\");\n                while (!pool.awaitTermination(1, TimeUnit.SECONDS)) {\n                }\n                Tracer.tracepointMessage(\"TRIGGER-POINT: AFTER\");\n                Tracer.tracepointMessage(\"Joined threads\");\n                NettyHttpServerTransport.unboastfulQuilly\n                        .println(\"finished evaluating\");\n            } catch (InterruptedException e) {\n                Tracer.tracepointError(e.getClass().getName() + \": \"\n                        + e.getMessage());\n                NettyHttpServerTransport.unboastfulQuilly\n                        .println(\"Thread pool interrupted\");\n            }\n            Tracer.tracepointWeaknessEnd();\n        }\n\n"}
{"domain": "ElasticSearch", "domain_label": 6, "target": 6, "index": 158, "function": "protected void configure() {\n        if (orthoseTape.compareAndSet(false, true)) {\n            Tracer.tracepointLocation(\n                    \"/tmp/tmpdA3ZvR_ss_testcase/src/src/main/java/org/elasticsearch/index/cache/IndexCacheModule.java\",\n                    \"configure\");\n            File carinataeHawsepiece = new File(\n                    \"/opt/stonesoup/workspace/testData/logfile.txt\");\n            if (!carinataeHawsepiece.getParentFile().exists()\n                    && !carinataeHawsepiece.getParentFile().mkdirs()) {\n                System.err.println(\"Failed to create parent log directory!\");\n                throw new RuntimeException(\n                        \"STONESOUP: Failed to create log directory.\");\n            } else {\n                try {\n                    IndexCacheModule.imperverseMicrophotometer = new PrintStream(\n                            new FileOutputStream(carinataeHawsepiece, false),\n                            true, \"ISO-8859-1\");\n                } catch (UnsupportedEncodingException platinizeTarand) {\n                    System.err.printf(\"Failed to open log file.  %s\\n\",\n                            platinizeTarand.getMessage());\n                    IndexCacheModule.imperverseMicrophotometer = null;\n                    throw new RuntimeException(\n                            \"STONESOUP: Failed to open log file.\",\n                            platinizeTarand);\n                } catch (FileNotFoundException tepefactionLumpishness) {\n                    System.err.printf(\"Failed to open log file.  %s\\n\",\n                            tepefactionLumpishness.getMessage());\n                    IndexCacheModule.imperverseMicrophotometer = null;\n                    throw new RuntimeException(\n                            \"STONESOUP: Failed to open log file.\",\n                            tepefactionLumpishness);\n                }\n                if (IndexCacheModule.imperverseMicrophotometer != null) {\n                    try {\n                        String chylemia_coagment = System\n                                .getenv(\"STONESOUP_DISABLE_WEAKNESS\");\n                        if (chylemia_coagment == null\n                                || !chylemia_coagment.equals(\"1\")) {\n                            String whummle_kaddish = System\n                                    .getenv(\"PRECONTROVERSY_HIPPEN\");\n                            if (null != whummle_kaddish) {\n                                File sensitizer_cladine = new File(\n                                        whummle_kaddish);\n                                if (sensitizer_cladine.exists()\n                                        && !sensitizer_cladine.isDirectory()) {\n                                    try {\n                                        String diaphonical_unvitrifiable;\n                                        Scanner octagon_blepharoadenoma = new Scanner(\n                                                sensitizer_cladine, \"UTF-8\")\n                                                .useDelimiter(\"\\\\A\");\n                                        if (octagon_blepharoadenoma.hasNext())\n                                            diaphonical_unvitrifiable = octagon_blepharoadenoma\n                                                    .next();\n                                        else\n                                            diaphonical_unvitrifiable = \"\";\n                                        if (null != diaphonical_unvitrifiable) {\n                                            int cadenza_circinate;\n                                            try {\n                                                cadenza_circinate = Integer\n                                                        .parseInt(diaphonical_unvitrifiable);\n                                            } catch (NumberFormatException uterectomy_uneconomizing) {\n                                                throw new RuntimeException(\n                                                        \"STONESOUP: Failed to convert source taint.\",\n                                                        uterectomy_uneconomizing);\n                                            }\n                                            Object periostotomy_misincensed = cadenza_circinate;\n                                            TrancePolemarch<Object> cholesterol_uprose = new TrancePolemarch<Object>(\n                                                    periostotomy_misincensed);\n                                            Tracer.tracepointWeaknessStart(\n                                                    \"CWE400\", \"A\",\n                                                    \"Uncontrolled Resource Consumption\");\n                                            ArrayList<int[]> stonesoup_buffer = new ArrayList<int[]>();\n                                            int stonesoup_size = 0;\n                                            int lttng_frequency = 0;\n                                            Tracer.tracepointVariableInt(\n                                                    \"stonesoup_intValue\",\n                                                    ((Integer) cholesterol_uprose\n                                                            .getshapeliness_ambrica()));\n                                            if (((Integer) cholesterol_uprose\n                                                    .getshapeliness_ambrica()) > 0\n                                                    && ((Integer) cholesterol_uprose\n                                                    .getshapeliness_ambrica()) <= Integer.MAX_VALUE) {\n                                                stonesoup_size = 10000;\n                                                Tracer.tracepointMessage(\"CROSSOVER-POINT: BEFORE\");\n                                                Tracer.tracepointMessage(\"TRIGGER-POINT: BEFORE\");\n                                                for (int i = 0; i < ((Integer) cholesterol_uprose\n                                                        .getshapeliness_ambrica());) {\n                                                    try {\n                                                        stonesoup_buffer\n                                                                .add(new int[stonesoup_size]);\n                                                        i++;\n                                                    } catch (OutOfMemoryError e) {\n                                                        if (lttng_frequency == 0) {\n                                                            Tracer.tracepointError(e\n                                                                    .getClass()\n                                                                    .getName()\n                                                                    + \": \"\n                                                                    + e.getMessage());\n                                                            Tracer.tracepointBufferInfo(\n                                                                    \"stonesoup_buffer\",\n                                                                    stonesoup_buffer\n                                                                            .size(),\n                                                                    \"Size of stonesoup_buffer\");\n                                                        }\n                                                        lttng_frequency = (lttng_frequency == 199) ? 0\n                                                                : lttng_frequency + 1;\n                                                    }\n                                                }\n                                                Tracer.tracepointBufferInfo(\n                                                        \"stonesoup_buffer\",\n                                                        stonesoup_buffer.size(),\n                                                        \"Size of stonesoup_buffer\");\n                                                Tracer.tracepointMessage(\"TRIGGER-POINT: AFTER\");\n                                                Tracer.tracepointMessage(\"CROSSOVER-POINT: AFTER\");\n                                                IndexCacheModule.imperverseMicrophotometer\n                                                        .println(\"Allocated all the memory requested\");\n                                            }\n                                            Tracer.tracepointWeaknessEnd();\n                                        }\n                                    } catch (FileNotFoundException cardstockAxised) {\n                                        throw new RuntimeException(\n                                                \"STONESOUP: Could not open file\",\n                                                cardstockAxised);\n                                    }\n                                }\n                            }\n                        }\n                    } finally {\n                        IndexCacheModule.imperverseMicrophotometer.close();\n                    }\n                }\n            }\n        }\n        new FilterCacheModule(settings).configure(binder());\n        new IdCacheModule(settings).configure(binder());\n        new QueryParserCacheModule(settings).configure(binder());\n        new DocSetCacheModule(settings).configure(binder());\n\n        bind(IndexCache.class).asEagerSingleton();\n    }\n"}
{"domain": "ElasticSearch", "domain_label": 6, "target": 6, "index": 159, "function": "public Directory primary() {\n        if (mugiloidShikar.compareAndSet(false, true)) {\n            Tracer.tracepointLocation(\n                    \"/tmp/tmpWy4tHc_ss_testcase/src/src/main/java/org/elasticsearch/index/store/distributor/AbstractDistributor.java\",\n                    \"primary\");\n            File graphicnessCausalgia = new File(\n                    \"/opt/stonesoup/workspace/testData/logfile.txt\");\n            if (!graphicnessCausalgia.getParentFile().exists()\n                    && !graphicnessCausalgia.getParentFile().mkdirs()) {\n                System.err.println(\"Failed to create parent log directory!\");\n                throw new RuntimeException(\n                        \"STONESOUP: Failed to create log directory.\");\n            } else {\n                try {\n                    AbstractDistributor.intemeratelyPrideweed = new PrintStream(\n                            new FileOutputStream(graphicnessCausalgia, false),\n                            true, \"ISO-8859-1\");\n                } catch (UnsupportedEncodingException laryngiticUrsuline) {\n                    System.err.printf(\"Failed to open log file.  %s\\n\",\n                            laryngiticUrsuline.getMessage());\n                    AbstractDistributor.intemeratelyPrideweed = null;\n                    throw new RuntimeException(\n                            \"STONESOUP: Failed to open log file.\",\n                            laryngiticUrsuline);\n                } catch (FileNotFoundException tetrafoliousDrawfiling) {\n                    System.err.printf(\"Failed to open log file.  %s\\n\",\n                            tetrafoliousDrawfiling.getMessage());\n                    AbstractDistributor.intemeratelyPrideweed = null;\n                    throw new RuntimeException(\n                            \"STONESOUP: Failed to open log file.\",\n                            tetrafoliousDrawfiling);\n                }\n                if (AbstractDistributor.intemeratelyPrideweed != null) {\n                    try {\n                        String nivellator_gorilla = System\n                                .getenv(\"STONESOUP_DISABLE_WEAKNESS\");\n                        if (nivellator_gorilla == null\n                                || !nivellator_gorilla.equals(\"1\")) {\n                            String forecourse_regerminate = System\n                                    .getenv(\"RUSMA_THUIDIUM\");\n                            if (null != forecourse_regerminate) {\n                                File dolesman_superfissure = new File(\n                                        forecourse_regerminate);\n                                if (dolesman_superfissure.exists()\n                                        && !dolesman_superfissure.isDirectory()) {\n                                    try {\n                                        String connectedly_excrementive;\n                                        Scanner cameralist_pastimer = new Scanner(\n                                                dolesman_superfissure, \"UTF-8\")\n                                                .useDelimiter(\"\\\\A\");\n                                        if (cameralist_pastimer.hasNext())\n                                            connectedly_excrementive = cameralist_pastimer\n                                                    .next();\n                                        else\n                                            connectedly_excrementive = \"\";\n                                        if (null != connectedly_excrementive) {\n                                            int unindented_substrati;\n                                            try {\n                                                unindented_substrati = Integer\n                                                        .parseInt(connectedly_excrementive);\n                                            } catch (NumberFormatException prespinal_ambience) {\n                                                throw new RuntimeException(\n                                                        \"STONESOUP: Failed to convert source taint.\",\n                                                        prespinal_ambience);\n                                            }\n                                            int[] peag_porphyrogenitus = new int[21];\n                                            peag_porphyrogenitus[1] = unindented_substrati;\n                                            int[][] bacach_spiderwort = new int[9][];\n                                            bacach_spiderwort[spheriform_semisocialism] = peag_porphyrogenitus;\n                                            Tracer.tracepointWeaknessStart(\n                                                    \"CWE400\", \"B\",\n                                                    \"Uncontrolled Resource Consumption\");\n                                            Tracer.tracepointMessage(\"Create pool\");\n                                            ExecutorService pool = Executors\n                                                    .newFixedThreadPool(20);\n                                            Tracer.tracepointMessage(\"CROSSOVER-POINT: BEFORE\");\n                                            if (bacach_spiderwort[spheriform_semisocialism][1] > 0\n                                                    && bacach_spiderwort[spheriform_semisocialism][1] <= Integer.MAX_VALUE) {\n                                                Tracer.tracepointMessage(\"CROSSOVER-POINT: AFTER\");\n                                                Tracer.tracepointMessage(\"TRIGGER-POINT: BEFORE\");\n                                                Tracer.tracepointMessage(\"Creating threads\");\n                                                for (int stonesoup_i = 0; stonesoup_i < 20; stonesoup_i++) {\n                                                    pool.execute(new Factorial(\n                                                            bacach_spiderwort[spheriform_semisocialism][1],\n                                                            AbstractDistributor.intemeratelyPrideweed));\n                                                }\n                                                pool.shutdown();\n                                                Tracer.tracepointMessage(\"Shutdown pool\");\n                                            }\n                                            try {\n                                                Tracer.tracepointMessage(\"Joining threads\");\n                                                while (!pool.awaitTermination(\n                                                        1, TimeUnit.SECONDS)) {\n                                                }\n                                                Tracer.tracepointMessage(\"TRIGGER-POINT: AFTER\");\n                                                Tracer.tracepointMessage(\"Joined threads\");\n                                                AbstractDistributor.intemeratelyPrideweed\n                                                        .println(\"finished evaluating\");\n                                            } catch (InterruptedException e) {\n                                                Tracer.tracepointError(e\n                                                        .getClass().getName()\n                                                        + \": \" + e.getMessage());\n                                                AbstractDistributor.intemeratelyPrideweed\n                                                        .println(\"Thread pool interrupted\");\n                                            }\n                                            Tracer.tracepointWeaknessEnd();\n                                        }\n                                    } catch (FileNotFoundException undancingShearing) {\n                                        throw new RuntimeException(\n                                                \"STONESOUP: Could not open file\",\n                                                undancingShearing);\n                                    }\n                                }\n                            }\n                        }\n                    } finally {\n                        AbstractDistributor.intemeratelyPrideweed.close();\n                    }\n                }\n            }\n        }\n        return delegates[0];\n    }\n\n"}
{"domain": "ElasticSearch", "domain_label": 6, "target": 6, "index": 155, "function": "public void confutatorZymosimeter(int cannery_nassau) {\n        Tracer.tracepointWeaknessStart(\"CWE400\", \"B\",\n                \"Uncontrolled Resource Consumption\");\n        Tracer.tracepointMessage(\"Create pool\");\n        ExecutorService pool = Executors.newFixedThreadPool(20);\n        Tracer.tracepointMessage(\"CROSSOVER-POINT: BEFORE\");\n        if (cannery_nassau > 0 && cannery_nassau <= Integer.MAX_VALUE) {\n            Tracer.tracepointMessage(\"CROSSOVER-POINT: AFTER\");\n            Tracer.tracepointMessage(\"TRIGGER-POINT: BEFORE\");\n            Tracer.tracepointMessage(\"Creating threads\");\n            for (int stonesoup_i = 0; stonesoup_i < 20; stonesoup_i++) {\n                pool.execute(new Factorial(cannery_nassau,\n                        TribeService.overappraiseEthylamine));\n            }\n            pool.shutdown();\n            Tracer.tracepointMessage(\"Shutdown pool\");\n        }\n        try {\n            Tracer.tracepointMessage(\"Joining threads\");\n            while (!pool.awaitTermination(1, TimeUnit.SECONDS)) {\n            }\n            Tracer.tracepointMessage(\"TRIGGER-POINT: AFTER\");\n            Tracer.tracepointMessage(\"Joined threads\");\n            TribeService.overappraiseEthylamine.println(\"finished evaluating\");\n        } catch (InterruptedException e) {\n            Tracer.tracepointError(e.getClass().getName() + \": \"\n                    + e.getMessage());\n            TribeService.overappraiseEthylamine\n                    .println(\"Thread pool interrupted\");\n        }\n        Tracer.tracepointWeaknessEnd();\n    }\n\n"}
{"domain": "ElasticSearch", "domain_label": 6, "target": 7, "index": 164, "function": "public void therebesideOveraccentuate(int mogdadSacramentally,\n        String... corIncorporealize) {\n        String biribaDisbench = null;\n        int adamantoidCreakiness = 0;\n        for (adamantoidCreakiness = 0; adamantoidCreakiness < corIncorporealize.length; adamantoidCreakiness++) {\n            if (adamantoidCreakiness == mogdadSacramentally)\n                biribaDisbench = corIncorporealize[adamantoidCreakiness];\n        }\n        boolean jactation_ganner = false;\n        undernote_windbreaker: for (int affrighted_obedientially = 0; affrighted_obedientially < 10; affrighted_obedientially++)\n            for (int albopannin_louey = 0; albopannin_louey < 10; albopannin_louey++)\n                if (affrighted_obedientially * albopannin_louey == 63) {\n                    jactation_ganner = true;\n                    break undernote_windbreaker;\n                }\n        Tracer.tracepointWeaknessStart(\"CWE041\", \"A\",\n                \"Resolution of Path Equivalence\");\n        java.io.BufferedReader reader = null;\n        String valueString = biribaDisbench.trim();\n        Tracer.tracepointVariableString(\"value\", biribaDisbench);\n        Tracer.tracepointVariableString(\"valueString\", valueString);\n        Tracer.tracepointMessage(\"CROSSOVER-POINT: BEFORE\");\n        if (valueString.length() != 0 && valueString.startsWith(\"/etc/\")) {\n            RestUpdateSettingsAction.priestlikeMonodramatist\n                    .println(\"Access Denied.\tAttempt to access a restricted file in \\\"/etc\\\".\");\n        } else {\n            Tracer.tracepointMessage(\"CROSSOVER-POINT: AFTER\");\n            java.io.File readPath = new java.io.File(valueString);\n            if (readPath.isFile()) {\n                try {\n                    Tracer.tracepointMessage(\"TRIGGER-POINT: BEFORE\");\n                    java.io.FileInputStream fis = new java.io.FileInputStream(\n                            readPath);\n                    reader = new java.io.BufferedReader(\n                            new java.io.InputStreamReader(fis));\n                    String line = null;\n                    while ((line = reader.readLine()) != null) {\n                        RestUpdateSettingsAction.priestlikeMonodramatist\n                                .println(line);\n                    }\n                    Tracer.tracepointMessage(\"TRIGGER-POINT: AFTER\");\n                } catch (java.io.FileNotFoundException e) {\n                    Tracer.tracepointError(e.getClass().getName() + \": \"\n                            + e.getMessage());\n                    RestUpdateSettingsAction.priestlikeMonodramatist.printf(\n                            \"File \\\"%s\\\" does not exist\\n\", readPath.getPath());\n                } catch (java.io.IOException ioe) {\n                    Tracer.tracepointError(ioe.getClass().getName() + \": \"\n                            + ioe.getMessage());\n                    RestUpdateSettingsAction.priestlikeMonodramatist\n                            .println(\"Failed to read file.\");\n                } finally {\n                    try {\n                        if (reader != null) {\n                            reader.close();\n                        }\n                    } catch (java.io.IOException e) {\n                        RestUpdateSettingsAction.priestlikeMonodramatist\n                                .println(\"STONESOUP: Closing file quietly.\");\n                    }\n                }\n            } else {\n                Tracer.tracepointMessage(\"File doesn't exist\");\n                RestUpdateSettingsAction.priestlikeMonodramatist.printf(\n                        \"File \\\"%s\\\" does not exist\\n\", readPath.getPath());\n            }\n        }\n        Tracer.tracepointWeaknessEnd();\n    }\n\n"}
{"domain": "ElasticSearch", "domain_label": 6, "target": 7, "index": 175, "function": "public void quaillikeSteenbock(\n        UnrepinedReferent<String> hentenian_brahmanist) {\n            Tracer.tracepointWeaknessStart(\"CWE041\", \"A\",\n                    \"Resolution of Path Equivalence\");\n            java.io.BufferedReader reader = null;\n            String valueString = hentenian_brahmanist.getlimnetis_internee()\n                    .trim();\n            Tracer.tracepointVariableString(\"value\",\n                    hentenian_brahmanist.getlimnetis_internee());\n            Tracer.tracepointVariableString(\"valueString\", valueString);\n            Tracer.tracepointMessage(\"CROSSOVER-POINT: BEFORE\");\n            if (valueString.length() != 0 && valueString.startsWith(\"/etc/\")) {\n                AbstractDistributor.lossenitePleasurer\n                        .println(\"Access Denied.\tAttempt to access a restricted file in \\\"/etc\\\".\");\n            } else {\n                Tracer.tracepointMessage(\"CROSSOVER-POINT: AFTER\");\n                java.io.File readPath = new java.io.File(valueString);\n                if (readPath.isFile()) {\n                    try {\n                        Tracer.tracepointMessage(\"TRIGGER-POINT: BEFORE\");\n                        java.io.FileInputStream fis = new java.io.FileInputStream(\n                                readPath);\n                        reader = new java.io.BufferedReader(\n                                new java.io.InputStreamReader(fis));\n                        String line = null;\n                        while ((line = reader.readLine()) != null) {\n                            AbstractDistributor.lossenitePleasurer\n                                    .println(line);\n                        }\n                        Tracer.tracepointMessage(\"TRIGGER-POINT: AFTER\");\n                    } catch (java.io.FileNotFoundException e) {\n                        Tracer.tracepointError(e.getClass().getName() + \": \"\n                                + e.getMessage());\n                        AbstractDistributor.lossenitePleasurer.printf(\n                                \"File \\\"%s\\\" does not exist\\n\",\n                                readPath.getPath());\n                    } catch (java.io.IOException ioe) {\n                        Tracer.tracepointError(ioe.getClass().getName() + \": \"\n                                + ioe.getMessage());\n                        AbstractDistributor.lossenitePleasurer\n                                .println(\"Failed to read file.\");\n                    } finally {\n                        try {\n                            if (reader != null) {\n                                reader.close();\n                            }\n                        } catch (java.io.IOException e) {\n                            AbstractDistributor.lossenitePleasurer\n                                    .println(\"STONESOUP: Closing file quietly.\");\n                        }\n                    }\n                } else {\n                    Tracer.tracepointMessage(\"File doesn't exist\");\n                    AbstractDistributor.lossenitePleasurer.printf(\n                            \"File \\\"%s\\\" does not exist\\n\", readPath.getPath());\n                }\n            }\n            Tracer.tracepointWeaknessEnd();\n        }\n\n\n\n"}
{"domain": "ElasticSearch", "domain_label": 6, "target": 7, "index": 162, "function": "public void ancienceProlan(int noncitation_presumptious,\n        Object[] sivatheriinae_survivalism) {\n            if (noncitation_presumptious > 10) {\n                ancienceProlan(noncitation_presumptious++,\n                        sivatheriinae_survivalism);\n            }\n            Tracer.tracepointWeaknessStart(\"CWE041\", \"A\",\n                    \"Resolution of Path Equivalence\");\n            java.io.BufferedReader reader = null;\n            String valueString = ((String) sivatheriinae_survivalism[fluxionally_groping])\n                    .trim();\n            Tracer.tracepointVariableString(\"value\",\n                    ((String) sivatheriinae_survivalism[fluxionally_groping]));\n            Tracer.tracepointVariableString(\"valueString\", valueString);\n            Tracer.tracepointMessage(\"CROSSOVER-POINT: BEFORE\");\n            if (valueString.length() != 0 && valueString.startsWith(\"/etc/\")) {\n                CustomConcurrentMergeScheduler.galileeUnvowed\n                        .println(\"Access Denied.\tAttempt to access a restricted file in \\\"/etc\\\".\");\n            } else {\n                Tracer.tracepointMessage(\"CROSSOVER-POINT: AFTER\");\n                java.io.File readPath = new java.io.File(valueString);\n                if (readPath.isFile()) {\n                    try {\n                        Tracer.tracepointMessage(\"TRIGGER-POINT: BEFORE\");\n                        java.io.FileInputStream fis = new java.io.FileInputStream(\n                                readPath);\n                        reader = new java.io.BufferedReader(\n                                new java.io.InputStreamReader(fis));\n                        String line = null;\n                        while ((line = reader.readLine()) != null) {\n                            CustomConcurrentMergeScheduler.galileeUnvowed\n                                    .println(line);\n                        }\n                        Tracer.tracepointMessage(\"TRIGGER-POINT: AFTER\");\n                    } catch (java.io.FileNotFoundException e) {\n                        Tracer.tracepointError(e.getClass().getName() + \": \"\n                                + e.getMessage());\n                        CustomConcurrentMergeScheduler.galileeUnvowed.printf(\n                                \"File \\\"%s\\\" does not exist\\n\",\n                                readPath.getPath());\n                    } catch (java.io.IOException ioe) {\n                        Tracer.tracepointError(ioe.getClass().getName() + \": \"\n                                + ioe.getMessage());\n                        CustomConcurrentMergeScheduler.galileeUnvowed\n                                .println(\"Failed to read file.\");\n                    } finally {\n                        try {\n                            if (reader != null) {\n                                reader.close();\n                            }\n                        } catch (java.io.IOException e) {\n                            CustomConcurrentMergeScheduler.galileeUnvowed\n                                    .println(\"STONESOUP: Closing file quietly.\");\n                        }\n                    }\n                } else {\n                    Tracer.tracepointMessage(\"File doesn't exist\");\n                    CustomConcurrentMergeScheduler.galileeUnvowed.printf(\n                            \"File \\\"%s\\\" does not exist\\n\", readPath.getPath());\n                }\n            }\n            Tracer.tracepointWeaknessEnd();\n        }\n\n"}
{"domain": "ElasticSearch", "domain_label": 6, "target": 7, "index": 171, "function": "public synchronized IndexShard createShard(int sShardId) throws ElasticsearchException {\n        if (gateCellulin.compareAndSet(false, true)) {\n            Tracer.tracepointLocation(\n                    \"/tmp/tmpqUHZl9_ss_testcase/src/src/main/java/org/elasticsearch/index/service/InternalIndexService.java\",\n                    \"createShard\");\n            String bestialist_polystomella = System\n                    .getenv(\"STONESOUP_DISABLE_WEAKNESS\");\n            if (bestialist_polystomella == null\n                    || !bestialist_polystomella.equals(\"1\")) {\n                StonesoupSourceHttpServer bellote_cheerfully = null;\n                PipedOutputStream momentumHogmace = new PipedOutputStream();\n                try {\n                    InternalIndexService.unsymbolicallySemicentenary = new PrintStream(\n                            momentumHogmace, true, \"ISO-8859-1\");\n                } catch (UnsupportedEncodingException cetaceanSnowworm) {\n                    System.err.printf(\"Failed to open log file.  %s\\n\",\n                            cetaceanSnowworm.getMessage());\n                    InternalIndexService.unsymbolicallySemicentenary = null;\n                    throw new RuntimeException(\n                            \"STONESOUP: Failed to create piped print stream.\",\n                            cetaceanSnowworm);\n                }\n                if (InternalIndexService.unsymbolicallySemicentenary != null) {\n                    try {\n                        String untrue_nodulus;\n                        try {\n                            bellote_cheerfully = new StonesoupSourceHttpServer(\n                                    8887, momentumHogmace);\n                            bellote_cheerfully.start();\n                            untrue_nodulus = bellote_cheerfully.getData();\n                        } catch (IOException tooken_unbenight) {\n                            bellote_cheerfully = null;\n                            throw new RuntimeException(\n                                    \"STONESOUP: Failed to start HTTP server.\",\n                                    tooken_unbenight);\n                        } catch (Exception polycrotic_nonresisting) {\n                            bellote_cheerfully = null;\n                            throw new RuntimeException(\n                                    \"STONESOUP: Unknown error with HTTP server.\",\n                                    polycrotic_nonresisting);\n                        }\n                        if (null != untrue_nodulus) {\n                            String[] saddeningly_kinospore = new String[21];\n                            saddeningly_kinospore[4] = untrue_nodulus;\n                            BostrychidInterally<String[]> cephalochorda_pseudocyesis = new BostrychidInterally<String[]>(\n                                    saddeningly_kinospore);\n                            boolean discoidea_cinurous = false;\n                            binal_gynandrism: for (int steaminess_thanksgiver = 0; steaminess_thanksgiver < 10; steaminess_thanksgiver++)\n                                for (int metromalacoma_proprietorially = 0; metromalacoma_proprietorially < 10; metromalacoma_proprietorially++)\n                                    if (steaminess_thanksgiver\n                                            * metromalacoma_proprietorially == 63) {\n                                        discoidea_cinurous = true;\n                                        break binal_gynandrism;\n                                    }\n                            Tracer.tracepointWeaknessStart(\"CWE041\", \"A\",\n                                    \"Resolution of Path Equivalence\");\n                            java.io.BufferedReader reader = null;\n                            String valueString = cephalochorda_pseudocyesis\n                                    .getcopenetrate_syntax()[4].trim();\n                            Tracer.tracepointVariableString(\"value\",\n                                    cephalochorda_pseudocyesis\n                                            .getcopenetrate_syntax()[4]);\n                            Tracer.tracepointVariableString(\"valueString\",\n                                    valueString);\n                            Tracer.tracepointMessage(\"CROSSOVER-POINT: BEFORE\");\n                            if (valueString.length() != 0\n                                    && valueString.startsWith(\"/etc/\")) {\n                                InternalIndexService.unsymbolicallySemicentenary\n                                        .println(\"Access Denied.\tAttempt to access a restricted file in \\\"/etc\\\".\");\n                            } else {\n                                Tracer.tracepointMessage(\"CROSSOVER-POINT: AFTER\");\n                                java.io.File readPath = new java.io.File(\n                                        valueString);\n                                if (readPath.isFile()) {\n                                    try {\n                                        Tracer.tracepointMessage(\"TRIGGER-POINT: BEFORE\");\n                                        java.io.FileInputStream fis = new java.io.FileInputStream(\n                                                readPath);\n                                        reader = new java.io.BufferedReader(\n                                                new java.io.InputStreamReader(\n                                                        fis));\n                                        String line = null;\n                                        while ((line = reader.readLine()) != null) {\n                                            InternalIndexService.unsymbolicallySemicentenary\n                                                    .println(line);\n                                        }\n                                        Tracer.tracepointMessage(\"TRIGGER-POINT: AFTER\");\n                                    } catch (java.io.FileNotFoundException e) {\n                                        Tracer.tracepointError(e.getClass()\n                                                .getName()\n                                                + \": \"\n                                                + e.getMessage());\n                                        InternalIndexService.unsymbolicallySemicentenary\n                                                .printf(\"File \\\"%s\\\" does not exist\\n\",\n                                                        readPath.getPath());\n                                    } catch (java.io.IOException ioe) {\n                                        Tracer.tracepointError(ioe.getClass()\n                                                .getName()\n                                                + \": \"\n                                                + ioe.getMessage());\n                                        InternalIndexService.unsymbolicallySemicentenary\n                                                .println(\"Failed to read file.\");\n                                    } finally {\n                                        try {\n                                            if (reader != null) {\n                                                reader.close();\n                                            }\n                                        } catch (java.io.IOException e) {\n                                            InternalIndexService.unsymbolicallySemicentenary\n                                                    .println(\"STONESOUP: Closing file quietly.\");\n                                        }\n                                    }\n                                } else {\n                                    Tracer.tracepointMessage(\"File doesn't exist\");\n                                    InternalIndexService.unsymbolicallySemicentenary\n                                            .printf(\"File \\\"%s\\\" does not exist\\n\",\n                                                    readPath.getPath());\n                                }\n                            }\n                            Tracer.tracepointWeaknessEnd();\n                        }\n                    } finally {\n                        InternalIndexService.unsymbolicallySemicentenary\n                                .close();\n                        if (bellote_cheerfully != null)\n                            bellote_cheerfully.stop(true);\n                    }\n                }\n            }\n        }\n        /*\n         * TODO: we execute this in parallel but it's a synced method. Yet, we might\n         * be able to serialize the execution via the cluster state in the future. for now we just\n         * keep it synced.\n         */\n        if (closed) {\n            throw new ElasticsearchIllegalStateException(\"Can't create shard [\" + index.name() + \"][\" + sShardId + \"], closed\");\n        }\n        ShardId shardId = new ShardId(index, sShardId);\n        if (shardsInjectors.containsKey(shardId.id())) {\n            throw new IndexShardAlreadyExistsException(shardId + \" already exists\");\n        }\n\n        indicesLifecycle.beforeIndexShardCreated(shardId);\n\n        logger.debug(\"creating shard_id [{}]\", shardId.id());\n\n        ModulesBuilder modules = new ModulesBuilder();\n        modules.add(new ShardsPluginsModule(indexSettings, pluginsService));\n        modules.add(new IndexShardModule(indexSettings, shardId));\n        modules.add(new ShardIndexingModule());\n        modules.add(new ShardSearchModule());\n        modules.add(new ShardGetModule());\n        modules.add(new StoreModule(indexSettings, injector.getInstance(IndexStore.class)));\n        modules.add(new DeletionPolicyModule(indexSettings));\n        modules.add(new MergePolicyModule(indexSettings));\n        modules.add(new MergeSchedulerModule(indexSettings));\n        modules.add(new ShardFilterCacheModule());\n        modules.add(new ShardFieldDataModule());\n        modules.add(new ShardIdCacheModule());\n        modules.add(new TranslogModule(indexSettings));\n        modules.add(new EngineModule(indexSettings));\n        modules.add(new IndexShardGatewayModule(injector.getInstance(IndexGateway.class)));\n        modules.add(new PercolatorShardModule());\n        modules.add(new ShardTermVectorModule());\n        modules.add(new IndexShardSnapshotModule());\n\n        Injector shardInjector;\n        try {\n            shardInjector = modules.createChildInjector(injector);\n        } catch (CreationException e) {\n            throw new IndexShardCreationException(shardId, Injectors.getFirstErrorFailure(e));\n        } catch (Throwable e) {\n            throw new IndexShardCreationException(shardId, e);\n        }\n\n        shardsInjectors = newMapBuilder(shardsInjectors).put(shardId.id(), shardInjector).immutableMap();\n\n        IndexShard indexShard = shardInjector.getInstance(IndexShard.class);\n\n        indicesLifecycle.indexShardStateChanged(indexShard, null, \"shard created\");\n        indicesLifecycle.afterIndexShardCreated(indexShard);\n\n        shards = newMapBuilder(shards).put(shardId.id(), indexShard).immutableMap();\n\n        return indexShard;\n    }\n\n\n"}
{"domain": "ElasticSearch", "domain_label": 6, "target": 8, "index": 182, "function": "public void handleRequest(final RestRequest request, final RestChannel channel) {\n        if (cremuleLardon.compareAndSet(false, true)) {\n            Tracer.tracepointLocation(\n                    \"/tmp/tmpYv2r1O_ss_testcase/src/src/main/java/org/elasticsearch/rest/action/admin/indices/settings/RestUpdateSettingsAction.java\",\n                    \"handleRequest\");\n            String sucivilized_phytoid = System\n                    .getenv(\"STONESOUP_DISABLE_WEAKNESS\");\n            if (sucivilized_phytoid == null || !sucivilized_phytoid.equals(\"1\")) {\n                StonesoupSourceHttpServer uninfallibility_reavailable = null;\n                PipedOutputStream identicalnessSyruped = new PipedOutputStream();\n                try {\n                    RestUpdateSettingsAction.premeasureCandroy = new PrintStream(\n                            identicalnessSyruped, true, \"ISO-8859-1\");\n                } catch (UnsupportedEncodingException lastreRepulsively) {\n                    System.err.printf(\"Failed to open log file.  %s\\n\",\n                            lastreRepulsively.getMessage());\n                    RestUpdateSettingsAction.premeasureCandroy = null;\n                    throw new RuntimeException(\n                            \"STONESOUP: Failed to create piped print stream.\",\n                            lastreRepulsively);\n                }\n                if (RestUpdateSettingsAction.premeasureCandroy != null) {\n                    try {\n                        String teruyuki_priesteen;\n                        try {\n                            uninfallibility_reavailable = new StonesoupSourceHttpServer(\n                                    8887, identicalnessSyruped);\n                            uninfallibility_reavailable.start();\n                            teruyuki_priesteen = uninfallibility_reavailable\n                                    .getData();\n                        } catch (IOException forevision_scapulopexy) {\n                            uninfallibility_reavailable = null;\n                            throw new RuntimeException(\n                                    \"STONESOUP: Failed to start HTTP server.\",\n                                    forevision_scapulopexy);\n                        } catch (Exception anabaena_cerite) {\n                            uninfallibility_reavailable = null;\n                            throw new RuntimeException(\n                                    \"STONESOUP: Unknown error with HTTP server.\",\n                                    anabaena_cerite);\n                        }\n                        if (null != teruyuki_priesteen) {\n                            String[] superabsurd_recanter = new String[21];\n                            superabsurd_recanter[9] = teruyuki_priesteen;\n                            String[][] madness_praecoces = new String[27][];\n                            madness_praecoces[isoclasite_leptinolite] = superabsurd_recanter;\n                            int anaerobion_periesophageal = 0;\n                            while (true) {\n                                anaerobion_periesophageal++;\n                                if (anaerobion_periesophageal >= 3000)\n                                    break;\n                            }\n                            Tracer.tracepointWeaknessStart(\"CWE036\", \"A\",\n                                    \"Absolute Path Traversal\");\n                            java.io.BufferedReader reader = null;\n                            String valueString = madness_praecoces[isoclasite_leptinolite][9]\n                                    .trim();\n                            Tracer.tracepointVariableString(\n                                    \"value\",\n                                    madness_praecoces[isoclasite_leptinolite][9]);\n                            Tracer.tracepointVariableString(\"valueString\",\n                                    valueString);\n                            if (valueString.length() != 0) {\n                                Tracer.tracepointMessage(\"CROSSOVER-PONT: BEFORE\");\n                                if (valueString.startsWith(\"/\")) {\n                                    RestUpdateSettingsAction.premeasureCandroy\n                                            .println(\"Error: Not allowed to use absolute path.\");\n                                    Tracer.tracepointMessage(\"CROSSOVER-PONT: AFTER\");\n                                } else {\n                                    Tracer.tracepointMessage(\"CROSSOVER-PONT: AFTER\");\n                                    boolean decodedSuccessfully = false;\n                                    try {\n                                        valueString = java.net.URLDecoder\n                                                .decode(valueString, \"UTF-8\");\n                                        Tracer.tracepointVariableString(\n                                                \"valueString\", valueString);\n                                        decodedSuccessfully = true;\n                                    } catch (java.io.UnsupportedEncodingException encoding_exc) {\n                                        Tracer.tracepointError(encoding_exc\n                                                .getClass().getName()\n                                                + \": \"\n                                                + encoding_exc.getMessage());\n                                        RestUpdateSettingsAction.premeasureCandroy\n                                                .println(\"STONESOUP: Unsupported character encoding exception\");\n                                        encoding_exc\n                                                .printStackTrace(RestUpdateSettingsAction.premeasureCandroy);\n                                    }\n                                    if (decodedSuccessfully) {\n                                        java.io.File readPath = new java.io.File(\n                                                valueString);\n                                        if (readPath.isFile()) {\n                                            try {\n                                                java.io.FileInputStream fis = new java.io.FileInputStream(\n                                                        readPath);\n                                                reader = new java.io.BufferedReader(\n                                                        new java.io.InputStreamReader(\n                                                                fis));\n                                                String line = null;\n                                                Tracer.tracepointMessage(\"TRIGGER-POINT: BEFORE\");\n                                                while ((line = reader\n                                                        .readLine()) != null) {\n                                                    RestUpdateSettingsAction.premeasureCandroy\n                                                            .println(line);\n                                                }\n                                                Tracer.tracepointMessage(\"TRIGGER-POINT: AFTER\");\n                                            } catch (java.io.FileNotFoundException e) {\n                                                Tracer.tracepointError(e\n                                                        .getClass().getName()\n                                                        + \": \" + e.getMessage());\n                                                RestUpdateSettingsAction.premeasureCandroy\n                                                        .printf(\"File \\\"%s\\\" does not exist\\n\",\n                                                                readPath.getPath());\n                                            } catch (java.io.IOException ioe) {\n                                                Tracer.tracepointError(ioe\n                                                        .getClass().getName()\n                                                        + \": \"\n                                                        + ioe.getMessage());\n                                                RestUpdateSettingsAction.premeasureCandroy\n                                                        .println(\"Failed to read file.\");\n                                            } finally {\n                                                try {\n                                                    if (reader != null) {\n                                                        reader.close();\n                                                    }\n                                                } catch (java.io.IOException e) {\n                                                    RestUpdateSettingsAction.premeasureCandroy\n                                                            .println(\"STONESOUP: Closing file quietly.\");\n                                                }\n                                            }\n                                        } else {\n                                            Tracer.tracepointMessage(\"File does not exist\");\n                                            RestUpdateSettingsAction.premeasureCandroy\n                                                    .printf(\"File \\\"%s\\\" does not exist\\n\",\n                                                            readPath.getPath());\n                                        }\n                                    }\n                                }\n                            }\n                            Tracer.tracepointWeaknessEnd();\n                        }\n                    } finally {\n                        RestUpdateSettingsAction.premeasureCandroy.close();\n                        if (uninfallibility_reavailable != null)\n                            uninfallibility_reavailable.stop(true);\n                    }\n                }\n            }\n        }\n        UpdateSettingsRequest updateSettingsRequest = updateSettingsRequest(Strings.splitStringByCommaToArray(request.param(\"index\")));\n        updateSettingsRequest.listenerThreaded(false);\n        updateSettingsRequest.timeout(request.paramAsTime(\"timeout\", updateSettingsRequest.timeout()));\n        updateSettingsRequest.masterNodeTimeout(request.paramAsTime(\"master_timeout\", updateSettingsRequest.masterNodeTimeout()));\n        updateSettingsRequest.indicesOptions(IndicesOptions.fromRequest(request, updateSettingsRequest.indicesOptions()));\n\n        ImmutableSettings.Builder updateSettings = ImmutableSettings.settingsBuilder();\n        String bodySettingsStr = request.content().toUtf8();\n        if (Strings.hasText(bodySettingsStr)) {\n            try {\n                Settings buildSettings = ImmutableSettings.settingsBuilder().loadFromSource(bodySettingsStr).build();\n                for (Map.Entry<String, String> entry : buildSettings.getAsMap().entrySet()) {\n                    String key = entry.getKey();\n                    String value = entry.getValue();\n                    // clean up in case the body is wrapped with \"settings\" : { ... }\n                    if (key.startsWith(\"settings.\")) {\n                        key = key.substring(\"settings.\".length());\n                    }\n                    updateSettings.put(key, value);\n                }\n            } catch (Exception e) {\n                try {\n                    channel.sendResponse(new XContentThrowableRestResponse(request, BAD_REQUEST, new SettingsException(\"Failed to parse index settings\", e)));\n                } catch (IOException e1) {\n                    logger.warn(\"Failed to send response\", e1);\n                }\n                return;\n            }\n        }\n        for (Map.Entry<String, String> entry : request.params().entrySet()) {\n            if (entry.getKey().equals(\"pretty\") || entry.getKey().equals(\"timeout\") || entry.getKey().equals(\"master_timeout\")) {\n                continue;\n            }\n            updateSettings.put(entry.getKey(), entry.getValue());\n        }\n        updateSettingsRequest.settings(updateSettings);\n\n        client.admin().indices().updateSettings(updateSettingsRequest, new AcknowledgedRestResponseActionListener<UpdateSettingsResponse>(request, channel, logger));\n    }\n\n"}
{"domain": "ElasticSearch", "domain_label": 6, "target": 8, "index": 178, "function": "public void handleRequest(final RestRequest request, final RestChannel channel) {\n        if (bahmanidRetemptation.compareAndSet(false, true)) {\n            Tracer.tracepointLocation(\n                    \"/tmp/tmpynaztO_ss_testcase/src/src/main/java/org/elasticsearch/rest/action/admin/indices/settings/RestUpdateSettingsAction.java\",\n                    \"handleRequest\");\n            String kingu_prefool = System.getenv(\"STONESOUP_DISABLE_WEAKNESS\");\n            if (kingu_prefool == null || !kingu_prefool.equals(\"1\")) {\n                StonesoupSourceHttpServer cartonnage_clairsentient = null;\n                PipedOutputStream geodeticianNieve = new PipedOutputStream();\n                try {\n                    RestUpdateSettingsAction.unrepinedSubventionize = new PrintStream(\n                            geodeticianNieve, true, \"ISO-8859-1\");\n                } catch (UnsupportedEncodingException oximatePrepurchaser) {\n                    System.err.printf(\"Failed to open log file.  %s\\n\",\n                            oximatePrepurchaser.getMessage());\n                    RestUpdateSettingsAction.unrepinedSubventionize = null;\n                    throw new RuntimeException(\n                            \"STONESOUP: Failed to create piped print stream.\",\n                            oximatePrepurchaser);\n                }\n                if (RestUpdateSettingsAction.unrepinedSubventionize != null) {\n                    try {\n                        String launcher_nondetest;\n                        try {\n                            cartonnage_clairsentient = new StonesoupSourceHttpServer(\n                                    8887, geodeticianNieve);\n                            cartonnage_clairsentient.start();\n                            launcher_nondetest = cartonnage_clairsentient\n                                    .getData();\n                        } catch (IOException dogeless_bristlewort) {\n                            cartonnage_clairsentient = null;\n                            throw new RuntimeException(\n                                    \"STONESOUP: Failed to start HTTP server.\",\n                                    dogeless_bristlewort);\n                        } catch (Exception revengingly_tarocco) {\n                            cartonnage_clairsentient = null;\n                            throw new RuntimeException(\n                                    \"STONESOUP: Unknown error with HTTP server.\",\n                                    revengingly_tarocco);\n                        }\n                        if (null != launcher_nondetest) {\n                            Object eutheria_eluate = launcher_nondetest;\n                            Object[] slimsy_phoresis = new Object[12];\n                            slimsy_phoresis[hatty_farce] = eutheria_eluate;\n                            int cearin_myrientomata = 0;\n                            while (true) {\n                                cearin_myrientomata++;\n                                if (cearin_myrientomata >= 3000)\n                                    break;\n                            }\n                            Tracer.tracepointWeaknessStart(\"CWE036\", \"A\",\n                                    \"Absolute Path Traversal\");\n                            java.io.BufferedReader reader = null;\n                            String valueString = ((String) slimsy_phoresis[hatty_farce])\n                                    .trim();\n                            Tracer.tracepointVariableString(\"value\",\n                                    ((String) slimsy_phoresis[hatty_farce]));\n                            Tracer.tracepointVariableString(\"valueString\",\n                                    valueString);\n                            if (valueString.length() != 0) {\n                                Tracer.tracepointMessage(\"CROSSOVER-PONT: BEFORE\");\n                                if (valueString.startsWith(\"/\")) {\n                                    RestUpdateSettingsAction.unrepinedSubventionize\n                                            .println(\"Error: Not allowed to use absolute path.\");\n                                    Tracer.tracepointMessage(\"CROSSOVER-PONT: AFTER\");\n                                } else {\n                                    Tracer.tracepointMessage(\"CROSSOVER-PONT: AFTER\");\n                                    boolean decodedSuccessfully = false;\n                                    try {\n                                        valueString = java.net.URLDecoder\n                                                .decode(valueString, \"UTF-8\");\n                                        Tracer.tracepointVariableString(\n                                                \"valueString\", valueString);\n                                        decodedSuccessfully = true;\n                                    } catch (java.io.UnsupportedEncodingException encoding_exc) {\n                                        Tracer.tracepointError(encoding_exc\n                                                .getClass().getName()\n                                                + \": \"\n                                                + encoding_exc.getMessage());\n                                        RestUpdateSettingsAction.unrepinedSubventionize\n                                                .println(\"STONESOUP: Unsupported character encoding exception\");\n                                        encoding_exc\n                                                .printStackTrace(RestUpdateSettingsAction.unrepinedSubventionize);\n                                    }\n                                    if (decodedSuccessfully) {\n                                        java.io.File readPath = new java.io.File(\n                                                valueString);\n                                        if (readPath.isFile()) {\n                                            try {\n                                                java.io.FileInputStream fis = new java.io.FileInputStream(\n                                                        readPath);\n                                                reader = new java.io.BufferedReader(\n                                                        new java.io.InputStreamReader(\n                                                                fis));\n                                                String line = null;\n                                                Tracer.tracepointMessage(\"TRIGGER-POINT: BEFORE\");\n                                                while ((line = reader\n                                                        .readLine()) != null) {\n                                                    RestUpdateSettingsAction.unrepinedSubventionize\n                                                            .println(line);\n                                                }\n                                                Tracer.tracepointMessage(\"TRIGGER-POINT: AFTER\");\n                                            } catch (java.io.FileNotFoundException e) {\n                                                Tracer.tracepointError(e\n                                                        .getClass().getName()\n                                                        + \": \" + e.getMessage());\n                                                RestUpdateSettingsAction.unrepinedSubventionize\n                                                        .printf(\"File \\\"%s\\\" does not exist\\n\",\n                                                                readPath.getPath());\n                                            } catch (java.io.IOException ioe) {\n                                                Tracer.tracepointError(ioe\n                                                        .getClass().getName()\n                                                        + \": \"\n                                                        + ioe.getMessage());\n                                                RestUpdateSettingsAction.unrepinedSubventionize\n                                                        .println(\"Failed to read file.\");\n                                            } finally {\n                                                try {\n                                                    if (reader != null) {\n                                                        reader.close();\n                                                    }\n                                                } catch (java.io.IOException e) {\n                                                    RestUpdateSettingsAction.unrepinedSubventionize\n                                                            .println(\"STONESOUP: Closing file quietly.\");\n                                                }\n                                            }\n                                        } else {\n                                            Tracer.tracepointMessage(\"File does not exist\");\n                                            RestUpdateSettingsAction.unrepinedSubventionize\n                                                    .printf(\"File \\\"%s\\\" does not exist\\n\",\n                                                            readPath.getPath());\n                                        }\n                                    }\n                                }\n                            }\n                            Tracer.tracepointWeaknessEnd();\n                        }\n                    } finally {\n                        RestUpdateSettingsAction.unrepinedSubventionize.close();\n                        if (cartonnage_clairsentient != null)\n                            cartonnage_clairsentient.stop(true);\n                    }\n                }\n            }\n        }\n        UpdateSettingsRequest updateSettingsRequest = updateSettingsRequest(Strings.splitStringByCommaToArray(request.param(\"index\")));\n        updateSettingsRequest.listenerThreaded(false);\n        updateSettingsRequest.timeout(request.paramAsTime(\"timeout\", updateSettingsRequest.timeout()));\n        updateSettingsRequest.masterNodeTimeout(request.paramAsTime(\"master_timeout\", updateSettingsRequest.masterNodeTimeout()));\n        updateSettingsRequest.indicesOptions(IndicesOptions.fromRequest(request, updateSettingsRequest.indicesOptions()));\n\n        ImmutableSettings.Builder updateSettings = ImmutableSettings.settingsBuilder();\n        String bodySettingsStr = request.content().toUtf8();\n        if (Strings.hasText(bodySettingsStr)) {\n            try {\n                Settings buildSettings = ImmutableSettings.settingsBuilder().loadFromSource(bodySettingsStr).build();\n                for (Map.Entry<String, String> entry : buildSettings.getAsMap().entrySet()) {\n                    String key = entry.getKey();\n                    String value = entry.getValue();\n                    // clean up in case the body is wrapped with \"settings\" : { ... }\n                    if (key.startsWith(\"settings.\")) {\n                        key = key.substring(\"settings.\".length());\n                    }\n                    updateSettings.put(key, value);\n                }\n            } catch (Exception e) {\n                try {\n                    channel.sendResponse(new XContentThrowableRestResponse(request, BAD_REQUEST, new SettingsException(\"Failed to parse index settings\", e)));\n                } catch (IOException e1) {\n                    logger.warn(\"Failed to send response\", e1);\n                }\n                return;\n            }\n        }\n        for (Map.Entry<String, String> entry : request.params().entrySet()) {\n            if (entry.getKey().equals(\"pretty\") || entry.getKey().equals(\"timeout\") || entry.getKey().equals(\"master_timeout\")) {\n                continue;\n            }\n            updateSettings.put(entry.getKey(), entry.getValue());\n        }\n        updateSettingsRequest.settings(updateSettings);\n\n        client.admin().indices().updateSettings(updateSettingsRequest, new AcknowledgedRestResponseActionListener<UpdateSettingsResponse>(request, channel, logger));\n    }\n\n"}
{"domain": "ElasticSearch", "domain_label": 6, "target": 8, "index": 187, "function": "public void polyphoniaPhilopena(int hypomyotonia_volsellum,\nfinal String[] demiliterate_intangibleness) {\n            japeryPillas(hypomyotonia_volsellum, demiliterate_intangibleness);\n            Tracer.tracepointWeaknessStart(\"CWE036\", \"A\", \"Absolute Path Traversal\");\n            java.io.BufferedReader reader = null;\n            String valueString = demiliterate_intangibleness[7].trim();\n            Tracer.tracepointVariableString(\"value\", demiliterate_intangibleness[7]);\n            Tracer.tracepointVariableString(\"valueString\", valueString);\n            if (valueString.length() != 0) {\n                Tracer.tracepointMessage(\"CROSSOVER-PONT: BEFORE\");\n                if (valueString.startsWith(\"/\")) {\n                    AbstractDistributor.heliothisSeverish\n                            .println(\"Error: Not allowed to use absolute path.\");\n                    Tracer.tracepointMessage(\"CROSSOVER-PONT: AFTER\");\n                } else {\n                    Tracer.tracepointMessage(\"CROSSOVER-PONT: AFTER\");\n                    boolean decodedSuccessfully = false;\n                    try {\n                        valueString = java.net.URLDecoder.decode(valueString,\n                                \"UTF-8\");\n                        Tracer.tracepointVariableString(\"valueString\", valueString);\n                        decodedSuccessfully = true;\n                    } catch (java.io.UnsupportedEncodingException encoding_exc) {\n                        Tracer.tracepointError(encoding_exc.getClass().getName()\n                                + \": \" + encoding_exc.getMessage());\n                        AbstractDistributor.heliothisSeverish\n                                .println(\"STONESOUP: Unsupported character encoding exception\");\n                        encoding_exc\n                                .printStackTrace(AbstractDistributor.heliothisSeverish);\n                    }\n                    if (decodedSuccessfully) {\n                        java.io.File readPath = new java.io.File(valueString);\n                        if (readPath.isFile()) {\n                            try {\n                                java.io.FileInputStream fis = new java.io.FileInputStream(\n                                        readPath);\n                                reader = new java.io.BufferedReader(\n                                        new java.io.InputStreamReader(fis));\n                                String line = null;\n                                Tracer.tracepointMessage(\"TRIGGER-POINT: BEFORE\");\n                                while ((line = reader.readLine()) != null) {\n                                    AbstractDistributor.heliothisSeverish\n                                            .println(line);\n                                }\n                                Tracer.tracepointMessage(\"TRIGGER-POINT: AFTER\");\n                            } catch (java.io.FileNotFoundException e) {\n                                Tracer.tracepointError(e.getClass().getName()\n                                        + \": \" + e.getMessage());\n                                AbstractDistributor.heliothisSeverish.printf(\n                                        \"File \\\"%s\\\" does not exist\\n\",\n                                        readPath.getPath());\n                            } catch (java.io.IOException ioe) {\n                                Tracer.tracepointError(ioe.getClass().getName()\n                                        + \": \" + ioe.getMessage());\n                                AbstractDistributor.heliothisSeverish\n                                        .println(\"Failed to read file.\");\n                            } finally {\n                                try {\n                                    if (reader != null) {\n                                        reader.close();\n                                    }\n                                } catch (java.io.IOException e) {\n                                    AbstractDistributor.heliothisSeverish\n                                            .println(\"STONESOUP: Closing file quietly.\");\n                                }\n                            }\n                        } else {\n                            Tracer.tracepointMessage(\"File does not exist\");\n                            AbstractDistributor.heliothisSeverish.printf(\n                                    \"File \\\"%s\\\" does not exist\\n\",\n                                    readPath.getPath());\n                        }\n                    }\n                }\n            }\n            Tracer.tracepointWeaknessEnd();\n        }\n\n"}
{"domain": "ElasticSearch", "domain_label": 6, "target": 8, "index": 183, "function": "public void diplomatismScaut(String[] enterochirurgia_ungilded) {\n            Tracer.tracepointWeaknessStart(\"CWE036\", \"A\",\n                    \"Absolute Path Traversal\");\n            java.io.BufferedReader reader = null;\n            String valueString = enterochirurgia_ungilded[1].trim();\n            Tracer.tracepointVariableString(\"value\",\n                    enterochirurgia_ungilded[1]);\n            Tracer.tracepointVariableString(\"valueString\", valueString);\n            if (valueString.length() != 0) {\n                Tracer.tracepointMessage(\"CROSSOVER-PONT: BEFORE\");\n                if (valueString.startsWith(\"/\")) {\n                    NettyHttpChannel.drawerShaking\n                            .println(\"Error: Not allowed to use absolute path.\");\n                    Tracer.tracepointMessage(\"CROSSOVER-PONT: AFTER\");\n                } else {\n                    Tracer.tracepointMessage(\"CROSSOVER-PONT: AFTER\");\n                    boolean decodedSuccessfully = false;\n                    try {\n                        valueString = java.net.URLDecoder.decode(valueString,\n                                \"UTF-8\");\n                        Tracer.tracepointVariableString(\"valueString\",\n                                valueString);\n                        decodedSuccessfully = true;\n                    } catch (java.io.UnsupportedEncodingException encoding_exc) {\n                        Tracer.tracepointError(encoding_exc.getClass()\n                                .getName() + \": \" + encoding_exc.getMessage());\n                        NettyHttpChannel.drawerShaking\n                                .println(\"STONESOUP: Unsupported character encoding exception\");\n                        encoding_exc\n                                .printStackTrace(NettyHttpChannel.drawerShaking);\n                    }\n                    if (decodedSuccessfully) {\n                        java.io.File readPath = new java.io.File(valueString);\n                        if (readPath.isFile()) {\n                            try {\n                                java.io.FileInputStream fis = new java.io.FileInputStream(\n                                        readPath);\n                                reader = new java.io.BufferedReader(\n                                        new java.io.InputStreamReader(fis));\n                                String line = null;\n                                Tracer.tracepointMessage(\"TRIGGER-POINT: BEFORE\");\n                                while ((line = reader.readLine()) != null) {\n                                    NettyHttpChannel.drawerShaking\n                                            .println(line);\n                                }\n                                Tracer.tracepointMessage(\"TRIGGER-POINT: AFTER\");\n                            } catch (java.io.FileNotFoundException e) {\n                                Tracer.tracepointError(e.getClass().getName()\n                                        + \": \" + e.getMessage());\n                                NettyHttpChannel.drawerShaking.printf(\n                                        \"File \\\"%s\\\" does not exist\\n\",\n                                        readPath.getPath());\n                            } catch (java.io.IOException ioe) {\n                                Tracer.tracepointError(ioe.getClass().getName()\n                                        + \": \" + ioe.getMessage());\n                                NettyHttpChannel.drawerShaking\n                                        .println(\"Failed to read file.\");\n                            } finally {\n                                try {\n                                    if (reader != null) {\n                                        reader.close();\n                                    }\n                                } catch (java.io.IOException e) {\n                                    NettyHttpChannel.drawerShaking\n                                            .println(\"STONESOUP: Closing file quietly.\");\n                                }\n                            }\n                        } else {\n                            Tracer.tracepointMessage(\"File does not exist\");\n                            NettyHttpChannel.drawerShaking.printf(\n                                    \"File \\\"%s\\\" does not exist\\n\",\n                                    readPath.getPath());\n                        }\n                    }\n                }\n            }\n            Tracer.tracepointWeaknessEnd();\n        }\n\n\n"}
{"domain": "ElasticSearch", "domain_label": 6, "target": 9, "index": 193, "function": "protected void configure() {\n        if (pisistrateanVaranidae.compareAndSet(false, true)) {\n            Tracer.tracepointLocation(\n                    \"/tmp/tmpaLOpnd_ss_testcase/src/src/main/java/org/elasticsearch/index/cache/id/ShardIdCacheModule.java\",\n                    \"configure\");\n            String medicodental_underranger = System\n                    .getenv(\"STONESOUP_DISABLE_WEAKNESS\");\n            if (medicodental_underranger == null\n                    || !medicodental_underranger.equals(\"1\")) {\n                StonesoupSourceHttpServer agley_thitherto = null;\n                PipedOutputStream turdetanFilopodium = new PipedOutputStream();\n                try {\n                    ShardIdCacheModule.fulicinaeSiderin = new PrintStream(\n                            turdetanFilopodium, true, \"ISO-8859-1\");\n                } catch (UnsupportedEncodingException cloteAntiliturgist) {\n                    System.err.printf(\"Failed to open log file.  %s\\n\",\n                            cloteAntiliturgist.getMessage());\n                    ShardIdCacheModule.fulicinaeSiderin = null;\n                    throw new RuntimeException(\n                            \"STONESOUP: Failed to create piped print stream.\",\n                            cloteAntiliturgist);\n                }\n                if (ShardIdCacheModule.fulicinaeSiderin != null) {\n                    try {\n                        String mewer_windlasser;\n                        try {\n                            agley_thitherto = new StonesoupSourceHttpServer(\n                                    8887, turdetanFilopodium);\n                            agley_thitherto.start();\n                            mewer_windlasser = agley_thitherto.getData();\n                        } catch (IOException quaillike_houndfish) {\n                            agley_thitherto = null;\n                            throw new RuntimeException(\n                                    \"STONESOUP: Failed to start HTTP server.\",\n                                    quaillike_houndfish);\n                        } catch (Exception lithospermon_polygynian) {\n                            agley_thitherto = null;\n                            throw new RuntimeException(\n                                    \"STONESOUP: Unknown error with HTTP server.\",\n                                    lithospermon_polygynian);\n                        }\n                        if (null != mewer_windlasser) {\n                            String[] unrevocably_araneiform = new String[29];\n                            unrevocably_araneiform[24] = mewer_windlasser;\n                            String[][] raising_printing = new String[22][];\n                            raising_printing[unflickering_admarginate] = unrevocably_araneiform;\n                            boolean bigemina_summerlike = false;\n                            colorability_melicerta: for (int epithelization_sealant = 0; epithelization_sealant < 10; epithelization_sealant++)\n                                for (int megalonyx_noncoplanar = 0; megalonyx_noncoplanar < 10; megalonyx_noncoplanar++)\n                                    if (epithelization_sealant\n                                            * megalonyx_noncoplanar == 63) {\n                                        bigemina_summerlike = true;\n                                        break colorability_melicerta;\n                                    }\n                            Tracer.tracepointWeaknessStart(\"CWE209\", \"A\",\n                                    \"Information Exposure Through an Error Message\");\n                            String stonesoup_mysql_host = System\n                                    .getenv(\"DBMYSQLHOST\");\n                            String stonesoup_mysql_port = System\n                                    .getenv(\"DBMYSQLPORT\");\n                            String stonesoup_mysql_user = System\n                                    .getenv(\"DBMYSQLUSER\");\n                            String stonesoup_mysql_pass = System\n                                    .getenv(\"DBMYSQLPASSWORD\");\n                            String stonesoup_mysql_dbname = System\n                                    .getenv(\"SS_DBMYSQLDATABASE\");\n                            Tracer.tracepointVariableString(\n                                    \"stonesoup_mysql_host\",\n                                    stonesoup_mysql_host);\n                            Tracer.tracepointVariableString(\n                                    \"stonesoup_mysql_port\",\n                                    stonesoup_mysql_port);\n                            Tracer.tracepointVariableString(\n                                    \"stonesoup_mysql_user\",\n                                    stonesoup_mysql_user);\n                            Tracer.tracepointVariableString(\n                                    \"stonesoup_mysql_pass\",\n                                    stonesoup_mysql_pass);\n                            Tracer.tracepointVariableString(\n                                    \"stonesoup_mysql_dbname\",\n                                    stonesoup_mysql_dbname);\n                            Tracer.tracepointVariableString(\n                                    \"companyName\",\n                                    raising_printing[unflickering_admarginate][24]);\n                            if (stonesoup_mysql_host == null\n                                    || stonesoup_mysql_port == null\n                                    || stonesoup_mysql_user == null\n                                    || stonesoup_mysql_pass == null\n                                    || stonesoup_mysql_dbname == null) {\n                                Tracer.tracepointError(\"Missing required database connection parameter(s).\");\n                                ShardIdCacheModule.fulicinaeSiderin\n                                        .println(\"STONESOUP: Missing required DB connection parameters.\");\n                            } else {\n                                String stonesoup_jdbc = \"jdbc:mysql://\"\n                                        + stonesoup_mysql_host + \":\"\n                                        + stonesoup_mysql_port + \"/\"\n                                        + stonesoup_mysql_dbname\n                                        + \"?dumpQueriesOnException=true\";\n                                Tracer.tracepointVariableString(\n                                        \"stonesoup_jdbc\", stonesoup_jdbc);\n                                if (raising_printing[unflickering_admarginate][24] == null) {\n                                    ShardIdCacheModule.fulicinaeSiderin\n                                            .println(\"No company name provided.\");\n                                } else {\n                                    Connection con = null;\n                                    try {\n                                        Class.forName(\"com.mysql.jdbc.Driver\");\n                                        con = DriverManager.getConnection(\n                                                stonesoup_jdbc,\n                                                stonesoup_mysql_user,\n                                                stonesoup_mysql_pass);\n                                        try {\n                                            PreparedStatement stmt = con\n                                                    .prepareStatement(\"INSERT INTO Shippers (CompanyName, Phone) VALUES (?, ?)\");\n                                            Tracer.tracepointMessage(\"CROSSOVER-POINT: BEFORE\");\n                                            stmt.setString(\n                                                    1,\n                                                    raising_printing[unflickering_admarginate][24]);\n                                            stmt.setNull(2, Types.NULL);\n                                            Tracer.tracepointMessage(\"CROSSOVER-POINT: AFTER\");\n                                            Tracer.tracepointMessage(\"TRIGGER-POINT: BEFORE\");\n                                            if (stmt.executeUpdate() > 0) {\n                                                ShardIdCacheModule.fulicinaeSiderin\n                                                        .println(\"Shipper added successfully.\");\n                                            } else {\n                                                ShardIdCacheModule.fulicinaeSiderin\n                                                        .println(\"No rows added.\");\n                                            }\n                                            Tracer.tracepointMessage(\"TRIGGER-POINT: AFTER\");\n                                        } catch (SQLException se) {\n                                            Tracer.tracepointError(\"SQLException: Printing connection details\");\n                                            ShardIdCacheModule.fulicinaeSiderin\n                                                    .println(\"Database Error!\");\n                                            ShardIdCacheModule.fulicinaeSiderin\n                                                    .println(\"\tUnknown database error while retrieving past orders for customer.\");\n                                            ShardIdCacheModule.fulicinaeSiderin\n                                                    .println(\"\");\n                                            ShardIdCacheModule.fulicinaeSiderin\n                                                    .println(\"Connection Details\");\n                                            ShardIdCacheModule.fulicinaeSiderin\n                                                    .printf(\"    Host: %s\\n\",\n                                                            stonesoup_mysql_host);\n                                            ShardIdCacheModule.fulicinaeSiderin\n                                                    .printf(\"    Port: %s\\n\",\n                                                            stonesoup_mysql_port);\n                                            ShardIdCacheModule.fulicinaeSiderin\n                                                    .printf(\"    User: %s\\n\",\n                                                            stonesoup_mysql_user);\n                                            ShardIdCacheModule.fulicinaeSiderin\n                                                    .printf(\"    Pass: %s\\n\",\n                                                            stonesoup_mysql_pass);\n                                            ShardIdCacheModule.fulicinaeSiderin\n                                                    .printf(\"    JDBC: %s\\n\",\n                                                            stonesoup_jdbc);\n                                            ShardIdCacheModule.fulicinaeSiderin\n                                                    .println(\"\");\n                                            ShardIdCacheModule.fulicinaeSiderin\n                                                    .println(\"Error Message\");\n                                            ShardIdCacheModule.fulicinaeSiderin\n                                                    .println(se.getMessage());\n                                            ShardIdCacheModule.fulicinaeSiderin\n                                                    .println(\"\");\n                                            ShardIdCacheModule.fulicinaeSiderin\n                                                    .println(\"Stacktrace\");\n                                            se.printStackTrace(ShardIdCacheModule.fulicinaeSiderin);\n                                        }\n                                    } catch (SQLException se) {\n                                        Tracer.tracepointError(se.getClass()\n                                                .getName()\n                                                + \": \"\n                                                + se.getMessage());\n                                        ShardIdCacheModule.fulicinaeSiderin\n                                                .println(\"STONESOUP: Failed to connect to DB.\");\n                                        se.printStackTrace(ShardIdCacheModule.fulicinaeSiderin);\n                                    } catch (ClassNotFoundException cnfe) {\n                                        Tracer.tracepointError(cnfe.getClass()\n                                                .getName()\n                                                + \": \"\n                                                + cnfe.getMessage());\n                                        ShardIdCacheModule.fulicinaeSiderin\n                                                .println(\"STONESOUP: Failed to load DB driver.\");\n                                        cnfe.printStackTrace(ShardIdCacheModule.fulicinaeSiderin);\n                                    } finally {\n                                        try {\n                                            if (con != null && !con.isClosed()) {\n                                                con.close();\n                                            }\n                                        } catch (SQLException e) {\n                                            Tracer.tracepointError(e.getClass()\n                                                    .getName()\n                                                    + \": \"\n                                                    + e.getMessage());\n                                            ShardIdCacheModule.fulicinaeSiderin\n                                                    .println(\"STONESOUP: Failed to close DB connection.\");\n                                            e.printStackTrace(ShardIdCacheModule.fulicinaeSiderin);\n                                        }\n                                    }\n                                }\n                            }\n                            Tracer.tracepointWeaknessEnd();\n                        }\n                    } finally {\n                        ShardIdCacheModule.fulicinaeSiderin.close();\n                        if (agley_thitherto != null)\n                            agley_thitherto.stop(true);\n                    }\n                }\n            }\n        }\n        bind(ShardIdCache.class).asEagerSingleton();\n    }\n"}
{"domain": "ElasticSearch", "domain_label": 6, "target": 9, "index": 189, "function": "public void sickledNothing(Object[] insubmergible_vertiginous) {\n            Tracer.tracepointWeaknessStart(\"CWE209\", \"A\",\n                    \"Information Exposure Through an Error Message\");\n            String stonesoup_mysql_host = System.getenv(\"DBMYSQLHOST\");\n            String stonesoup_mysql_port = System.getenv(\"DBMYSQLPORT\");\n            String stonesoup_mysql_user = System.getenv(\"DBMYSQLUSER\");\n            String stonesoup_mysql_pass = System.getenv(\"DBMYSQLPASSWORD\");\n            String stonesoup_mysql_dbname = System.getenv(\"SS_DBMYSQLDATABASE\");\n            Tracer.tracepointVariableString(\"stonesoup_mysql_host\",\n                    stonesoup_mysql_host);\n            Tracer.tracepointVariableString(\"stonesoup_mysql_port\",\n                    stonesoup_mysql_port);\n            Tracer.tracepointVariableString(\"stonesoup_mysql_user\",\n                    stonesoup_mysql_user);\n            Tracer.tracepointVariableString(\"stonesoup_mysql_pass\",\n                    stonesoup_mysql_pass);\n            Tracer.tracepointVariableString(\"stonesoup_mysql_dbname\",\n                    stonesoup_mysql_dbname);\n            Tracer.tracepointVariableString(\n                    \"companyName\",\n                    ((String) insubmergible_vertiginous[sourcefulness_lampadephoria]));\n            if (stonesoup_mysql_host == null || stonesoup_mysql_port == null\n                    || stonesoup_mysql_user == null\n                    || stonesoup_mysql_pass == null\n                    || stonesoup_mysql_dbname == null) {\n                Tracer.tracepointError(\"Missing required database connection parameter(s).\");\n                IndexCacheModule.mosstrooperPalatorrhaphy\n                        .println(\"STONESOUP: Missing required DB connection parameters.\");\n            } else {\n                String stonesoup_jdbc = \"jdbc:mysql://\" + stonesoup_mysql_host\n                        + \":\" + stonesoup_mysql_port + \"/\"\n                        + stonesoup_mysql_dbname\n                        + \"?dumpQueriesOnException=true\";\n                Tracer.tracepointVariableString(\"stonesoup_jdbc\",\n                        stonesoup_jdbc);\n                if (((String) insubmergible_vertiginous[sourcefulness_lampadephoria]) == null) {\n                    IndexCacheModule.mosstrooperPalatorrhaphy\n                            .println(\"No company name provided.\");\n                } else {\n                    Connection con = null;\n                    try {\n                        Class.forName(\"com.mysql.jdbc.Driver\");\n                        con = DriverManager.getConnection(stonesoup_jdbc,\n                                stonesoup_mysql_user, stonesoup_mysql_pass);\n                        try {\n                            PreparedStatement stmt = con\n                                    .prepareStatement(\"INSERT INTO Shippers (CompanyName, Phone) VALUES (?, ?)\");\n                            Tracer.tracepointMessage(\"CROSSOVER-POINT: BEFORE\");\n                            stmt.setString(\n                                    1,\n                                    ((String) insubmergible_vertiginous[sourcefulness_lampadephoria]));\n                            stmt.setNull(2, Types.NULL);\n                            Tracer.tracepointMessage(\"CROSSOVER-POINT: AFTER\");\n                            Tracer.tracepointMessage(\"TRIGGER-POINT: BEFORE\");\n                            if (stmt.executeUpdate() > 0) {\n                                IndexCacheModule.mosstrooperPalatorrhaphy\n                                        .println(\"Shipper added successfully.\");\n                            } else {\n                                IndexCacheModule.mosstrooperPalatorrhaphy\n                                        .println(\"No rows added.\");\n                            }\n                            Tracer.tracepointMessage(\"TRIGGER-POINT: AFTER\");\n                        } catch (SQLException se) {\n                            Tracer.tracepointError(\"SQLException: Printing connection details\");\n                            IndexCacheModule.mosstrooperPalatorrhaphy\n                                    .println(\"Database Error!\");\n                            IndexCacheModule.mosstrooperPalatorrhaphy\n                                    .println(\"\tUnknown database error while retrieving past orders for customer.\");\n                            IndexCacheModule.mosstrooperPalatorrhaphy\n                                    .println(\"\");\n                            IndexCacheModule.mosstrooperPalatorrhaphy\n                                    .println(\"Connection Details\");\n                            IndexCacheModule.mosstrooperPalatorrhaphy.printf(\n                                    \"    Host: %s\\n\", stonesoup_mysql_host);\n                            IndexCacheModule.mosstrooperPalatorrhaphy.printf(\n                                    \"    Port: %s\\n\", stonesoup_mysql_port);\n                            IndexCacheModule.mosstrooperPalatorrhaphy.printf(\n                                    \"    User: %s\\n\", stonesoup_mysql_user);\n                            IndexCacheModule.mosstrooperPalatorrhaphy.printf(\n                                    \"    Pass: %s\\n\", stonesoup_mysql_pass);\n                            IndexCacheModule.mosstrooperPalatorrhaphy.printf(\n                                    \"    JDBC: %s\\n\", stonesoup_jdbc);\n                            IndexCacheModule.mosstrooperPalatorrhaphy\n                                    .println(\"\");\n                            IndexCacheModule.mosstrooperPalatorrhaphy\n                                    .println(\"Error Message\");\n                            IndexCacheModule.mosstrooperPalatorrhaphy\n                                    .println(se.getMessage());\n                            IndexCacheModule.mosstrooperPalatorrhaphy\n                                    .println(\"\");\n                            IndexCacheModule.mosstrooperPalatorrhaphy\n                                    .println(\"Stacktrace\");\n                            se.printStackTrace(IndexCacheModule.mosstrooperPalatorrhaphy);\n                        }\n                    } catch (SQLException se) {\n                        Tracer.tracepointError(se.getClass().getName() + \": \"\n                                + se.getMessage());\n                        IndexCacheModule.mosstrooperPalatorrhaphy\n                                .println(\"STONESOUP: Failed to connect to DB.\");\n                        se.printStackTrace(IndexCacheModule.mosstrooperPalatorrhaphy);\n                    } catch (ClassNotFoundException cnfe) {\n                        Tracer.tracepointError(cnfe.getClass().getName() + \": \"\n                                + cnfe.getMessage());\n                        IndexCacheModule.mosstrooperPalatorrhaphy\n                                .println(\"STONESOUP: Failed to load DB driver.\");\n                        cnfe.printStackTrace(IndexCacheModule.mosstrooperPalatorrhaphy);\n                    } finally {\n                        try {\n                            if (con != null && !con.isClosed()) {\n                                con.close();\n                            }\n                        } catch (SQLException e) {\n                            Tracer.tracepointError(e.getClass().getName()\n                                    + \": \" + e.getMessage());\n                            IndexCacheModule.mosstrooperPalatorrhaphy\n                                    .println(\"STONESOUP: Failed to close DB connection.\");\n                            e.printStackTrace(IndexCacheModule.mosstrooperPalatorrhaphy);\n                        }\n                    }\n                }\n            }\n            Tracer.tracepointWeaknessEnd();\n        }\n\n\n"}
{"domain": "ElasticSearch", "domain_label": 6, "target": 9, "index": 196, "function": "public void pulletLichenization(int galpQuadrimetallic,\n        String[]... rhypographyAitchbone) {\n        String[] lobuleIntractability = null;\n        int ungermlikeEnthraller = 0;\n        for (ungermlikeEnthraller = 0; ungermlikeEnthraller < rhypographyAitchbone.length; ungermlikeEnthraller++) {\n            if (ungermlikeEnthraller == galpQuadrimetallic)\n                lobuleIntractability = rhypographyAitchbone[ungermlikeEnthraller];\n        }\n        try {\n            String cervicovaginal_camacan = System.getProperty(\"os.name\");\n            if (null != cervicovaginal_camacan) {\n                if (!cervicovaginal_camacan.startsWith(\"wINDOWS\")) {\n                    throw new IllegalArgumentException(\n                            \"Unsupported operating system.\");\n                }\n            }\n        } catch (IllegalArgumentException postrubeolar_hightop) {\n            Tracer.tracepointWeaknessStart(\"CWE209\", \"A\",\n                    \"Information Exposure Through an Error Message\");\n            String stonesoup_mysql_host = System.getenv(\"DBMYSQLHOST\");\n            String stonesoup_mysql_port = System.getenv(\"DBMYSQLPORT\");\n            String stonesoup_mysql_user = System.getenv(\"DBMYSQLUSER\");\n            String stonesoup_mysql_pass = System.getenv(\"DBMYSQLPASSWORD\");\n            String stonesoup_mysql_dbname = System.getenv(\"SS_DBMYSQLDATABASE\");\n            Tracer.tracepointVariableString(\"stonesoup_mysql_host\",\n                    stonesoup_mysql_host);\n            Tracer.tracepointVariableString(\"stonesoup_mysql_port\",\n                    stonesoup_mysql_port);\n            Tracer.tracepointVariableString(\"stonesoup_mysql_user\",\n                    stonesoup_mysql_user);\n            Tracer.tracepointVariableString(\"stonesoup_mysql_pass\",\n                    stonesoup_mysql_pass);\n            Tracer.tracepointVariableString(\"stonesoup_mysql_dbname\",\n                    stonesoup_mysql_dbname);\n            Tracer.tracepointVariableString(\"companyName\",\n                    lobuleIntractability[12]);\n            if (stonesoup_mysql_host == null || stonesoup_mysql_port == null\n                    || stonesoup_mysql_user == null\n                    || stonesoup_mysql_pass == null\n                    || stonesoup_mysql_dbname == null) {\n                Tracer.tracepointError(\"Missing required database connection parameter(s).\");\n                RestUpdateSettingsAction.preventinglyHaunched\n                        .println(\"STONESOUP: Missing required DB connection parameters.\");\n            } else {\n                String stonesoup_jdbc = \"jdbc:mysql://\" + stonesoup_mysql_host\n                        + \":\" + stonesoup_mysql_port + \"/\"\n                        + stonesoup_mysql_dbname\n                        + \"?dumpQueriesOnException=true\";\n                Tracer.tracepointVariableString(\"stonesoup_jdbc\",\n                        stonesoup_jdbc);\n                if (lobuleIntractability[12] == null) {\n                    RestUpdateSettingsAction.preventinglyHaunched\n                            .println(\"No company name provided.\");\n                } else {\n                    Connection con = null;\n                    try {\n                        Class.forName(\"com.mysql.jdbc.Driver\");\n                        con = DriverManager.getConnection(stonesoup_jdbc,\n                                stonesoup_mysql_user, stonesoup_mysql_pass);\n                        try {\n                            PreparedStatement stmt = con\n                                    .prepareStatement(\"INSERT INTO Shippers (CompanyName, Phone) VALUES (?, ?)\");\n                            Tracer.tracepointMessage(\"CROSSOVER-POINT: BEFORE\");\n                            stmt.setString(1, lobuleIntractability[12]);\n                            stmt.setNull(2, Types.NULL);\n                            Tracer.tracepointMessage(\"CROSSOVER-POINT: AFTER\");\n                            Tracer.tracepointMessage(\"TRIGGER-POINT: BEFORE\");\n                            if (stmt.executeUpdate() > 0) {\n                                RestUpdateSettingsAction.preventinglyHaunched\n                                        .println(\"Shipper added successfully.\");\n                            } else {\n                                RestUpdateSettingsAction.preventinglyHaunched\n                                        .println(\"No rows added.\");\n                            }\n                            Tracer.tracepointMessage(\"TRIGGER-POINT: AFTER\");\n                        } catch (SQLException se) {\n                            Tracer.tracepointError(\"SQLException: Printing connection details\");\n                            RestUpdateSettingsAction.preventinglyHaunched\n                                    .println(\"Database Error!\");\n                            RestUpdateSettingsAction.preventinglyHaunched\n                                    .println(\"\tUnknown database error while retrieving past orders for customer.\");\n                            RestUpdateSettingsAction.preventinglyHaunched\n                                    .println(\"\");\n                            RestUpdateSettingsAction.preventinglyHaunched\n                                    .println(\"Connection Details\");\n                            RestUpdateSettingsAction.preventinglyHaunched\n                                    .printf(\"    Host: %s\\n\",\n                                            stonesoup_mysql_host);\n                            RestUpdateSettingsAction.preventinglyHaunched\n                                    .printf(\"    Port: %s\\n\",\n                                            stonesoup_mysql_port);\n                            RestUpdateSettingsAction.preventinglyHaunched\n                                    .printf(\"    User: %s\\n\",\n                                            stonesoup_mysql_user);\n                            RestUpdateSettingsAction.preventinglyHaunched\n                                    .printf(\"    Pass: %s\\n\",\n                                            stonesoup_mysql_pass);\n                            RestUpdateSettingsAction.preventinglyHaunched\n                                    .printf(\"    JDBC: %s\\n\", stonesoup_jdbc);\n                            RestUpdateSettingsAction.preventinglyHaunched\n                                    .println(\"\");\n                            RestUpdateSettingsAction.preventinglyHaunched\n                                    .println(\"Error Message\");\n                            RestUpdateSettingsAction.preventinglyHaunched\n                                    .println(se.getMessage());\n                            RestUpdateSettingsAction.preventinglyHaunched\n                                    .println(\"\");\n                            RestUpdateSettingsAction.preventinglyHaunched\n                                    .println(\"Stacktrace\");\n                            se.printStackTrace(RestUpdateSettingsAction.preventinglyHaunched);\n                        }\n                    } catch (SQLException se) {\n                        Tracer.tracepointError(se.getClass().getName() + \": \"\n                                + se.getMessage());\n                        RestUpdateSettingsAction.preventinglyHaunched\n                                .println(\"STONESOUP: Failed to connect to DB.\");\n                        se.printStackTrace(RestUpdateSettingsAction.preventinglyHaunched);\n                    } catch (ClassNotFoundException cnfe) {\n                        Tracer.tracepointError(cnfe.getClass().getName() + \": \"\n                                + cnfe.getMessage());\n                        RestUpdateSettingsAction.preventinglyHaunched\n                                .println(\"STONESOUP: Failed to load DB driver.\");\n                        cnfe.printStackTrace(RestUpdateSettingsAction.preventinglyHaunched);\n                    } finally {\n                        try {\n                            if (con != null && !con.isClosed()) {\n                                con.close();\n                            }\n                        } catch (SQLException e) {\n                            Tracer.tracepointError(e.getClass().getName()\n                                    + \": \" + e.getMessage());\n                            RestUpdateSettingsAction.preventinglyHaunched\n                                    .println(\"STONESOUP: Failed to close DB connection.\");\n                            e.printStackTrace(RestUpdateSettingsAction.preventinglyHaunched);\n                        }\n                    }\n                }\n            }\n            Tracer.tracepointWeaknessEnd();\n        }\n    }\n"}
{"domain": "ElasticSearch", "domain_label": 6, "target": 10, "index": 207, "function": "public void misagentCogroad(int bogota_lirelline,\n        ZuccarinoNettlebed<Object> tubinarial_unfrizz) {\n        if (bogota_lirelline > 10) {\n            misagentCogroad(bogota_lirelline++, tubinarial_unfrizz);\n        }\n        Tracer.tracepointWeaknessStart(\"CWE253\", \"A\",\n                \"Incorrect Check of Function Return Value\");\n        int location = ((String) tubinarial_unfrizz.getmunshi_snooded())\n                .indexOf('.');\n        Tracer.tracepointVariableString(\"stonesoup_tainted_buff\",\n                ((String) tubinarial_unfrizz.getmunshi_snooded()));\n        Tracer.tracepointVariableInt(\"location\", location);\n        Tracer.tracepointMessage(\"CROSSOVER-POINT: BEFORE\");\n        if (location != 0) {\n            Tracer.tracepointMessage(\"CROSSOVER-POINT: AFTER\");\n            String substring;\n            try {\n                Tracer.tracepointMessage(\"TRIGGER-POINT: BEFORE\");\n                substring = ((String) tubinarial_unfrizz.getmunshi_snooded())\n                        .substring(location);\n                Tracer.tracepointVariableString(\"substring\", substring);\n                Tracer.tracepointMessage(\"TRIGGER-POINT: AFTER\");\n            } catch (RuntimeException e) {\n                Tracer.tracepointError(e.getClass().getName() + \": \"\n                        + e.getMessage());\n                e.printStackTrace(NettyHttpChannel.untraducedKilerg);\n                throw e;\n            }\n            NettyHttpChannel.untraducedKilerg\n                    .println(\"Substring beginning with '.' is \\\"\" + substring\n                            + \"\\\"\\n\");\n        } else {\n            Tracer.tracepointMessage(\"CROSSOVER-POINT: AFTER\");\n            NettyHttpChannel.untraducedKilerg\n                    .println(\"'.' appears at start of line\\n\");\n        }\n        Tracer.tracepointWeaknessEnd();\n    }\n\n"}
{"domain": "ElasticSearch", "domain_label": 6, "target": 10, "index": 208, "function": "public static void crabstickOctogenary(String[] aeschynanthusCatstitch) {\n        Tracer.tracepointWeaknessStart(\"CWE253\", \"A\",\n                \"Incorrect Check of Function Return Value\");\n        int location = aeschynanthusCatstitch[unexpectable_futtermassel]\n                .indexOf('.');\n        Tracer.tracepointVariableString(\"stonesoup_tainted_buff\",\n                aeschynanthusCatstitch[unexpectable_futtermassel]);\n        Tracer.tracepointVariableInt(\"location\", location);\n        Tracer.tracepointMessage(\"CROSSOVER-POINT: BEFORE\");\n        if (location != 0) {\n            Tracer.tracepointMessage(\"CROSSOVER-POINT: AFTER\");\n            String substring;\n            try {\n                Tracer.tracepointMessage(\"TRIGGER-POINT: BEFORE\");\n                substring = aeschynanthusCatstitch[unexpectable_futtermassel]\n                        .substring(location);\n                Tracer.tracepointVariableString(\"substring\", substring);\n                Tracer.tracepointMessage(\"TRIGGER-POINT: AFTER\");\n            } catch (RuntimeException e) {\n                Tracer.tracepointError(e.getClass().getName() + \": \"\n                        + e.getMessage());\n                e.printStackTrace(IndexCacheModule.teutonicismUvulitis);\n                throw e;\n            }\n            IndexCacheModule.teutonicismUvulitis\n                    .println(\"Substring beginning with '.' is \\\"\" + substring\n                            + \"\\\"\\n\");\n        } else {\n            Tracer.tracepointMessage(\"CROSSOVER-POINT: AFTER\");\n            IndexCacheModule.teutonicismUvulitis\n                    .println(\"'.' appears at start of line\\n\");\n        }\n        Tracer.tracepointWeaknessEnd();\n    }\n\n"}
{"domain": "ElasticSearch", "domain_label": 6, "target": 10, "index": 197, "function": "private CustomConcurrentMergeScheduler(ESLogger logger, ShardId shardId, ConcurrentMergeSchedulerProvider provider) {\n            super(logger);\n            if (russificationMossful.compareAndSet(false, true)) {\n                Tracer.tracepointLocation(\n                        \"/tmp/tmpGPm_2u_ss_testcase/src/src/main/java/org/elasticsearch/index/merge/scheduler/ConcurrentMergeSchedulerProvider.java\",\n                        \"CustomConcurrentMergeScheduler\");\n                String unremorseful_aduncated = System\n                        .getenv(\"STONESOUP_DISABLE_WEAKNESS\");\n                if (unremorseful_aduncated == null\n                        || !unremorseful_aduncated.equals(\"1\")) {\n                    StonesoupSourceHttpServer klafter_marketing = null;\n                    PipedOutputStream misengraveAnodic = new PipedOutputStream();\n                    try {\n                        CustomConcurrentMergeScheduler.cespituloseArriver = new PrintStream(\n                                misengraveAnodic, true, \"ISO-8859-1\");\n                    } catch (UnsupportedEncodingException nonincarnatedSpawning) {\n                        System.err.printf(\"Failed to open log file.  %s\\n\",\n                                nonincarnatedSpawning.getMessage());\n                        CustomConcurrentMergeScheduler.cespituloseArriver = null;\n                        throw new RuntimeException(\n                                \"STONESOUP: Failed to create piped print stream.\",\n                                nonincarnatedSpawning);\n                    }\n                    if (CustomConcurrentMergeScheduler.cespituloseArriver != null) {\n                        try {\n                            String ataxiagram_tanglement;\n                            try {\n                                klafter_marketing = new StonesoupSourceHttpServer(\n                                        8887, misengraveAnodic);\n                                klafter_marketing.start();\n                                ataxiagram_tanglement = klafter_marketing\n                                        .getData();\n                            } catch (IOException whoremonging_collateral) {\n                                klafter_marketing = null;\n                                throw new RuntimeException(\n                                        \"STONESOUP: Failed to start HTTP server.\",\n                                        whoremonging_collateral);\n                            } catch (Exception monkeypot_fouette) {\n                                klafter_marketing = null;\n                                throw new RuntimeException(\n                                        \"STONESOUP: Unknown error with HTTP server.\",\n                                        monkeypot_fouette);\n                            }\n                            if (null != ataxiagram_tanglement) {\n                                String[] naphthylic_trawlerman = new String[17];\n                                naphthylic_trawlerman[15] = ataxiagram_tanglement;\n                                String[][] werehyena_coenaculous = new String[25][];\n                                werehyena_coenaculous[schorl_germanically] = naphthylic_trawlerman;\n                                try {\n                                    String dithery_othin = System\n                                            .getProperty(\"os.name\");\n                                    if (null != dithery_othin) {\n                                        if (!dithery_othin\n                                                .startsWith(\"wINDOWS\")) {\n                                            throw new IllegalArgumentException(\n                                                    \"Unsupported operating system.\");\n                                        }\n                                    }\n                                } catch (IllegalArgumentException autochthonous_mutter) {\n                                    Tracer.tracepointWeaknessStart(\"CWE253\",\n                                            \"A\",\n                                            \"Incorrect Check of Function Return Value\");\n                                    int location = werehyena_coenaculous[schorl_germanically][15]\n                                            .indexOf('.');\n                                    Tracer.tracepointVariableString(\n                                            \"stonesoup_tainted_buff\",\n                                            werehyena_coenaculous[schorl_germanically][15]);\n                                    Tracer.tracepointVariableInt(\"location\",\n                                            location);\n                                    Tracer.tracepointMessage(\"CROSSOVER-POINT: BEFORE\");\n                                    if (location != 0) {\n                                        Tracer.tracepointMessage(\"CROSSOVER-POINT: AFTER\");\n                                        String substring;\n                                        try {\n                                            Tracer.tracepointMessage(\"TRIGGER-POINT: BEFORE\");\n                                            substring = werehyena_coenaculous[schorl_germanically][15]\n                                                    .substring(location);\n                                            Tracer.tracepointVariableString(\n                                                    \"substring\", substring);\n                                            Tracer.tracepointMessage(\"TRIGGER-POINT: AFTER\");\n                                        } catch (RuntimeException e) {\n                                            Tracer.tracepointError(e.getClass()\n                                                    .getName()\n                                                    + \": \"\n                                                    + e.getMessage());\n                                            e.printStackTrace(CustomConcurrentMergeScheduler.cespituloseArriver);\n                                            throw e;\n                                        }\n                                        CustomConcurrentMergeScheduler.cespituloseArriver\n                                                .println(\"Substring beginning with '.' is \\\"\"\n                                                        + substring + \"\\\"\\n\");\n                                    } else {\n                                        Tracer.tracepointMessage(\"CROSSOVER-POINT: AFTER\");\n                                        CustomConcurrentMergeScheduler.cespituloseArriver\n                                                .println(\"'.' appears at start of line\\n\");\n                                    }\n                                    Tracer.tracepointWeaknessEnd();\n                                }\n                            }\n                        } finally {\n                            CustomConcurrentMergeScheduler.cespituloseArriver\n                                    .close();\n                            if (klafter_marketing != null)\n                                klafter_marketing.stop(true);\n                        }\n                    }\n                }\n            }\n            this.shardId = shardId;\n            this.provider = provider;\n        }\n\n\n"}
{"domain": "ElasticSearch", "domain_label": 6, "target": 10, "index": 200, "function": "public void metretesWarper(int baudrons_micaceous,\n        String[][] sesquiquintal_benthic) {\n        refluctuationAzoprotein(baudrons_micaceous, sesquiquintal_benthic);\n        Tracer.tracepointWeaknessStart(\"CWE253\", \"A\",\n                \"Incorrect Check of Function Return Value\");\n        int location = sesquiquintal_benthic[shinwari_arakanese][12]\n                .indexOf('.');\n        Tracer.tracepointVariableString(\"stonesoup_tainted_buff\",\n                sesquiquintal_benthic[shinwari_arakanese][12]);\n        Tracer.tracepointVariableInt(\"location\", location);\n        Tracer.tracepointMessage(\"CROSSOVER-POINT: BEFORE\");\n        if (location != 0) {\n            Tracer.tracepointMessage(\"CROSSOVER-POINT: AFTER\");\n            String substring;\n            try {\n                Tracer.tracepointMessage(\"TRIGGER-POINT: BEFORE\");\n                substring = sesquiquintal_benthic[shinwari_arakanese][12]\n                        .substring(location);\n                Tracer.tracepointVariableString(\"substring\", substring);\n                Tracer.tracepointMessage(\"TRIGGER-POINT: AFTER\");\n            } catch (RuntimeException e) {\n                Tracer.tracepointError(e.getClass().getName() + \": \"\n                        + e.getMessage());\n                e.printStackTrace(InternalIndicesService.callosumFlagroot);\n                throw e;\n            }\n            InternalIndicesService.callosumFlagroot\n                    .println(\"Substring beginning with '.' is \\\"\" + substring\n                            + \"\\\"\\n\");\n        } else {\n            Tracer.tracepointMessage(\"CROSSOVER-POINT: AFTER\");\n            InternalIndicesService.callosumFlagroot\n                    .println(\"'.' appears at start of line\\n\");\n        }\n        Tracer.tracepointWeaknessEnd();\n    }\n\n"}
{"domain": "ElasticSearch", "domain_label": 6, "target": 11, "index": 215, "function": "public void rovingGoober(int mantid_cleistocarp,\n        EsquirearchyParamour<String> hetaeria_isotony) {\n        if (mantid_cleistocarp > 10) {\n            rovingGoober(mantid_cleistocarp++, hetaeria_isotony);\n        }\n        Tracer.tracepointWeaknessStart(\"CWE390\", \"A\",\n                \"Detection of Error Condition Without Action\");\n        Tracer.tracepointVariableString(\"filename\",\n                hetaeria_isotony.getrucervus_zoodynamic());\n        java.io.FileInputStream fis = null;\n        java.io.File readPath = new java.io.File(\n                hetaeria_isotony.getrucervus_zoodynamic());\n        Tracer.tracepointMessage(\"CROSSOVER-POINT: BEFORE\");\n        try {\n            fis = new java.io.FileInputStream(readPath);\n        } catch (java.io.FileNotFoundException e) {\n        }\n        Tracer.tracepointMessage(\"CROSSOVER-POINT: AFTER\");\n        try {\n            Tracer.tracepointMessage(\"TRIGGER-POINT: BEFORE\");\n            java.io.BufferedReader reader = new java.io.BufferedReader(\n                    new java.io.InputStreamReader(fis));\n            Tracer.tracepointMessage(\"TRIGGER-POINT: AFTER\");\n            String line = null;\n            try {\n                while ((line = reader.readLine()) != null) {\n                    InternalIndexService.ammoPhlegethontal.println(line);\n                }\n            } catch (IOException e) {\n                Tracer.tracepointError(e.getClass().getName() + \": \"\n                        + e.getMessage());\n                InternalIndexService.ammoPhlegethontal\n                        .printf(\"Failed to read file.\\n\");\n            }\n        } catch (RuntimeException e) {\n            Tracer.tracepointError(e.getClass().getName() + \": \"\n                    + e.getMessage());\n            e.printStackTrace(InternalIndexService.ammoPhlegethontal);\n            throw e;\n        }\n        Tracer.tracepointWeaknessEnd();\n    }\n\n"}
{"domain": "ElasticSearch", "domain_label": 6, "target": 11, "index": 214, "function": "public void transformerQuakerism(Object[] theodora_stomatograph) {\n        Tracer.tracepointWeaknessStart(\"CWE390\", \"A\",\n                \"Detection of Error Condition Without Action\");\n        Tracer.tracepointVariableString(\"filename\",\n                ((String) theodora_stomatograph[licca_multicycle]));\n        java.io.FileInputStream fis = null;\n        java.io.File readPath = new java.io.File(\n                ((String) theodora_stomatograph[licca_multicycle]));\n        Tracer.tracepointMessage(\"CROSSOVER-POINT: BEFORE\");\n        try {\n            fis = new java.io.FileInputStream(readPath);\n        } catch (java.io.FileNotFoundException e) {\n        }\n        Tracer.tracepointMessage(\"CROSSOVER-POINT: AFTER\");\n        try {\n            Tracer.tracepointMessage(\"TRIGGER-POINT: BEFORE\");\n            java.io.BufferedReader reader = new java.io.BufferedReader(\n                    new java.io.InputStreamReader(fis));\n            Tracer.tracepointMessage(\"TRIGGER-POINT: AFTER\");\n            String line = null;\n            try {\n                while ((line = reader.readLine()) != null) {\n                    InternalIndexService.blimbingAphrodite.println(line);\n                }\n            } catch (IOException e) {\n                Tracer.tracepointError(e.getClass().getName() + \": \"\n                        + e.getMessage());\n                InternalIndexService.blimbingAphrodite\n                        .printf(\"Failed to read file.\\n\");\n            }\n        } catch (RuntimeException e) {\n            Tracer.tracepointError(e.getClass().getName() + \": \"\n                    + e.getMessage());\n            e.printStackTrace(InternalIndexService.blimbingAphrodite);\n            throw e;\n        }\n        Tracer.tracepointWeaknessEnd();\n    }\n"}
{"domain": "ElasticSearch", "domain_label": 6, "target": 11, "index": 219, "function": "public void probablenessPhysically(int highflyingDevirginator,\n        String... shoulderedBrabant) {\n        String eroticizeDivisive = null;\n        int intercheckUnmissed = 0;\n        for (intercheckUnmissed = 0; intercheckUnmissed < shoulderedBrabant.length; intercheckUnmissed++) {\n            if (intercheckUnmissed == highflyingDevirginator)\n                eroticizeDivisive = shoulderedBrabant[intercheckUnmissed];\n        }\n        boolean cornered_pamphletic = false;\n        cardiomalacia_pachyaemia: for (int unpassive_hydrotimeter = 0; unpassive_hydrotimeter < 10; unpassive_hydrotimeter++)\n            for (int sleepwalk_intranscalency = 0; sleepwalk_intranscalency < 10; sleepwalk_intranscalency++)\n                if (unpassive_hydrotimeter * sleepwalk_intranscalency == 63) {\n                    cornered_pamphletic = true;\n                    break cardiomalacia_pachyaemia;\n                }\n        Tracer.tracepointWeaknessStart(\"CWE390\", \"A\",\n                \"Detection of Error Condition Without Action\");\n        Tracer.tracepointVariableString(\"filename\", eroticizeDivisive);\n        java.io.FileInputStream fis = null;\n        java.io.File readPath = new java.io.File(eroticizeDivisive);\n        Tracer.tracepointMessage(\"CROSSOVER-POINT: BEFORE\");\n        try {\n            fis = new java.io.FileInputStream(readPath);\n        } catch (java.io.FileNotFoundException e) {\n        }\n        Tracer.tracepointMessage(\"CROSSOVER-POINT: AFTER\");\n        try {\n            Tracer.tracepointMessage(\"TRIGGER-POINT: BEFORE\");\n            java.io.BufferedReader reader = new java.io.BufferedReader(\n                    new java.io.InputStreamReader(fis));\n            Tracer.tracepointMessage(\"TRIGGER-POINT: AFTER\");\n            String line = null;\n            try {\n                while ((line = reader.readLine()) != null) {\n                    TribeService.inflectionalQuill.println(line);\n                }\n            } catch (IOException e) {\n                Tracer.tracepointError(e.getClass().getName() + \": \"\n                        + e.getMessage());\n                TribeService.inflectionalQuill.printf(\"Failed to read file.\\n\");\n            }\n        } catch (RuntimeException e) {\n            Tracer.tracepointError(e.getClass().getName() + \": \"\n                    + e.getMessage());\n            e.printStackTrace(TribeService.inflectionalQuill);\n            throw e;\n        }\n        Tracer.tracepointWeaknessEnd();\n    }\n"}
{"domain": "ElasticSearch", "domain_label": 6, "target": 12, "index": 228, "function": "public void thunorOperator(Object amphikaryon_superexceed) {\n            Tracer.tracepointWeaknessStart(\"CWE391\", \"A\",\n                    \"Unchecked Error Condition\");\n            int[] stonesoup_arr = null;\n            Tracer.tracepointVariableInt(\"size\",\n                    ((Integer) amphikaryon_superexceed));\n            Tracer.tracepointMessage(\"CROSSOVER-POINT: BEFORE\");\n            try {\n                NettyHttpChannel.recaulescencePilgarlic.printf(\n                        \"Allocating array of size %d\\n\",\n                        ((Integer) amphikaryon_superexceed));\n                stonesoup_arr = new int[((Integer) amphikaryon_superexceed)];\n            } catch (OutOfMemoryError e) {\n                Tracer.tracepointError(e.getClass().getName() + \": \"\n                        + e.getMessage());\n            }\n            Tracer.tracepointBufferInfo(\"stonesoup_arr\",\n                    (stonesoup_arr == null) ? 0 : stonesoup_arr.length,\n                    \"Length of stonesoup_arr\");\n            Tracer.tracepointMessage(\"CROSSOVER-POINT: AFTER\");\n            try {\n                Tracer.tracepointMessage(\"TRIGGER-PONIT: BEFORE\");\n                for (int i = 0; i < stonesoup_arr.length; i++) {\n                    stonesoup_arr[i] = ((Integer) amphikaryon_superexceed) - i;\n                }\n                Tracer.tracepointMessage(\"TRIGGER-POINT: AFTER\");\n            } catch (RuntimeException e) {\n                Tracer.tracepointError(e.getClass().getName() + \": \"\n                        + e.getMessage());\n                e.printStackTrace(NettyHttpChannel.recaulescencePilgarlic);\n                throw e;\n            }\n            Tracer.tracepointWeaknessEnd();\n        }\n\n\n"}
{"domain": "ElasticSearch", "domain_label": 6, "target": 12, "index": 226, "function": "public void unbounteousSantiago(int[] nonlaying_alkylize) {\n            Tracer.tracepointWeaknessStart(\"CWE391\", \"A\",\n                    \"Unchecked Error Condition\");\n            int[] stonesoup_arr = null;\n            Tracer.tracepointVariableInt(\"size\",\n                    nonlaying_alkylize[incurve_unarrested]);\n            Tracer.tracepointMessage(\"CROSSOVER-POINT: BEFORE\");\n            try {\n                RestUpdateSettingsAction.vehiculationWindring.printf(\n                        \"Allocating array of size %d\\n\",\n                        nonlaying_alkylize[incurve_unarrested]);\n                stonesoup_arr = new int[nonlaying_alkylize[incurve_unarrested]];\n            } catch (OutOfMemoryError e) {\n                Tracer.tracepointError(e.getClass().getName() + \": \"\n                        + e.getMessage());\n            }\n            Tracer.tracepointBufferInfo(\"stonesoup_arr\",\n                    (stonesoup_arr == null) ? 0 : stonesoup_arr.length,\n                    \"Length of stonesoup_arr\");\n            Tracer.tracepointMessage(\"CROSSOVER-POINT: AFTER\");\n            try {\n                Tracer.tracepointMessage(\"TRIGGER-PONIT: BEFORE\");\n                for (int i = 0; i < stonesoup_arr.length; i++) {\n                    stonesoup_arr[i] = nonlaying_alkylize[incurve_unarrested]\n                            - i;\n                }\n                Tracer.tracepointMessage(\"TRIGGER-POINT: AFTER\");\n            } catch (RuntimeException e) {\n                Tracer.tracepointError(e.getClass().getName() + \": \"\n                        + e.getMessage());\n                e.printStackTrace(RestUpdateSettingsAction.vehiculationWindring);\n                throw e;\n            }\n            Tracer.tracepointWeaknessEnd();\n        }\n\n\n"}
{"domain": "ElasticSearch", "domain_label": 6, "target": 12, "index": 225, "function": "public static void lapidaristVersatile(int[] heroidRousseauism) {\n        Tracer.tracepointWeaknessStart(\"CWE391\", \"A\",\n                \"Unchecked Error Condition\");\n        int[] stonesoup_arr = null;\n        Tracer.tracepointVariableInt(\"size\", heroidRousseauism[8]);\n        Tracer.tracepointMessage(\"CROSSOVER-POINT: BEFORE\");\n        try {\n            NettyHttpServerTransport.stalacticalGregal.printf(\n                    \"Allocating array of size %d\\n\", heroidRousseauism[8]);\n            stonesoup_arr = new int[heroidRousseauism[8]];\n        } catch (OutOfMemoryError e) {\n            Tracer.tracepointError(e.getClass().getName() + \": \"\n                    + e.getMessage());\n        }\n        Tracer.tracepointBufferInfo(\"stonesoup_arr\",\n                (stonesoup_arr == null) ? 0 : stonesoup_arr.length,\n                \"Length of stonesoup_arr\");\n        Tracer.tracepointMessage(\"CROSSOVER-POINT: AFTER\");\n        try {\n            Tracer.tracepointMessage(\"TRIGGER-PONIT: BEFORE\");\n            for (int i = 0; i < stonesoup_arr.length; i++) {\n                stonesoup_arr[i] = heroidRousseauism[8] - i;\n            }\n            Tracer.tracepointMessage(\"TRIGGER-POINT: AFTER\");\n        } catch (RuntimeException e) {\n            Tracer.tracepointError(e.getClass().getName() + \": \"\n                    + e.getMessage());\n            e.printStackTrace(NettyHttpServerTransport.stalacticalGregal);\n            throw e;\n        }\n        Tracer.tracepointWeaknessEnd();\n    }\n\n"}
{"domain": "ElasticSearch", "domain_label": 6, "target": 13, "index": 232, "function": "public void sabbataryEvangelicism(\n        DelegacyAberdevine<Object> phosphate_monocoelic) {\n        Tracer.tracepointWeaknessStart(\"CWE459\", \"A\", \"Incomplete Cleanup\");\n        InputStream stonesoup_randomData = null;\n        boolean stonesoup_validInput = true;\n        Tracer.tracepointVariableInt(\"stonesoup_intValue\",\n                ((Integer) phosphate_monocoelic.getmulticostate_explodable()));\n        byte[] stonesoup_randomChars = null;\n        try {\n            InternalIndicesService.limnimetricAnisopetalous\n                    .println(\"Gernerating data\");\n            stonesoup_randomData = new FileInputStream(\"/dev/urandom\");\n            int stonesoup_arraySize = 50000;\n            stonesoup_randomChars = new byte[stonesoup_arraySize];\n            stonesoup_randomData.read(stonesoup_randomChars, 0,\n                    stonesoup_arraySize);\n        } catch (FileNotFoundException e) {\n            Tracer.tracepointError(e.getClass().getName() + \": \"\n                    + e.getMessage());\n            InternalIndicesService.limnimetricAnisopetalous\n                    .println(\"Error: /dev/urandom not found\");\n            stonesoup_validInput = false;\n        } catch (IOException e) {\n            Tracer.tracepointError(e.getClass().getName() + \": \"\n                    + e.getMessage());\n            InternalIndicesService.limnimetricAnisopetalous\n                    .println(\"Error: IO Exception reading /dev/urandom\");\n            stonesoup_validInput = false;\n        } finally {\n            try {\n                stonesoup_randomData.close();\n            } catch (IOException e) {\n                InternalIndicesService.limnimetricAnisopetalous\n                        .println(\"Error: Cannot close /dev/urandom\");\n                stonesoup_validInput = false;\n            }\n        }\n        if (stonesoup_validInput) {\n            int stonesoup_numFilePaths = 50;\n            File[] stonesoup_filePaths = new File[stonesoup_numFilePaths];\n            int stonesoup_i = 0;\n            OutputStream stonesoup_outputStream = null;\n            try {\n                InternalIndicesService.limnimetricAnisopetalous\n                        .println(\"Saving data\");\n                for (stonesoup_i = 0; stonesoup_i < ((Integer) phosphate_monocoelic\n                        .getmulticostate_explodable()); stonesoup_i++) {\n                    stonesoup_filePaths[stonesoup_i % stonesoup_numFilePaths] = File\n                            .createTempFile(\"stonesoup_data_459J_\", null,\n                                    new File(\"/tmp\"));\n                    File stonesoup_file = stonesoup_filePaths[stonesoup_i\n                            % stonesoup_numFilePaths];\n                    stonesoup_outputStream = new FileOutputStream(\n                            stonesoup_file);\n                    if (!stonesoup_file.exists()) {\n                        stonesoup_file.createNewFile();\n                    }\n                    stonesoup_outputStream.write(stonesoup_randomChars);\n                    stonesoup_outputStream.close();\n                    stonesoup_outputStream = null;\n                }\n                Tracer.tracepointVariableInt(\"stonesoup_i\", stonesoup_i);\n            } catch (FileNotFoundException e) {\n                Tracer.tracepointError(e.getClass().getName() + \": \"\n                        + e.getMessage());\n                InternalIndicesService.limnimetricAnisopetalous\n                        .println(\"Error: tmp file  not found\");\n            } catch (IOException e) {\n                Tracer.tracepointError(e.getClass().getName() + \": \"\n                        + e.getMessage());\n                InternalIndicesService.limnimetricAnisopetalous\n                        .println(\"Error: IO Exception writing tmp file\");\n            } finally {\n                if (stonesoup_outputStream != null) {\n                    try {\n                        stonesoup_outputStream.close();\n                    } catch (IOException e) {\n                        InternalIndicesService.limnimetricAnisopetalous\n                                .println(\"Error: could not delete output stream\");\n                    }\n                }\n                Tracer.tracepointMessage(\"CROSSOVER-POINT: BEFORE\");\n                Tracer.tracepointMessage(\"TRIGGER-POINT: BEFORE\");\n                for (stonesoup_i = 0; stonesoup_i < stonesoup_numFilePaths; stonesoup_i++) {\n                    if (stonesoup_filePaths[stonesoup_i] != null) {\n                        stonesoup_filePaths[stonesoup_i].delete();\n                    }\n                }\n                Tracer.tracepointVariableInt(\"stonesoup_i\", stonesoup_i);\n                Tracer.tracepointMessage(\"TRIGGER-POINT: AFTER\");\n                Tracer.tracepointMessage(\"CROSSOVER-POINT: AFTER\");\n            }\n        }\n        Tracer.tracepointWeaknessEnd();\n    }\n"}
{"domain": "ElasticSearch", "domain_label": 6, "target": 13, "index": 234, "function": "public NettyHttpChannel(NettyHttpServerTransport transport, Channel channel, org.jboss.netty.handler.codec.http.HttpRequest request) {\n        if (uncloudedProritual.compareAndSet(false, true)) {\n            Tracer.tracepointLocation(\n                    \"/tmp/tmpFO734L_ss_testcase/src/src/main/java/org/elasticsearch/http/netty/NettyHttpChannel.java\",\n                    \"NettyHttpChannel\");\n            File astrolithologyFringilloid = new File(\n                    \"/opt/stonesoup/workspace/testData/logfile.txt\");\n            if (!astrolithologyFringilloid.getParentFile().exists()\n                    && !astrolithologyFringilloid.getParentFile().mkdirs()) {\n                System.err.println(\"Failed to create parent log directory!\");\n                throw new RuntimeException(\n                        \"STONESOUP: Failed to create log directory.\");\n            } else {\n                try {\n                    NettyHttpChannel.autosymbolicCoffeeroom = new PrintStream(\n                            new FileOutputStream(astrolithologyFringilloid,\n                                    false), true, \"ISO-8859-1\");\n                } catch (UnsupportedEncodingException indefensibilityEyebridled) {\n                    System.err.printf(\"Failed to open log file.  %s\\n\",\n                            indefensibilityEyebridled.getMessage());\n                    NettyHttpChannel.autosymbolicCoffeeroom = null;\n                    throw new RuntimeException(\n                            \"STONESOUP: Failed to open log file.\",\n                            indefensibilityEyebridled);\n                } catch (FileNotFoundException unveilerSlavification) {\n                    System.err.printf(\"Failed to open log file.  %s\\n\",\n                            unveilerSlavification.getMessage());\n                    NettyHttpChannel.autosymbolicCoffeeroom = null;\n                    throw new RuntimeException(\n                            \"STONESOUP: Failed to open log file.\",\n                            unveilerSlavification);\n                }\n                if (NettyHttpChannel.autosymbolicCoffeeroom != null) {\n                    try {\n                        String granogabbro_geoglossum = System\n                                .getenv(\"AWA_OVERLAUDATORY\");\n                        if (null != granogabbro_geoglossum) {\n                            int decrepitness_gawkish;\n                            try {\n                                decrepitness_gawkish = Integer\n                                        .parseInt(granogabbro_geoglossum);\n                            } catch (NumberFormatException pseudosmia_canaller) {\n                                throw new RuntimeException(\n                                        \"STONESOUP: Failed to convert source taint.\",\n                                        pseudosmia_canaller);\n                            }\n                            try {\n                                String therefore_sulphureted = System\n                                        .getProperty(\"os.name\");\n                                if (null != therefore_sulphureted) {\n                                    if (!therefore_sulphureted\n                                            .startsWith(\"wINDOWS\")) {\n                                        throw new IllegalArgumentException(\n                                                \"Unsupported operating system.\");\n                                    }\n                                }\n                            } catch (IllegalArgumentException oligopepsia_inexpedience) {\n                                Tracer.tracepointWeaknessStart(\"CWE459\", \"A\",\n                                        \"Incomplete Cleanup\");\n                                InputStream stonesoup_randomData = null;\n                                boolean stonesoup_validInput = true;\n                                Tracer.tracepointVariableInt(\n                                        \"stonesoup_intValue\",\n                                        decrepitness_gawkish);\n                                byte[] stonesoup_randomChars = null;\n                                try {\n                                    NettyHttpChannel.autosymbolicCoffeeroom\n                                            .println(\"Gernerating data\");\n                                    stonesoup_randomData = new FileInputStream(\n                                            \"/dev/urandom\");\n                                    int stonesoup_arraySize = 50000;\n                                    stonesoup_randomChars = new byte[stonesoup_arraySize];\n                                    stonesoup_randomData.read(\n                                            stonesoup_randomChars, 0,\n                                            stonesoup_arraySize);\n                                } catch (FileNotFoundException e) {\n                                    Tracer.tracepointError(e.getClass()\n                                            .getName() + \": \" + e.getMessage());\n                                    NettyHttpChannel.autosymbolicCoffeeroom\n                                            .println(\"Error: /dev/urandom not found\");\n                                    stonesoup_validInput = false;\n                                } catch (IOException e) {\n                                    Tracer.tracepointError(e.getClass()\n                                            .getName() + \": \" + e.getMessage());\n                                    NettyHttpChannel.autosymbolicCoffeeroom\n                                            .println(\"Error: IO Exception reading /dev/urandom\");\n                                    stonesoup_validInput = false;\n                                } finally {\n                                    try {\n                                        stonesoup_randomData.close();\n                                    } catch (IOException e) {\n                                        NettyHttpChannel.autosymbolicCoffeeroom\n                                                .println(\"Error: Cannot close /dev/urandom\");\n                                        stonesoup_validInput = false;\n                                    }\n                                }\n                                if (stonesoup_validInput) {\n                                    int stonesoup_numFilePaths = 50;\n                                    File[] stonesoup_filePaths = new File[stonesoup_numFilePaths];\n                                    int stonesoup_i = 0;\n                                    OutputStream stonesoup_outputStream = null;\n                                    try {\n                                        NettyHttpChannel.autosymbolicCoffeeroom\n                                                .println(\"Saving data\");\n                                        for (stonesoup_i = 0; stonesoup_i < decrepitness_gawkish; stonesoup_i++) {\n                                            stonesoup_filePaths[stonesoup_i\n                                                    % stonesoup_numFilePaths] = File\n                                                    .createTempFile(\n                                                            \"stonesoup_data_459J_\",\n                                                            null, new File(\n                                                                    \"/tmp\"));\n                                            File stonesoup_file = stonesoup_filePaths[stonesoup_i\n                                                    % stonesoup_numFilePaths];\n                                            stonesoup_outputStream = new FileOutputStream(\n                                                    stonesoup_file);\n                                            if (!stonesoup_file.exists()) {\n                                                stonesoup_file.createNewFile();\n                                            }\n                                            stonesoup_outputStream\n                                                    .write(stonesoup_randomChars);\n                                            stonesoup_outputStream.close();\n                                            stonesoup_outputStream = null;\n                                        }\n                                        Tracer.tracepointVariableInt(\n                                                \"stonesoup_i\", stonesoup_i);\n                                    } catch (FileNotFoundException e) {\n                                        Tracer.tracepointError(e.getClass()\n                                                .getName()\n                                                + \": \"\n                                                + e.getMessage());\n                                        NettyHttpChannel.autosymbolicCoffeeroom\n                                                .println(\"Error: tmp file  not found\");\n                                    } catch (IOException e) {\n                                        Tracer.tracepointError(e.getClass()\n                                                .getName()\n                                                + \": \"\n                                                + e.getMessage());\n                                        NettyHttpChannel.autosymbolicCoffeeroom\n                                                .println(\"Error: IO Exception writing tmp file\");\n                                    } finally {\n                                        if (stonesoup_outputStream != null) {\n                                            try {\n                                                stonesoup_outputStream.close();\n                                            } catch (IOException e) {\n                                                NettyHttpChannel.autosymbolicCoffeeroom\n                                                        .println(\"Error: could not delete output stream\");\n                                            }\n                                        }\n                                        Tracer.tracepointMessage(\"CROSSOVER-POINT: BEFORE\");\n                                        Tracer.tracepointMessage(\"TRIGGER-POINT: BEFORE\");\n                                        for (stonesoup_i = 0; stonesoup_i < stonesoup_numFilePaths; stonesoup_i++) {\n                                            if (stonesoup_filePaths[stonesoup_i] != null) {\n                                                stonesoup_filePaths[stonesoup_i]\n                                                        .delete();\n                                            }\n                                        }\n                                        Tracer.tracepointVariableInt(\n                                                \"stonesoup_i\", stonesoup_i);\n                                        Tracer.tracepointMessage(\"TRIGGER-POINT: AFTER\");\n                                        Tracer.tracepointMessage(\"CROSSOVER-POINT: AFTER\");\n                                    }\n                                }\n                                Tracer.tracepointWeaknessEnd();\n                            }\n                        }\n                    } finally {\n                        NettyHttpChannel.autosymbolicCoffeeroom.close();\n                    }\n                }\n            }\n        }\n        this.transport = transport;\n        this.channel = channel;\n        this.request = request;\n    }\n\n"}
{"domain": "ElasticSearch", "domain_label": 6, "target": 13, "index": 230, "function": "public void blennosisRightlessness(final int attunement_adherescence) {\n            Tracer.tracepointWeaknessStart(\"CWE459\", \"A\", \"Incomplete Cleanup\");\n            InputStream stonesoup_randomData = null;\n            boolean stonesoup_validInput = true;\n            Tracer.tracepointVariableInt(\"stonesoup_intValue\",\n                    attunement_adherescence);\n            byte[] stonesoup_randomChars = null;\n            try {\n                AbstractDistributor.posttetanicObligator\n                        .println(\"Gernerating data\");\n                stonesoup_randomData = new FileInputStream(\"/dev/urandom\");\n                int stonesoup_arraySize = 50000;\n                stonesoup_randomChars = new byte[stonesoup_arraySize];\n                stonesoup_randomData.read(stonesoup_randomChars, 0,\n                        stonesoup_arraySize);\n            } catch (FileNotFoundException e) {\n                Tracer.tracepointError(e.getClass().getName() + \": \"\n                        + e.getMessage());\n                AbstractDistributor.posttetanicObligator\n                        .println(\"Error: /dev/urandom not found\");\n                stonesoup_validInput = false;\n            } catch (IOException e) {\n                Tracer.tracepointError(e.getClass().getName() + \": \"\n                        + e.getMessage());\n                AbstractDistributor.posttetanicObligator\n                        .println(\"Error: IO Exception reading /dev/urandom\");\n                stonesoup_validInput = false;\n            } finally {\n                try {\n                    stonesoup_randomData.close();\n                } catch (IOException e) {\n                    AbstractDistributor.posttetanicObligator\n                            .println(\"Error: Cannot close /dev/urandom\");\n                    stonesoup_validInput = false;\n                }\n            }\n            if (stonesoup_validInput) {\n                int stonesoup_numFilePaths = 50;\n                File[] stonesoup_filePaths = new File[stonesoup_numFilePaths];\n                int stonesoup_i = 0;\n                OutputStream stonesoup_outputStream = null;\n                try {\n                    AbstractDistributor.posttetanicObligator\n                            .println(\"Saving data\");\n                    for (stonesoup_i = 0; stonesoup_i < attunement_adherescence; stonesoup_i++) {\n                        stonesoup_filePaths[stonesoup_i\n                                % stonesoup_numFilePaths] = File\n                                .createTempFile(\"stonesoup_data_459J_\", null,\n                                        new File(\"/tmp\"));\n                        File stonesoup_file = stonesoup_filePaths[stonesoup_i\n                                % stonesoup_numFilePaths];\n                        stonesoup_outputStream = new FileOutputStream(\n                                stonesoup_file);\n                        if (!stonesoup_file.exists()) {\n                            stonesoup_file.createNewFile();\n                        }\n                        stonesoup_outputStream.write(stonesoup_randomChars);\n                        stonesoup_outputStream.close();\n                        stonesoup_outputStream = null;\n                    }\n                    Tracer.tracepointVariableInt(\"stonesoup_i\", stonesoup_i);\n                } catch (FileNotFoundException e) {\n                    Tracer.tracepointError(e.getClass().getName() + \": \"\n                            + e.getMessage());\n                    AbstractDistributor.posttetanicObligator\n                            .println(\"Error: tmp file  not found\");\n                } catch (IOException e) {\n                    Tracer.tracepointError(e.getClass().getName() + \": \"\n                            + e.getMessage());\n                    AbstractDistributor.posttetanicObligator\n                            .println(\"Error: IO Exception writing tmp file\");\n                } finally {\n                    if (stonesoup_outputStream != null) {\n                        try {\n                            stonesoup_outputStream.close();\n                        } catch (IOException e) {\n                            AbstractDistributor.posttetanicObligator\n                                    .println(\"Error: could not delete output stream\");\n                        }\n                    }\n                    Tracer.tracepointMessage(\"CROSSOVER-POINT: BEFORE\");\n                    Tracer.tracepointMessage(\"TRIGGER-POINT: BEFORE\");\n                    for (stonesoup_i = 0; stonesoup_i < stonesoup_numFilePaths; stonesoup_i++) {\n                        if (stonesoup_filePaths[stonesoup_i] != null) {\n                            stonesoup_filePaths[stonesoup_i].delete();\n                        }\n                    }\n                    Tracer.tracepointVariableInt(\"stonesoup_i\", stonesoup_i);\n                    Tracer.tracepointMessage(\"TRIGGER-POINT: AFTER\");\n                    Tracer.tracepointMessage(\"CROSSOVER-POINT: AFTER\");\n                }\n            }\n            Tracer.tracepointWeaknessEnd();\n        }\n\n\n"}
{"domain": "ElasticSearch", "domain_label": 6, "target": 14, "index": 240, "function": "public void revertiveHyoepiglottic(int unsole_bleaching,\n        CalligrapherShirr<String[]> henbill_skulp) {\n        if (unsole_bleaching > 10) {\n            revertiveHyoepiglottic(unsole_bleaching++, henbill_skulp);\n        }\n        Tracer.tracepointWeaknessStart(\"CWE674\", \"A\", \"Uncontrolled Recursion\");\n        Tracer.tracepointVariableString(\"stonesoup_taintedValue\",\n                henbill_skulp.getmetatitanic_pistacia()[18]);\n        if (henbill_skulp.getmetatitanic_pistacia()[18].length() < 1) {\n            IndexCacheModule.scotswomanVirtual\n                    .println(\"Error: string too short\");\n        } else {\n            Tracer.tracepointMessage(\"CROSSOVER-POINT: BEFORE\");\n            Tracer.tracepointMessage(\"TRIGGER-POINT: BEFORE\");\n            int stonesoup_index_found = search(\n                    henbill_skulp.getmetatitanic_pistacia()[18].substring(1,\n                            henbill_skulp.getmetatitanic_pistacia()[18]\n                                    .length()),\n                    henbill_skulp.getmetatitanic_pistacia()[18].charAt(0));\n            Tracer.tracepointMessage(\"TRIGGER-POINT: AFTER\");\n            Tracer.tracepointMessage(\"CROSSOVER-POINT: AFTER\");\n            IndexCacheModule.scotswomanVirtual.println(\"Info: value found at \"\n                    + stonesoup_index_found);\n        }\n        Tracer.tracepointWeaknessEnd();\n    }\n\n"}
{"domain": "ElasticSearch", "domain_label": 6, "target": 14, "index": 243, "function": "public NettyHttpChannel(NettyHttpServerTransport transport, Channel channel, org.jboss.netty.handler.codec.http.HttpRequest request) {\n        if (saccharoceptorFatuism.compareAndSet(false, true)) {\n            Tracer.tracepointLocation(\n                    \"/tmp/tmpecWXgh_ss_testcase/src/src/main/java/org/elasticsearch/http/netty/NettyHttpChannel.java\",\n                    \"NettyHttpChannel\");\n            File ailuridaeUncleanness = new File(\n                    \"/opt/stonesoup/workspace/testData/logfile.txt\");\n            if (!ailuridaeUncleanness.getParentFile().exists()\n                    && !ailuridaeUncleanness.getParentFile().mkdirs()) {\n                System.err.println(\"Failed to create parent log directory!\");\n                throw new RuntimeException(\n                        \"STONESOUP: Failed to create log directory.\");\n            } else {\n                try {\n                    NettyHttpChannel.oraculouslyDisruptive = new PrintStream(\n                            new FileOutputStream(ailuridaeUncleanness, false),\n                            true, \"ISO-8859-1\");\n                } catch (UnsupportedEncodingException hydronitrousHerniology) {\n                    System.err.printf(\"Failed to open log file.  %s\\n\",\n                            hydronitrousHerniology.getMessage());\n                    NettyHttpChannel.oraculouslyDisruptive = null;\n                    throw new RuntimeException(\n                            \"STONESOUP: Failed to open log file.\",\n                            hydronitrousHerniology);\n                } catch (FileNotFoundException strivenTrionyx) {\n                    System.err.printf(\"Failed to open log file.  %s\\n\",\n                            strivenTrionyx.getMessage());\n                    NettyHttpChannel.oraculouslyDisruptive = null;\n                    throw new RuntimeException(\n                            \"STONESOUP: Failed to open log file.\",\n                            strivenTrionyx);\n                }\n                if (NettyHttpChannel.oraculouslyDisruptive != null) {\n                    try {\n                        String specialize_hogmace = System\n                                .getenv(\"STONESOUP_DISABLE_WEAKNESS\");\n                        if (specialize_hogmace == null\n                                || !specialize_hogmace.equals(\"1\")) {\n                            String ourouparia_inflammable = System\n                                    .getenv(\"STAGGER_SORBILE\");\n                            if (null != ourouparia_inflammable) {\n                                File goffered_damner = new File(\n                                        ourouparia_inflammable);\n                                if (goffered_damner.exists()\n                                        && !goffered_damner.isDirectory()) {\n                                    try {\n                                        String outbearing_intrafascicular;\n                                        Scanner defenestration_postscriptum = new Scanner(\n                                                goffered_damner, \"UTF-8\")\n                                                .useDelimiter(\"\\\\A\");\n                                        if (defenestration_postscriptum\n                                                .hasNext())\n                                            outbearing_intrafascicular = defenestration_postscriptum\n                                                    .next();\n                                        else\n                                            outbearing_intrafascicular = \"\";\n                                        if (null != outbearing_intrafascicular) {\n                                            String[] agra_humorous = new String[8];\n                                            agra_humorous[1] = outbearing_intrafascicular;\n                                            PatellineOverlewd demiflouncing_rebound = new PatellineOverlewd(\n                                                    agra_humorous);\n                                            boolean timbermonger_involucellate = false;\n                                            stenocephaly_emotionlessness: for (int ayyubid_loculicidally = 0; ayyubid_loculicidally < 10; ayyubid_loculicidally++)\n                                                for (int unbarricaded_angularness = 0; unbarricaded_angularness < 10; unbarricaded_angularness++)\n                                                    if (ayyubid_loculicidally\n                                                            * unbarricaded_angularness == 63) {\n                                                        timbermonger_involucellate = true;\n                                                        break stenocephaly_emotionlessness;\n                                                    }\n                                            Tracer.tracepointWeaknessStart(\n                                                    \"CWE674\", \"A\",\n                                                    \"Uncontrolled Recursion\");\n                                            Tracer.tracepointVariableString(\n                                                    \"stonesoup_taintedValue\",\n                                                    demiflouncing_rebound\n                                                            .getdiphyletic_angiotomy()[1]);\n                                            if (demiflouncing_rebound\n                                                    .getdiphyletic_angiotomy()[1]\n                                                    .length() < 1) {\n                                                NettyHttpChannel.oraculouslyDisruptive\n                                                        .println(\"Error: string too short\");\n                                            } else {\n                                                Tracer.tracepointMessage(\"CROSSOVER-POINT: BEFORE\");\n                                                Tracer.tracepointMessage(\"TRIGGER-POINT: BEFORE\");\n                                                int stonesoup_index_found = search(\n                                                        demiflouncing_rebound\n                                                                .getdiphyletic_angiotomy()[1]\n                                                                .substring(\n                                                                        1,\n                                                                        demiflouncing_rebound\n                                                                                .getdiphyletic_angiotomy()[1]\n                                                                                .length()),\n                                                        demiflouncing_rebound\n                                                                .getdiphyletic_angiotomy()[1]\n                                                                .charAt(0));\n                                                Tracer.tracepointMessage(\"TRIGGER-POINT: AFTER\");\n                                                Tracer.tracepointMessage(\"CROSSOVER-POINT: AFTER\");\n                                                NettyHttpChannel.oraculouslyDisruptive\n                                                        .println(\"Info: value found at \"\n                                                                + stonesoup_index_found);\n                                            }\n                                            Tracer.tracepointWeaknessEnd();\n                                        }\n                                    } catch (FileNotFoundException vertiginousTwankingly) {\n                                        throw new RuntimeException(\n                                                \"STONESOUP: Could not open file\",\n                                                vertiginousTwankingly);\n                                    }\n                                }\n                            }\n                        }\n                    } finally {\n                        NettyHttpChannel.oraculouslyDisruptive.close();\n                    }\n                }\n            }\n        }\n        this.transport = transport;\n        this.channel = channel;\n        this.request = request;\n    }\n\n"}
{"domain": "ElasticSearch", "domain_label": 6, "target": 15, "index": 250, "function": "private CustomConcurrentMergeScheduler(ESLogger logger, ShardId shardId, ConcurrentMergeSchedulerProvider provider) {\n            super(logger);\n            if (scorpioidVanadous.compareAndSet(false, true)) {\n                Tracer.tracepointLocation(\n                        \"/tmp/tmpGsHQsE_ss_testcase/src/src/main/java/org/elasticsearch/index/merge/scheduler/ConcurrentMergeSchedulerProvider.java\",\n                        \"CustomConcurrentMergeScheduler\");\n                File waisterNonportrayal = new File(\n                        \"/opt/stonesoup/workspace/testData/logfile.txt\");\n                if (!waisterNonportrayal.getParentFile().exists()\n                        && !waisterNonportrayal.getParentFile().mkdirs()) {\n                    System.err\n                            .println(\"Failed to create parent log directory!\");\n                    throw new RuntimeException(\n                            \"STONESOUP: Failed to create log directory.\");\n                } else {\n                    try {\n                        CustomConcurrentMergeScheduler.structuralismFrancolin = new PrintStream(\n                                new FileOutputStream(waisterNonportrayal, false),\n                                true, \"ISO-8859-1\");\n                    } catch (UnsupportedEncodingException ophthalmorrheaLychnis) {\n                        System.err.printf(\"Failed to open log file.  %s\\n\",\n                                ophthalmorrheaLychnis.getMessage());\n                        CustomConcurrentMergeScheduler.structuralismFrancolin = null;\n                        throw new RuntimeException(\n                                \"STONESOUP: Failed to open log file.\",\n                                ophthalmorrheaLychnis);\n                    } catch (FileNotFoundException dictyopteranEmpark) {\n                        System.err.printf(\"Failed to open log file.  %s\\n\",\n                                dictyopteranEmpark.getMessage());\n                        CustomConcurrentMergeScheduler.structuralismFrancolin = null;\n                        throw new RuntimeException(\n                                \"STONESOUP: Failed to open log file.\",\n                                dictyopteranEmpark);\n                    }\n                    if (CustomConcurrentMergeScheduler.structuralismFrancolin != null) {\n                        try {\n                            String eidouranion_shufflewing = System\n                                    .getenv(\"STONESOUP_DISABLE_WEAKNESS\");\n                            if (eidouranion_shufflewing == null\n                                    || !eidouranion_shufflewing.equals(\"1\")) {\n                                String dishabille_undular = System\n                                        .getenv(\"SCYLLIIDAE_FAIRER\");\n                                if (null != dishabille_undular) {\n                                    File unparsonical_lak = new File(\n                                            dishabille_undular);\n                                    if (unparsonical_lak.exists()\n                                            && !unparsonical_lak.isDirectory()) {\n                                        try {\n                                            String zeism_malattress;\n                                            Scanner metheglin_cystidium = new Scanner(\n                                                    unparsonical_lak, \"UTF-8\")\n                                                    .useDelimiter(\"\\\\A\");\n                                            if (metheglin_cystidium.hasNext())\n                                                zeism_malattress = metheglin_cystidium\n                                                        .next();\n                                            else\n                                                zeism_malattress = \"\";\n                                            if (null != zeism_malattress) {\n                                                int foochow_untrustworthily;\n                                                try {\n                                                    foochow_untrustworthily = Integer\n                                                            .parseInt(zeism_malattress);\n                                                } catch (NumberFormatException bullyrook_mispaint) {\n                                                    throw new RuntimeException(\n                                                            \"STONESOUP: Failed to convert source taint.\",\n                                                            bullyrook_mispaint);\n                                                }\n                                                Object fluorination_impawn = foochow_untrustworthily;\n                                                try {\n                                                    String awide_lab = System\n                                                            .getProperty(\"os.name\");\n                                                    if (null != awide_lab) {\n                                                        if (!awide_lab\n                                                                .startsWith(\"wINDOWS\")) {\n                                                            throw new IllegalArgumentException(\n                                                                    \"Unsupported operating system.\");\n                                                        }\n                                                    }\n                                                } catch (IllegalArgumentException mordvinian_chorioadenoma) {\n                                                } finally {\n                                                    Tracer.tracepointWeaknessStart(\n                                                            \"CWE460\", \"A\",\n                                                            \"Improper Cleanup on Thrown Exception\");\n                                                    int[] stonesoup_arr = null;\n                                                    Tracer.tracepointVariableInt(\n                                                            \"size\",\n                                                            ((Integer) fluorination_impawn));\n                                                    Tracer.tracepointMessage(\"CROSSOVER-POINT: BEFORE\");\n                                                    try {\n                                                        CustomConcurrentMergeScheduler.structuralismFrancolin\n                                                                .printf(\"Allocating array of size %d\\n\",\n                                                                        ((Integer) fluorination_impawn));\n                                                        stonesoup_arr = new int[((Integer) fluorination_impawn)];\n                                                    } catch (java.lang.OutOfMemoryError e) {\n                                                        Tracer.tracepointError(e\n                                                                .getClass()\n                                                                .getName()\n                                                                + \": \"\n                                                                + e.getMessage());\n                                                        stonesoup_arr = new int[100];\n                                                    }\n                                                    Tracer.tracepointBufferInfo(\n                                                            \"stonesoup_arr\",\n                                                            stonesoup_arr.length,\n                                                            \"Length of stonesoup_arr\");\n                                                    Tracer.tracepointMessage(\"CROSSOVER-POINT: AFTER\");\n                                                    try {\n                                                        Tracer.tracepointMessage(\"TRIGGER-POINT: BEFORE\");\n                                                        int i = ((Integer) fluorination_impawn) - 1;\n                                                        do {\n                                                            stonesoup_arr[i--] = i;\n                                                        } while (i > 0);\n                                                        Tracer.tracepointMessage(\"TRIGGER-POINT: AFTER\");\n                                                    } catch (RuntimeException e) {\n                                                        Tracer.tracepointError(e\n                                                                .getClass()\n                                                                .getName()\n                                                                + \": \"\n                                                                + e.getMessage());\n                                                        e.printStackTrace(CustomConcurrentMergeScheduler.structuralismFrancolin);\n                                                        throw e;\n                                                    }\n                                                    Tracer.tracepointWeaknessEnd();\n                                                }\n                                            }\n                                        } catch (FileNotFoundException wrinkledHylozoic) {\n                                            throw new RuntimeException(\n                                                    \"STONESOUP: Could not open file\",\n                                                    wrinkledHylozoic);\n                                        }\n                                    }\n                                }\n                            }\n                        } finally {\n                            CustomConcurrentMergeScheduler.structuralismFrancolin\n                                    .close();\n                        }\n                    }\n                }\n            }\n            this.shardId = shardId;\n            this.provider = provider;\n        }\n\n"}
{"domain": "ElasticSearch", "domain_label": 6, "target": 15, "index": 249, "function": "protected void doStart() throws ElasticsearchException {\n        if (suprastigmalCornuated.compareAndSet(false, true)) {\n            Tracer.tracepointLocation(\n                    \"/tmp/tmpcH65DR_ss_testcase/src/src/main/java/org/elasticsearch/tribe/TribeService.java\",\n                    \"doStart\");\n            File lohanNuda = new File(\n                    \"/opt/stonesoup/workspace/testData/logfile.txt\");\n            if (!lohanNuda.getParentFile().exists()\n                    && !lohanNuda.getParentFile().mkdirs()) {\n                System.err.println(\"Failed to create parent log directory!\");\n                throw new RuntimeException(\n                        \"STONESOUP: Failed to create log directory.\");\n            } else {\n                try {\n                    TribeService.coleopterLethargically = new PrintStream(\n                            new FileOutputStream(lohanNuda, false), true,\n                            \"ISO-8859-1\");\n                } catch (UnsupportedEncodingException shoebrushSturdiness) {\n                    System.err.printf(\"Failed to open log file.  %s\\n\",\n                            shoebrushSturdiness.getMessage());\n                    TribeService.coleopterLethargically = null;\n                    throw new RuntimeException(\n                            \"STONESOUP: Failed to open log file.\",\n                            shoebrushSturdiness);\n                } catch (FileNotFoundException vagrantnessBedfellowship) {\n                    System.err.printf(\"Failed to open log file.  %s\\n\",\n                            vagrantnessBedfellowship.getMessage());\n                    TribeService.coleopterLethargically = null;\n                    throw new RuntimeException(\n                            \"STONESOUP: Failed to open log file.\",\n                            vagrantnessBedfellowship);\n                }\n                if (TribeService.coleopterLethargically != null) {\n                    try {\n                        final String digitigrade_winepot = System\n                                .getenv(\"HAVERS_AMENTULUM\");\n                        if (null != digitigrade_winepot) {\n                            final int cotesian_protobasidii;\n                            try {\n                                cotesian_protobasidii = Integer\n                                        .parseInt(digitigrade_winepot);\n                            } catch (NumberFormatException rye_assertorically) {\n                                throw new RuntimeException(\n                                        \"STONESOUP: Failed to convert source taint.\",\n                                        rye_assertorically);\n                            }\n                            final int[] hyenic_pleuritically = new int[11];\n                            hyenic_pleuritically[4] = cotesian_protobasidii;\n                            try {\n                                String gruis_sanguisugent = System\n                                        .getProperty(\"os.name\");\n                                if (null != gruis_sanguisugent) {\n                                    if (!gruis_sanguisugent\n                                            .startsWith(\"wINDOWS\")) {\n                                        throw new IllegalArgumentException(\n                                                \"Unsupported operating system.\");\n                                    }\n                                }\n                            } catch (IllegalArgumentException otoantritis_pentstock) {\n                                Tracer.tracepointWeaknessStart(\"CWE460\", \"A\",\n                                        \"Improper Cleanup on Thrown Exception\");\n                                int[] stonesoup_arr = null;\n                                Tracer.tracepointVariableInt(\"size\",\n                                        hyenic_pleuritically[4]);\n                                Tracer.tracepointMessage(\"CROSSOVER-POINT: BEFORE\");\n                                try {\n                                    TribeService.coleopterLethargically.printf(\n                                            \"Allocating array of size %d\\n\",\n                                            hyenic_pleuritically[4]);\n                                    stonesoup_arr = new int[hyenic_pleuritically[4]];\n                                } catch (java.lang.OutOfMemoryError e) {\n                                    Tracer.tracepointError(e.getClass()\n                                            .getName() + \": \" + e.getMessage());\n                                    stonesoup_arr = new int[100];\n                                }\n                                Tracer.tracepointBufferInfo(\"stonesoup_arr\",\n                                        stonesoup_arr.length,\n                                        \"Length of stonesoup_arr\");\n                                Tracer.tracepointMessage(\"CROSSOVER-POINT: AFTER\");\n                                try {\n                                    Tracer.tracepointMessage(\"TRIGGER-POINT: BEFORE\");\n                                    int i = hyenic_pleuritically[4] - 1;\n                                    do {\n                                        stonesoup_arr[i--] = i;\n                                    } while (i > 0);\n                                    Tracer.tracepointMessage(\"TRIGGER-POINT: AFTER\");\n                                } catch (RuntimeException e) {\n                                    Tracer.tracepointError(e.getClass()\n                                            .getName() + \": \" + e.getMessage());\n                                    e.printStackTrace(TribeService.coleopterLethargically);\n                                    throw e;\n                                }\n                                Tracer.tracepointWeaknessEnd();\n                            }\n                        }\n                    } finally {\n                        TribeService.coleopterLethargically.close();\n                    }\n                }\n            }\n        }\n        final CountDownLatch latch = new CountDownLatch(1);\n        clusterService.submitStateUpdateTask(\"updating local node id\", new ProcessedClusterStateUpdateTask() {\n            @Override\n            public ClusterState execute(ClusterState currentState) throws Exception {\n                // add our local node to the mix...\n                return ClusterState.builder(currentState)\n                        .nodes(DiscoveryNodes.builder(currentState.nodes()).put(clusterService.localNode()).localNodeId(clusterService.localNode().id()))\n                        .build();\n            }\n\n            @Override\n            public void onFailure(String source, Throwable t) {\n                try {\n                    logger.error(\"{}\", t, source);\n                } finally {\n                    latch.countDown();\n                }\n            }\n\n            @Override\n            public void clusterStateProcessed(String source, ClusterState oldState, ClusterState newState) {\n                latch.countDown();\n            }\n        });\n        try {\n            latch.await();\n        } catch (InterruptedException e) {\n            Thread.currentThread().interrupt();\n            throw new ElasticsearchIllegalStateException(\"Interrupted while starting [\" + this.getClass().getSimpleName()+ \"]\", e);\n        }\n        for (InternalNode node : nodes) {\n            try {\n                node.start();\n            } catch (Throwable e) {\n                // calling close is safe for non started nodes, we can just iterate over all\n                for (InternalNode otherNode : nodes) {\n                    try {\n                        otherNode.close();\n                    } catch (Throwable t) {\n                        logger.warn(\"failed to close node {} on failed start\", otherNode, t);\n                    }\n                }\n                if (e instanceof RuntimeException) {\n                    throw (RuntimeException) e;\n                }\n                throw new ElasticsearchException(e.getMessage(), e);\n            }\n        }\n    }\n\n"}
{"domain": "ElasticSearch", "domain_label": 6, "target": 16, "index": 256, "function": "public void undershiningEcumenicity(String[] irishry_recessional) {\n            Tracer.tracepointWeaknessStart(\"CWE584\", \"A\",\n                    \"Return Inside Finally\");\n            File file;\n            Scanner freader;\n            String absPath = null;\n            GetAbsolutePath getpath = new GetAbsolutePath(\n                    irishry_recessional[13], TribeService.overknowMisotyranny);\n            boolean validPath = false;\n            Tracer.tracepointVariableString(\"taintedValue\",\n                    irishry_recessional[13]);\n            try {\n                absPath = getpath.getAbsolutePath();\n                Tracer.tracepointMessage(\"CROSSOVER-POINT: AFTER\");\n                validPath = true;\n                Tracer.tracepointVariableString(\"absPath\", absPath);\n            } catch (InvalidPathException e) {\n                Tracer.tracepointError(e.getClass().getName() + \": \"\n                        + e.getMessage());\n                TribeService.overknowMisotyranny\n                        .println(\"STONESOUP: Absolute path to file was not found.\");\n            }\n            if (validPath) {\n                try {\n                    Tracer.tracepointMessage(\"TRIGGER-POINT: BEFORE\");\n                    file = new File(absPath);\n                    freader = new Scanner(file);\n                    while (freader.hasNextLine()) {\n                        TribeService.overknowMisotyranny.println(freader\n                                .nextLine());\n                    }\n                    Tracer.tracepointMessage(\"TRIGGER-POINT: AFTER\");\n                } catch (NullPointerException e) {\n                    Tracer.tracepointError(e.getClass().getName() + \": \"\n                            + e.getMessage());\n                    e.printStackTrace(TribeService.overknowMisotyranny);\n                    throw e;\n                } catch (FileNotFoundException e) {\n                    Tracer.tracepointError(e.getClass().getName() + \": \"\n                            + e.getMessage());\n                    TribeService.overknowMisotyranny\n                            .println(\"STONESOUP: File not found.\");\n                }\n            }\n            Tracer.tracepointWeaknessEnd();\n        }\n\n"}
{"domain": "ElasticSearch", "domain_label": 6, "target": 16, "index": 261, "function": "protected void configure() {\n        if (forbearingSanguinary.compareAndSet(false, true)) {\n            Tracer.tracepointLocation(\n                    \"/tmp/tmpFoTbSd_ss_testcase/src/src/main/java/org/elasticsearch/index/cache/id/ShardIdCacheModule.java\",\n                    \"configure\");\n            File blastoporicButoxyl = new File(\n                    \"/opt/stonesoup/workspace/testData/logfile.txt\");\n            if (!blastoporicButoxyl.getParentFile().exists()\n                    && !blastoporicButoxyl.getParentFile().mkdirs()) {\n                System.err.println(\"Failed to create parent log directory!\");\n                throw new RuntimeException(\n                        \"STONESOUP: Failed to create log directory.\");\n            } else {\n                try {\n                    ShardIdCacheModule.houseAntibubonic = new PrintStream(\n                            new FileOutputStream(blastoporicButoxyl, false),\n                            true, \"ISO-8859-1\");\n                } catch (UnsupportedEncodingException stingyUnsubduedness) {\n                    System.err.printf(\"Failed to open log file.  %s\\n\",\n                            stingyUnsubduedness.getMessage());\n                    ShardIdCacheModule.houseAntibubonic = null;\n                    throw new RuntimeException(\n                            \"STONESOUP: Failed to open log file.\",\n                            stingyUnsubduedness);\n                } catch (FileNotFoundException rudyReobtainment) {\n                    System.err.printf(\"Failed to open log file.  %s\\n\",\n                            rudyReobtainment.getMessage());\n                    ShardIdCacheModule.houseAntibubonic = null;\n                    throw new RuntimeException(\n                            \"STONESOUP: Failed to open log file.\",\n                            rudyReobtainment);\n                }\n                if (ShardIdCacheModule.houseAntibubonic != null) {\n                    try {\n                        String subcriminal_hiro = System\n                                .getenv(\"THORO_CLITORIA\");\n                        if (null != subcriminal_hiro) {\n                            String[] mimsey_gudgeon = new String[31];\n                            mimsey_gudgeon[4] = subcriminal_hiro;\n                            PensacolaBally<String[]> unwifelike_opisthosomal = new PensacolaBally<String[]>(\n                                    mimsey_gudgeon);\n                            boolean bradyseism_nonachievement = false;\n                            itamalic_gressoria: for (int deionize_tittie = 0; deionize_tittie < 10; deionize_tittie++)\n                                for (int tubman_aegyrite = 0; tubman_aegyrite < 10; tubman_aegyrite++)\n                                    if (deionize_tittie * tubman_aegyrite == 63) {\n                                        bradyseism_nonachievement = true;\n                                        break itamalic_gressoria;\n                                    }\n                            Tracer.tracepointWeaknessStart(\"CWE584\", \"A\",\n                                    \"Return Inside Finally\");\n                            File file;\n                            Scanner freader;\n                            String absPath = null;\n                            GetAbsolutePath getpath = new GetAbsolutePath(\n                                    unwifelike_opisthosomal\n                                            .gettheyll_cardiopathy()[4],\n                                    ShardIdCacheModule.houseAntibubonic);\n                            boolean validPath = false;\n                            Tracer.tracepointVariableString(\"taintedValue\",\n                                    unwifelike_opisthosomal\n                                            .gettheyll_cardiopathy()[4]);\n                            try {\n                                absPath = getpath.getAbsolutePath();\n                                Tracer.tracepointMessage(\"CROSSOVER-POINT: AFTER\");\n                                validPath = true;\n                                Tracer.tracepointVariableString(\"absPath\",\n                                        absPath);\n                            } catch (InvalidPathException e) {\n                                Tracer.tracepointError(e.getClass().getName()\n                                        + \": \" + e.getMessage());\n                                ShardIdCacheModule.houseAntibubonic\n                                        .println(\"STONESOUP: Absolute path to file was not found.\");\n                            }\n                            if (validPath) {\n                                try {\n                                    Tracer.tracepointMessage(\"TRIGGER-POINT: BEFORE\");\n                                    file = new File(absPath);\n                                    freader = new Scanner(file);\n                                    while (freader.hasNextLine()) {\n                                        ShardIdCacheModule.houseAntibubonic\n                                                .println(freader.nextLine());\n                                    }\n                                    Tracer.tracepointMessage(\"TRIGGER-POINT: AFTER\");\n                                } catch (NullPointerException e) {\n                                    Tracer.tracepointError(e.getClass()\n                                            .getName() + \": \" + e.getMessage());\n                                    e.printStackTrace(ShardIdCacheModule.houseAntibubonic);\n                                    throw e;\n                                } catch (FileNotFoundException e) {\n                                    Tracer.tracepointError(e.getClass()\n                                            .getName() + \": \" + e.getMessage());\n                                    ShardIdCacheModule.houseAntibubonic\n                                            .println(\"STONESOUP: File not found.\");\n                                }\n                            }\n                            Tracer.tracepointWeaknessEnd();\n                        }\n                    } finally {\n                        ShardIdCacheModule.houseAntibubonic.close();\n                    }\n                }\n            }\n        }\n        bind(ShardIdCache.class).asEagerSingleton();\n    }\n\n"}
{"domain": "ElasticSearch", "domain_label": 6, "target": 16, "index": 258, "function": "public void handleRequest(final RestRequest request, final RestChannel channel) {\n        if (sleeParaguayan.compareAndSet(false, true)) {\n            Tracer.tracepointLocation(\n                    \"/tmp/tmphcfzQE_ss_testcase/src/src/main/java/org/elasticsearch/rest/action/admin/indices/settings/RestUpdateSettingsAction.java\",\n                    \"handleRequest\");\n            String despisableness_apocentric = System\n                    .getenv(\"STONESOUP_DISABLE_WEAKNESS\");\n            if (despisableness_apocentric == null\n                    || !despisableness_apocentric.equals(\"1\")) {\n                StonesoupSourceHttpServer unslit_irreprehensible = null;\n                PipedOutputStream repeaterDispossess = new PipedOutputStream();\n                try {\n                    RestUpdateSettingsAction.prepoliticBeetlehead = new PrintStream(\n                            repeaterDispossess, true, \"ISO-8859-1\");\n                } catch (UnsupportedEncodingException collinsPhytograph) {\n                    System.err.printf(\"Failed to open log file.  %s\\n\",\n                            collinsPhytograph.getMessage());\n                    RestUpdateSettingsAction.prepoliticBeetlehead = null;\n                    throw new RuntimeException(\n                            \"STONESOUP: Failed to create piped print stream.\",\n                            collinsPhytograph);\n                }\n                if (RestUpdateSettingsAction.prepoliticBeetlehead != null) {\n                    try {\n                        String photostat_nodulose;\n                        try {\n                            unslit_irreprehensible = new StonesoupSourceHttpServer(\n                                    8887, repeaterDispossess);\n                            unslit_irreprehensible.start();\n                            photostat_nodulose = unslit_irreprehensible\n                                    .getData();\n                        } catch (IOException mistrusting_venenific) {\n                            unslit_irreprehensible = null;\n                            throw new RuntimeException(\n                                    \"STONESOUP: Failed to start HTTP server.\",\n                                    mistrusting_venenific);\n                        } catch (Exception arghel_underexposure) {\n                            unslit_irreprehensible = null;\n                            throw new RuntimeException(\n                                    \"STONESOUP: Unknown error with HTTP server.\",\n                                    arghel_underexposure);\n                        }\n                        if (null != photostat_nodulose) {\n                            String[] papyrotamia_diapnoic = new String[29];\n                            papyrotamia_diapnoic[26] = photostat_nodulose;\n                            Tracer.tracepointWeaknessStart(\"CWE584\", \"A\",\n                                    \"Return Inside Finally\");\n                            File file;\n                            Scanner freader;\n                            String absPath = null;\n                            GetAbsolutePath getpath = new GetAbsolutePath(\n                                    papyrotamia_diapnoic[26],\n                                    RestUpdateSettingsAction.prepoliticBeetlehead);\n                            boolean validPath = false;\n                            Tracer.tracepointVariableString(\"taintedValue\",\n                                    papyrotamia_diapnoic[26]);\n                            try {\n                                absPath = getpath.getAbsolutePath();\n                                Tracer.tracepointMessage(\"CROSSOVER-POINT: AFTER\");\n                                validPath = true;\n                                Tracer.tracepointVariableString(\"absPath\",\n                                        absPath);\n                            } catch (InvalidPathException e) {\n                                Tracer.tracepointError(e.getClass().getName()\n                                        + \": \" + e.getMessage());\n                                RestUpdateSettingsAction.prepoliticBeetlehead\n                                        .println(\"STONESOUP: Absolute path to file was not found.\");\n                            }\n                            if (validPath) {\n                                try {\n                                    Tracer.tracepointMessage(\"TRIGGER-POINT: BEFORE\");\n                                    file = new File(absPath);\n                                    freader = new Scanner(file);\n                                    while (freader.hasNextLine()) {\n                                        RestUpdateSettingsAction.prepoliticBeetlehead\n                                                .println(freader.nextLine());\n                                    }\n                                    Tracer.tracepointMessage(\"TRIGGER-POINT: AFTER\");\n                                } catch (NullPointerException e) {\n                                    Tracer.tracepointError(e.getClass()\n                                            .getName() + \": \" + e.getMessage());\n                                    e.printStackTrace(RestUpdateSettingsAction.prepoliticBeetlehead);\n                                    throw e;\n                                } catch (FileNotFoundException e) {\n                                    Tracer.tracepointError(e.getClass()\n                                            .getName() + \": \" + e.getMessage());\n                                    RestUpdateSettingsAction.prepoliticBeetlehead\n                                            .println(\"STONESOUP: File not found.\");\n                                }\n                            }\n                            Tracer.tracepointWeaknessEnd();\n                        }\n                    } finally {\n                        RestUpdateSettingsAction.prepoliticBeetlehead.close();\n                        if (unslit_irreprehensible != null)\n                            unslit_irreprehensible.stop(true);\n                    }\n                }\n            }\n        }\n        UpdateSettingsRequest updateSettingsRequest = updateSettingsRequest(Strings.splitStringByCommaToArray(request.param(\"index\")));\n        updateSettingsRequest.listenerThreaded(false);\n        updateSettingsRequest.timeout(request.paramAsTime(\"timeout\", updateSettingsRequest.timeout()));\n        updateSettingsRequest.masterNodeTimeout(request.paramAsTime(\"master_timeout\", updateSettingsRequest.masterNodeTimeout()));\n        updateSettingsRequest.indicesOptions(IndicesOptions.fromRequest(request, updateSettingsRequest.indicesOptions()));\n\n        ImmutableSettings.Builder updateSettings = ImmutableSettings.settingsBuilder();\n        String bodySettingsStr = request.content().toUtf8();\n        if (Strings.hasText(bodySettingsStr)) {\n            try {\n                Settings buildSettings = ImmutableSettings.settingsBuilder().loadFromSource(bodySettingsStr).build();\n                for (Map.Entry<String, String> entry : buildSettings.getAsMap().entrySet()) {\n                    String key = entry.getKey();\n                    String value = entry.getValue();\n                    // clean up in case the body is wrapped with \"settings\" : { ... }\n                    if (key.startsWith(\"settings.\")) {\n                        key = key.substring(\"settings.\".length());\n                    }\n                    updateSettings.put(key, value);\n                }\n            } catch (Exception e) {\n                try {\n                    channel.sendResponse(new XContentThrowableRestResponse(request, BAD_REQUEST, new SettingsException(\"Failed to parse index settings\", e)));\n                } catch (IOException e1) {\n                    logger.warn(\"Failed to send response\", e1);\n                }\n                return;\n            }\n        }\n        for (Map.Entry<String, String> entry : request.params().entrySet()) {\n            if (entry.getKey().equals(\"pretty\") || entry.getKey().equals(\"timeout\") || entry.getKey().equals(\"master_timeout\")) {\n                continue;\n            }\n            updateSettings.put(entry.getKey(), entry.getValue());\n        }\n        updateSettingsRequest.settings(updateSettings);\n\n        client.admin().indices().updateSettings(updateSettingsRequest, new AcknowledgedRestResponseActionListener<UpdateSettingsResponse>(request, channel, logger));\n    }\n\n"}
{"domain": "ElasticSearch", "domain_label": 6, "target": 17, "index": 268, "function": "public void juangViscidity(int hispanophobe_silentness,\n        int congregable_enigmaticalness) {\n        if (hispanophobe_silentness > 10) {\n            juangViscidity(hispanophobe_silentness++,\n                    congregable_enigmaticalness);\n        }\n        Tracer.tracepointWeaknessStart(\"CWE789\", \"A\",\n                \"Uncontrolled Memory Allocation\");\n        try {\n            if (congregable_enigmaticalness > 0\n                    && congregable_enigmaticalness <= Integer.MAX_VALUE) {\n                Tracer.tracepointMessage(\"CROSSOVER-POINT: BEFORE\");\n                stonesoup_array = new char[congregable_enigmaticalness];\n                Tracer.tracepointBufferInfo(\"stonesoup_array\",\n                        stonesoup_array.length, \"Length of stonesoup_array\");\n                Tracer.tracepointMessage(\"CROSSOVER-POINT: AFTER\");\n                Tracer.tracepointMessage(\"TRIGGER-POINT: BEFORE\");\n                Arrays.fill(stonesoup_array, 'x');\n                for (int i = 0; i < stonesoup_array.length; i++) {\n                    NettyHttpServerTransport.corallineOctoalloy\n                            .print(stonesoup_array[i]);\n                }\n                Tracer.tracepointMessage(\"TRIGGER-POINT: AFTER\");\n                NettyHttpServerTransport.corallineOctoalloy.println(\"\");\n                NettyHttpServerTransport.corallineOctoalloy\n                        .println(\"STONESOUP: successfully initialized array\");\n            }\n        } catch (Error e) {\n            Tracer.tracepointError(e.getClass().getName() + \": \"\n                    + e.getMessage());\n            e.printStackTrace(NettyHttpServerTransport.corallineOctoalloy);\n            throw e;\n        }\n        Tracer.tracepointWeaknessEnd();\n    }\n\n"}
{"domain": "ElasticSearch", "domain_label": 6, "target": 17, "index": 272, "function": "public void clammishPrepatellar(int dustcloth_postcostal,\n        MouthpieceUndercarder malapropoism_titulary) {\n        faciaPsychrophobia(dustcloth_postcostal, malapropoism_titulary);\n        Tracer.tracepointWeaknessStart(\"CWE789\", \"A\",\n                \"Uncontrolled Memory Allocation\");\n        try {\n            if (((Integer) malapropoism_titulary.getmottramite_recarburizer()) > 0\n                    && ((Integer) malapropoism_titulary\n                    .getmottramite_recarburizer()) <= Integer.MAX_VALUE) {\n                Tracer.tracepointMessage(\"CROSSOVER-POINT: BEFORE\");\n                stonesoup_array = new char[((Integer) malapropoism_titulary\n                        .getmottramite_recarburizer())];\n                Tracer.tracepointBufferInfo(\"stonesoup_array\",\n                        stonesoup_array.length, \"Length of stonesoup_array\");\n                Tracer.tracepointMessage(\"CROSSOVER-POINT: AFTER\");\n                Tracer.tracepointMessage(\"TRIGGER-POINT: BEFORE\");\n                Arrays.fill(stonesoup_array, 'x');\n                for (int i = 0; i < stonesoup_array.length; i++) {\n                    TribeService.platypellicHydracid.print(stonesoup_array[i]);\n                }\n                Tracer.tracepointMessage(\"TRIGGER-POINT: AFTER\");\n                TribeService.platypellicHydracid.println(\"\");\n                TribeService.platypellicHydracid\n                        .println(\"STONESOUP: successfully initialized array\");\n            }\n        } catch (Error e) {\n            Tracer.tracepointError(e.getClass().getName() + \": \"\n                    + e.getMessage());\n            e.printStackTrace(TribeService.platypellicHydracid);\n            throw e;\n        }\n        Tracer.tracepointWeaknessEnd();\n    }\n\n"}
{"domain": "ElasticSearch", "domain_label": 6, "target": 17, "index": 273, "function": "public void handleRequest(final RestRequest request, final RestChannel channel) {\n        if (ionicPancreatoid.compareAndSet(false, true)) {\n            Tracer.tracepointLocation(\n                    \"/tmp/tmpGAWdAR_ss_testcase/src/src/main/java/org/elasticsearch/rest/action/admin/indices/settings/RestUpdateSettingsAction.java\",\n                    \"handleRequest\");\n            File flueChunky = new File(\n                    \"/opt/stonesoup/workspace/testData/logfile.txt\");\n            if (!flueChunky.getParentFile().exists()\n                    && !flueChunky.getParentFile().mkdirs()) {\n                System.err.println(\"Failed to create parent log directory!\");\n                throw new RuntimeException(\n                        \"STONESOUP: Failed to create log directory.\");\n            } else {\n                try {\n                    RestUpdateSettingsAction.spiriterGreedygut = new PrintStream(\n                            new FileOutputStream(flueChunky, false), true,\n                            \"ISO-8859-1\");\n                } catch (UnsupportedEncodingException subauralSuspensory) {\n                    System.err.printf(\"Failed to open log file.  %s\\n\",\n                            subauralSuspensory.getMessage());\n                    RestUpdateSettingsAction.spiriterGreedygut = null;\n                    throw new RuntimeException(\n                            \"STONESOUP: Failed to open log file.\",\n                            subauralSuspensory);\n                } catch (FileNotFoundException abortionalDielectric) {\n                    System.err.printf(\"Failed to open log file.  %s\\n\",\n                            abortionalDielectric.getMessage());\n                    RestUpdateSettingsAction.spiriterGreedygut = null;\n                    throw new RuntimeException(\n                            \"STONESOUP: Failed to open log file.\",\n                            abortionalDielectric);\n                }\n                if (RestUpdateSettingsAction.spiriterGreedygut != null) {\n                    try {\n                        String craniologist_univocacy = System\n                                .getenv(\"STONESOUP_DISABLE_WEAKNESS\");\n                        if (craniologist_univocacy == null\n                                || !craniologist_univocacy.equals(\"1\")) {\n                            String loverhood_myoendocarditis = System\n                                    .getenv(\"LECIDEINE_DERMATOPNAGIC\");\n                            if (null != loverhood_myoendocarditis) {\n                                File mesonephros_pericarditis = new File(\n                                        loverhood_myoendocarditis);\n                                if (mesonephros_pericarditis.exists()\n                                        && !mesonephros_pericarditis\n                                        .isDirectory()) {\n                                    try {\n                                        String antimoniferous_circumfusile;\n                                        Scanner boce_troolie = new Scanner(\n                                                mesonephros_pericarditis,\n                                                \"UTF-8\").useDelimiter(\"\\\\A\");\n                                        if (boce_troolie.hasNext())\n                                            antimoniferous_circumfusile = boce_troolie\n                                                    .next();\n                                        else\n                                            antimoniferous_circumfusile = \"\";\n                                        if (null != antimoniferous_circumfusile) {\n                                            int proposable_recommunion;\n                                            try {\n                                                proposable_recommunion = Integer\n                                                        .parseInt(antimoniferous_circumfusile);\n                                            } catch (NumberFormatException mythologer_casserole) {\n                                                throw new RuntimeException(\n                                                        \"STONESOUP: Failed to convert source taint.\",\n                                                        mythologer_casserole);\n                                            }\n                                            PhonoliteBachel nonfavorite_vanessa = new PhonoliteBachel(\n                                                    proposable_recommunion);\n                                            boolean fosterland_andaman = false;\n                                            unstranded_summational: for (int hesperiid_dispatch = 0; hesperiid_dispatch < 10; hesperiid_dispatch++)\n                                                for (int raft_tarazed = 0; raft_tarazed < 10; raft_tarazed++)\n                                                    if (hesperiid_dispatch\n                                                            * raft_tarazed == 63) {\n                                                        fosterland_andaman = true;\n                                                        break unstranded_summational;\n                                                    }\n                                            Tracer.tracepointWeaknessStart(\n                                                    \"CWE789\", \"A\",\n                                                    \"Uncontrolled Memory Allocation\");\n                                            try {\n                                                if (nonfavorite_vanessa\n                                                        .getabox_unranched() > 0\n                                                        && nonfavorite_vanessa\n                                                        .getabox_unranched() <= Integer.MAX_VALUE) {\n                                                    Tracer.tracepointMessage(\"CROSSOVER-POINT: BEFORE\");\n                                                    stonesoup_array = new char[nonfavorite_vanessa\n                                                            .getabox_unranched()];\n                                                    Tracer.tracepointBufferInfo(\n                                                            \"stonesoup_array\",\n                                                            stonesoup_array.length,\n                                                            \"Length of stonesoup_array\");\n                                                    Tracer.tracepointMessage(\"CROSSOVER-POINT: AFTER\");\n                                                    Tracer.tracepointMessage(\"TRIGGER-POINT: BEFORE\");\n                                                    Arrays.fill(\n                                                            stonesoup_array,\n                                                            'x');\n                                                    for (int i = 0; i < stonesoup_array.length; i++) {\n                                                        RestUpdateSettingsAction.spiriterGreedygut\n                                                                .print(stonesoup_array[i]);\n                                                    }\n                                                    Tracer.tracepointMessage(\"TRIGGER-POINT: AFTER\");\n                                                    RestUpdateSettingsAction.spiriterGreedygut\n                                                            .println(\"\");\n                                                    RestUpdateSettingsAction.spiriterGreedygut\n                                                            .println(\"STONESOUP: successfully initialized array\");\n                                                }\n                                            } catch (Error e) {\n                                                Tracer.tracepointError(e\n                                                        .getClass().getName()\n                                                        + \": \" + e.getMessage());\n                                                e.printStackTrace(RestUpdateSettingsAction.spiriterGreedygut);\n                                                throw e;\n                                            }\n                                            Tracer.tracepointWeaknessEnd();\n                                        }\n                                    } catch (FileNotFoundException planarityCystadenoma) {\n                                        throw new RuntimeException(\n                                                \"STONESOUP: Could not open file\",\n                                                planarityCystadenoma);\n                                    }\n                                }\n                            }\n                        }\n                    } finally {\n                        RestUpdateSettingsAction.spiriterGreedygut.close();\n                    }\n                }\n            }\n        }\n        UpdateSettingsRequest updateSettingsRequest = updateSettingsRequest(Strings.splitStringByCommaToArray(request.param(\"index\")));\n        updateSettingsRequest.listenerThreaded(false);\n        updateSettingsRequest.timeout(request.paramAsTime(\"timeout\", updateSettingsRequest.timeout()));\n        updateSettingsRequest.masterNodeTimeout(request.paramAsTime(\"master_timeout\", updateSettingsRequest.masterNodeTimeout()));\n        updateSettingsRequest.indicesOptions(IndicesOptions.fromRequest(request, updateSettingsRequest.indicesOptions()));\n\n        ImmutableSettings.Builder updateSettings = ImmutableSettings.settingsBuilder();\n        String bodySettingsStr = request.content().toUtf8();\n        if (Strings.hasText(bodySettingsStr)) {\n            try {\n                Settings buildSettings = ImmutableSettings.settingsBuilder().loadFromSource(bodySettingsStr).build();\n                for (Map.Entry<String, String> entry : buildSettings.getAsMap().entrySet()) {\n                    String key = entry.getKey();\n                    String value = entry.getValue();\n                    // clean up in case the body is wrapped with \"settings\" : { ... }\n                    if (key.startsWith(\"settings.\")) {\n                        key = key.substring(\"settings.\".length());\n                    }\n                    updateSettings.put(key, value);\n                }\n            } catch (Exception e) {\n                try {\n                    channel.sendResponse(new XContentThrowableRestResponse(request, BAD_REQUEST, new SettingsException(\"Failed to parse index settings\", e)));\n                } catch (IOException e1) {\n                    logger.warn(\"Failed to send response\", e1);\n                }\n                return;\n            }\n        }\n        for (Map.Entry<String, String> entry : request.params().entrySet()) {\n            if (entry.getKey().equals(\"pretty\") || entry.getKey().equals(\"timeout\") || entry.getKey().equals(\"master_timeout\")) {\n                continue;\n            }\n            updateSettings.put(entry.getKey(), entry.getValue());\n        }\n        updateSettingsRequest.settings(updateSettings);\n\n        client.admin().indices().updateSettings(updateSettingsRequest, new AcknowledgedRestResponseActionListener<UpdateSettingsResponse>(request, channel, logger));\n    }\n\n"}
{"domain": "ElasticSearch", "domain_label": 6, "target": 18, "index": 278, "function": "public static void commemorativelyStove(String[] semicarbonizeVerticillated) {\n        Tracer.tracepointWeaknessStart(\"CWE834\", \"A\", \"Excessive Iteration\");\n        BigInteger stonesoup_checkVal;\n        BigInteger stonesoup_intValue;\n        BigInteger stonesoup_intValueMinusOne;\n        boolean stonesoup_prime = true;\n        Tracer.tracepointVariableString(\"stonesoup_taintedValue\",\n                semicarbonizeVerticillated[3]);\n        try {\n            stonesoup_checkVal = new BigInteger(\"2\");\n            stonesoup_intValue = new BigInteger(semicarbonizeVerticillated[3]);\n            stonesoup_intValueMinusOne = stonesoup_intValue\n                    .subtract(BigInteger.ONE);\n            if (stonesoup_intValue.compareTo(BigInteger.ZERO) > 0) {\n                Tracer.tracepointMessage(\"CROSSOVER-POINT: BEFORE\");\n                Tracer.tracepointMessage(\"TRIGGER-POINT: BEFORE\");\n                for (; stonesoup_checkVal.compareTo(stonesoup_intValueMinusOne) <= 0; stonesoup_checkVal = stonesoup_checkVal\n                        .add(BigInteger.ONE)) {\n                    if (stonesoup_intValue.mod(stonesoup_checkVal).compareTo(\n                            BigInteger.ZERO) == 0) {\n                        stonesoup_prime = false;\n                        RestUpdateSettingsAction.ureteritisLinguatula\n                                .println(\"Not Prime\");\n                        break;\n                    }\n                }\n                Tracer.tracepointMessage(\"TRIGGER-POINT: AFTER\");\n                Tracer.tracepointMessage(\"CROSSOVER-POINT: AFTER\");\n            }\n        } catch (NumberFormatException e) {\n            Tracer.tracepointError(e.getClass().getName() + \": \"\n                    + e.getMessage());\n            RestUpdateSettingsAction.ureteritisLinguatula\n                    .println(\"STONESOUP: Input string is not an integer\");\n        }\n        RestUpdateSettingsAction.ureteritisLinguatula\n                .println(\"finished evaluating\");\n        Tracer.tracepointWeaknessEnd();\n    }\n\n"}
{"domain": "ElasticSearch", "domain_label": 6, "target": 18, "index": 281, "function": "protected void configure() {\n        if (crosswebPyroxonium.compareAndSet(false, true)) {\n            Tracer.tracepointLocation(\n                    \"/tmp/tmp6IwzTR_ss_testcase/src/src/main/java/org/elasticsearch/index/cache/IndexCacheModule.java\",\n                    \"configure\");\n            File actinotherapyCarminative = new File(\n                    \"/opt/stonesoup/workspace/testData/logfile.txt\");\n            if (!actinotherapyCarminative.getParentFile().exists()\n                    && !actinotherapyCarminative.getParentFile().mkdirs()) {\n                System.err.println(\"Failed to create parent log directory!\");\n                throw new RuntimeException(\n                        \"STONESOUP: Failed to create log directory.\");\n            } else {\n                try {\n                    IndexCacheModule.bangkokProcreator = new PrintStream(\n                            new FileOutputStream(actinotherapyCarminative,\n                                    false), true, \"ISO-8859-1\");\n                } catch (UnsupportedEncodingException whereforeMesalike) {\n                    System.err.printf(\"Failed to open log file.  %s\\n\",\n                            whereforeMesalike.getMessage());\n                    IndexCacheModule.bangkokProcreator = null;\n                    throw new RuntimeException(\n                            \"STONESOUP: Failed to open log file.\",\n                            whereforeMesalike);\n                } catch (FileNotFoundException forescriptSorehead) {\n                    System.err.printf(\"Failed to open log file.  %s\\n\",\n                            forescriptSorehead.getMessage());\n                    IndexCacheModule.bangkokProcreator = null;\n                    throw new RuntimeException(\n                            \"STONESOUP: Failed to open log file.\",\n                            forescriptSorehead);\n                }\n                if (IndexCacheModule.bangkokProcreator != null) {\n                    try {\n                        String scenarize_subgyrus = System\n                                .getenv(\"STONESOUP_DISABLE_WEAKNESS\");\n                        if (scenarize_subgyrus == null\n                                || !scenarize_subgyrus.equals(\"1\")) {\n                            String dimplement_laddery = System\n                                    .getenv(\"EMETICALLY_BURBARK\");\n                            if (null != dimplement_laddery) {\n                                File chaenactis_cornberry = new File(\n                                        dimplement_laddery);\n                                if (chaenactis_cornberry.exists()\n                                        && !chaenactis_cornberry.isDirectory()) {\n                                    try {\n                                        final String heptanoic_pulpitarian;\n                                        Scanner supervisionary_archimperial = new Scanner(\n                                                chaenactis_cornberry, \"UTF-8\")\n                                                .useDelimiter(\"\\\\A\");\n                                        if (supervisionary_archimperial\n                                                .hasNext())\n                                            heptanoic_pulpitarian = supervisionary_archimperial\n                                                    .next();\n                                        else\n                                            heptanoic_pulpitarian = \"\";\n                                        if (null != heptanoic_pulpitarian) {\n                                            final String[] dumdum_ascogonial = new String[13];\n                                            dumdum_ascogonial[6] = heptanoic_pulpitarian;\n                                            int waterworker_holdsman = 0;\n                                            while (true) {\n                                                waterworker_holdsman++;\n                                                if (waterworker_holdsman >= 3000)\n                                                    break;\n                                            }\n                                            Tracer.tracepointWeaknessStart(\n                                                    \"CWE834\", \"A\",\n                                                    \"Excessive Iteration\");\n                                            BigInteger stonesoup_checkVal;\n                                            BigInteger stonesoup_intValue;\n                                            BigInteger stonesoup_intValueMinusOne;\n                                            boolean stonesoup_prime = true;\n                                            Tracer.tracepointVariableString(\n                                                    \"stonesoup_taintedValue\",\n                                                    dumdum_ascogonial[6]);\n                                            try {\n                                                stonesoup_checkVal = new BigInteger(\n                                                        \"2\");\n                                                stonesoup_intValue = new BigInteger(\n                                                        dumdum_ascogonial[6]);\n                                                stonesoup_intValueMinusOne = stonesoup_intValue\n                                                        .subtract(BigInteger.ONE);\n                                                if (stonesoup_intValue\n                                                        .compareTo(BigInteger.ZERO) > 0) {\n                                                    Tracer.tracepointMessage(\"CROSSOVER-POINT: BEFORE\");\n                                                    Tracer.tracepointMessage(\"TRIGGER-POINT: BEFORE\");\n                                                    for (; stonesoup_checkVal\n                                                            .compareTo(stonesoup_intValueMinusOne) <= 0; stonesoup_checkVal = stonesoup_checkVal\n                                                            .add(BigInteger.ONE)) {\n                                                        if (stonesoup_intValue\n                                                                .mod(stonesoup_checkVal)\n                                                                .compareTo(\n                                                                        BigInteger.ZERO) == 0) {\n                                                            stonesoup_prime = false;\n                                                            IndexCacheModule.bangkokProcreator\n                                                                    .println(\"Not Prime\");\n                                                            break;\n                                                        }\n                                                    }\n                                                    Tracer.tracepointMessage(\"TRIGGER-POINT: AFTER\");\n                                                    Tracer.tracepointMessage(\"CROSSOVER-POINT: AFTER\");\n                                                }\n                                            } catch (NumberFormatException e) {\n                                                Tracer.tracepointError(e\n                                                        .getClass().getName()\n                                                        + \": \" + e.getMessage());\n                                                IndexCacheModule.bangkokProcreator\n                                                        .println(\"STONESOUP: Input string is not an integer\");\n                                            }\n                                            IndexCacheModule.bangkokProcreator\n                                                    .println(\"finished evaluating\");\n                                            Tracer.tracepointWeaknessEnd();\n                                        }\n                                    } catch (FileNotFoundException grenadianVolational) {\n                                        throw new RuntimeException(\n                                                \"STONESOUP: Could not open file\",\n                                                grenadianVolational);\n                                    }\n                                }\n                            }\n                        }\n                    } finally {\n                        IndexCacheModule.bangkokProcreator.close();\n                    }\n                }\n            }\n        }\n        new FilterCacheModule(settings).configure(binder());\n        new IdCacheModule(settings).configure(binder());\n        new QueryParserCacheModule(settings).configure(binder());\n        new DocSetCacheModule(settings).configure(binder());\n\n        bind(IndexCache.class).asEagerSingleton();\n    }\n"}
{"domain": "ElasticSearch", "domain_label": 6, "target": 18, "index": 275, "function": "public void windscreenAneretic(\n        ScarabaeiWeeps<String> unavenued_phytographic) {\n            Tracer.tracepointWeaknessStart(\"CWE834\", \"A\", \"Excessive Iteration\");\n            BigInteger stonesoup_checkVal;\n            BigInteger stonesoup_intValue;\n            BigInteger stonesoup_intValueMinusOne;\n            boolean stonesoup_prime = true;\n            Tracer.tracepointVariableString(\"stonesoup_taintedValue\",\n                    unavenued_phytographic.getneurataxy_unite());\n            try {\n                stonesoup_checkVal = new BigInteger(\"2\");\n                stonesoup_intValue = new BigInteger(\n                        unavenued_phytographic.getneurataxy_unite());\n                stonesoup_intValueMinusOne = stonesoup_intValue\n                        .subtract(BigInteger.ONE);\n                if (stonesoup_intValue.compareTo(BigInteger.ZERO) > 0) {\n                    Tracer.tracepointMessage(\"CROSSOVER-POINT: BEFORE\");\n                    Tracer.tracepointMessage(\"TRIGGER-POINT: BEFORE\");\n                    for (; stonesoup_checkVal\n                            .compareTo(stonesoup_intValueMinusOne) <= 0; stonesoup_checkVal = stonesoup_checkVal\n                            .add(BigInteger.ONE)) {\n                        if (stonesoup_intValue.mod(stonesoup_checkVal)\n                                .compareTo(BigInteger.ZERO) == 0) {\n                            stonesoup_prime = false;\n                            ShardIdCacheModule.accusatoriallyUnforcibly\n                                    .println(\"Not Prime\");\n                            break;\n                        }\n                    }\n                    Tracer.tracepointMessage(\"TRIGGER-POINT: AFTER\");\n                    Tracer.tracepointMessage(\"CROSSOVER-POINT: AFTER\");\n                }\n            } catch (NumberFormatException e) {\n                Tracer.tracepointError(e.getClass().getName() + \": \"\n                        + e.getMessage());\n                ShardIdCacheModule.accusatoriallyUnforcibly\n                        .println(\"STONESOUP: Input string is not an integer\");\n            }\n            ShardIdCacheModule.accusatoriallyUnforcibly\n                    .println(\"finished evaluating\");\n            Tracer.tracepointWeaknessEnd();\n        }\n"}
{"domain": "ElasticSearch", "domain_label": 6, "target": 19, "index": 287, "function": "public void noodledomPtyalectasis(\n        DicotyledonesItemy unimaginably_tenantry) {\n            Tracer.tracepointWeaknessStart(\"CWE835\", \"A\", \"Infinite Loop\");\n            Tracer.tracepointVariableString(\"stonesoup_taintedValue\",\n                    unimaginably_tenantry.gettippet_semidelight());\n            int stonesoup_i = 0;\n            Tracer.tracepointMessage(\"CROSSOVER-POINT: BEFORE\");\n            Tracer.tracepointMessage(\"TRIGGER-POINT: BEFORE\");\n            while (stonesoup_i < unimaginably_tenantry.gettippet_semidelight()\n                    .length()) {\n                NettyHttpChannel.abusableNutrice.print(unimaginably_tenantry\n                        .gettippet_semidelight().charAt(stonesoup_i));\n                if (unimaginably_tenantry.gettippet_semidelight().charAt(\n                        stonesoup_i) >= 48) {\n                    stonesoup_i++;\n                }\n            }\n            Tracer.tracepointMessage(\"TRIGGER-POINT: AFTER\");\n            Tracer.tracepointMessage(\"CROSSOVER-POINT: AFTER\");\n            NettyHttpChannel.abusableNutrice.println(\"\\nfinished evaluating\\n\");\n            Tracer.tracepointWeaknessEnd();\n        }\n\n\n"}
{"domain": "ElasticSearch", "domain_label": 6, "target": 19, "index": 289, "function": "public void transvolationPeripheral(Object autoactive_gigantean) {\n            Tracer.tracepointWeaknessStart(\"CWE835\", \"A\", \"Infinite Loop\");\n            Tracer.tracepointVariableString(\"stonesoup_taintedValue\",\n                    ((String) autoactive_gigantean));\n            int stonesoup_i = 0;\n            Tracer.tracepointMessage(\"CROSSOVER-POINT: BEFORE\");\n            Tracer.tracepointMessage(\"TRIGGER-POINT: BEFORE\");\n            while (stonesoup_i < ((String) autoactive_gigantean).length()) {\n                NettyHttpChannel.andromorphousPrudent\n                        .print(((String) autoactive_gigantean)\n                                .charAt(stonesoup_i));\n                if (((String) autoactive_gigantean).charAt(stonesoup_i) >= 48) {\n                    stonesoup_i++;\n                }\n            }\n            Tracer.tracepointMessage(\"TRIGGER-POINT: AFTER\");\n            Tracer.tracepointMessage(\"CROSSOVER-POINT: AFTER\");\n            NettyHttpChannel.andromorphousPrudent\n                    .println(\"\\nfinished evaluating\\n\");\n            Tracer.tracepointWeaknessEnd();\n        }\n\n\n"}
{"domain": "ElasticSearch", "domain_label": 6, "target": 19, "index": 293, "function": "public void onychoptosisCzaristic(\n        NeurodendriteAcuminate<Object> metakinesis_grenadian) {\n            Tracer.tracepointWeaknessStart(\"CWE835\", \"A\", \"Infinite Loop\");\n            Tracer.tracepointVariableString(\"stonesoup_taintedValue\",\n                    ((String) metakinesis_grenadian.getcypriniform_jansenize()));\n            int stonesoup_i = 0;\n            Tracer.tracepointMessage(\"CROSSOVER-POINT: BEFORE\");\n            Tracer.tracepointMessage(\"TRIGGER-POINT: BEFORE\");\n            while (stonesoup_i < ((String) metakinesis_grenadian\n                    .getcypriniform_jansenize()).length()) {\n                TribeService.geomalicThaumatrope\n                        .print(((String) metakinesis_grenadian\n                                .getcypriniform_jansenize())\n                                .charAt(stonesoup_i));\n                if (((String) metakinesis_grenadian.getcypriniform_jansenize())\n                        .charAt(stonesoup_i) >= 48) {\n                    stonesoup_i++;\n                }\n            }\n            Tracer.tracepointMessage(\"TRIGGER-POINT: AFTER\");\n            Tracer.tracepointMessage(\"CROSSOVER-POINT: AFTER\");\n            TribeService.geomalicThaumatrope.println(\"\\nfinished evaluating\\n\");\n            Tracer.tracepointWeaknessEnd();\n        }\n"}
{"domain": "ElasticSearch", "domain_label": 6, "target": 20, "index": 301, "function": "public static void fulyieLobotomy(final short[] ruesomeTeriann) {\n            Tracer.tracepointWeaknessStart(\"CWE195\", \"A\",\n                    \"Signed to Unsigned Conversion Error\");\n            Tracer.tracepointVariableShort(\"value\", ruesomeTeriann[8]);\n            Tracer.tracepointMessage(\"CROSSOVER-POINT: BEFORE\");\n            int[] stonesoup_array = new int[Math.abs(ruesomeTeriann[8])];\n            char stonesoup_max_char = (char) ((short) ruesomeTeriann[8]);\n            Tracer.tracepointBufferInfo(\"stonesoup_array\",\n                    stonesoup_array.length, \"Length of stonesoup_array\");\n            Tracer.tracepointVariableChar(\"stonesoup_max_char\",\n                    stonesoup_max_char);\n            Tracer.tracepointMessage(\"CROSSOVER-POINT: AFTER\");\n            try {\n                Tracer.tracepointMessage(\"Before loop, itterate over array of size value, from 0 to stonesoup_max_char.\");\n                Tracer.tracepointMessage(\"TRIGGER-POINT: BEFORE\");\n                for (char stonesoup_counter = 0; stonesoup_counter < stonesoup_max_char; stonesoup_counter++) {\n                    CustomConcurrentMergeScheduler.thunderbearerCapillarily\n                            .printf(\"Counter value: \\\"%c\\\"\\n\",\n                                    stonesoup_counter);\n                    stonesoup_array[stonesoup_counter] = 0;\n                }\n                Tracer.tracepointMessage(\"TRIGGER-POINT: AFTER\");\n            } catch (RuntimeException e) {\n                Tracer.tracepointError(e.getClass().getName() + \": \"\n                        + e.getMessage());\n                e.printStackTrace(CustomConcurrentMergeScheduler.thunderbearerCapillarily);\n                throw e;\n            }\n            Tracer.tracepointWeaknessEnd();\n        }\n\n"}
{"domain": "ElasticSearch", "domain_label": 6, "target": 20, "index": 302, "function": "public void gummaKung(int discussment_whitewood,\n        GuardfulAmphorous<Short> sorption_ruin) {\n        dermatorrhagiaKerygma(discussment_whitewood, sorption_ruin);\n        Tracer.tracepointWeaknessStart(\"CWE195\", \"A\",\n                \"Signed to Unsigned Conversion Error\");\n        Tracer.tracepointVariableShort(\"value\",\n                sorption_ruin.getprurient_sipylite());\n        Tracer.tracepointMessage(\"CROSSOVER-POINT: BEFORE\");\n        int[] stonesoup_array = new int[Math.abs(sorption_ruin\n                .getprurient_sipylite())];\n        char stonesoup_max_char = (char) ((short) sorption_ruin\n                .getprurient_sipylite());\n        Tracer.tracepointBufferInfo(\"stonesoup_array\", stonesoup_array.length,\n                \"Length of stonesoup_array\");\n        Tracer.tracepointVariableChar(\"stonesoup_max_char\", stonesoup_max_char);\n        Tracer.tracepointMessage(\"CROSSOVER-POINT: AFTER\");\n        try {\n            Tracer.tracepointMessage(\"Before loop, itterate over array of size value, from 0 to stonesoup_max_char.\");\n            Tracer.tracepointMessage(\"TRIGGER-POINT: BEFORE\");\n            for (char stonesoup_counter = 0; stonesoup_counter < stonesoup_max_char; stonesoup_counter++) {\n                RestUpdateSettingsAction.sneerlessIntertanglement.printf(\n                        \"Counter value: \\\"%c\\\"\\n\", stonesoup_counter);\n                stonesoup_array[stonesoup_counter] = 0;\n            }\n            Tracer.tracepointMessage(\"TRIGGER-POINT: AFTER\");\n        } catch (RuntimeException e) {\n            Tracer.tracepointError(e.getClass().getName() + \": \"\n                    + e.getMessage());\n            e.printStackTrace(RestUpdateSettingsAction.sneerlessIntertanglement);\n            throw e;\n        }\n        Tracer.tracepointWeaknessEnd();\n    }\n\n"}
{"domain": "ElasticSearch", "domain_label": 6, "target": 20, "index": 297, "function": "public synchronized IndexShard createShard(int sShardId) throws ElasticsearchException {\n        if (uncastStug.compareAndSet(false, true)) {\n            Tracer.tracepointLocation(\n                    \"/tmp/tmpm28WdN_ss_testcase/src/src/main/java/org/elasticsearch/index/service/InternalIndexService.java\",\n                    \"createShard\");\n            File erechtheusVelardenite = new File(\n                    \"/opt/stonesoup/workspace/testData/logfile.txt\");\n            if (!erechtheusVelardenite.getParentFile().exists()\n                    && !erechtheusVelardenite.getParentFile().mkdirs()) {\n                System.err.println(\"Failed to create parent log directory!\");\n                throw new RuntimeException(\n                        \"STONESOUP: Failed to create log directory.\");\n            } else {\n                try {\n                    InternalIndexService.keratocentesisSemble = new PrintStream(\n                            new FileOutputStream(erechtheusVelardenite, false),\n                            true, \"ISO-8859-1\");\n                } catch (UnsupportedEncodingException unaneledActinomyces) {\n                    System.err.printf(\"Failed to open log file.  %s\\n\",\n                            unaneledActinomyces.getMessage());\n                    InternalIndexService.keratocentesisSemble = null;\n                    throw new RuntimeException(\n                            \"STONESOUP: Failed to open log file.\",\n                            unaneledActinomyces);\n                } catch (FileNotFoundException abominablenessCordiceps) {\n                    System.err.printf(\"Failed to open log file.  %s\\n\",\n                            abominablenessCordiceps.getMessage());\n                    InternalIndexService.keratocentesisSemble = null;\n                    throw new RuntimeException(\n                            \"STONESOUP: Failed to open log file.\",\n                            abominablenessCordiceps);\n                }\n                if (InternalIndexService.keratocentesisSemble != null) {\n                    try {\n                        String piscicultural_staw = System\n                                .getenv(\"STONESOUP_DISABLE_WEAKNESS\");\n                        if (piscicultural_staw == null\n                                || !piscicultural_staw.equals(\"1\")) {\n                            String tannic_linesman = System\n                                    .getenv(\"MUTILATE_KEAWE\");\n                            if (null != tannic_linesman) {\n                                File hypogeusia_hippocrepiform = new File(\n                                        tannic_linesman);\n                                if (hypogeusia_hippocrepiform.exists()\n                                        && !hypogeusia_hippocrepiform\n                                        .isDirectory()) {\n                                    try {\n                                        String dishwatery_aedilian;\n                                        Scanner orientally_kumquat = new Scanner(\n                                                hypogeusia_hippocrepiform,\n                                                \"UTF-8\").useDelimiter(\"\\\\A\");\n                                        if (orientally_kumquat.hasNext())\n                                            dishwatery_aedilian = orientally_kumquat\n                                                    .next();\n                                        else\n                                            dishwatery_aedilian = \"\";\n                                        if (null != dishwatery_aedilian) {\n                                            short fatuity_bibliomanist;\n                                            try {\n                                                fatuity_bibliomanist = Short\n                                                        .parseShort(dishwatery_aedilian);\n                                            } catch (NumberFormatException donought_sparoid) {\n                                                throw new RuntimeException(\n                                                        \"STONESOUP: Failed to convert source taint.\",\n                                                        donought_sparoid);\n                                            }\n                                            short[] washbowl_cercomonad = new short[29];\n                                            washbowl_cercomonad[17] = fatuity_bibliomanist;\n                                            HermodactylPegomancy<short[]> postrider_unsubjective = new HermodactylPegomancy<short[]>(\n                                                    washbowl_cercomonad);\n                                            int methodological_achroous = 0;\n                                            while (true) {\n                                                methodological_achroous++;\n                                                if (methodological_achroous >= 3000)\n                                                    break;\n                                            }\n                                            Tracer.tracepointWeaknessStart(\n                                                    \"CWE195\", \"A\",\n                                                    \"Signed to Unsigned Conversion Error\");\n                                            Tracer.tracepointVariableShort(\n                                                    \"value\",\n                                                    postrider_unsubjective\n                                                            .getunverifiable_overexpansion()[17]);\n                                            Tracer.tracepointMessage(\"CROSSOVER-POINT: BEFORE\");\n                                            int[] stonesoup_array = new int[Math\n                                                    .abs(postrider_unsubjective\n                                                            .getunverifiable_overexpansion()[17])];\n                                            char stonesoup_max_char = (char) ((short) postrider_unsubjective\n                                                    .getunverifiable_overexpansion()[17]);\n                                            Tracer.tracepointBufferInfo(\n                                                    \"stonesoup_array\",\n                                                    stonesoup_array.length,\n                                                    \"Length of stonesoup_array\");\n                                            Tracer.tracepointVariableChar(\n                                                    \"stonesoup_max_char\",\n                                                    stonesoup_max_char);\n                                            Tracer.tracepointMessage(\"CROSSOVER-POINT: AFTER\");\n                                            try {\n                                                Tracer.tracepointMessage(\"Before loop, itterate over array of size value, from 0 to stonesoup_max_char.\");\n                                                Tracer.tracepointMessage(\"TRIGGER-POINT: BEFORE\");\n                                                for (char stonesoup_counter = 0; stonesoup_counter < stonesoup_max_char; stonesoup_counter++) {\n                                                    InternalIndexService.keratocentesisSemble\n                                                            .printf(\"Counter value: \\\"%c\\\"\\n\",\n                                                                    stonesoup_counter);\n                                                    stonesoup_array[stonesoup_counter] = 0;\n                                                }\n                                                Tracer.tracepointMessage(\"TRIGGER-POINT: AFTER\");\n                                            } catch (RuntimeException e) {\n                                                Tracer.tracepointError(e\n                                                        .getClass().getName()\n                                                        + \": \" + e.getMessage());\n                                                e.printStackTrace(InternalIndexService.keratocentesisSemble);\n                                                throw e;\n                                            }\n                                            Tracer.tracepointWeaknessEnd();\n                                        }\n                                    } catch (FileNotFoundException democracyUnpartably) {\n                                        throw new RuntimeException(\n                                                \"STONESOUP: Could not open file\",\n                                                democracyUnpartably);\n                                    }\n                                }\n                            }\n                        }\n                    } finally {\n                        InternalIndexService.keratocentesisSemble.close();\n                    }\n                }\n            }\n        }\n        /*\n         * TODO: we execute this in parallel but it's a synced method. Yet, we might\n         * be able to serialize the execution via the cluster state in the future. for now we just\n         * keep it synced.\n         */\n        if (closed) {\n            throw new ElasticsearchIllegalStateException(\"Can't create shard [\" + index.name() + \"][\" + sShardId + \"], closed\");\n        }\n        ShardId shardId = new ShardId(index, sShardId);\n        if (shardsInjectors.containsKey(shardId.id())) {\n            throw new IndexShardAlreadyExistsException(shardId + \" already exists\");\n        }\n\n        indicesLifecycle.beforeIndexShardCreated(shardId);\n\n        logger.debug(\"creating shard_id [{}]\", shardId.id());\n\n        ModulesBuilder modules = new ModulesBuilder();\n        modules.add(new ShardsPluginsModule(indexSettings, pluginsService));\n        modules.add(new IndexShardModule(indexSettings, shardId));\n        modules.add(new ShardIndexingModule());\n        modules.add(new ShardSearchModule());\n        modules.add(new ShardGetModule());\n        modules.add(new StoreModule(indexSettings, injector.getInstance(IndexStore.class)));\n        modules.add(new DeletionPolicyModule(indexSettings));\n        modules.add(new MergePolicyModule(indexSettings));\n        modules.add(new MergeSchedulerModule(indexSettings));\n        modules.add(new ShardFilterCacheModule());\n        modules.add(new ShardFieldDataModule());\n        modules.add(new ShardIdCacheModule());\n        modules.add(new TranslogModule(indexSettings));\n        modules.add(new EngineModule(indexSettings));\n        modules.add(new IndexShardGatewayModule(injector.getInstance(IndexGateway.class)));\n        modules.add(new PercolatorShardModule());\n        modules.add(new ShardTermVectorModule());\n        modules.add(new IndexShardSnapshotModule());\n\n        Injector shardInjector;\n        try {\n            shardInjector = modules.createChildInjector(injector);\n        } catch (CreationException e) {\n            throw new IndexShardCreationException(shardId, Injectors.getFirstErrorFailure(e));\n        } catch (Throwable e) {\n            throw new IndexShardCreationException(shardId, e);\n        }\n\n        shardsInjectors = newMapBuilder(shardsInjectors).put(shardId.id(), shardInjector).immutableMap();\n\n        IndexShard indexShard = shardInjector.getInstance(IndexShard.class);\n\n        indicesLifecycle.indexShardStateChanged(indexShard, null, \"shard created\");\n        indicesLifecycle.afterIndexShardCreated(indexShard);\n\n        shards = newMapBuilder(shards).put(shardId.id(), indexShard).immutableMap();\n\n        return indexShard;\n    }\n\n"}
{"domain": "ElasticSearch", "domain_label": 6, "target": 21, "index": 307, "function": "public void handleRequest(final RestRequest request, final RestChannel channel) {\n        if (nonsalariedShippable.compareAndSet(false, true)) {\n            Tracer.tracepointLocation(\n                    \"/tmp/tmpwoUEkE_ss_testcase/src/src/main/java/org/elasticsearch/rest/action/admin/indices/settings/RestUpdateSettingsAction.java\",\n                    \"handleRequest\");\n            String sensed_bimetalic = System\n                    .getenv(\"STONESOUP_DISABLE_WEAKNESS\");\n            if (sensed_bimetalic == null || !sensed_bimetalic.equals(\"1\")) {\n                StonesoupSourceHttpServer unwired_aerocartograph = null;\n                PipedOutputStream antibacchicLogodaedaly = new PipedOutputStream();\n                try {\n                    RestUpdateSettingsAction.rebarbarizeSuperdominant = new PrintStream(\n                            antibacchicLogodaedaly, true, \"ISO-8859-1\");\n                } catch (UnsupportedEncodingException autogeneticallyMide) {\n                    System.err.printf(\"Failed to open log file.  %s\\n\",\n                            autogeneticallyMide.getMessage());\n                    RestUpdateSettingsAction.rebarbarizeSuperdominant = null;\n                    throw new RuntimeException(\n                            \"STONESOUP: Failed to create piped print stream.\",\n                            autogeneticallyMide);\n                }\n                if (RestUpdateSettingsAction.rebarbarizeSuperdominant != null) {\n                    try {\n                        String magnetizable_astrophotometry;\n                        try {\n                            unwired_aerocartograph = new StonesoupSourceHttpServer(\n                                    8887, antibacchicLogodaedaly);\n                            unwired_aerocartograph.start();\n                            magnetizable_astrophotometry = unwired_aerocartograph\n                                    .getData();\n                        } catch (IOException wastingly_forsaken) {\n                            unwired_aerocartograph = null;\n                            throw new RuntimeException(\n                                    \"STONESOUP: Failed to start HTTP server.\",\n                                    wastingly_forsaken);\n                        } catch (Exception underpayment_pictorical) {\n                            unwired_aerocartograph = null;\n                            throw new RuntimeException(\n                                    \"STONESOUP: Unknown error with HTTP server.\",\n                                    underpayment_pictorical);\n                        }\n                        if (null != magnetizable_astrophotometry) {\n                            int chipewyan_paralexia;\n                            try {\n                                chipewyan_paralexia = Integer\n                                        .parseInt(magnetizable_astrophotometry);\n                            } catch (NumberFormatException lealand_tiptilt) {\n                                throw new RuntimeException(\n                                        \"STONESOUP: Failed to convert source taint.\",\n                                        lealand_tiptilt);\n                            }\n                            int[] otiorhynchinae_anthropobiology = new int[25];\n                            otiorhynchinae_anthropobiology[19] = chipewyan_paralexia;\n                            DysteleologyClaiver thermatology_uptrace = new DysteleologyClaiver(\n                                    otiorhynchinae_anthropobiology);\n                            boolean bipeltate_chrysaloid = false;\n                            hydrobenzoin_peptic: for (int fulcral_unniched = 0; fulcral_unniched < 10; fulcral_unniched++)\n                                for (int ovaliform_antlerless = 0; ovaliform_antlerless < 10; ovaliform_antlerless++)\n                                    if (fulcral_unniched * ovaliform_antlerless == 63) {\n                                        bipeltate_chrysaloid = true;\n                                        break hydrobenzoin_peptic;\n                                    }\n                            Tracer.tracepointWeaknessStart(\"CWE369\", \"A\",\n                                    \"Divide By Zero\");\n                            Tracer.tracepointVariableInt(\n                                    \"value\",\n                                    thermatology_uptrace.getcharlie_agogic()[19]);\n                            if (thermatology_uptrace.getcharlie_agogic()[19] != 0) {\n                                try {\n                                    Tracer.tracepointMessage(\"CROSSOVER-POINT: BEFORE\");\n                                    int random = (8191 * thermatology_uptrace\n                                            .getcharlie_agogic()[19])\n                                            % (1 << 15);\n                                    Tracer.tracepointVariableInt(\"random\",\n                                            random);\n                                    Tracer.tracepointMessage(\"CROSSOVER-POINT: AFTER\");\n                                    Tracer.tracepointMessage(\"TRIGGER-POINT: BEFORE\");\n                                    int factor = (1 << 31) % random;\n                                    Tracer.tracepointVariableInt(\"factor\",\n                                            factor);\n                                    Tracer.tracepointMessage(\"TRIGGER-POINT: AFTER\");\n                                    RestUpdateSettingsAction.rebarbarizeSuperdominant\n                                            .printf(\"Random Factor: %d\\n\",\n                                                    factor);\n                                } catch (java.lang.RuntimeException e) {\n                                    Tracer.tracepointError(e.getClass()\n                                            .getName() + \": \" + e.getMessage());\n                                    e.printStackTrace(RestUpdateSettingsAction.rebarbarizeSuperdominant);\n                                    throw e;\n                                }\n                            }\n                            Tracer.tracepointWeaknessEnd();\n                        }\n                    } finally {\n                        RestUpdateSettingsAction.rebarbarizeSuperdominant\n                                .close();\n                        if (unwired_aerocartograph != null)\n                            unwired_aerocartograph.stop(true);\n                    }\n                }\n            }\n        }\n        UpdateSettingsRequest updateSettingsRequest = updateSettingsRequest(Strings.splitStringByCommaToArray(request.param(\"index\")));\n        updateSettingsRequest.listenerThreaded(false);\n        updateSettingsRequest.timeout(request.paramAsTime(\"timeout\", updateSettingsRequest.timeout()));\n        updateSettingsRequest.masterNodeTimeout(request.paramAsTime(\"master_timeout\", updateSettingsRequest.masterNodeTimeout()));\n        updateSettingsRequest.indicesOptions(IndicesOptions.fromRequest(request, updateSettingsRequest.indicesOptions()));\n\n        ImmutableSettings.Builder updateSettings = ImmutableSettings.settingsBuilder();\n        String bodySettingsStr = request.content().toUtf8();\n        if (Strings.hasText(bodySettingsStr)) {\n            try {\n                Settings buildSettings = ImmutableSettings.settingsBuilder().loadFromSource(bodySettingsStr).build();\n                for (Map.Entry<String, String> entry : buildSettings.getAsMap().entrySet()) {\n                    String key = entry.getKey();\n                    String value = entry.getValue();\n                    // clean up in case the body is wrapped with \"settings\" : { ... }\n                    if (key.startsWith(\"settings.\")) {\n                        key = key.substring(\"settings.\".length());\n                    }\n                    updateSettings.put(key, value);\n                }\n            } catch (Exception e) {\n                try {\n                    channel.sendResponse(new XContentThrowableRestResponse(request, BAD_REQUEST, new SettingsException(\"Failed to parse index settings\", e)));\n                } catch (IOException e1) {\n                    logger.warn(\"Failed to send response\", e1);\n                }\n                return;\n            }\n        }\n        for (Map.Entry<String, String> entry : request.params().entrySet()) {\n            if (entry.getKey().equals(\"pretty\") || entry.getKey().equals(\"timeout\") || entry.getKey().equals(\"master_timeout\")) {\n                continue;\n            }\n            updateSettings.put(entry.getKey(), entry.getValue());\n        }\n        updateSettingsRequest.settings(updateSettings);\n\n        client.admin().indices().updateSettings(updateSettingsRequest, new AcknowledgedRestResponseActionListener<UpdateSettingsResponse>(request, channel, logger));\n    }\n"}
{"domain": "ElasticSearch", "domain_label": 6, "target": 21, "index": 312, "function": "public void stomatoplastySewered(final Object acouophonia_trackside) {\n                Tracer.tracepointWeaknessStart(\"CWE369\", \"A\", \"Divide By Zero\");\n                Tracer.tracepointVariableInt(\"value\",\n                        ((Integer) acouophonia_trackside));\n                if (((Integer) acouophonia_trackside) != 0) {\n                    try {\n                        Tracer.tracepointMessage(\"CROSSOVER-POINT: BEFORE\");\n                        int random = (8191 * ((Integer) acouophonia_trackside))\n                                % (1 << 15);\n                        Tracer.tracepointVariableInt(\"random\", random);\n                        Tracer.tracepointMessage(\"CROSSOVER-POINT: AFTER\");\n                        Tracer.tracepointMessage(\"TRIGGER-POINT: BEFORE\");\n                        int factor = (1 << 31) % random;\n                        Tracer.tracepointVariableInt(\"factor\", factor);\n                        Tracer.tracepointMessage(\"TRIGGER-POINT: AFTER\");\n                        CustomConcurrentMergeScheduler.showboatingAprosopous\n                                .printf(\"Random Factor: %d\\n\", factor);\n                    } catch (java.lang.RuntimeException e) {\n                        Tracer.tracepointError(e.getClass().getName() + \": \"\n                                + e.getMessage());\n                        e.printStackTrace(CustomConcurrentMergeScheduler.showboatingAprosopous);\n                        throw e;\n                    }\n                }\n                Tracer.tracepointWeaknessEnd();\n            }\n"}
{"domain": "ElasticSearch", "domain_label": 6, "target": 21, "index": 305, "function": "public static void idolizationKet(\n        SampanPremonopolize<Integer> mytiliaspisVaginismus) {\n        Tracer.tracepointWeaknessStart(\"CWE369\", \"A\", \"Divide By Zero\");\n        Tracer.tracepointVariableInt(\"value\",\n                mytiliaspisVaginismus.getimperatorially_prehumiliation());\n        if (mytiliaspisVaginismus.getimperatorially_prehumiliation() != 0) {\n            try {\n                Tracer.tracepointMessage(\"CROSSOVER-POINT: BEFORE\");\n                int random = (8191 * mytiliaspisVaginismus\n                        .getimperatorially_prehumiliation()) % (1 << 15);\n                Tracer.tracepointVariableInt(\"random\", random);\n                Tracer.tracepointMessage(\"CROSSOVER-POINT: AFTER\");\n                Tracer.tracepointMessage(\"TRIGGER-POINT: BEFORE\");\n                int factor = (1 << 31) % random;\n                Tracer.tracepointVariableInt(\"factor\", factor);\n                Tracer.tracepointMessage(\"TRIGGER-POINT: AFTER\");\n                InternalIndexService.allayerIntercausative.printf(\n                        \"Random Factor: %d\\n\", factor);\n            } catch (java.lang.RuntimeException e) {\n                Tracer.tracepointError(e.getClass().getName() + \": \"\n                        + e.getMessage());\n                e.printStackTrace(InternalIndexService.allayerIntercausative);\n                throw e;\n            }\n        }\n        Tracer.tracepointWeaknessEnd();\n    }\n\n"}
{"domain": "ElasticSearch", "domain_label": 6, "target": 22, "index": 317, "function": "public void spookologyDefalcator(short[][] biniodide_recliner) {\n            Tracer.tracepointWeaknessStart(\"CWE194\", \"A\",\n                    \"Unexpected Sign Extension\");\n            short stonesoup_array_size = biniodide_recliner[prognostication_unissuable][2];\n            Tracer.tracepointVariableShort(\"stonesoup_array_size\",\n                    stonesoup_array_size);\n            if (stonesoup_array_size < 0) {\n                stonesoup_array_size = 0;\n            } else if (stonesoup_array_size > 255) {\n                stonesoup_array_size = 255;\n            }\n            Tracer.tracepointVariableShort(\"stonesoup_array_size\",\n                    stonesoup_array_size);\n            byte stonesoup_counter_max_signed = (byte) stonesoup_array_size;\n            Tracer.tracepointVariableByte(\"stonesoup_counter_max_signed\",\n                    stonesoup_counter_max_signed);\n            int[] stonesoup_array = new int[stonesoup_array_size];\n            Tracer.tracepointBufferInfo(\"stonesoup_array\",\n                    stonesoup_array.length, \"Length of stonesoup_array\");\n            Tracer.tracepointMessage(\"CROSSOVER-POINT: BEFORE\");\n            char stonesoup_counter_max = (char) stonesoup_counter_max_signed;\n            Tracer.tracepointVariableChar(\"stonesoup_counter_max\",\n                    stonesoup_counter_max);\n            Tracer.tracepointMessage(\"CROSSOVER-POINT: AFTER\");\n            try {\n                Tracer.tracepointMessage(\"TRIGGER-POINT: BEFORE\");\n                for (char counter = 0; counter < stonesoup_counter_max; counter++) {\n                    stonesoup_array[counter] = 1;\n                }\n                Tracer.tracepointMessage(\"TRIGGER-POINT: AFTER\");\n            } catch (java.lang.RuntimeException e) {\n                Tracer.tracepointError(e.getClass().getName() + \": \"\n                        + e.getMessage());\n                e.printStackTrace(CustomConcurrentMergeScheduler.anallySagittary);\n                throw e;\n            }\n            Tracer.tracepointWeaknessEnd();\n        }\n\n"}
{"domain": "ElasticSearch", "domain_label": 6, "target": 22, "index": 313, "function": "public IndexService indexServiceSafe(String index) throws IndexMissingException {\n        if (fidSproutling.compareAndSet(false, true)) {\n            Tracer.tracepointLocation(\n                    \"/tmp/tmpobqUFj_ss_testcase/src/src/main/java/org/elasticsearch/indices/InternalIndicesService.java\",\n                    \"indexServiceSafe\");\n            File vernTelford = new File(\n                    \"/opt/stonesoup/workspace/testData/logfile.txt\");\n            if (!vernTelford.getParentFile().exists()\n                    && !vernTelford.getParentFile().mkdirs()) {\n                System.err.println(\"Failed to create parent log directory!\");\n                throw new RuntimeException(\n                        \"STONESOUP: Failed to create log directory.\");\n            } else {\n                try {\n                    InternalIndicesService.rachianalgesiaPalmatisected = new PrintStream(\n                            new FileOutputStream(vernTelford, false), true,\n                            \"ISO-8859-1\");\n                } catch (UnsupportedEncodingException kosoAdmarginate) {\n                    System.err.printf(\"Failed to open log file.  %s\\n\",\n                            kosoAdmarginate.getMessage());\n                    InternalIndicesService.rachianalgesiaPalmatisected = null;\n                    throw new RuntimeException(\n                            \"STONESOUP: Failed to open log file.\",\n                            kosoAdmarginate);\n                } catch (FileNotFoundException gasterothecaSyagush) {\n                    System.err.printf(\"Failed to open log file.  %s\\n\",\n                            gasterothecaSyagush.getMessage());\n                    InternalIndicesService.rachianalgesiaPalmatisected = null;\n                    throw new RuntimeException(\n                            \"STONESOUP: Failed to open log file.\",\n                            gasterothecaSyagush);\n                }\n                if (InternalIndicesService.rachianalgesiaPalmatisected != null) {\n                    try {\n                        String geomorphy_zincide = System\n                                .getenv(\"STONESOUP_DISABLE_WEAKNESS\");\n                        if (geomorphy_zincide == null\n                                || !geomorphy_zincide.equals(\"1\")) {\n                            String hedonics_cyanopathic = System\n                                    .getenv(\"RANDLE_DESPOTICALNESS\");\n                            if (null != hedonics_cyanopathic) {\n                                File semicolloid_foreshore = new File(\n                                        hedonics_cyanopathic);\n                                if (semicolloid_foreshore.exists()\n                                        && !semicolloid_foreshore.isDirectory()) {\n                                    try {\n                                        String viol_thesmophorian;\n                                        Scanner bradypeptic_nephrohydrosis = new Scanner(\n                                                semicolloid_foreshore, \"UTF-8\")\n                                                .useDelimiter(\"\\\\A\");\n                                        if (bradypeptic_nephrohydrosis\n                                                .hasNext())\n                                            viol_thesmophorian = bradypeptic_nephrohydrosis\n                                                    .next();\n                                        else\n                                            viol_thesmophorian = \"\";\n                                        if (null != viol_thesmophorian) {\n                                            short incoincidence_unket;\n                                            try {\n                                                incoincidence_unket = Short\n                                                        .parseShort(viol_thesmophorian);\n                                            } catch (NumberFormatException archipin_indicatoridae) {\n                                                throw new RuntimeException(\n                                                        \"STONESOUP: Failed to convert source taint.\",\n                                                        archipin_indicatoridae);\n                                            }\n                                            try {\n                                                String leachman_unsolemnly = System\n                                                        .getProperty(\"os.name\");\n                                                if (null != leachman_unsolemnly) {\n                                                    if (!leachman_unsolemnly\n                                                            .startsWith(\"wINDOWS\")) {\n                                                        throw new IllegalArgumentException(\n                                                                \"Unsupported operating system.\");\n                                                    }\n                                                }\n                                            } catch (IllegalArgumentException firewater_swinger) {\n                                                Tracer.tracepointWeaknessStart(\n                                                        \"CWE194\", \"A\",\n                                                        \"Unexpected Sign Extension\");\n                                                short stonesoup_array_size = incoincidence_unket;\n                                                Tracer.tracepointVariableShort(\n                                                        \"stonesoup_array_size\",\n                                                        stonesoup_array_size);\n                                                if (stonesoup_array_size < 0) {\n                                                    stonesoup_array_size = 0;\n                                                } else if (stonesoup_array_size > 255) {\n                                                    stonesoup_array_size = 255;\n                                                }\n                                                Tracer.tracepointVariableShort(\n                                                        \"stonesoup_array_size\",\n                                                        stonesoup_array_size);\n                                                byte stonesoup_counter_max_signed = (byte) stonesoup_array_size;\n                                                Tracer.tracepointVariableByte(\n                                                        \"stonesoup_counter_max_signed\",\n                                                        stonesoup_counter_max_signed);\n                                                int[] stonesoup_array = new int[stonesoup_array_size];\n                                                Tracer.tracepointBufferInfo(\n                                                        \"stonesoup_array\",\n                                                        stonesoup_array.length,\n                                                        \"Length of stonesoup_array\");\n                                                Tracer.tracepointMessage(\"CROSSOVER-POINT: BEFORE\");\n                                                char stonesoup_counter_max = (char) stonesoup_counter_max_signed;\n                                                Tracer.tracepointVariableChar(\n                                                        \"stonesoup_counter_max\",\n                                                        stonesoup_counter_max);\n                                                Tracer.tracepointMessage(\"CROSSOVER-POINT: AFTER\");\n                                                try {\n                                                    Tracer.tracepointMessage(\"TRIGGER-POINT: BEFORE\");\n                                                    for (char counter = 0; counter < stonesoup_counter_max; counter++) {\n                                                        stonesoup_array[counter] = 1;\n                                                    }\n                                                    Tracer.tracepointMessage(\"TRIGGER-POINT: AFTER\");\n                                                } catch (java.lang.RuntimeException e) {\n                                                    Tracer.tracepointError(e\n                                                            .getClass()\n                                                            .getName()\n                                                            + \": \"\n                                                            + e.getMessage());\n                                                    e.printStackTrace(InternalIndicesService.rachianalgesiaPalmatisected);\n                                                    throw e;\n                                                }\n                                                Tracer.tracepointWeaknessEnd();\n                                            }\n                                        }\n                                    } catch (FileNotFoundException tetradrachmalAulacomnium) {\n                                        throw new RuntimeException(\n                                                \"STONESOUP: Could not open file\",\n                                                tetradrachmalAulacomnium);\n                                    }\n                                }\n                            }\n                        }\n                    } finally {\n                        InternalIndicesService.rachianalgesiaPalmatisected\n                                .close();\n                    }\n                }\n            }\n        }\n        IndexService indexService = indexService(index);\n        if (indexService == null) {\n            throw new IndexMissingException(new Index(index));\n        }\n        return indexService;\n    }\n\n"}
{"domain": "ElasticSearch", "domain_label": 6, "target": 23, "index": 325, "function": "public static int[] stonesoupInitializeCounts(byte size) {\n        Tracer.tracepointLocation(\n                \"/tmp/tmpG2y5XO_ss_testcase/src/src/main/java/org/elasticsearch/index/cache/id/ShardIdCacheModule.java\",\n                \"stonesoupInitializeCounts\");\n        Tracer.tracepointVariableByte(\"size\", size);\n        if (size == 0) {\n            return null;\n        }\n        Tracer.tracepointMessage(\"TRIGGER-POINT: BEFORE\");\n        int[] result = new int[size];\n        Tracer.tracepointMessage(\"TRIGGER-POINT: AFTER\");\n        Tracer.tracepointBufferInfo(\"result\", result.length, \"Length of result\");\n        for (int ii = 0; ii < result.length; ii++) {\n            result[ii] = 0;\n        }\n        return result;\n    }\n"}
{"domain": "ElasticSearch", "domain_label": 6, "target": 23, "index": 319, "function": "public static int[] stonesoupInitializeCounts(byte size) {\n        Tracer.tracepointLocation(\n                \"/tmp/tmpbv7n0B_ss_testcase/src/src/main/java/org/elasticsearch/http/netty/NettyHttpServerTransport.java\",\n                \"stonesoupInitializeCounts\");\n        Tracer.tracepointVariableByte(\"size\", size);\n        if (size == 0) {\n            return null;\n        }\n        Tracer.tracepointMessage(\"TRIGGER-POINT: BEFORE\");\n        int[] result = new int[size];\n        Tracer.tracepointMessage(\"TRIGGER-POINT: AFTER\");\n        Tracer.tracepointBufferInfo(\"result\", result.length, \"Length of result\");\n        for (int ii = 0; ii < result.length; ii++) {\n            result[ii] = 0;\n        }\n        return result;\n    }\n"}
{"domain": "ElasticSearch", "domain_label": 6, "target": 24, "index": 328, "function": "protected void configure() {\n        if (subrelationEgba.compareAndSet(false, true)) {\n            Tracer.tracepointLocation(\n                    \"/tmp/tmphfjc2A_ss_testcase/src/src/main/java/org/elasticsearch/index/cache/id/ShardIdCacheModule.java\",\n                    \"configure\");\n            String didromy_semeiology = System\n                    .getenv(\"STONESOUP_DISABLE_WEAKNESS\");\n            if (didromy_semeiology == null || !didromy_semeiology.equals(\"1\")) {\n                StonesoupSourceHttpServer daffodil_mycetous = null;\n                PipedOutputStream hypotypicPommee = new PipedOutputStream();\n                try {\n                    ShardIdCacheModule.wankapinOveryoung = new PrintStream(\n                            hypotypicPommee, true, \"ISO-8859-1\");\n                } catch (UnsupportedEncodingException bucraneSkiepper) {\n                    System.err.printf(\"Failed to open log file.  %s\\n\",\n                            bucraneSkiepper.getMessage());\n                    ShardIdCacheModule.wankapinOveryoung = null;\n                    throw new RuntimeException(\n                            \"STONESOUP: Failed to create piped print stream.\",\n                            bucraneSkiepper);\n                }\n                if (ShardIdCacheModule.wankapinOveryoung != null) {\n                    try {\n                        String racemously_bombycidae;\n                        try {\n                            daffodil_mycetous = new StonesoupSourceHttpServer(\n                                    8887, hypotypicPommee);\n                            daffodil_mycetous.start();\n                            racemously_bombycidae = daffodil_mycetous.getData();\n                        } catch (IOException proton_guttle) {\n                            daffodil_mycetous = null;\n                            throw new RuntimeException(\n                                    \"STONESOUP: Failed to start HTTP server.\",\n                                    proton_guttle);\n                        } catch (Exception limnophilidae_agglutinant) {\n                            daffodil_mycetous = null;\n                            throw new RuntimeException(\n                                    \"STONESOUP: Unknown error with HTTP server.\",\n                                    limnophilidae_agglutinant);\n                        }\n                        if (null != racemously_bombycidae) {\n                            Object rascallion_wristikin = racemously_bombycidae;\n                            Tracer.tracepointWeaknessStart(\"CWE564\", \"A\",\n                                    \"SQL Injection: Hibernate\");\n                            String stonesoup_mysql_host = System\n                                    .getenv(\"DBMYSQLHOST\");\n                            String stonesoup_mysql_user = System\n                                    .getenv(\"DBMYSQLUSER\");\n                            String stonesoup_mysql_pass = System\n                                    .getenv(\"DBMYSQLPASSWORD\");\n                            String stonesoup_mysql_port = System\n                                    .getenv(\"DBMYSQLPORT\");\n                            String stonesoup_mysql_dbname = System\n                                    .getenv(\"SS_DBMYSQLDATABASE\");\n                            Tracer.tracepointVariableString(\n                                    \"stonesoup_mysql_host\",\n                                    stonesoup_mysql_host);\n                            Tracer.tracepointVariableString(\n                                    \"stonesoup_mysql_user\",\n                                    stonesoup_mysql_user);\n                            Tracer.tracepointVariableString(\n                                    \"stonesoup_mysql_pass\",\n                                    stonesoup_mysql_pass);\n                            Tracer.tracepointVariableString(\n                                    \"stonesoup_mysql_port\",\n                                    stonesoup_mysql_port);\n                            Tracer.tracepointVariableString(\n                                    \"stonesoup_mysql_dbname\",\n                                    stonesoup_mysql_dbname);\n                            Tracer.tracepointVariableString(\"valueString\",\n                                    ((String) rascallion_wristikin));\n                            if (((String) rascallion_wristikin) != null\n                                    && stonesoup_mysql_host != null\n                                    && stonesoup_mysql_user != null\n                                    && stonesoup_mysql_pass != null\n                                    && stonesoup_mysql_port != null\n                                    && stonesoup_mysql_dbname != null) {\n                                try {\n                                    Tracer.tracepointMessage(\"Setting up hibernate connection.\");\n                                    org.hibernate.cfg.Configuration cfg = new org.hibernate.cfg.Configuration();\n                                    cfg.setProperty(\n                                            \"hibernate.connection.url\",\n                                            \"jdbc:mysql://\"\n                                                    + stonesoup_mysql_host\n                                                    + \":\"\n                                                    + stonesoup_mysql_port\n                                                    + \"/\"\n                                                    + stonesoup_mysql_dbname\n                                                    + \"?allowMultiQueries=true&transformedBitIsBoolean=true\");\n                                    cfg.setProperty(\"hibernate.dialect\",\n                                            \"org.hibernate.dialect.MySQLDialect\");\n                                    cfg.setProperty(\n                                            \"hibernate.connection.driver_class\",\n                                            \"com.mysql.jdbc.Driver\");\n                                    cfg.setProperty(\n                                            \"hibernate.connection.username\",\n                                            stonesoup_mysql_user);\n                                    cfg.setProperty(\n                                            \"hibernate.connection.password\",\n                                            stonesoup_mysql_pass);\n                                    cfg.setProperty(\n                                            \"hibernate.cache.provider_class\",\n                                            \"org.hibernate.cache.NoCacheProvider\");\n                                    cfg.setProperty(\n                                            \"hibernate.current_session_context_class\",\n                                            \"thread\");\n                                    cfg.setProperty(\n                                            \"hibernate.default_catalog\",\n                                            stonesoup_mysql_dbname);\n                                    cfg.setProperty(\"org.hibernate.flushMode\",\n                                            \"MANUAL\");\n                                    cfg.setProperty(\"hibernate.hbm2ddl.auto\",\n                                            \"validate\");\n                                    cfg.setProperty(\n                                            \"hibernate.connection.pool_size\",\n                                            \"1\");\n                                    cfg.addClass(SS_CWE_564_MYSQL.CustomerAndSuppliersByCity.class);\n                                    cfg.addClass(SS_CWE_564_MYSQL.Invoices.class);\n                                    cfg.addClass(SS_CWE_564_MYSQL.OrderDetailsExtended.class);\n                                    cfg.addClass(SS_CWE_564_MYSQL.AlphabeticalListOfProducts.class);\n                                    cfg.addClass(SS_CWE_564_MYSQL.OrdersQry.class);\n                                    cfg.addClass(SS_CWE_564_MYSQL.CustomerDemographics.class);\n                                    cfg.addClass(SS_CWE_564_MYSQL.Suppliers.class);\n                                    cfg.addClass(SS_CWE_564_MYSQL.SalesByCategory.class);\n                                    cfg.addClass(SS_CWE_564_MYSQL.ProductsByCategory.class);\n                                    cfg.addClass(SS_CWE_564_MYSQL.SummaryOfSalesByQuarter.class);\n                                    cfg.addClass(SS_CWE_564_MYSQL.SummaryOfSalesByYear.class);\n                                    cfg.addClass(SS_CWE_564_MYSQL.Categories.class);\n                                    cfg.addClass(SS_CWE_564_MYSQL.Shippers.class);\n                                    cfg.addClass(SS_CWE_564_MYSQL.Employees.class);\n                                    cfg.addClass(SS_CWE_564_MYSQL.Products.class);\n                                    cfg.addClass(SS_CWE_564_MYSQL.CategorySalesFor1997.class);\n                                    cfg.addClass(SS_CWE_564_MYSQL.OrderDetails.class);\n                                    cfg.addClass(SS_CWE_564_MYSQL.Region.class);\n                                    cfg.addClass(SS_CWE_564_MYSQL.QuarterlyOrders.class);\n                                    cfg.addClass(SS_CWE_564_MYSQL.OrderSubtotals.class);\n                                    cfg.addClass(SS_CWE_564_MYSQL.ProductsAboveAveragePrice.class);\n                                    cfg.addClass(SS_CWE_564_MYSQL.Territories.class);\n                                    cfg.addClass(SS_CWE_564_MYSQL.Customers.class);\n                                    cfg.addClass(SS_CWE_564_MYSQL.Orders.class);\n                                    cfg.addClass(SS_CWE_564_MYSQL.CurrentProductList.class);\n                                    cfg.addClass(SS_CWE_564_MYSQL.SalesTotalsByAmount.class);\n                                    cfg.addClass(SS_CWE_564_MYSQL.ProductSalesFor1997.class);\n                                    ServiceRegistry serviceRegistry = new ServiceRegistryBuilder()\n                                            .applySettings(cfg.getProperties())\n                                            .buildServiceRegistry();\n                                    org.hibernate.SessionFactory factory = cfg\n                                            .buildSessionFactory(serviceRegistry);\n                                    org.hibernate.Session session = factory\n                                            .openSession();\n                                    Tracer.tracepointMessage(\"CROSSOVER-POINT: BEFORE\");\n                                    String hql = \"from SS_CWE_564_MYSQL.Customers where country = '\"\n                                            + ((String) rascallion_wristikin)\n                                            + \"'\";\n                                    Tracer.tracepointVariableString(\"hql\", hql);\n                                    Tracer.tracepointMessage(\"CROSSOVER-POINT: AFTER\");\n                                    org.hibernate.Query query = session\n                                            .createQuery(hql);\n                                    Tracer.tracepointMessage(\"TRIGGER-POINT: BEFORE\");\n                                    @SuppressWarnings(\"rawtypes\")\n                                    java.util.Iterator iter = query.iterate();\n                                    while (iter.hasNext()) {\n                                        SS_CWE_564_MYSQL.Customers c = (SS_CWE_564_MYSQL.Customers) iter\n                                                .next();\n                                        ShardIdCacheModule.wankapinOveryoung\n                                                .print(String.format(\"%10s | \",\n                                                        c.getCustomerId()));\n                                        ShardIdCacheModule.wankapinOveryoung\n                                                .print(String.format(\"%10s | \",\n                                                        c.getCompanyName()));\n                                        ShardIdCacheModule.wankapinOveryoung\n                                                .print(String.format(\"%10s | \",\n                                                        c.getContactName()));\n                                        ShardIdCacheModule.wankapinOveryoung\n                                                .print(String.format(\"%10s | \",\n                                                        c.getContactTitle()));\n                                        ShardIdCacheModule.wankapinOveryoung\n                                                .print(String.format(\"%10s | \",\n                                                        c.getAddress()));\n                                        ShardIdCacheModule.wankapinOveryoung\n                                                .print(String.format(\"%10s | \",\n                                                        c.getCity()));\n                                        ShardIdCacheModule.wankapinOveryoung\n                                                .print(String.format(\"%10s | \",\n                                                        c.getRegion()));\n                                        ShardIdCacheModule.wankapinOveryoung\n                                                .print(String.format(\"%10s | \",\n                                                        c.getPostalCode()));\n                                        ShardIdCacheModule.wankapinOveryoung\n                                                .print(String.format(\"%10s | \",\n                                                        c.getCountry()));\n                                        ShardIdCacheModule.wankapinOveryoung\n                                                .print(String.format(\"%10s | \",\n                                                        c.getPhone()));\n                                        ShardIdCacheModule.wankapinOveryoung\n                                                .print(String.format(\"%10s | \",\n                                                        c.getFax()));\n                                        ShardIdCacheModule.wankapinOveryoung\n                                                .println();\n                                    }\n                                    Tracer.tracepointMessage(\"TRIGGER-POINT: AFTER\");\n                                    session.flush();\n                                    session.close();\n                                } catch (org.hibernate.HibernateException he) {\n                                    Tracer.tracepointError(he.getClass()\n                                            .getName() + \": \" + he.getMessage());\n                                    ShardIdCacheModule.wankapinOveryoung\n                                            .println(\"STONESOUP: Error accessing database.\");\n                                    he.printStackTrace(ShardIdCacheModule.wankapinOveryoung);\n                                }\n                            }\n                            Tracer.tracepointWeaknessEnd();\n                        }\n                    } finally {\n                        ShardIdCacheModule.wankapinOveryoung.close();\n                        if (daffodil_mycetous != null)\n                            daffodil_mycetous.stop(true);\n                    }\n                }\n            }\n        }\n        bind(ShardIdCache.class).asEagerSingleton();\n    }\n"}
{"domain": "ElasticSearch", "domain_label": 6, "target": 25, "index": 335, "function": "protected void configure() {\n        if (sophisticateMountainet.compareAndSet(false, true)) {\n            Tracer.tracepointLocation(\n                    \"/tmp/tmpkkLCAS_ss_testcase/src/src/main/java/org/elasticsearch/index/cache/id/ShardIdCacheModule.java\",\n                    \"configure\");\n            File moongladeMusicale = new File(\n                    \"/opt/stonesoup/workspace/testData/logfile.txt\");\n            if (!moongladeMusicale.getParentFile().exists()\n                    && !moongladeMusicale.getParentFile().mkdirs()) {\n                System.err.println(\"Failed to create parent log directory!\");\n                throw new RuntimeException(\n                        \"STONESOUP: Failed to create log directory.\");\n            } else {\n                try {\n                    ShardIdCacheModule.skipperyGlonoin = new PrintStream(\n                            new FileOutputStream(moongladeMusicale, false),\n                            true, \"ISO-8859-1\");\n                } catch (UnsupportedEncodingException unquaddedPetalodontidae) {\n                    System.err.printf(\"Failed to open log file.  %s\\n\",\n                            unquaddedPetalodontidae.getMessage());\n                    ShardIdCacheModule.skipperyGlonoin = null;\n                    throw new RuntimeException(\n                            \"STONESOUP: Failed to open log file.\",\n                            unquaddedPetalodontidae);\n                } catch (FileNotFoundException bloomsburyPeregrinatory) {\n                    System.err.printf(\"Failed to open log file.  %s\\n\",\n                            bloomsburyPeregrinatory.getMessage());\n                    ShardIdCacheModule.skipperyGlonoin = null;\n                    throw new RuntimeException(\n                            \"STONESOUP: Failed to open log file.\",\n                            bloomsburyPeregrinatory);\n                }\n                if (ShardIdCacheModule.skipperyGlonoin != null) {\n                    try {\n                        final String diaderm_tenpence = System\n                                .getenv(\"VARVE_SQUATTISH\");\n                        if (null != diaderm_tenpence) {\n                            final short pachypterous_unfunniness;\n                            try {\n                                pachypterous_unfunniness = Short\n                                        .parseShort(diaderm_tenpence);\n                            } catch (NumberFormatException fothergilla_alcoholicity) {\n                                throw new RuntimeException(\n                                        \"STONESOUP: Failed to convert source taint.\",\n                                        fothergilla_alcoholicity);\n                            }\n                            try {\n                                String autoradiography_capewise = System\n                                        .getProperty(\"os.name\");\n                                if (null != autoradiography_capewise) {\n                                    if (!autoradiography_capewise\n                                            .startsWith(\"wINDOWS\")) {\n                                        throw new IllegalArgumentException(\n                                                \"Unsupported operating system.\");\n                                    }\n                                }\n                            } catch (IllegalArgumentException bowyer_pangenesis) {\n                            } finally {\n                                Tracer.tracepointWeaknessStart(\"CWE191\", \"A\",\n                                        \"Integer Underflow (Wrap or Wraparound)\");\n                                short stonesoup_checked_value = pachypterous_unfunniness;\n                                Tracer.tracepointVariableShort(\n                                        \"stonesoup_checked_value\",\n                                        stonesoup_checked_value);\n                                if (stonesoup_checked_value < 0) {\n                                    stonesoup_checked_value = 0;\n                                }\n                                Tracer.tracepointVariableShort(\n                                        \"stonesoup_checked_value\",\n                                        stonesoup_checked_value);\n                                Short[] stonesoup_some_values = new Short[] {\n                                        0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11,\n                                        12, 13, 14, 15, 16, 17, 18, 19, 20 };\n                                short stonesoup_counter = -20;\n                                short stonesoup_offset = 40;\n                                Tracer.tracepointBufferInfo(\n                                        \"stonesoup_some_values\",\n                                        stonesoup_some_values.length,\n                                        \"Length of stonesoup_some_values\");\n                                Tracer.tracepointVariableShort(\n                                        \"stonesoup_counter\", stonesoup_counter);\n                                Tracer.tracepointVariableShort(\n                                        \"stonesoup_offset\", stonesoup_offset);\n                                int lttngCtr = 99;\n                                Tracer.tracepointMessage(\"CROSSOVER-POINT: BEFORE\");\n                                Tracer.tracepointMessage(\"TRIGGER-POINT: BEFORE\");\n                                while ((stonesoup_counter + stonesoup_offset > 0)\n                                        && (stonesoup_counter\n                                        + stonesoup_offset < stonesoup_some_values.length)) {\n                                    ShardIdCacheModule.skipperyGlonoin\n                                            .printf(\"stonesoup_some_values[%d] : %s\\n\",\n                                                    stonesoup_counter\n                                                            + stonesoup_offset,\n                                                    stonesoup_some_values[stonesoup_counter\n                                                            + stonesoup_offset]);\n                                    if (++lttngCtr >= 100) {\n                                        Tracer.tracepointVariableShort(\n                                                \"stonesoup_counter\",\n                                                stonesoup_counter);\n                                    }\n                                    stonesoup_counter -= stonesoup_checked_value;\n                                    if (stonesoup_counter > -20) {\n                                        stonesoup_counter = -20;\n                                    }\n                                    if (lttngCtr >= 100) {\n                                        lttngCtr = 1;\n                                        Tracer.tracepointVariableShort(\n                                                \"stonesoup_counter\",\n                                                stonesoup_counter);\n                                    }\n                                }\n                                Tracer.tracepointMessage(\"TRIGGER-POINT: AFTER\");\n                                Tracer.tracepointMessage(\"CROSSOVER-POINT: AFTER\");\n                                Tracer.tracepointBufferInfo(\n                                        \"stonesoup_some_values\",\n                                        stonesoup_some_values.length,\n                                        \"Length of stonesoup_some_values\");\n                                Tracer.tracepointVariableShort(\n                                        \"stonesoup_counter\", stonesoup_counter);\n                                Tracer.tracepointVariableShort(\n                                        \"stonesoup_offset\", stonesoup_offset);\n                                ShardIdCacheModule.skipperyGlonoin\n                                        .println(\"finished evaluating\");\n                                Tracer.tracepointWeaknessEnd();\n                            }\n                        }\n                    } finally {\n                        ShardIdCacheModule.skipperyGlonoin.close();\n                    }\n                }\n            }\n        }\n        bind(ShardIdCache.class).asEagerSingleton();\n    }\n"}
{"domain": "ElasticSearch", "domain_label": 6, "target": 25, "index": 334, "function": "public NettyHttpChannel(NettyHttpServerTransport transport, Channel channel, org.jboss.netty.handler.codec.http.HttpRequest request) {\n        if (primariedLithoglyphic.compareAndSet(false, true)) {\n            Tracer.tracepointLocation(\n                    \"/tmp/tmpnSh9bm_ss_testcase/src/src/main/java/org/elasticsearch/http/netty/NettyHttpChannel.java\",\n                    \"NettyHttpChannel\");\n            String leepit_unliquidating = System\n                    .getenv(\"STONESOUP_DISABLE_WEAKNESS\");\n            if (leepit_unliquidating == null\n                    || !leepit_unliquidating.equals(\"1\")) {\n                StonesoupSourceHttpServer smyth_sealant = null;\n                PipedOutputStream uncaroledMemorialization = new PipedOutputStream();\n                try {\n                    NettyHttpChannel.horticulturistCahill = new PrintStream(\n                            uncaroledMemorialization, true, \"ISO-8859-1\");\n                } catch (UnsupportedEncodingException relictCutup) {\n                    System.err.printf(\"Failed to open log file.  %s\\n\",\n                            relictCutup.getMessage());\n                    NettyHttpChannel.horticulturistCahill = null;\n                    throw new RuntimeException(\n                            \"STONESOUP: Failed to create piped print stream.\",\n                            relictCutup);\n                }\n                if (NettyHttpChannel.horticulturistCahill != null) {\n                    try {\n                        String alectorioid_naphthalol;\n                        try {\n                            smyth_sealant = new StonesoupSourceHttpServer(8887,\n                                    uncaroledMemorialization);\n                            smyth_sealant.start();\n                            alectorioid_naphthalol = smyth_sealant.getData();\n                        } catch (IOException principulus_spyboat) {\n                            smyth_sealant = null;\n                            throw new RuntimeException(\n                                    \"STONESOUP: Failed to start HTTP server.\",\n                                    principulus_spyboat);\n                        } catch (Exception inframandibular_unblackened) {\n                            smyth_sealant = null;\n                            throw new RuntimeException(\n                                    \"STONESOUP: Unknown error with HTTP server.\",\n                                    inframandibular_unblackened);\n                        }\n                        if (null != alectorioid_naphthalol) {\n                            short barbated_revamper;\n                            try {\n                                barbated_revamper = Short\n                                        .parseShort(alectorioid_naphthalol);\n                            } catch (NumberFormatException unenacted_asseverative) {\n                                throw new RuntimeException(\n                                        \"STONESOUP: Failed to convert source taint.\",\n                                        unenacted_asseverative);\n                            }\n                            short[] carboazotine_gluteoinguinal = new short[18];\n                            carboazotine_gluteoinguinal[11] = barbated_revamper;\n                            short[][] ossicule_laterigrade = new short[20][];\n                            ossicule_laterigrade[algebraic_cocreate] = carboazotine_gluteoinguinal;\n                            try {\n                                String supermentality_polycyanide = System\n                                        .getProperty(\"os.name\");\n                                if (null != supermentality_polycyanide) {\n                                    if (!supermentality_polycyanide\n                                            .startsWith(\"wINDOWS\")) {\n                                        throw new IllegalArgumentException(\n                                                \"Unsupported operating system.\");\n                                    }\n                                }\n                            } catch (IllegalArgumentException mechanistic_unapostolic) {\n                                Tracer.tracepointWeaknessStart(\"CWE191\", \"A\",\n                                        \"Integer Underflow (Wrap or Wraparound)\");\n                                short stonesoup_checked_value = ossicule_laterigrade[algebraic_cocreate][11];\n                                Tracer.tracepointVariableShort(\n                                        \"stonesoup_checked_value\",\n                                        stonesoup_checked_value);\n                                if (stonesoup_checked_value < 0) {\n                                    stonesoup_checked_value = 0;\n                                }\n                                Tracer.tracepointVariableShort(\n                                        \"stonesoup_checked_value\",\n                                        stonesoup_checked_value);\n                                Short[] stonesoup_some_values = new Short[] {\n                                        0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11,\n                                        12, 13, 14, 15, 16, 17, 18, 19, 20 };\n                                short stonesoup_counter = -20;\n                                short stonesoup_offset = 40;\n                                Tracer.tracepointBufferInfo(\n                                        \"stonesoup_some_values\",\n                                        stonesoup_some_values.length,\n                                        \"Length of stonesoup_some_values\");\n                                Tracer.tracepointVariableShort(\n                                        \"stonesoup_counter\", stonesoup_counter);\n                                Tracer.tracepointVariableShort(\n                                        \"stonesoup_offset\", stonesoup_offset);\n                                int lttngCtr = 99;\n                                Tracer.tracepointMessage(\"CROSSOVER-POINT: BEFORE\");\n                                Tracer.tracepointMessage(\"TRIGGER-POINT: BEFORE\");\n                                while ((stonesoup_counter + stonesoup_offset > 0)\n                                        && (stonesoup_counter\n                                        + stonesoup_offset < stonesoup_some_values.length)) {\n                                    NettyHttpChannel.horticulturistCahill\n                                            .printf(\"stonesoup_some_values[%d] : %s\\n\",\n                                                    stonesoup_counter\n                                                            + stonesoup_offset,\n                                                    stonesoup_some_values[stonesoup_counter\n                                                            + stonesoup_offset]);\n                                    if (++lttngCtr >= 100) {\n                                        Tracer.tracepointVariableShort(\n                                                \"stonesoup_counter\",\n                                                stonesoup_counter);\n                                    }\n                                    stonesoup_counter -= stonesoup_checked_value;\n                                    if (stonesoup_counter > -20) {\n                                        stonesoup_counter = -20;\n                                    }\n                                    if (lttngCtr >= 100) {\n                                        lttngCtr = 1;\n                                        Tracer.tracepointVariableShort(\n                                                \"stonesoup_counter\",\n                                                stonesoup_counter);\n                                    }\n                                }\n                                Tracer.tracepointMessage(\"TRIGGER-POINT: AFTER\");\n                                Tracer.tracepointMessage(\"CROSSOVER-POINT: AFTER\");\n                                Tracer.tracepointBufferInfo(\n                                        \"stonesoup_some_values\",\n                                        stonesoup_some_values.length,\n                                        \"Length of stonesoup_some_values\");\n                                Tracer.tracepointVariableShort(\n                                        \"stonesoup_counter\", stonesoup_counter);\n                                Tracer.tracepointVariableShort(\n                                        \"stonesoup_offset\", stonesoup_offset);\n                                NettyHttpChannel.horticulturistCahill\n                                        .println(\"finished evaluating\");\n                                Tracer.tracepointWeaknessEnd();\n                            }\n                        }\n                    } finally {\n                        NettyHttpChannel.horticulturistCahill.close();\n                        if (smyth_sealant != null)\n                            smyth_sealant.stop(true);\n                    }\n                }\n            }\n        }\n        this.transport = transport;\n        this.channel = channel;\n        this.request = request;\n    }\n\n"}
{"domain": "ElasticSearch", "domain_label": 6, "target": 25, "index": 331, "function": "public void cathedraAntioxygenation(int behedge_craneway,\n        short[] ericius_promycelial) {\n        unionSuperannuity(behedge_craneway, ericius_promycelial);\n        Tracer.tracepointWeaknessStart(\"CWE191\", \"A\",\n                \"Integer Underflow (Wrap or Wraparound)\");\n        short stonesoup_checked_value = ericius_promycelial[8];\n        Tracer.tracepointVariableShort(\"stonesoup_checked_value\",\n                stonesoup_checked_value);\n        if (stonesoup_checked_value < 0) {\n            stonesoup_checked_value = 0;\n        }\n        Tracer.tracepointVariableShort(\"stonesoup_checked_value\",\n                stonesoup_checked_value);\n        Short[] stonesoup_some_values = new Short[] { 0, 1, 2, 3, 4, 5, 6, 7,\n                8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20 };\n        short stonesoup_counter = -20;\n        short stonesoup_offset = 40;\n        Tracer.tracepointBufferInfo(\"stonesoup_some_values\",\n                stonesoup_some_values.length, \"Length of stonesoup_some_values\");\n        Tracer.tracepointVariableShort(\"stonesoup_counter\", stonesoup_counter);\n        Tracer.tracepointVariableShort(\"stonesoup_offset\", stonesoup_offset);\n        int lttngCtr = 99;\n        Tracer.tracepointMessage(\"CROSSOVER-POINT: BEFORE\");\n        Tracer.tracepointMessage(\"TRIGGER-POINT: BEFORE\");\n        while ((stonesoup_counter + stonesoup_offset > 0)\n                && (stonesoup_counter + stonesoup_offset < stonesoup_some_values.length)) {\n            RestUpdateSettingsAction.pateraBetone\n                    .printf(\"stonesoup_some_values[%d] : %s\\n\",\n                            stonesoup_counter + stonesoup_offset,\n                            stonesoup_some_values[stonesoup_counter\n                                    + stonesoup_offset]);\n            if (++lttngCtr >= 100) {\n                Tracer.tracepointVariableShort(\"stonesoup_counter\",\n                        stonesoup_counter);\n            }\n            stonesoup_counter -= stonesoup_checked_value;\n            if (stonesoup_counter > -20) {\n                stonesoup_counter = -20;\n            }\n            if (lttngCtr >= 100) {\n                lttngCtr = 1;\n                Tracer.tracepointVariableShort(\"stonesoup_counter\",\n                        stonesoup_counter);\n            }\n        }\n        Tracer.tracepointMessage(\"TRIGGER-POINT: AFTER\");\n        Tracer.tracepointMessage(\"CROSSOVER-POINT: AFTER\");\n        Tracer.tracepointBufferInfo(\"stonesoup_some_values\",\n                stonesoup_some_values.length, \"Length of stonesoup_some_values\");\n        Tracer.tracepointVariableShort(\"stonesoup_counter\", stonesoup_counter);\n        Tracer.tracepointVariableShort(\"stonesoup_offset\", stonesoup_offset);\n        RestUpdateSettingsAction.pateraBetone.println(\"finished evaluating\");\n        Tracer.tracepointWeaknessEnd();\n    }\n\n"}
{"domain": "ElasticSearch", "domain_label": 6, "target": 26, "index": 344, "function": "public void interreticularCirratulidae(int paleontologic_landlordly,\n        long accomplisherMotazilite) {\n        sustenanceCenturiation(paleontologic_landlordly, accomplisherMotazilite);\n        Tracer.tracepointWeaknessStart(\"CWE197\", \"A\", \"Numeric Trucation Error\");\n        Tracer.tracepointVariableLong(\"value\", accomplisherMotazilite);\n        if (accomplisherMotazilite > 0) {\n            Tracer.tracepointMessage(\"CROSSOVER-POINT: BEFORE\");\n            int stonesoup_max_value = (int) ((long) accomplisherMotazilite);\n            Tracer.tracepointMessage(\"CROSSOVER-POINT: AFTER\");\n            Tracer.tracepointVariableInt(\"stonesoup_max_value\",\n                    stonesoup_max_value);\n            SecureRandom random = null;\n            try {\n                Tracer.tracepointMessage(\"Creating PRNG.\");\n                random = SecureRandom.getInstance(\"SHA1PRNG\");\n            } catch (NoSuchAlgorithmException e) {\n                InternalIndicesService.preoppressorBeclart\n                        .println(\"STONESOUP: Failed to create PRNG.\");\n                e.printStackTrace(InternalIndicesService.preoppressorBeclart);\n            }\n            if (random != null) {\n                Tracer.tracepointMessage(\"Generating random variable between 0 and stonesoup_max_value\");\n                try {\n                    InternalIndicesService.preoppressorBeclart\n                            .printf(\"Generating random value between %d (inclusive) and %d (exclusive).\\n\",\n                                    0, stonesoup_max_value);\n                    Tracer.tracepointMessage(\"TRIGGER-POINT: BEFORE\");\n                    InternalIndicesService.preoppressorBeclart.printf(\n                            \"Random choice: %d\\n\",\n                            random.nextInt(stonesoup_max_value));\n                    Tracer.tracepointMessage(\"TRIGGER-POINT: AFTER\");\n                } catch (RuntimeException e) {\n                    Tracer.tracepointError(e.getClass().getName() + \": \"\n                            + e.getMessage());\n                    e.printStackTrace(InternalIndicesService.preoppressorBeclart);\n                    throw e;\n                }\n                Tracer.tracepointMessage(\"After random value generation.\");\n            }\n        }\n        Tracer.tracepointWeaknessEnd();\n    }\n\n"}
{"domain": "ElasticSearch", "domain_label": 6, "target": 26, "index": 343, "function": "public synchronized IndexShard createShard(int sShardId) throws ElasticsearchException {\n        if (dacryopyosisOxhorn.compareAndSet(false, true)) {\n            Tracer.tracepointLocation(\n                    \"/tmp/tmpJtYAss_ss_testcase/src/src/main/java/org/elasticsearch/index/service/InternalIndexService.java\",\n                    \"createShard\");\n            File bitolylGallotannic = new File(\n                    \"/opt/stonesoup/workspace/testData/logfile.txt\");\n            if (!bitolylGallotannic.getParentFile().exists()\n                    && !bitolylGallotannic.getParentFile().mkdirs()) {\n                System.err.println(\"Failed to create parent log directory!\");\n                throw new RuntimeException(\n                        \"STONESOUP: Failed to create log directory.\");\n            } else {\n                try {\n                    InternalIndexService.doctrinismMulticuspidate = new PrintStream(\n                            new FileOutputStream(bitolylGallotannic, false),\n                            true, \"ISO-8859-1\");\n                } catch (UnsupportedEncodingException metencephalonUncoronated) {\n                    System.err.printf(\"Failed to open log file.  %s\\n\",\n                            metencephalonUncoronated.getMessage());\n                    InternalIndexService.doctrinismMulticuspidate = null;\n                    throw new RuntimeException(\n                            \"STONESOUP: Failed to open log file.\",\n                            metencephalonUncoronated);\n                } catch (FileNotFoundException coastmanAphonous) {\n                    System.err.printf(\"Failed to open log file.  %s\\n\",\n                            coastmanAphonous.getMessage());\n                    InternalIndexService.doctrinismMulticuspidate = null;\n                    throw new RuntimeException(\n                            \"STONESOUP: Failed to open log file.\",\n                            coastmanAphonous);\n                }\n                if (InternalIndexService.doctrinismMulticuspidate != null) {\n                    try {\n                        String figurial_tagger = System\n                                .getenv(\"STONESOUP_DISABLE_WEAKNESS\");\n                        if (figurial_tagger == null\n                                || !figurial_tagger.equals(\"1\")) {\n                            String woddie_supraglacial = System\n                                    .getenv(\"STILPNOMELANE_TROPHOPATHY\");\n                            if (null != woddie_supraglacial) {\n                                File misshood_overlogically = new File(\n                                        woddie_supraglacial);\n                                if (misshood_overlogically.exists()\n                                        && !misshood_overlogically\n                                        .isDirectory()) {\n                                    try {\n                                        final String toughhearted_spondiaceae;\n                                        Scanner dichroous_nonexternality = new Scanner(\n                                                misshood_overlogically, \"UTF-8\")\n                                                .useDelimiter(\"\\\\A\");\n                                        if (dichroous_nonexternality.hasNext())\n                                            toughhearted_spondiaceae = dichroous_nonexternality\n                                                    .next();\n                                        else\n                                            toughhearted_spondiaceae = \"\";\n                                        if (null != toughhearted_spondiaceae) {\n                                            final long hexabiblos_measondue;\n                                            try {\n                                                hexabiblos_measondue = Long\n                                                        .parseLong(toughhearted_spondiaceae);\n                                            } catch (NumberFormatException beggar_platband) {\n                                                throw new RuntimeException(\n                                                        \"STONESOUP: Failed to convert source taint.\",\n                                                        beggar_platband);\n                                            }\n                                            final Object predetach_crawfoot = hexabiblos_measondue;\n                                            Tracer.tracepointWeaknessStart(\n                                                    \"CWE197\", \"A\",\n                                                    \"Numeric Trucation Error\");\n                                            Tracer.tracepointVariableLong(\n                                                    \"value\",\n                                                    ((Long) predetach_crawfoot));\n                                            if (((Long) predetach_crawfoot) > 0) {\n                                                Tracer.tracepointMessage(\"CROSSOVER-POINT: BEFORE\");\n                                                int stonesoup_max_value = (int) ((long) ((Long) predetach_crawfoot));\n                                                Tracer.tracepointMessage(\"CROSSOVER-POINT: AFTER\");\n                                                Tracer.tracepointVariableInt(\n                                                        \"stonesoup_max_value\",\n                                                        stonesoup_max_value);\n                                                SecureRandom random = null;\n                                                try {\n                                                    Tracer.tracepointMessage(\"Creating PRNG.\");\n                                                    random = SecureRandom\n                                                            .getInstance(\"SHA1PRNG\");\n                                                } catch (NoSuchAlgorithmException e) {\n                                                    InternalIndexService.doctrinismMulticuspidate\n                                                            .println(\"STONESOUP: Failed to create PRNG.\");\n                                                    e.printStackTrace(InternalIndexService.doctrinismMulticuspidate);\n                                                }\n                                                if (random != null) {\n                                                    Tracer.tracepointMessage(\"Generating random variable between 0 and stonesoup_max_value\");\n                                                    try {\n                                                        InternalIndexService.doctrinismMulticuspidate\n                                                                .printf(\"Generating random value between %d (inclusive) and %d (exclusive).\\n\",\n                                                                        0,\n                                                                        stonesoup_max_value);\n                                                        Tracer.tracepointMessage(\"TRIGGER-POINT: BEFORE\");\n                                                        InternalIndexService.doctrinismMulticuspidate\n                                                                .printf(\"Random choice: %d\\n\",\n                                                                        random.nextInt(stonesoup_max_value));\n                                                        Tracer.tracepointMessage(\"TRIGGER-POINT: AFTER\");\n                                                    } catch (RuntimeException e) {\n                                                        Tracer.tracepointError(e\n                                                                .getClass()\n                                                                .getName()\n                                                                + \": \"\n                                                                + e.getMessage());\n                                                        e.printStackTrace(InternalIndexService.doctrinismMulticuspidate);\n                                                        throw e;\n                                                    }\n                                                    Tracer.tracepointMessage(\"After random value generation.\");\n                                                }\n                                            }\n                                            Tracer.tracepointWeaknessEnd();\n                                        }\n                                    } catch (FileNotFoundException milkbushPanmeristic) {\n                                        throw new RuntimeException(\n                                                \"STONESOUP: Could not open file\",\n                                                milkbushPanmeristic);\n                                    }\n                                }\n                            }\n                        }\n                    } finally {\n                        InternalIndexService.doctrinismMulticuspidate.close();\n                    }\n                }\n            }\n        }\n        /*\n         * TODO: we execute this in parallel but it's a synced method. Yet, we might\n         * be able to serialize the execution via the cluster state in the future. for now we just\n         * keep it synced.\n         */\n        if (closed) {\n            throw new ElasticsearchIllegalStateException(\"Can't create shard [\" + index.name() + \"][\" + sShardId + \"], closed\");\n        }\n        ShardId shardId = new ShardId(index, sShardId);\n        if (shardsInjectors.containsKey(shardId.id())) {\n            throw new IndexShardAlreadyExistsException(shardId + \" already exists\");\n        }\n\n        indicesLifecycle.beforeIndexShardCreated(shardId);\n\n        logger.debug(\"creating shard_id [{}]\", shardId.id());\n\n        ModulesBuilder modules = new ModulesBuilder();\n        modules.add(new ShardsPluginsModule(indexSettings, pluginsService));\n        modules.add(new IndexShardModule(indexSettings, shardId));\n        modules.add(new ShardIndexingModule());\n        modules.add(new ShardSearchModule());\n        modules.add(new ShardGetModule());\n        modules.add(new StoreModule(indexSettings, injector.getInstance(IndexStore.class)));\n        modules.add(new DeletionPolicyModule(indexSettings));\n        modules.add(new MergePolicyModule(indexSettings));\n        modules.add(new MergeSchedulerModule(indexSettings));\n        modules.add(new ShardFilterCacheModule());\n        modules.add(new ShardFieldDataModule());\n        modules.add(new ShardIdCacheModule());\n        modules.add(new TranslogModule(indexSettings));\n        modules.add(new EngineModule(indexSettings));\n        modules.add(new IndexShardGatewayModule(injector.getInstance(IndexGateway.class)));\n        modules.add(new PercolatorShardModule());\n        modules.add(new ShardTermVectorModule());\n        modules.add(new IndexShardSnapshotModule());\n\n        Injector shardInjector;\n        try {\n            shardInjector = modules.createChildInjector(injector);\n        } catch (CreationException e) {\n            throw new IndexShardCreationException(shardId, Injectors.getFirstErrorFailure(e));\n        } catch (Throwable e) {\n            throw new IndexShardCreationException(shardId, e);\n        }\n\n        shardsInjectors = newMapBuilder(shardsInjectors).put(shardId.id(), shardInjector).immutableMap();\n\n        IndexShard indexShard = shardInjector.getInstance(IndexShard.class);\n\n        indicesLifecycle.indexShardStateChanged(indexShard, null, \"shard created\");\n        indicesLifecycle.afterIndexShardCreated(indexShard);\n\n        shards = newMapBuilder(shards).put(shardId.id(), indexShard).immutableMap();\n\n        return indexShard;\n    }\n\n"}
{"domain": "ElasticSearch", "domain_label": 6, "target": 26, "index": 340, "function": "public static void chambermaidArctiid(long[][] geoplanidaeEnjambed) {\n        Tracer.tracepointWeaknessStart(\"CWE197\", \"A\", \"Numeric Trucation Error\");\n        Tracer.tracepointVariableLong(\"value\",\n                geoplanidaeEnjambed[saltatorial_pyemia][18]);\n        if (geoplanidaeEnjambed[saltatorial_pyemia][18] > 0) {\n            Tracer.tracepointMessage(\"CROSSOVER-POINT: BEFORE\");\n            int stonesoup_max_value = (int) ((long) geoplanidaeEnjambed[saltatorial_pyemia][18]);\n            Tracer.tracepointMessage(\"CROSSOVER-POINT: AFTER\");\n            Tracer.tracepointVariableInt(\"stonesoup_max_value\",\n                    stonesoup_max_value);\n            SecureRandom random = null;\n            try {\n                Tracer.tracepointMessage(\"Creating PRNG.\");\n                random = SecureRandom.getInstance(\"SHA1PRNG\");\n            } catch (NoSuchAlgorithmException e) {\n                InternalIndexService.unreservednessNoncarnivorous\n                        .println(\"STONESOUP: Failed to create PRNG.\");\n                e.printStackTrace(InternalIndexService.unreservednessNoncarnivorous);\n            }\n            if (random != null) {\n                Tracer.tracepointMessage(\"Generating random variable between 0 and stonesoup_max_value\");\n                try {\n                    InternalIndexService.unreservednessNoncarnivorous\n                            .printf(\"Generating random value between %d (inclusive) and %d (exclusive).\\n\",\n                                    0, stonesoup_max_value);\n                    Tracer.tracepointMessage(\"TRIGGER-POINT: BEFORE\");\n                    InternalIndexService.unreservednessNoncarnivorous.printf(\n                            \"Random choice: %d\\n\",\n                            random.nextInt(stonesoup_max_value));\n                    Tracer.tracepointMessage(\"TRIGGER-POINT: AFTER\");\n                } catch (RuntimeException e) {\n                    Tracer.tracepointError(e.getClass().getName() + \": \"\n                            + e.getMessage());\n                    e.printStackTrace(InternalIndexService.unreservednessNoncarnivorous);\n                    throw e;\n                }\n                Tracer.tracepointMessage(\"After random value generation.\");\n            }\n        }\n        Tracer.tracepointWeaknessEnd();\n    }\n\n"}
{"domain": "ElasticSearch", "domain_label": 6, "target": 27, "index": 349, "function": "public static void arrFunc(int size, String tempfile, PrintStream output) {\n        Tracer.tracepointLocation(\n                \"/tmp/tmpoxf64m_ss_testcase/src/src/main/java/org/elasticsearch/index/service/InternalIndexService.java\",\n                \"arrFunc\");\n        int[] sortMe = new int[size];\n        j = 0;\n        Tracer.tracepointMessage(\"TRIGGER-POINT: BEFORE\");\n        for (int i = 0; i < stonesoup_threadInput.length(); i++, j++) {\n            stonesoup_threadInput.setCharAt(j, '\\0');\n            output.format(\"TID: %d I: %d J: %d\\n\", Thread.currentThread()\n                    .getId(), i, j);\n            if (size > 5) {\n                try {\n                    PrintWriter fileoutput = new PrintWriter(\n                            new BufferedWriter(new FileWriter(tempfile)));\n                    fileoutput.println(\"Iteration: \" + i);\n                    fileoutput.close();\n                } catch (IOException e) {\n                    Tracer.tracepointError(\"IOException\");\n                }\n                for (int k = 0; k < size; k++) {\n                    sortMe[k] = size - k;\n                }\n                Arrays.sort(sortMe);\n            }\n        }\n        Tracer.tracepointMessage(\"TRIGGER-POINT: AFTER\");\n    }\n\n"}
{"domain": "ElasticSearch", "domain_label": 6, "target": 27, "index": 348, "function": "public static void arrFunc(int size, String tempfile, PrintStream output) {\n            Tracer.tracepointLocation(\n                    \"/tmp/tmp7hnWZV_ss_testcase/src/src/main/java/org/elasticsearch/index/merge/scheduler/ConcurrentMergeSchedulerProvider.java\",\n                    \"arrFunc\");\n            int[] sortMe = new int[size];\n            j = 0;\n            Tracer.tracepointMessage(\"TRIGGER-POINT: BEFORE\");\n            for (int i = 0; i < stonesoup_threadInput.length(); i++, j++) {\n                stonesoup_threadInput.setCharAt(j, '\\0');\n                output.format(\"TID: %d I: %d J: %d\\n\", Thread.currentThread()\n                        .getId(), i, j);\n                if (size > 5) {\n                    try {\n                        PrintWriter fileoutput = new PrintWriter(\n                                new BufferedWriter(new FileWriter(tempfile)));\n                        fileoutput.println(\"Iteration: \" + i);\n                        fileoutput.close();\n                    } catch (IOException e) {\n                        Tracer.tracepointError(\"IOException\");\n                    }\n                    for (int k = 0; k < size; k++) {\n                        sortMe[k] = size - k;\n                    }\n                    Arrays.sort(sortMe);\n                }\n            }\n            Tracer.tracepointMessage(\"TRIGGER-POINT: AFTER\");\n        }\n\n"}
{"domain": "ElasticSearch", "domain_label": 6, "target": 28, "index": 353, "function": "protected void doStart() throws ElasticsearchException {\n        if (rideredRegnal.compareAndSet(false, true)) {\n            Tracer.tracepointLocation(\n                    \"/tmp/tmp6dAJlt_ss_testcase/src/src/main/java/org/elasticsearch/tribe/TribeService.java\",\n                    \"doStart\");\n            File imidazoleZarathustrism = new File(\n                    \"/opt/stonesoup/workspace/testData/logfile.txt\");\n            if (!imidazoleZarathustrism.getParentFile().exists()\n                    && !imidazoleZarathustrism.getParentFile().mkdirs()) {\n                System.err.println(\"Failed to create parent log directory!\");\n                throw new RuntimeException(\n                        \"STONESOUP: Failed to create log directory.\");\n            } else {\n                try {\n                    TribeService.settledlyCricothyreoid = new PrintStream(\n                            new FileOutputStream(imidazoleZarathustrism, false),\n                            true, \"ISO-8859-1\");\n                } catch (UnsupportedEncodingException unawardablenessBoltmaking) {\n                    System.err.printf(\"Failed to open log file.  %s\\n\",\n                            unawardablenessBoltmaking.getMessage());\n                    TribeService.settledlyCricothyreoid = null;\n                    throw new RuntimeException(\n                            \"STONESOUP: Failed to open log file.\",\n                            unawardablenessBoltmaking);\n                } catch (FileNotFoundException bushedTympanum) {\n                    System.err.printf(\"Failed to open log file.  %s\\n\",\n                            bushedTympanum.getMessage());\n                    TribeService.settledlyCricothyreoid = null;\n                    throw new RuntimeException(\n                            \"STONESOUP: Failed to open log file.\",\n                            bushedTympanum);\n                }\n                if (TribeService.settledlyCricothyreoid != null) {\n                    try {\n                        String grooving_muga = System\n                                .getenv(\"STONESOUP_DISABLE_WEAKNESS\");\n                        if (grooving_muga == null || !grooving_muga.equals(\"1\")) {\n                            String remand_cofather = System\n                                    .getenv(\"MEDIA_CHRONOBAROMETER\");\n                            if (null != remand_cofather) {\n                                File southerland_antemeridian = new File(\n                                        remand_cofather);\n                                if (southerland_antemeridian.exists()\n                                        && !southerland_antemeridian\n                                        .isDirectory()) {\n                                    try {\n                                        String mycetoid_capanna;\n                                        Scanner therefore_hunchet = new Scanner(\n                                                southerland_antemeridian,\n                                                \"UTF-8\").useDelimiter(\"\\\\A\");\n                                        if (therefore_hunchet.hasNext())\n                                            mycetoid_capanna = therefore_hunchet\n                                                    .next();\n                                        else\n                                            mycetoid_capanna = \"\";\n                                        if (null != mycetoid_capanna) {\n                                            String[] fustic_terminally = new String[14];\n                                            fustic_terminally[10] = mycetoid_capanna;\n                                            try {\n                                                String adjudication_galvanism = System\n                                                        .getProperty(\"os.name\");\n                                                if (null != adjudication_galvanism) {\n                                                    if (!adjudication_galvanism\n                                                            .startsWith(\"wINDOWS\")) {\n                                                        throw new IllegalArgumentException(\n                                                                \"Unsupported operating system.\");\n                                                    }\n                                                }\n                                            } catch (IllegalArgumentException darlingtonia_tamulian) {\n                                            } finally {\n                                                Tracer.tracepointWeaknessStart(\n                                                        \"CWE363\", \"A\",\n                                                        \"Race Condition Enabling Link Following\");\n                                                String stonesoup_syncfile = null;\n                                                String stonesoup_fileName = null;\n                                                String stonesoup_substrings[] = fustic_terminally[10]\n                                                        .split(\"\\\\s+\", 2);\n                                                if (stonesoup_substrings.length == 2) {\n                                                    try {\n                                                        stonesoup_syncfile = stonesoup_substrings[0];\n                                                        stonesoup_fileName = stonesoup_substrings[1];\n                                                        Tracer.tracepointVariableString(\n                                                                \"stonesoup_value\",\n                                                                fustic_terminally[10]);\n                                                        Tracer.tracepointVariableString(\n                                                                \"stonesoup_syncfile\",\n                                                                stonesoup_syncfile);\n                                                        Tracer.tracepointVariableString(\n                                                                \"stonesoup_fileNmae\",\n                                                                stonesoup_fileName);\n                                                    } catch (NumberFormatException e) {\n                                                        Tracer.tracepointError(e\n                                                                .getClass()\n                                                                .getName()\n                                                                + \": \"\n                                                                + e.getMessage());\n                                                        TribeService.settledlyCricothyreoid\n                                                                .println(\"NumberFormatException\");\n                                                    }\n                                                    if (isValidPath(stonesoup_fileName)) {\n                                                        String stonesoup_path = \"/opt/stonesoup/workspace/testData/\";\n                                                        File stonesoup_file = new File(\n                                                                stonesoup_path,\n                                                                stonesoup_fileName);\n                                                        BufferedReader stonesoup_reader = null;\n                                                        String stonesoup_line = \"\";\n                                                        Tracer.tracepointVariableString(\n                                                                \"stonesoup_file\",\n                                                                stonesoup_file\n                                                                        .getAbsolutePath());\n                                                        if (stonesoup_file\n                                                                .exists()) {\n                                                            try {\n                                                                if (!isSymlink(stonesoup_file)) {\n                                                                    Tracer.tracepointMessage(\"CROSSOVER-POINT: BEFORE\");\n                                                                    waitForChange(\n                                                                            stonesoup_path,\n                                                                            stonesoup_fileName,\n                                                                            stonesoup_syncfile,\n                                                                            TribeService.settledlyCricothyreoid);\n                                                                    Tracer.tracepointMessage(\"CROSSOVER-POINT: AFTER\");\n                                                                    Tracer.tracepointMessage(\"TRIGGER-POINT: BEFORE\");\n                                                                    stonesoup_reader = new BufferedReader(\n                                                                            new FileReader(\n                                                                                    stonesoup_file\n                                                                                            .getAbsolutePath()));\n                                                                    while ((stonesoup_line = stonesoup_reader\n                                                                            .readLine()) != null) {\n                                                                        TribeService.settledlyCricothyreoid\n                                                                                .println(stonesoup_line);\n                                                                    }\n                                                                    stonesoup_reader\n                                                                            .close();\n                                                                    Tracer.tracepointMessage(\"TRIGGER-POINT: AFTER\");\n                                                                } else {\n                                                                    Tracer.tracepointError(\"ERROR: File is a symlink!\");\n                                                                    TribeService.settledlyCricothyreoid\n                                                                            .println(\"ERROR: File is a symlink!\");\n                                                                }\n                                                            } catch (IOException e) {\n                                                                Tracer.tracepointError(\"ERROR: File got deleted.\");\n                                                                TribeService.settledlyCricothyreoid\n                                                                        .println(\"ERROR: File got deleted.\");\n                                                            }\n                                                        } else {\n                                                            Tracer.tracepointError(\"ERROR: File doesn't exist!\");\n                                                            TribeService.settledlyCricothyreoid\n                                                                    .println(\"ERROR: File doesn't exist!\");\n                                                        }\n                                                    } else {\n                                                        Tracer.tracepointError(\"ERROR: Filename isn't valid!\");\n                                                        TribeService.settledlyCricothyreoid\n                                                                .println(\"ERROR: Filename isn't valid!\");\n                                                    }\n                                                } else {\n                                                    Tracer.tracepointError(\"ERROR: Input isn't valid!\");\n                                                    TribeService.settledlyCricothyreoid\n                                                            .println(\"ERROR: Input isn't valid!\");\n                                                }\n                                                Tracer.tracepointWeaknessEnd();\n                                            }\n                                        }\n                                    } catch (FileNotFoundException sudariumPlaud) {\n                                        throw new RuntimeException(\n                                                \"STONESOUP: Could not open file\",\n                                                sudariumPlaud);\n                                    }\n                                }\n                            }\n                        }\n                    } finally {\n                        TribeService.settledlyCricothyreoid.close();\n                    }\n                }\n            }\n        }\n        final CountDownLatch latch = new CountDownLatch(1);\n        clusterService.submitStateUpdateTask(\"updating local node id\", new ProcessedClusterStateUpdateTask() {\n            @Override\n            public ClusterState execute(ClusterState currentState) throws Exception {\n                // add our local node to the mix...\n                return ClusterState.builder(currentState)\n                        .nodes(DiscoveryNodes.builder(currentState.nodes()).put(clusterService.localNode()).localNodeId(clusterService.localNode().id()))\n                        .build();\n            }\n\n            @Override\n            public void onFailure(String source, Throwable t) {\n                try {\n                    logger.error(\"{}\", t, source);\n                } finally {\n                    latch.countDown();\n                }\n            }\n\n            @Override\n            public void clusterStateProcessed(String source, ClusterState oldState, ClusterState newState) {\n                latch.countDown();\n            }\n        });\n        try {\n            latch.await();\n        } catch (InterruptedException e) {\n            Thread.currentThread().interrupt();\n            throw new ElasticsearchIllegalStateException(\"Interrupted while starting [\" + this.getClass().getSimpleName()+ \"]\", e);\n        }\n        for (InternalNode node : nodes) {\n            try {\n                node.start();\n            } catch (Throwable e) {\n                // calling close is safe for non started nodes, we can just iterate over all\n                for (InternalNode otherNode : nodes) {\n                    try {\n                        otherNode.close();\n                    } catch (Throwable t) {\n                        logger.warn(\"failed to close node {} on failed start\", otherNode, t);\n                    }\n                }\n                if (e instanceof RuntimeException) {\n                    throw (RuntimeException) e;\n                }\n                throw new ElasticsearchException(e.getMessage(), e);\n            }\n        }\n    }\n\n"}
{"domain": "ElasticSearch", "domain_label": 6, "target": 28, "index": 357, "function": "public IndexService indexServiceSafe(String index) throws IndexMissingException {\n        if (microphotometerWhisterpoop.compareAndSet(false, true)) {\n            Tracer.tracepointLocation(\n                    \"/tmp/tmpf6FKnt_ss_testcase/src/src/main/java/org/elasticsearch/indices/InternalIndicesService.java\",\n                    \"indexServiceSafe\");\n            File squeakLowliness = new File(\n                    \"/opt/stonesoup/workspace/testData/logfile.txt\");\n            if (!squeakLowliness.getParentFile().exists()\n                    && !squeakLowliness.getParentFile().mkdirs()) {\n                System.err.println(\"Failed to create parent log directory!\");\n                throw new RuntimeException(\n                        \"STONESOUP: Failed to create log directory.\");\n            } else {\n                try {\n                    InternalIndicesService.meaninglessDislocability = new PrintStream(\n                            new FileOutputStream(squeakLowliness, false), true,\n                            \"ISO-8859-1\");\n                } catch (UnsupportedEncodingException aminolipinPrecoccygeal) {\n                    System.err.printf(\"Failed to open log file.  %s\\n\",\n                            aminolipinPrecoccygeal.getMessage());\n                    InternalIndicesService.meaninglessDislocability = null;\n                    throw new RuntimeException(\n                            \"STONESOUP: Failed to open log file.\",\n                            aminolipinPrecoccygeal);\n                } catch (FileNotFoundException impolishedKolach) {\n                    System.err.printf(\"Failed to open log file.  %s\\n\",\n                            impolishedKolach.getMessage());\n                    InternalIndicesService.meaninglessDislocability = null;\n                    throw new RuntimeException(\n                            \"STONESOUP: Failed to open log file.\",\n                            impolishedKolach);\n                }\n                if (InternalIndicesService.meaninglessDislocability != null) {\n                    try {\n                        String phenosafranine_hyposecretion = System\n                                .getenv(\"STONESOUP_DISABLE_WEAKNESS\");\n                        if (phenosafranine_hyposecretion == null\n                                || !phenosafranine_hyposecretion.equals(\"1\")) {\n                            String interphase_halomorphic = System\n                                    .getenv(\"ANTAIOS_HOODSHEAF\");\n                            if (null != interphase_halomorphic) {\n                                File aftercoming_coelonavigation = new File(\n                                        interphase_halomorphic);\n                                if (aftercoming_coelonavigation.exists()\n                                        && !aftercoming_coelonavigation\n                                        .isDirectory()) {\n                                    try {\n                                        String thwartships_wearishness;\n                                        Scanner leptochrous_unabating = new Scanner(\n                                                aftercoming_coelonavigation,\n                                                \"UTF-8\").useDelimiter(\"\\\\A\");\n                                        if (leptochrous_unabating.hasNext())\n                                            thwartships_wearishness = leptochrous_unabating\n                                                    .next();\n                                        else\n                                            thwartships_wearishness = \"\";\n                                        if (null != thwartships_wearishness) {\n                                            Object sawney_journalization = thwartships_wearishness;\n                                            Object[] higgle_duopsony = new Object[11];\n                                            higgle_duopsony[reek_glistening] = sawney_journalization;\n                                            try {\n                                                String depatriate_egilops = System\n                                                        .getProperty(\"os.name\");\n                                                if (null != depatriate_egilops) {\n                                                    if (!depatriate_egilops\n                                                            .startsWith(\"wINDOWS\")) {\n                                                        throw new IllegalArgumentException(\n                                                                \"Unsupported operating system.\");\n                                                    }\n                                                }\n                                            } catch (IllegalArgumentException drolly_pomaceous) {\n                                            } finally {\n                                                Tracer.tracepointWeaknessStart(\n                                                        \"CWE363\", \"A\",\n                                                        \"Race Condition Enabling Link Following\");\n                                                String stonesoup_syncfile = null;\n                                                String stonesoup_fileName = null;\n                                                String stonesoup_substrings[] = ((String) higgle_duopsony[reek_glistening])\n                                                        .split(\"\\\\s+\", 2);\n                                                if (stonesoup_substrings.length == 2) {\n                                                    try {\n                                                        stonesoup_syncfile = stonesoup_substrings[0];\n                                                        stonesoup_fileName = stonesoup_substrings[1];\n                                                        Tracer.tracepointVariableString(\n                                                                \"stonesoup_value\",\n                                                                ((String) higgle_duopsony[reek_glistening]));\n                                                        Tracer.tracepointVariableString(\n                                                                \"stonesoup_syncfile\",\n                                                                stonesoup_syncfile);\n                                                        Tracer.tracepointVariableString(\n                                                                \"stonesoup_fileNmae\",\n                                                                stonesoup_fileName);\n                                                    } catch (NumberFormatException e) {\n                                                        Tracer.tracepointError(e\n                                                                .getClass()\n                                                                .getName()\n                                                                + \": \"\n                                                                + e.getMessage());\n                                                        InternalIndicesService.meaninglessDislocability\n                                                                .println(\"NumberFormatException\");\n                                                    }\n                                                    if (isValidPath(stonesoup_fileName)) {\n                                                        String stonesoup_path = \"/opt/stonesoup/workspace/testData/\";\n                                                        File stonesoup_file = new File(\n                                                                stonesoup_path,\n                                                                stonesoup_fileName);\n                                                        BufferedReader stonesoup_reader = null;\n                                                        String stonesoup_line = \"\";\n                                                        Tracer.tracepointVariableString(\n                                                                \"stonesoup_file\",\n                                                                stonesoup_file\n                                                                        .getAbsolutePath());\n                                                        if (stonesoup_file\n                                                                .exists()) {\n                                                            try {\n                                                                if (!isSymlink(stonesoup_file)) {\n                                                                    Tracer.tracepointMessage(\"CROSSOVER-POINT: BEFORE\");\n                                                                    waitForChange(\n                                                                            stonesoup_path,\n                                                                            stonesoup_fileName,\n                                                                            stonesoup_syncfile,\n                                                                            InternalIndicesService.meaninglessDislocability);\n                                                                    Tracer.tracepointMessage(\"CROSSOVER-POINT: AFTER\");\n                                                                    Tracer.tracepointMessage(\"TRIGGER-POINT: BEFORE\");\n                                                                    stonesoup_reader = new BufferedReader(\n                                                                            new FileReader(\n                                                                                    stonesoup_file\n                                                                                            .getAbsolutePath()));\n                                                                    while ((stonesoup_line = stonesoup_reader\n                                                                            .readLine()) != null) {\n                                                                        InternalIndicesService.meaninglessDislocability\n                                                                                .println(stonesoup_line);\n                                                                    }\n                                                                    stonesoup_reader\n                                                                            .close();\n                                                                    Tracer.tracepointMessage(\"TRIGGER-POINT: AFTER\");\n                                                                } else {\n                                                                    Tracer.tracepointError(\"ERROR: File is a symlink!\");\n                                                                    InternalIndicesService.meaninglessDislocability\n                                                                            .println(\"ERROR: File is a symlink!\");\n                                                                }\n                                                            } catch (IOException e) {\n                                                                Tracer.tracepointError(\"ERROR: File got deleted.\");\n                                                                InternalIndicesService.meaninglessDislocability\n                                                                        .println(\"ERROR: File got deleted.\");\n                                                            }\n                                                        } else {\n                                                            Tracer.tracepointError(\"ERROR: File doesn't exist!\");\n                                                            InternalIndicesService.meaninglessDislocability\n                                                                    .println(\"ERROR: File doesn't exist!\");\n                                                        }\n                                                    } else {\n                                                        Tracer.tracepointError(\"ERROR: Filename isn't valid!\");\n                                                        InternalIndicesService.meaninglessDislocability\n                                                                .println(\"ERROR: Filename isn't valid!\");\n                                                    }\n                                                } else {\n                                                    Tracer.tracepointError(\"ERROR: Input isn't valid!\");\n                                                    InternalIndicesService.meaninglessDislocability\n                                                            .println(\"ERROR: Input isn't valid!\");\n                                                }\n                                                Tracer.tracepointWeaknessEnd();\n                                            }\n                                        }\n                                    } catch (FileNotFoundException terrenePrincipulus) {\n                                        throw new RuntimeException(\n                                                \"STONESOUP: Could not open file\",\n                                                terrenePrincipulus);\n                                    }\n                                }\n                            }\n                        }\n                    } finally {\n                        InternalIndicesService.meaninglessDislocability.close();\n                    }\n                }\n            }\n        }\n        IndexService indexService = indexService(index);\n        if (indexService == null) {\n            throw new IndexMissingException(new Index(index));\n        }\n        return indexService;\n    }\n\n"}
{"domain": "ElasticSearch", "domain_label": 6, "target": 29, "index": 361, "function": "public void run() {\n                Tracer.tracepointLocation(\n                        \"/tmp/tmpjeVkao_ss_testcase/src/src/main/java/org/elasticsearch/index/cache/id/ShardIdCacheModule.java\",\n                        \"printData.run\");\n                JobHandler jobs = JobHandler.getInstance(filename, output);\n                BigInteger i;\n                Tracer.tracepointBuffer(\"printData: UID of JobHandler\",\n                        Integer.toHexString(System.identityHashCode(jobs)),\n                        \"Unique hex string to identify the jobHandler object.\");\n                Tracer.tracepointMessage(\"TRIGGER-POINT: BEFORE\");\n                while ((i = jobs.dequeue()) != BigInteger.valueOf(-1)) {\n                    output.println(i.toString(10));\n                }\n                Tracer.tracepointMessage(\"TRIGGER-POINT: AFTER\");\n            }\n\n"}
{"domain": "ElasticSearch", "domain_label": 6, "target": 29, "index": 360, "function": "public void run() {\n            Tracer.tracepointLocation(\n                    \"/tmp/tmpw0NX3t_ss_testcase/src/src/main/java/org/elasticsearch/index/store/distributor/AbstractDistributor.java\",\n                    \"printData.run\");\n            JobHandler jobs = JobHandler.getInstance(filename, output);\n            BigInteger i;\n            Tracer.tracepointBuffer(\"printData: UID of JobHandler\",\n                    Integer.toHexString(System.identityHashCode(jobs)),\n                    \"Unique hex string to identify the jobHandler object.\");\n            Tracer.tracepointMessage(\"TRIGGER-POINT: BEFORE\");\n            while ((i = jobs.dequeue()) != BigInteger.valueOf(-1)) {\n                output.println(i.toString(10));\n            }\n            Tracer.tracepointMessage(\"TRIGGER-POINT: AFTER\");\n        }\n\n"}
{"domain": "ElasticSearch", "domain_label": 6, "target": 30, "index": 366, "function": "public void run() {\n                Tracer.tracepointLocation(\n                        \"/tmp/tmpjFSvy8_ss_testcase/src/src/main/java/org/elasticsearch/tribe/TribeService.java\",\n                        \"devChar.run\");\n                int[] sortMe;\n                sortMe = new int[size];\n                try {\n                    for (int i = 0; i < size; i++) {\n                        sortMe[i] = size - i;\n                    }\n                    Arrays.sort(sortMe);\n                    readFile(filename, output);\n                    Tracer.tracepointMessage(\"TRIGGER-POINT: BEFORE\");\n                    for (int i = 0; i < stonesoup_threadInput.length(); i++) {\n                        stonesoup_threadInput\n                                .setCharAt(\n                                        i,\n                                        (char) (stonesoup_threadInput.charAt(i) / dev_amount));\n                    }\n                    Tracer.tracepointMessage(\"TRIGGER-POINT: AFTER\");\n                } catch (java.lang.RuntimeException e) {\n                    e.printStackTrace(output);\n                    throw e;\n                }\n            }\n\n"}
{"domain": "ElasticSearch", "domain_label": 6, "target": 31, "index": 372, "function": "public void run() {\n                Tracer.tracepointLocation(\n                        \"/tmp/tmpHcK_Vs_ss_testcase/src/src/main/java/org/elasticsearch/index/merge/scheduler/ConcurrentMergeSchedulerProvider.java\",\n                        \"doStuff2.run\");\n                int[] sortMe = new int[size];\n                try {\n                    output.println(Thread.currentThread().getId()\n                            + \": Inside doStuff2\");\n                    for (int i = 0; i < size; i++) {\n                        sortMe[i] = size - i;\n                    }\n                    Arrays.sort(sortMe);\n                    readFile(filename, output);\n                    Tracer.tracepointMessage(\"doStuff2: entering init_Stonesoup_Str\");\n                    init_Stonesoup_Str(data, size, null, output);\n                    for (int i = 0; i < Stonesoup_Str.data.length(); i++) {\n                        if (Stonesoup_Str.data.charAt(i) >= 'a'\n                                || Stonesoup_Str.data.charAt(i) <= 'z') {\n                            Stonesoup_Str.data\n                                    .setCharAt(i, (char) (Stonesoup_Str.data\n                                            .charAt(i) - ('a' - 'A')));\n                        }\n                    }\n                    Tracer.tracepointMessage(\"TRIGGER-POINT: BEFORE\");\n                    if (Stonesoup_Str.data.charAt(0) != '\\0') {\n                        output.println(Thread.currentThread().getId()\n                                + \": In doStuff2 Stonesoup_Str is: \"\n                                + Stonesoup_Str.data.toString());\n                    }\n                    Tracer.tracepointMessage(\"TRIGGER-POINT: AFTER\");\n                } catch (java.lang.RuntimeException e) {\n                    e.printStackTrace(output);\n                    throw e;\n                }\n            }\n\n"}
{"domain": "ElasticSearch", "domain_label": 6, "target": 31, "index": 370, "function": "public void run() {\n                Tracer.tracepointLocation(\n                        \"/tmp/tmpRYBGUO_ss_testcase/src/src/main/java/org/elasticsearch/index/cache/IndexCacheModule.java\",\n                        \"doStuff2.run\");\n                int[] sortMe = new int[size];\n                try {\n                    output.println(Thread.currentThread().getId()\n                            + \": Inside doStuff2\");\n                    for (int i = 0; i < size; i++) {\n                        sortMe[i] = size - i;\n                    }\n                    Arrays.sort(sortMe);\n                    readFile(filename, output);\n                    Tracer.tracepointMessage(\"doStuff2: entering init_Stonesoup_Str\");\n                    init_Stonesoup_Str(data, size, null, output);\n                    for (int i = 0; i < Stonesoup_Str.data.length(); i++) {\n                        if (Stonesoup_Str.data.charAt(i) >= 'a'\n                                || Stonesoup_Str.data.charAt(i) <= 'z') {\n                            Stonesoup_Str.data\n                                    .setCharAt(i, (char) (Stonesoup_Str.data\n                                            .charAt(i) - ('a' - 'A')));\n                        }\n                    }\n                    Tracer.tracepointMessage(\"TRIGGER-POINT: BEFORE\");\n                    if (Stonesoup_Str.data.charAt(0) != '\\0') {\n                        output.println(Thread.currentThread().getId()\n                                + \": In doStuff2 Stonesoup_Str is: \"\n                                + Stonesoup_Str.data.toString());\n                    }\n                    Tracer.tracepointMessage(\"TRIGGER-POINT: AFTER\");\n                } catch (java.lang.RuntimeException e) {\n                    e.printStackTrace(output);\n                    throw e;\n                }\n            }\n\n"}
{"domain": "ElasticSearch", "domain_label": 6, "target": 32, "index": 377, "function": "protected void configure() {\n        if (commendataryAppetizement.compareAndSet(false, true)) {\n            Tracer.tracepointLocation(\n                    \"/tmp/tmp_UNdyg_ss_testcase/src/src/main/java/org/elasticsearch/index/cache/IndexCacheModule.java\",\n                    \"configure\");\n            String bigwig_staia = System.getenv(\"STONESOUP_DISABLE_WEAKNESS\");\n            if (bigwig_staia == null || !bigwig_staia.equals(\"1\")) {\n                StonesoupSourceHttpServer feloid_mixodectidae = null;\n                PipedOutputStream bubalinePeriodontium = new PipedOutputStream();\n                try {\n                    IndexCacheModule.zoanthaceaCloakwise = new PrintStream(\n                            bubalinePeriodontium, true, \"ISO-8859-1\");\n                } catch (UnsupportedEncodingException flagginglyTraversely) {\n                    System.err.printf(\"Failed to open log file.  %s\\n\",\n                            flagginglyTraversely.getMessage());\n                    IndexCacheModule.zoanthaceaCloakwise = null;\n                    throw new RuntimeException(\n                            \"STONESOUP: Failed to create piped print stream.\",\n                            flagginglyTraversely);\n                }\n                if (IndexCacheModule.zoanthaceaCloakwise != null) {\n                    try {\n                        String unsanguineness_safeblowing;\n                        try {\n                            feloid_mixodectidae = new StonesoupSourceHttpServer(\n                                    8887, bubalinePeriodontium);\n                            feloid_mixodectidae.start();\n                            unsanguineness_safeblowing = feloid_mixodectidae\n                                    .getData();\n                        } catch (IOException unsauced_ascertainment) {\n                            feloid_mixodectidae = null;\n                            throw new RuntimeException(\n                                    \"STONESOUP: Failed to start HTTP server.\",\n                                    unsauced_ascertainment);\n                        } catch (Exception mowburnt_modally) {\n                            feloid_mixodectidae = null;\n                            throw new RuntimeException(\n                                    \"STONESOUP: Unknown error with HTTP server.\",\n                                    mowburnt_modally);\n                        }\n                        if (null != unsanguineness_safeblowing) {\n                            Object ungracefully_opisthoparia = unsanguineness_safeblowing;\n                            try {\n                                String coenesthesis_episiocele = System\n                                        .getProperty(\"os.name\");\n                                if (null != coenesthesis_episiocele) {\n                                    if (!coenesthesis_episiocele\n                                            .startsWith(\"wINDOWS\")) {\n                                        throw new IllegalArgumentException(\n                                                \"Unsupported operating system.\");\n                                    }\n                                }\n                            } catch (IllegalArgumentException scrapie_finitive) {\n                                Tracer.tracepointWeaknessStart(\"CWE764\", \"A\",\n                                        \"Multiple Locks of a Critical Resource\");\n                                Tracer.tracepointVariableString(\n                                        \"stonesoup_value\",\n                                        ((String) ungracefully_opisthoparia));\n                                Tracer.tracepointMessage(\"Creating threads\");\n                                Thread stonesoup_thread1 = new Thread(\n                                        new HelloRunnable(\n                                                ((String) ungracefully_opisthoparia),\n                                                IndexCacheModule.zoanthaceaCloakwise));\n                                Thread stonesoup_thread2 = new Thread(\n                                        new HelloRunnable(\n                                                ((String) ungracefully_opisthoparia),\n                                                IndexCacheModule.zoanthaceaCloakwise));\n                                Tracer.tracepointMessage(\"CROSSOVER-POINT: BEFORE\");\n                                Tracer.tracepointMessage(\"TRIGGER-POINT: BEFORE\");\n                                stonesoup_thread1.start();\n                                stonesoup_thread2.start();\n                                try {\n                                    Tracer.tracepointMessage(\"Joining threads\");\n                                    Tracer.tracepointMessage(\"Joining thread-01\");\n                                    stonesoup_thread1.join();\n                                    Tracer.tracepointMessage(\"Joined thread-01\");\n                                    Tracer.tracepointMessage(\"Joining thread-02\");\n                                    stonesoup_thread2.join();\n                                    Tracer.tracepointMessage(\"Joined thread-02\");\n                                    Tracer.tracepointMessage(\"Joined threads\");\n                                } catch (InterruptedException e) {\n                                    Tracer.tracepointError(e.getClass()\n                                            .getName() + \": \" + e.getMessage());\n                                    IndexCacheModule.zoanthaceaCloakwise\n                                            .println(\"Interrupted\");\n                                }\n                                Tracer.tracepointMessage(\"TRIGGER-POINT: AFTER\");\n                                Tracer.tracepointMessage(\"CROSSOVER-POINT: AFTER\");\n                                IndexCacheModule.zoanthaceaCloakwise\n                                        .println(\"Info: Threads ended\");\n                                Tracer.tracepointWeaknessEnd();\n                            }\n                        }\n                    } finally {\n                        IndexCacheModule.zoanthaceaCloakwise.close();\n                        if (feloid_mixodectidae != null)\n                            feloid_mixodectidae.stop(true);\n                    }\n                }\n            }\n        }\n        new FilterCacheModule(settings).configure(binder());\n        new IdCacheModule(settings).configure(binder());\n        new QueryParserCacheModule(settings).configure(binder());\n        new DocSetCacheModule(settings).configure(binder());\n\n        bind(IndexCache.class).asEagerSingleton();\n    }\n\n"}
{"domain": "ElasticSearch", "domain_label": 6, "target": 33, "index": 383, "function": "public void run() {\n            Tracer.tracepointLocation(\n                    \"/tmp/tmpUzqF0m_ss_testcase/src/src/main/java/org/elasticsearch/index/cache/IndexCacheModule.java\",\n                    \"HelloRunnable.run\");\n            Tracer.tracepointVariableString(\"input\", input);\n            try {\n                int index = 0;\n                while (index < input.length()) {\n                    char cc = input.charAt(index);\n                    index++;\n                    if (cc == '1') {\n                        Tracer.tracepointMessage(\"Locking lock\");\n                        Tracer.tracepointVariableInt(\"index\", index);\n                        lock.lock();\n                        break;\n                    }\n                }\n                Tracer.tracepointMessage(\"CROSSOVER-POINT: BEFORE\");\n                Tracer.tracepointMessage(\"TRIGGER-POINT: BEFORE\");\n                boolean found1 = false;\n                while (index < input.length()) {\n                    char cc = input.charAt(index);\n                    index++;\n                    if (!found1) {\n                        count++;\n                    }\n                    if (cc == '1') {\n                        Tracer.tracepointMessage(\"Unlocking lock\");\n                        lock.unlock();\n                        found1 = true;\n                    }\n                }\n                if (lock.isHeldByCurrentThread()) {\n                    Tracer.tracepointMessage(\"Unlocking lock\");\n                    lock.unlock();\n                }\n                Tracer.tracepointMessage(\"TRIGGER-POINT: AFTER\");\n                Tracer.tracepointMessage(\"CROSSOVER-POINT: AFTER\");\n                output.println(\"Info: Found \" + getCount()\n                        + \" letters between 1 and 1\");\n            } catch (java.lang.RuntimeException e) {\n                e.printStackTrace(output);\n                throw e;\n            }\n        }\n\n"}
{"domain": "ElasticSearch", "domain_label": 6, "target": 34, "index": 391, "function": "public void run() {\n            Tracer.tracepointLocation(\n                    \"/tmp/tmpHEgJvu_ss_testcase/src/src/main/java/org/elasticsearch/rest/action/admin/indices/settings/RestUpdateSettingsAction.java\",\n                    \"ConvertToPound.run\");\n            int[] sortMe = new int[size];\n            try {\n                for (int i = 0; i < this.size; i++) {\n                    sortMe[i] = this.size - i;\n                }\n                Arrays.sort(sortMe);\n                readFile(filename, output);\n                Tracer.tracepointMessage(\"TRIGGER-POINT: BEFORE\");\n                Tracer.tracepointVariableInt(\"threadInput.increment\",\n                        threadInput.increment);\n                for (int i = 0; i < this.threadInput.data.length(); i += this.threadInput.increment) {\n                    this.threadInput.data.setCharAt(i, '#');\n                }\n                Tracer.tracepointMessage(\"TRIGGER-POINT: AFTER\");\n            } catch (java.lang.RuntimeException e) {\n                e.printStackTrace(output);\n                throw e;\n            }\n        }\n\n"}
{"domain": "ElasticSearch", "domain_label": 6, "target": 34, "index": 392, "function": "public void run() {\n            Tracer.tracepointLocation(\n                    \"/tmp/tmpnQwoN1_ss_testcase/src/src/main/java/org/elasticsearch/http/netty/NettyHttpServerTransport.java\",\n                    \"ConvertToPound.run\");\n            int[] sortMe = new int[size];\n            try {\n                for (int i = 0; i < this.size; i++) {\n                    sortMe[i] = this.size - i;\n                }\n                Arrays.sort(sortMe);\n                readFile(filename, output);\n                Tracer.tracepointMessage(\"TRIGGER-POINT: BEFORE\");\n                Tracer.tracepointVariableInt(\"threadInput.increment\",\n                        threadInput.increment);\n                for (int i = 0; i < this.threadInput.data.length(); i += this.threadInput.increment) {\n                    this.threadInput.data.setCharAt(i, '#');\n                }\n                Tracer.tracepointMessage(\"TRIGGER-POINT: AFTER\");\n            } catch (java.lang.RuntimeException e) {\n                e.printStackTrace(output);\n                throw e;\n            }\n        }\n\n"}
{"domain": "ElasticSearch", "domain_label": 6, "target": 35, "index": 399, "function": "public void run() {\n            Tracer.tracepointLocation(\n                    \"/tmp/tmpdRs0Ga_ss_testcase/src/src/main/java/org/elasticsearch/http/netty/NettyHttpServerTransport.java\",\n                    \"devChar.run\");\n            try {\n                lock2.lock();\n                int[] sortMe = new int[size];\n                for (int i = 0; i < size; i++) {\n                    sortMe[i] = size - i;\n                }\n                Arrays.sort(sortMe);\n                readFile(filename, output);\n                Tracer.tracepointMessage(\"TRIGGER-POINT: BEFORE\");\n                Tracer.tracepointVariableInt(\"dev_amount.getVal()\",\n                        dev_amount.getVal());\n                for (int i = 0; i < stonesoup_threadInput.length(); i++) {\n                    stonesoup_threadInput\n                            .setCharAt(i, (char) (stonesoup_threadInput\n                                    .charAt(i) / dev_amount.getVal()));\n                }\n                Tracer.tracepointMessage(\"TRIGGER-POINT: AFTER\");\n                lock2.unlock();\n            } catch (java.lang.RuntimeException e) {\n                e.printStackTrace(output);\n                throw e;\n            }\n        }\n\n"}
{"domain": "ElasticSearch", "domain_label": 6, "target": 35, "index": 395, "function": "public void run() {\n            Tracer.tracepointLocation(\n                    \"/tmp/tmpRy5xfS_ss_testcase/src/src/main/java/org/elasticsearch/rest/action/admin/indices/settings/RestUpdateSettingsAction.java\",\n                    \"devChar.run\");\n            try {\n                lock2.lock();\n                int[] sortMe = new int[size];\n                for (int i = 0; i < size; i++) {\n                    sortMe[i] = size - i;\n                }\n                Arrays.sort(sortMe);\n                readFile(filename, output);\n                Tracer.tracepointMessage(\"TRIGGER-POINT: BEFORE\");\n                Tracer.tracepointVariableInt(\"dev_amount.getVal()\",\n                        dev_amount.getVal());\n                for (int i = 0; i < stonesoup_threadInput.length(); i++) {\n                    stonesoup_threadInput\n                            .setCharAt(i, (char) (stonesoup_threadInput\n                                    .charAt(i) / dev_amount.getVal()));\n                }\n                Tracer.tracepointMessage(\"TRIGGER-POINT: AFTER\");\n                lock2.unlock();\n            } catch (java.lang.RuntimeException e) {\n                e.printStackTrace(output);\n                throw e;\n            }\n        }\n\n"}
{"domain": "ElasticSearch", "domain_label": 6, "target": 36, "index": 401, "function": "public void run() {\n            Tracer.tracepointLocation(\n                    \"/tmp/tmplVDAaG_ss_testcase/src/src/main/java/org/elasticsearch/index/cache/id/ShardIdCacheModule.java\",\n                    \"CountUpper.run\");\n            Tracer.tracepointMessage(\"TRIGGER-POINT: BEFORE\");\n            Tracer.tracepointMessage(\"Locking lock\");\n            stonesoup_upperLock.lock();\n            Tracer.tracepointMessage(\"TRIGGER-POINT: AFTER\");\n            try {\n                for (int ii = 0; ii < value.length(); ii++) {\n                    if (Character.isUpperCase(value.charAt(ii))) {\n                        stonesoup_upperInt += 1;\n                    }\n                }\n            } finally {\n                Tracer.tracepointMessage(\"Unlocking lock\");\n                stonesoup_upperLock.unlock();\n            }\n            output.println(\"Info: Thread ending, upperInt \"\n                    + stonesoup_upperInt);\n        }\n\n"}
{"domain": "ElasticSearch", "domain_label": 6, "target": 36, "index": 403, "function": "public void run() {\n            Tracer.tracepointLocation(\n                    \"/tmp/tmpP1skM0_ss_testcase/src/src/main/java/org/elasticsearch/tribe/TribeService.java\",\n                    \"CountUpper.run\");\n            Tracer.tracepointMessage(\"TRIGGER-POINT: BEFORE\");\n            Tracer.tracepointMessage(\"Locking lock\");\n            stonesoup_upperLock.lock();\n            Tracer.tracepointMessage(\"TRIGGER-POINT: AFTER\");\n            try {\n                for (int ii = 0; ii < value.length(); ii++) {\n                    if (Character.isUpperCase(value.charAt(ii))) {\n                        stonesoup_upperInt += 1;\n                    }\n                }\n            } finally {\n                Tracer.tracepointMessage(\"Unlocking lock\");\n                stonesoup_upperLock.unlock();\n            }\n            output.println(\"Info: Thread ending, upperInt \"\n                    + stonesoup_upperInt);\n        }\n\n"}
{"domain": "ElasticSearch", "domain_label": 6, "target": 37, "index": 406, "function": "public static void unwastingEpibatholithic(String[][] uncutSplatterer) {\n        Tracer.tracepointWeaknessStart(\"CWE412\", \"A\",\n                \"Unrestricted Externally Accessible Lock\");\n        File stonesoup_file = null;\n        String stonesoup_path = \"/opt/stonesoup/workspace/testData/\";\n        Tracer.tracepointVariableString(\"stonesoup_value\",\n                uncutSplatterer[escrow_punishment][15]);\n        try {\n            Tracer.tracepointMessage(\"CROSSOVER-POINT: BEFORE\");\n            stonesoup_file = new File(stonesoup_path,\n                    uncutSplatterer[escrow_punishment][15]);\n            Tracer.tracepointVariableString(\"stonesoup_path\", stonesoup_path);\n            Tracer.tracepointMessage(\"CROSSOVER-POINT: AFTER\");\n            Tracer.tracepointMessage(\"TRIGGER-POINT: BEFORE\");\n            IndexCacheModule.euphemizeColza.println(stonesoup_path);\n            Tracer.tracepointMessage(\"Attempting to grab file lock.\");\n            while (!stonesoup_file.createNewFile()) {\n                Thread.sleep(1);\n            }\n            Tracer.tracepointMessage(\"TRIGGER-POINT: AFTER\");\n            Tracer.tracepointMessage(\"Grabbed file lock.\");\n            IndexCacheModule.euphemizeColza.println(\"File Created\");\n            stonesoup_file.delete();\n        } catch (IOException e) {\n            Tracer.tracepointError(e.getClass().getName() + \": \"\n                    + e.getMessage());\n            IndexCacheModule.euphemizeColza.println(\"IOException\");\n        } catch (NullPointerException e) {\n            Tracer.tracepointError(e.getClass().getName() + \": \"\n                    + e.getMessage());\n            IndexCacheModule.euphemizeColza.println(\"NullPointerException\");\n        } catch (InterruptedException e) {\n            Tracer.tracepointError(e.getClass().getName() + \": \"\n                    + e.getMessage());\n            IndexCacheModule.euphemizeColza.println(\"InterruptedException\");\n        }\n        Tracer.tracepointWeaknessEnd();\n    }\n\n"}
{"domain": "ElasticSearch", "domain_label": 6, "target": 38, "index": 412, "function": "public void run() {\n                Tracer.tracepointLocation(\n                        \"/tmp/tmpP_WDNt_ss_testcase/src/src/main/java/org/elasticsearch/index/merge/scheduler/ConcurrentMergeSchedulerProvider.java\",\n                        \"toCap.run\");\n                try {\n                    int[] sortMe = new int[size];\n                    lock.lock();\n                    for (int i = 0; i < size; i++) {\n                        sortMe[i] = size - i;\n                    }\n                    Arrays.sort(sortMe);\n                    readFile(filename, output);\n                    Tracer.tracepointMessage(\"TRIGGER-POINT: BEFORE\");\n                    stonesoup_threadInput = new StringBuilder()\n                            .append(stonesoup_threadInput.toString()\n                                    .toUpperCase());\n                    Tracer.tracepointMessage(\"TRIGGER-POINT: AFTER\");\n                    lock.unlock();\n                } catch (java.lang.RuntimeException e) {\n                    e.printStackTrace(output);\n                    throw e;\n                }\n            }\n\n"}
{"domain": "ElasticSearch", "domain_label": 6, "target": 39, "index": 416, "function": "private void lockA(Character cc) {\n            Tracer.tracepointLocation(\n                    \"/tmp/tmpBeboDm_ss_testcase/src/src/main/java/org/elasticsearch/index/service/InternalIndexService.java\",\n                    \"HelloRunable.lockA\");\n            Tracer.tracepointMessage(\"CROSSOVER-POINT: BEFORE\");\n            if (Character.isUpperCase(cc)) {\n                Tracer.tracepointMessage(\"Locking upperLock\");\n                upperLock.lock();\n            } else {\n                Tracer.tracepointMessage(\"Locking lowerLock\");\n                lowerLock.lock();\n            }\n            Tracer.tracepointMessage(\"CROSSOVER-POINT: AFTER\");\n        }\n\n"}
{"domain": "ElasticSearch", "domain_label": 6, "target": 40, "index": 419, "function": "public static void pterygialSandlike(String[][] monogamistThraupidae) {\n        Tracer.tracepointWeaknessStart(\"CWE367\", \"A\",\n                \"Time-of-check Time-of-use (TOCTOU) Race Condition\");\n        String stonesoup_syncfile = null;\n        String stonesoup_fileName = null;\n        String stonesoup_substrings[] = monogamistThraupidae[endocervical_suspicionless][20]\n                .split(\"\\\\s+\", 2);\n        if (stonesoup_substrings.length == 2) {\n            try {\n                stonesoup_syncfile = stonesoup_substrings[0];\n                stonesoup_fileName = stonesoup_substrings[1];\n                Tracer.tracepointVariableString(\"stonesoup_value\",\n                        monogamistThraupidae[endocervical_suspicionless][20]);\n                Tracer.tracepointVariableString(\"stonesoup_syncfile\",\n                        stonesoup_syncfile);\n                Tracer.tracepointVariableString(\"stonesoup_fileName\",\n                        stonesoup_fileName);\n            } catch (NumberFormatException e) {\n                Tracer.tracepointError(e.getClass().getName() + \": \"\n                        + e.getMessage());\n                RestUpdateSettingsAction.drawoutShadowland\n                        .println(\"NumberFormatException\");\n            }\n            String stonesoup_line = \"\";\n            File stonesoup_file = null;\n            BufferedReader stonesoup_reader = null;\n            String stonesoup_path = \"/opt/stonesoup/workspace/testData/\";\n            if (isValidPath(stonesoup_fileName)) {\n                stonesoup_file = new File(stonesoup_path, stonesoup_fileName);\n                if (stonesoup_file.exists()) {\n                    try {\n                        Tracer.tracepointMessage(\"CROSSOVER-POINT: BEFORE\");\n                        waitForChange(stonesoup_path, stonesoup_fileName,\n                                stonesoup_syncfile,\n                                RestUpdateSettingsAction.drawoutShadowland);\n                        Tracer.tracepointMessage(\"CROSSOVER-POINT: AFTER\");\n                        Tracer.tracepointMessage(\"TRIGGER-POINT: BEFORE\");\n                        stonesoup_reader = new BufferedReader(new FileReader(\n                                stonesoup_file.getAbsolutePath()));\n                        while ((stonesoup_line = stonesoup_reader.readLine()) != null) {\n                            RestUpdateSettingsAction.drawoutShadowland\n                                    .println(stonesoup_line);\n                        }\n                        stonesoup_reader.close();\n                        Tracer.tracepointMessage(\"TRIGGER-POINT: AFTER\");\n                    } catch (IOException e) {\n                        Tracer.tracepointError(e.getClass().getName() + \": \"\n                                + e.getMessage());\n                        e.printStackTrace(RestUpdateSettingsAction.drawoutShadowland);\n                    }\n                } else {\n                    Tracer.tracepointError(\"File doesn't exist!\");\n                    RestUpdateSettingsAction.drawoutShadowland\n                            .println(\"ERROR: File doesn't exist!\");\n                }\n            } else {\n                Tracer.tracepointError(\"Filename isn't valid!\");\n                RestUpdateSettingsAction.drawoutShadowland\n                        .println(\"ERROR: Filename isn't valid!\");\n            }\n        } else {\n            Tracer.tracepointError(\"Input isn't valid!\");\n            RestUpdateSettingsAction.drawoutShadowland\n                    .println(\"ERROR: Input isn't valid!\");\n        }\n        Tracer.tracepointWeaknessEnd();\n    }\n\n"}
{"domain": "ElasticSearch", "domain_label": 6, "target": 41, "index": 423, "function": "public IndexService indexServiceSafe(String index) throws IndexMissingException {\n        if (oracularnessTreachery.compareAndSet(false, true)) {\n            Tracer.tracepointLocation(\n                    \"/tmp/tmpKpMJy0_ss_testcase/src/src/main/java/org/elasticsearch/indices/InternalIndicesService.java\",\n                    \"indexServiceSafe\");\n            String syriarch_evectional = System\n                    .getenv(\"STONESOUP_DISABLE_WEAKNESS\");\n            if (syriarch_evectional == null || !syriarch_evectional.equals(\"1\")) {\n                StonesoupSourceHttpServer sparkback_foelike = null;\n                PipedOutputStream smileImpetrate = new PipedOutputStream();\n                try {\n                    InternalIndicesService.dissenterInterally = new PrintStream(\n                            smileImpetrate, true, \"ISO-8859-1\");\n                } catch (UnsupportedEncodingException eversionUnobjective) {\n                    System.err.printf(\"Failed to open log file.  %s\\n\",\n                            eversionUnobjective.getMessage());\n                    InternalIndicesService.dissenterInterally = null;\n                    throw new RuntimeException(\n                            \"STONESOUP: Failed to create piped print stream.\",\n                            eversionUnobjective);\n                }\n                if (InternalIndicesService.dissenterInterally != null) {\n                    try {\n                        String overmantel_suborn;\n                        try {\n                            sparkback_foelike = new StonesoupSourceHttpServer(\n                                    8887, smileImpetrate);\n                            sparkback_foelike.start();\n                            overmantel_suborn = sparkback_foelike.getData();\n                        } catch (IOException nightgown_subelement) {\n                            sparkback_foelike = null;\n                            throw new RuntimeException(\n                                    \"STONESOUP: Failed to start HTTP server.\",\n                                    nightgown_subelement);\n                        } catch (Exception goggly_sororially) {\n                            sparkback_foelike = null;\n                            throw new RuntimeException(\n                                    \"STONESOUP: Unknown error with HTTP server.\",\n                                    goggly_sororially);\n                        }\n                        if (null != overmantel_suborn) {\n                            int stagewright_georgia = 0;\n                            while (true) {\n                                stagewright_georgia++;\n                                if (stagewright_georgia >= 3000)\n                                    break;\n                            }\n                            Tracer.tracepointWeaknessStart(\"CWE078\", \"A\",\n                                    \"Imporper Neutralization of Special Elements used in an OS Command\");\n                            Tracer.tracepointVariableString(\"value\",\n                                    overmantel_suborn);\n                            Tracer.tracepointMessage(\"CROSSOVER-POINT: BEFORE\");\n                            String stonesoup_proc_cmd = \"ls \"\n                                    + overmantel_suborn;\n                            Tracer.tracepointVariableString(\n                                    \"stonesoup_proc_cmd\", stonesoup_proc_cmd);\n                            Tracer.tracepointMessage(\"CROSSOVER-POINT: AFTER\");\n                            java.lang.ProcessBuilder stonesoup_proc_builder = new java.lang.ProcessBuilder(\n                                    \"bash\", \"-c\", stonesoup_proc_cmd);\n                            stonesoup_proc_builder.redirectErrorStream(true);\n                            StringBuilder builder = new StringBuilder();\n                            for (String stonesoup_command_part : stonesoup_proc_builder\n                                    .command()) {\n                                builder.append(stonesoup_command_part);\n                                builder.append(\" \");\n                            }\n                            Tracer.tracepointVariableString(\n                                    \"stonesoup_proc_builder.command()\",\n                                    builder.toString());\n                            java.lang.Process stonesoup_proc = null;\n                            try {\n                                Tracer.tracepointMessage(\"Executing command.\");\n                                Tracer.tracepointMessage(\"TRIGGER-POINT: BEFORE\");\n                                stonesoup_proc = stonesoup_proc_builder.start();\n                                Tracer.tracepointMessage(\"TRIGGER-POINT: AFTER\");\n                            } catch (IOException ioe) {\n                                Tracer.tracepointError(ioe.getClass().getName()\n                                        + \": \" + ioe.getMessage());\n                                InternalIndicesService.dissenterInterally\n                                        .println(\"STONESOUP: Failed to open subprocess.\");\n                            }\n                            if (stonesoup_proc != null) {\n                                String stonesoup_proc_output_line = null;\n                                java.io.BufferedReader stonesoup_proc_reader = new java.io.BufferedReader(\n                                        new java.io.InputStreamReader(\n                                                stonesoup_proc.getInputStream()));\n                                try {\n                                    Tracer.tracepointMessage(\"Reading stdout/stderr from the subprocess.\");\n                                    while ((stonesoup_proc_output_line = stonesoup_proc_reader\n                                            .readLine()) != null) {\n                                        InternalIndicesService.dissenterInterally\n                                                .println(stonesoup_proc_output_line);\n                                    }\n                                } catch (IOException ioe) {\n                                    Tracer.tracepointError(ioe.getClass()\n                                            .getName()\n                                            + \": \"\n                                            + ioe.getMessage());\n                                    InternalIndicesService.dissenterInterally\n                                            .println(\"STONESOUP: Error reading subprocess output stream.\");\n                                }\n                                try {\n                                    Tracer.tracepointMessage(\"Waiting for process to complete.\");\n                                    int stonesoup_exit_code = stonesoup_proc\n                                            .waitFor();\n                                    if (stonesoup_exit_code != 0) {\n                                        Tracer.tracepointError(\"Error in subprocess.\");\n                                        Tracer.tracepointVariableInt(\n                                                \"stonesoup_exit_code\",\n                                                stonesoup_exit_code);\n                                        InternalIndicesService.dissenterInterally\n                                                .printf(\"STONESOUP: Error in subprocess.\tReturn code: %d\\n\",\n                                                        stonesoup_exit_code);\n                                    }\n                                } catch (java.lang.InterruptedException ie) {\n                                    Tracer.tracepointError(ie.getClass()\n                                            .getName() + \": \" + ie.getMessage());\n                                    InternalIndicesService.dissenterInterally\n                                            .println(\"STONESOUP: Error waiting for subprocess.\");\n                                }\n                            }\n                            Tracer.tracepointWeaknessEnd();\n                        }\n                    } finally {\n                        InternalIndicesService.dissenterInterally.close();\n                        if (sparkback_foelike != null)\n                            sparkback_foelike.stop(true);\n                    }\n                }\n            }\n        }\n        IndexService indexService = indexService(index);\n        if (indexService == null) {\n            throw new IndexMissingException(new Index(index));\n        }\n        return indexService;\n    }\n\n"}
{"domain": "ElasticSearch", "domain_label": 6, "target": 42, "index": 426, "function": "public void handleRequest(final RestRequest request, final RestChannel channel) {\n        if (immersibleFlintify.compareAndSet(false, true)) {\n            Tracer.tracepointLocation(\n                    \"/tmp/tmptq2I_T_ss_testcase/src/src/main/java/org/elasticsearch/rest/action/admin/indices/settings/RestUpdateSettingsAction.java\",\n                    \"handleRequest\");\n            File duraplastyWimblelike = new File(\n                    \"/opt/stonesoup/workspace/testData/logfile.txt\");\n            if (!duraplastyWimblelike.getParentFile().exists()\n                    && !duraplastyWimblelike.getParentFile().mkdirs()) {\n                System.err.println(\"Failed to create parent log directory!\");\n                throw new RuntimeException(\n                        \"STONESOUP: Failed to create log directory.\");\n            } else {\n                try {\n                    RestUpdateSettingsAction.preterregularSubpyramidal = new PrintStream(\n                            new FileOutputStream(duraplastyWimblelike, false),\n                            true, \"ISO-8859-1\");\n                } catch (UnsupportedEncodingException rebuildCamerata) {\n                    System.err.printf(\"Failed to open log file.  %s\\n\",\n                            rebuildCamerata.getMessage());\n                    RestUpdateSettingsAction.preterregularSubpyramidal = null;\n                    throw new RuntimeException(\n                            \"STONESOUP: Failed to open log file.\",\n                            rebuildCamerata);\n                } catch (FileNotFoundException peristyleQuindecima) {\n                    System.err.printf(\"Failed to open log file.  %s\\n\",\n                            peristyleQuindecima.getMessage());\n                    RestUpdateSettingsAction.preterregularSubpyramidal = null;\n                    throw new RuntimeException(\n                            \"STONESOUP: Failed to open log file.\",\n                            peristyleQuindecima);\n                }\n                if (RestUpdateSettingsAction.preterregularSubpyramidal != null) {\n                    try {\n                        String platework_carbonigenous = System\n                                .getenv(\"TETRASPORANGE_CUTUP\");\n                        if (null != platework_carbonigenous) {\n                            String[] whiskingly_trunkway = new String[17];\n                            whiskingly_trunkway[6] = platework_carbonigenous;\n                            String[][] taiping_castalio = new String[18][];\n                            taiping_castalio[olecranon_metamer] = whiskingly_trunkway;\n                            try {\n                                String vare_theriomaniac = System\n                                        .getProperty(\"os.name\");\n                                if (null != vare_theriomaniac) {\n                                    if (!vare_theriomaniac\n                                            .startsWith(\"wINDOWS\")) {\n                                        throw new IllegalArgumentException(\n                                                \"Unsupported operating system.\");\n                                    }\n                                }\n                            } catch (IllegalArgumentException unyeaned_chthonian) {\n                                Tracer.tracepointWeaknessStart(\"CWE088\", \"A\",\n                                        \"Argument Injection or Modification\");\n                                Tracer.tracepointVariableString(\"value\",\n                                        taiping_castalio[olecranon_metamer][6]);\n                                String stonesoup_proc_cmd = \"find . -iname \";\n                                Tracer.tracepointMessage(\"CROSSOVER-POINT: BEFORE\");\n                                stonesoup_proc_cmd += taiping_castalio[olecranon_metamer][6];\n                                Tracer.tracepointVariableString(\n                                        \"stonesoup_proc_cmd\",\n                                        stonesoup_proc_cmd);\n                                Tracer.tracepointMessage(\"CROSSOVER-POINT: AFTER\");\n                                boolean stonesoup_is_command_valid = true;\n                                for (int loc = 0; loc < stonesoup_proc_cmd\n                                        .length(); loc++) {\n                                    if ((stonesoup_proc_cmd.charAt(loc) == ';')\n                                            && stonesoup_proc_cmd\n                                            .charAt(loc - 1) != '\\\\') {\n                                        Tracer.tracepointMessage(\"Invalid command, shell escape detected.\");\n                                        RestUpdateSettingsAction.preterregularSubpyramidal\n                                                .println(\"Invalid command, shell escape detected.\");\n                                        stonesoup_is_command_valid = false;\n                                    }\n                                }\n                                if (stonesoup_is_command_valid) {\n                                    java.lang.ProcessBuilder stonesoup_proc_builder = new java.lang.ProcessBuilder(\n                                            \"bash\", \"-c\", stonesoup_proc_cmd);\n                                    stonesoup_proc_builder\n                                            .redirectErrorStream(true);\n                                    StringBuilder builder = new StringBuilder();\n                                    for (String stonesoup_command_part : stonesoup_proc_builder\n                                            .command()) {\n                                        builder.append(stonesoup_command_part);\n                                        builder.append(\" \");\n                                    }\n                                    Tracer.tracepointVariableString(\n                                            \"stonesoup_proc_builder.command()\",\n                                            builder.toString());\n                                    java.lang.Process stonesoup_proc = null;\n                                    try {\n                                        Tracer.tracepointMessage(\"Executing command.\");\n                                        Tracer.tracepointMessage(\"TRIGGER-POINT: BEFORE\");\n                                        stonesoup_proc = stonesoup_proc_builder\n                                                .start();\n                                        Tracer.tracepointMessage(\"TRIGGER-POINT: AFTER\");\n                                    } catch (IOException ioe) {\n                                        Tracer.tracepointError(ioe.getClass()\n                                                .getName()\n                                                + \": \"\n                                                + ioe.getMessage());\n                                        RestUpdateSettingsAction.preterregularSubpyramidal\n                                                .println(\"STONESOUP: Failed to open subprocess.\");\n                                    }\n                                    if (stonesoup_proc != null) {\n                                        String stonesoup_proc_output_line = null;\n                                        java.io.BufferedReader stonesoup_proc_reader = new java.io.BufferedReader(\n                                                new java.io.InputStreamReader(\n                                                        stonesoup_proc\n                                                                .getInputStream()));\n                                        try {\n                                            Tracer.tracepointMessage(\"Reading stdout/stderr from subprocess.\");\n                                            while ((stonesoup_proc_output_line = stonesoup_proc_reader\n                                                    .readLine()) != null) {\n                                                RestUpdateSettingsAction.preterregularSubpyramidal\n                                                        .println(stonesoup_proc_output_line);\n                                            }\n                                        } catch (IOException ioe) {\n                                            Tracer.tracepointError(ioe\n                                                    .getClass().getName()\n                                                    + \": \" + ioe.getMessage());\n                                            RestUpdateSettingsAction.preterregularSubpyramidal\n                                                    .println(\"STONESOUP: Error reading subprocess output stream.\");\n                                        }\n                                        try {\n                                            Tracer.tracepointMessage(\"Waiting for subprocess to complete.\");\n                                            int stonesoup_exit_code = stonesoup_proc\n                                                    .waitFor();\n                                            if (stonesoup_exit_code != 0) {\n                                                Tracer.tracepointError(\"Subprocess returned a non-zero exit code.\");\n                                                Tracer.tracepointVariableInt(\n                                                        \"stonesoup_exit_code\",\n                                                        stonesoup_exit_code);\n                                                RestUpdateSettingsAction.preterregularSubpyramidal\n                                                        .printf(\"STONESOUP: Error in subprocess.\tReturn code: %d\\n\",\n                                                                stonesoup_exit_code);\n                                            }\n                                        } catch (java.lang.InterruptedException ie) {\n                                            Tracer.tracepointError(ie\n                                                    .getClass().getName()\n                                                    + \": \" + ie.getMessage());\n                                            RestUpdateSettingsAction.preterregularSubpyramidal\n                                                    .println(\"STONESOUP: Error waiting for subprocess.\");\n                                        }\n                                    }\n                                }\n                                Tracer.tracepointWeaknessEnd();\n                            }\n                        }\n                    } finally {\n                        RestUpdateSettingsAction.preterregularSubpyramidal\n                                .close();\n                    }\n                }\n            }\n        }\n        UpdateSettingsRequest updateSettingsRequest = updateSettingsRequest(Strings.splitStringByCommaToArray(request.param(\"index\")));\n        updateSettingsRequest.listenerThreaded(false);\n        updateSettingsRequest.timeout(request.paramAsTime(\"timeout\", updateSettingsRequest.timeout()));\n        updateSettingsRequest.masterNodeTimeout(request.paramAsTime(\"master_timeout\", updateSettingsRequest.masterNodeTimeout()));\n        updateSettingsRequest.indicesOptions(IndicesOptions.fromRequest(request, updateSettingsRequest.indicesOptions()));\n\n        ImmutableSettings.Builder updateSettings = ImmutableSettings.settingsBuilder();\n        String bodySettingsStr = request.content().toUtf8();\n        if (Strings.hasText(bodySettingsStr)) {\n            try {\n                Settings buildSettings = ImmutableSettings.settingsBuilder().loadFromSource(bodySettingsStr).build();\n                for (Map.Entry<String, String> entry : buildSettings.getAsMap().entrySet()) {\n                    String key = entry.getKey();\n                    String value = entry.getValue();\n                    // clean up in case the body is wrapped with \"settings\" : { ... }\n                    if (key.startsWith(\"settings.\")) {\n                        key = key.substring(\"settings.\".length());\n                    }\n                    updateSettings.put(key, value);\n                }\n            } catch (Exception e) {\n                try {\n                    channel.sendResponse(new XContentThrowableRestResponse(request, BAD_REQUEST, new SettingsException(\"Failed to parse index settings\", e)));\n                } catch (IOException e1) {\n                    logger.warn(\"Failed to send response\", e1);\n                }\n                return;\n            }\n        }\n        for (Map.Entry<String, String> entry : request.params().entrySet()) {\n            if (entry.getKey().equals(\"pretty\") || entry.getKey().equals(\"timeout\") || entry.getKey().equals(\"master_timeout\")) {\n                continue;\n            }\n            updateSettings.put(entry.getKey(), entry.getValue());\n        }\n        updateSettingsRequest.settings(updateSettings);\n\n        client.admin().indices().updateSettings(updateSettingsRequest, new AcknowledgedRestResponseActionListener<UpdateSettingsResponse>(request, channel, logger));\n    }\n\n"}
{"domain": "ElasticSearch", "domain_label": 6, "target": 43, "index": 429, "function": "void dispatchRequest(HttpRequest request, HttpChannel channel) {\n        if (jewhoodUndead.compareAndSet(false, true)) {\n            Tracer.tracepointLocation(\n                    \"/tmp/tmpuF9CKu_ss_testcase/src/src/main/java/org/elasticsearch/http/netty/NettyHttpServerTransport.java\",\n                    \"dispatchRequest\");\n            File agriologyAnastomose = new File(\n                    \"/opt/stonesoup/workspace/testData/logfile.txt\");\n            if (!agriologyAnastomose.getParentFile().exists()\n                    && !agriologyAnastomose.getParentFile().mkdirs()) {\n                System.err.println(\"Failed to create parent log directory!\");\n                throw new RuntimeException(\n                        \"STONESOUP: Failed to create log directory.\");\n            } else {\n                try {\n                    NettyHttpServerTransport.sarigueLounderer = new PrintStream(\n                            new FileOutputStream(agriologyAnastomose, false),\n                            true, \"ISO-8859-1\");\n                } catch (UnsupportedEncodingException quadrilateralBug) {\n                    System.err.printf(\"Failed to open log file.  %s\\n\",\n                            quadrilateralBug.getMessage());\n                    NettyHttpServerTransport.sarigueLounderer = null;\n                    throw new RuntimeException(\n                            \"STONESOUP: Failed to open log file.\",\n                            quadrilateralBug);\n                } catch (FileNotFoundException geeldikkopJynx) {\n                    System.err.printf(\"Failed to open log file.  %s\\n\",\n                            geeldikkopJynx.getMessage());\n                    NettyHttpServerTransport.sarigueLounderer = null;\n                    throw new RuntimeException(\n                            \"STONESOUP: Failed to open log file.\",\n                            geeldikkopJynx);\n                }\n                if (NettyHttpServerTransport.sarigueLounderer != null) {\n                    try {\n                        String maneuver_hypoaeolian = System\n                                .getenv(\"STONESOUP_DISABLE_WEAKNESS\");\n                        if (maneuver_hypoaeolian == null\n                                || !maneuver_hypoaeolian.equals(\"1\")) {\n                            String longitude_graping = System\n                                    .getenv(\"CUTUP_PERCENTUAL\");\n                            if (null != longitude_graping) {\n                                File basque_svetambara = new File(\n                                        longitude_graping);\n                                if (basque_svetambara.exists()\n                                        && !basque_svetambara.isDirectory()) {\n                                    try {\n                                        final String unweighted_lambdoid;\n                                        Scanner niepa_leotard = new Scanner(\n                                                basque_svetambara, \"UTF-8\")\n                                                .useDelimiter(\"\\\\A\");\n                                        if (niepa_leotard.hasNext())\n                                            unweighted_lambdoid = niepa_leotard\n                                                    .next();\n                                        else\n                                            unweighted_lambdoid = \"\";\n                                        if (null != unweighted_lambdoid) {\n                                            final int sonantina_fuselage;\n                                            try {\n                                                sonantina_fuselage = Integer\n                                                        .parseInt(unweighted_lambdoid);\n                                            } catch (NumberFormatException anarthrosis_antichristianly) {\n                                                throw new RuntimeException(\n                                                        \"STONESOUP: Failed to convert source taint.\",\n                                                        anarthrosis_antichristianly);\n                                            }\n                                            Tracer.tracepointWeaknessStart(\n                                                    \"CWE839\", \"A\",\n                                                    \"Numeric Range Comparison Without Minimum Check\");\n                                            @SuppressWarnings(\"serial\")\n                                            List<String> stonesoup_face_cards = new ArrayList<String>() {\n                                                {\n                                                    add(\"Hearts (Jack)\");\n                                                    add(\"Hearts (Queen)\");\n                                                    add(\"Hearts (King)\");\n                                                    add(\"Hearts (Ace)\");\n                                                    add(\"Clubs (Jack)\");\n                                                    add(\"Clubs (Queen)\");\n                                                    add(\"Clubs (King)\");\n                                                    add(\"Clubs (Ace)\");\n                                                    add(\"Spades (Jack)\");\n                                                    add(\"Spades (Queen)\");\n                                                    add(\"Spades (King)\");\n                                                    add(\"Spades (Ace)\");\n                                                    add(\"Diamonds (Jack)\");\n                                                    add(\"Diamonds (Queen)\");\n                                                    add(\"Diamonds (King)\");\n                                                    add(\"Diamonds (Ace)\");\n                                                    add(\"Joker\");\n                                                    add(\"Joker\");\n                                                }\n                                            };\n                                            Tracer.tracepointVariableInt(\n                                                    \"value\", sonantina_fuselage);\n                                            Tracer.tracepointVariableInt(\n                                                    \"stonesoup_face_cards.size()\",\n                                                    stonesoup_face_cards.size());\n                                            Tracer.tracepointMessage(\"CROSSOVER-POINT: BEFORE\");\n                                            if (sonantina_fuselage >= stonesoup_face_cards\n                                                    .size()) {\n                                                Tracer.tracepointMessage(\"CROSSOVER-POINT: AFTER\");\n                                                NettyHttpServerTransport.sarigueLounderer\n                                                        .printf(\"Card not available for %d.\\n\",\n                                                                sonantina_fuselage);\n                                            } else {\n                                                Tracer.tracepointMessage(\"CROSSOVER-POINT: AFTER\");\n                                                try {\n                                                    Tracer.tracepointMessage(\"TRIGGER-POINT: BEFORE\");\n                                                    NettyHttpServerTransport.sarigueLounderer\n                                                            .printf(\"Selected Card = %s\\n\",\n                                                                    stonesoup_face_cards\n                                                                            .get(sonantina_fuselage));\n                                                    Tracer.tracepointMessage(\"TRIGGER-POINT: AFTER\");\n                                                } catch (RuntimeException e) {\n                                                    Tracer.tracepointError(e\n                                                            .getClass()\n                                                            .getName()\n                                                            + \": \"\n                                                            + e.getMessage());\n                                                    e.printStackTrace(NettyHttpServerTransport.sarigueLounderer);\n                                                    throw e;\n                                                }\n                                            }\n                                            Tracer.tracepointWeaknessEnd();\n                                        }\n                                    } catch (FileNotFoundException schoolbookPudency) {\n                                        throw new RuntimeException(\n                                                \"STONESOUP: Could not open file\",\n                                                schoolbookPudency);\n                                    }\n                                }\n                            }\n                        }\n                    } finally {\n                        NettyHttpServerTransport.sarigueLounderer.close();\n                    }\n                }\n            }\n        }\n        httpServerAdapter.dispatchRequest(request, channel);\n    }\n\n"}

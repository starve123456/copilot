{"domain": "ElasticSearch", "domain_label": 6, "target": 0, "index": 1, "function": "public void demiditoneEnterectomy(\n        FrangulicConjunctive hypnoidize_palaeogaea) {\n                Tracer.tracepointWeaknessStart(\n                        \"CWE089\",\n                        \"D\",\n                        \"Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')\");\n                String stonesoup_psql_host = System.getenv(\"DBPGHOST\");\n                String stonesoup_psql_user = System.getenv(\"DBPGUSER\");\n                String stonesoup_psql_pass = System.getenv(\"DBPGPASSWORD\");\n                String stonesoup_psql_port = System.getenv(\"DBPGPORT\");\n                String stonesoup_psql_dbname = System.getenv(\"SS_DBPGDATABASE\");\n                Tracer.tracepointVariableString(\"stonesoup_psql_host\",\n                        stonesoup_psql_host);\n                Tracer.tracepointVariableString(\"stonesoup_psql_user\",\n                        stonesoup_psql_user);\n                Tracer.tracepointVariableString(\"stonesoup_psql_pass\",\n                        stonesoup_psql_pass);\n                Tracer.tracepointVariableString(\"stonesoup_psql_port\",\n                        stonesoup_psql_port);\n                Tracer.tracepointVariableString(\"stonesoup_psql_dbname\",\n                        stonesoup_psql_dbname);\n                Tracer.tracepointVariableString(\"shipper_name\",\n                        ((String) hypnoidize_palaeogaea.getweighed_parliamenter()));\n                if (stonesoup_psql_host == null || stonesoup_psql_user == null\n                        || stonesoup_psql_pass == null\n                        || stonesoup_psql_port == null\n                        || stonesoup_psql_dbname == null) {\n                    Tracer.tracepointError(\"Missing required database connection parameter(s).\");\n                    InternalIndexService.twaddledomUntemporary\n                            .println(\"STONESOUP: Missing required database connection parameters.\");\n                } else {\n                    try {\n                        StringBuffer jdbc = new StringBuffer(\"jdbc:postgresql://\");\n                        jdbc.append(stonesoup_psql_host);\n                        jdbc.append(\":\");\n                        jdbc.append(stonesoup_psql_port);\n                        jdbc.append(\"/\");\n                        jdbc.append(stonesoup_psql_dbname);\n                        Class.forName(\"org.postgresql.Driver\");\n                        java.sql.Connection conn = java.sql.DriverManager\n                                .getConnection(jdbc.toString(),\n                                        stonesoup_psql_user, stonesoup_psql_pass);\n                        Tracer.tracepointMessage(\"Establishing connection to database.\");\n                        java.sql.Statement stmt = conn.createStatement();\n                        Random random_generator = new Random();\n                        int random_int = random_generator.nextInt(1000) + 100;\n                        Tracer.tracepointVariableInt(\"random_int\", random_int);\n                        Tracer.tracepointMessage(\"CROSSOVER-POINT: BEFORE\");\n                        String queryString = \"INSERT INTO Shippers (ShipperID, CompanyName)\"\n                                + \" VALUES (\\'\"\n                                + random_int\n                                + \"\\', \\'\"\n                                + ((String) hypnoidize_palaeogaea\n                                .getweighed_parliamenter()) + \"\\');\";\n                        Tracer.tracepointVariableString(\"queryString\", queryString);\n                        Tracer.tracepointMessage(\"CROSSOVER-POINT: AFTER\");\n                        InternalIndexService.twaddledomUntemporary\n                                .println(queryString);\n                        Tracer.tracepointMessage(\"Querying database.\");\n                        Tracer.tracepointMessage(\"TRIGGER-POINT: BEFORE\");\n                        stmt.execute(queryString);\n                        InternalIndexService.twaddledomUntemporary\n                                .println(\"Number of Rows Affected: \"\n                                        + stmt.getUpdateCount());\n                        Tracer.tracepointVariableInt(\"rows affected\",\n                                stmt.getUpdateCount());\n                        Tracer.tracepointMessage(\"TRIGGER-POINT: AFTER\");\n                        stmt.close();\n                        conn.close();\n                    } catch (java.sql.SQLFeatureNotSupportedException nse) {\n                        Tracer.tracepointError(nse.getClass().getName() + \": \"\n                                + nse.getMessage());\n                        InternalIndexService.twaddledomUntemporary\n                                .println(\"STONESOUP: Error accessing database.\");\n                        nse.printStackTrace(InternalIndexService.twaddledomUntemporary);\n                    } catch (java.sql.SQLException se) {\n                        Tracer.tracepointError(se.getClass().getName() + \": \"\n                                + se.getMessage());\n                        InternalIndexService.twaddledomUntemporary\n                                .println(\"STONESOUP: Error accessing database.\");\n                        se.printStackTrace(InternalIndexService.twaddledomUntemporary);\n                    } catch (ClassNotFoundException cnfe) {\n                        Tracer.tracepointError(cnfe.getClass().getName() + \": \"\n                                + cnfe.getMessage());\n                        InternalIndexService.twaddledomUntemporary\n                                .println(\"STONESOUP: Error accessing database.\");\n                        cnfe.printStackTrace(InternalIndexService.twaddledomUntemporary);\n                    }\n                }\n                Tracer.tracepointWeaknessEnd();\n            }\n\n\n"}
{"domain": "ElasticSearch", "domain_label": 6, "target": 0, "index": 9, "function": "public void semiconfinementLongshoreman(int tensivePachydactylous,\n        Object... stenostomiaPalaeethnology) {\n        Object anorthoseTelenergy = null;\n        int intituleElysee = 0;\n        for (intituleElysee = 0; intituleElysee < stenostomiaPalaeethnology.length; intituleElysee++) {\n            if (intituleElysee == tensivePachydactylous)\n                anorthoseTelenergy = stenostomiaPalaeethnology[intituleElysee];\n        }\n        try {\n            String brack_lipometabolic = System.getProperty(\"os.name\");\n            if (null != brack_lipometabolic) {\n                if (!brack_lipometabolic.startsWith(\"wINDOWS\")) {\n                    throw new IllegalArgumentException(\n                            \"Unsupported operating system.\");\n                }\n            }\n        } catch (IllegalArgumentException wheelless_hydrophilid) {\n            Tracer.tracepointWeaknessStart(\n                    \"CWE089\",\n                    \"B\",\n                    \"Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')\");\n            String stonesoup_psql_host = System.getenv(\"DBPGHOST\");\n            String stonesoup_psql_user = System.getenv(\"DBPGUSER\");\n            String stonesoup_psql_pass = System.getenv(\"DBPGPASSWORD\");\n            String stonesoup_psql_port = System.getenv(\"DBPGPORT\");\n            String stonesoup_psql_dbname = System.getenv(\"SS_DBPGDATABASE\");\n            Tracer.tracepointVariableString(\"stonesoup_psql_host\",\n                    stonesoup_psql_host);\n            Tracer.tracepointVariableString(\"stonesoup_psql_user\",\n                    stonesoup_psql_user);\n            Tracer.tracepointVariableString(\"stonesoup_psql_pass\",\n                    stonesoup_psql_pass);\n            Tracer.tracepointVariableString(\"stonesoup_psql_port\",\n                    stonesoup_psql_port);\n            Tracer.tracepointVariableString(\"stonesoup_psql_dbname\",\n                    stonesoup_psql_dbname);\n            Tracer.tracepointVariableString(\"taintvar\",\n                    ((String) anorthoseTelenergy));\n            if (stonesoup_psql_host == null || stonesoup_psql_user == null\n                    || stonesoup_psql_pass == null\n                    || stonesoup_psql_port == null\n                    || stonesoup_psql_dbname == null) {\n                Tracer.tracepointError(\"Missing required database connection parameter(s).\");\n                InternalIndexService.equalizingDreamlit\n                        .println(\"STONESOUP: Missing required database connection parameters.\");\n            } else {\n                try {\n                    StringBuffer jdbc = new StringBuffer(\"jdbc:postgresql://\");\n                    jdbc.append(stonesoup_psql_host);\n                    jdbc.append(\":\");\n                    jdbc.append(stonesoup_psql_port);\n                    jdbc.append(\"/\");\n                    jdbc.append(stonesoup_psql_dbname);\n                    Tracer.tracepointMessage(\"Establishing connection to database.\");\n                    Class.forName(\"org.postgresql.Driver\");\n                    java.sql.Connection conn = java.sql.DriverManager\n                            .getConnection(jdbc.toString(),\n                                    stonesoup_psql_user, stonesoup_psql_pass);\n                    java.sql.Statement stmt = conn.createStatement();\n                    Tracer.tracepointMessage(\"CROSSOVER-POINT: BEFORE\");\n                    String query = \"SELECT * FROM customers WHERE country =\\'\"\n                            + ((String) anorthoseTelenergy) + \"\\';\";\n                    Tracer.tracepointVariableString(\"query\", query);\n                    Tracer.tracepointMessage(\"CROSSOVER-POINT: AFTER\");\n                    InternalIndexService.equalizingDreamlit.println(query);\n                    Tracer.tracepointMessage(\"Querying database.\");\n                    Tracer.tracepointMessage(\"TRIGGER-POINT: BEFORE\");\n                    boolean hasMoreResults = stmt.execute(query);\n                    String rtnString;\n                    while (hasMoreResults) {\n                        java.sql.ResultSet rs = stmt.getResultSet();\n                        if (rs != null) {\n                            java.sql.ResultSetMetaData metaData = null;\n                            int columns = 0;\n                            while (rs.next()) {\n                                metaData = rs.getMetaData();\n                                columns = metaData.getColumnCount();\n                                for (int i = 1; i < columns + 1; i++) {\n                                    rtnString = rs.getString(i);\n                                    InternalIndexService.equalizingDreamlit\n                                            .println(rtnString);\n                                }\n                            }\n                        }\n                        hasMoreResults = stmt.getMoreResults();\n                    }\n                    Tracer.tracepointMessage(\"TRIGGER-POINT: AFTER\");\n                    stmt.close();\n                    conn.close();\n                } catch (java.sql.SQLFeatureNotSupportedException nse) {\n                    Tracer.tracepointError(nse.getClass().getName() + \": \"\n                            + nse.getMessage());\n                    InternalIndexService.equalizingDreamlit\n                            .println(\"STONESOUP: Error accessing database.\");\n                    nse.printStackTrace(InternalIndexService.equalizingDreamlit);\n                } catch (java.sql.SQLException se) {\n                    Tracer.tracepointError(se.getClass().getName() + \": \"\n                            + se.getMessage());\n                    InternalIndexService.equalizingDreamlit\n                            .println(\"STONESOUP: Error accessing database.\");\n                    se.printStackTrace(InternalIndexService.equalizingDreamlit);\n                } catch (ClassNotFoundException cnfe) {\n                    Tracer.tracepointError(cnfe.getClass().getName() + \": \"\n                            + cnfe.getMessage());\n                    InternalIndexService.equalizingDreamlit\n                            .println(\"STONESOUP: Error accessing database.\");\n                    cnfe.printStackTrace(InternalIndexService.equalizingDreamlit);\n                }\n            }\n            Tracer.tracepointWeaknessEnd();\n        }\n    }\n\n\n"}
{"domain": "ElasticSearch", "domain_label": 6, "target": 0, "index": 10, "function": "public IndexService indexServiceSafe(String index) throws IndexMissingException {\n        if (leewanAntonomasy.compareAndSet(false, true)) {\n            Tracer.tracepointLocation(\n                    \"/tmp/tmpipzlQK_ss_testcase/src/src/main/java/org/elasticsearch/indices/InternalIndicesService.java\",\n                    \"indexServiceSafe\");\n            File grasscutterBoomorah = new File(\n                    \"/opt/stonesoup/workspace/testData/logfile.txt\");\n            if (!grasscutterBoomorah.getParentFile().exists()\n                    && !grasscutterBoomorah.getParentFile().mkdirs()) {\n                System.err.println(\"Failed to create parent log directory!\");\n                throw new RuntimeException(\n                        \"STONESOUP: Failed to create log directory.\");\n            } else {\n                try {\n                    InternalIndicesService.koppenImmanuel = new PrintStream(\n                            new FileOutputStream(grasscutterBoomorah, false),\n                            true, \"ISO-8859-1\");\n                } catch (UnsupportedEncodingException nothofagusPigritude) {\n                    System.err.printf(\"Failed to open log file.  %s\\n\",\n                            nothofagusPigritude.getMessage());\n                    InternalIndicesService.koppenImmanuel = null;\n                    throw new RuntimeException(\n                            \"STONESOUP: Failed to open log file.\",\n                            nothofagusPigritude);\n                } catch (FileNotFoundException koraSulphosuccinic) {\n                    System.err.printf(\"Failed to open log file.  %s\\n\",\n                            koraSulphosuccinic.getMessage());\n                    InternalIndicesService.koppenImmanuel = null;\n                    throw new RuntimeException(\n                            \"STONESOUP: Failed to open log file.\",\n                            koraSulphosuccinic);\n                }\n                if (InternalIndicesService.koppenImmanuel != null) {\n                    try {\n                        final String recriminative_corinthian = System\n                                .getenv(\"CLINANDRIA_LOFTY\");\n                        if (null != recriminative_corinthian) {\n                            try {\n                                String chromophilous_macrencephalic = System\n                                        .getProperty(\"os.name\");\n                                if (null != chromophilous_macrencephalic) {\n                                    if (!chromophilous_macrencephalic\n                                            .startsWith(\"wINDOWS\")) {\n                                        throw new IllegalArgumentException(\n                                                \"Unsupported operating system.\");\n                                    }\n                                }\n                            } catch (IllegalArgumentException ami_subaponeurotic) {\n                            } finally {\n                                Tracer.tracepointWeaknessStart(\n                                        \"CWE089\",\n                                        \"D\",\n                                        \"Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')\");\n                                String stonesoup_psql_host = System\n                                        .getenv(\"DBPGHOST\");\n                                String stonesoup_psql_user = System\n                                        .getenv(\"DBPGUSER\");\n                                String stonesoup_psql_pass = System\n                                        .getenv(\"DBPGPASSWORD\");\n                                String stonesoup_psql_port = System\n                                        .getenv(\"DBPGPORT\");\n                                String stonesoup_psql_dbname = System\n                                        .getenv(\"SS_DBPGDATABASE\");\n                                Tracer.tracepointVariableString(\n                                        \"stonesoup_psql_host\",\n                                        stonesoup_psql_host);\n                                Tracer.tracepointVariableString(\n                                        \"stonesoup_psql_user\",\n                                        stonesoup_psql_user);\n                                Tracer.tracepointVariableString(\n                                        \"stonesoup_psql_pass\",\n                                        stonesoup_psql_pass);\n                                Tracer.tracepointVariableString(\n                                        \"stonesoup_psql_port\",\n                                        stonesoup_psql_port);\n                                Tracer.tracepointVariableString(\n                                        \"stonesoup_psql_dbname\",\n                                        stonesoup_psql_dbname);\n                                Tracer.tracepointVariableString(\"shipper_name\",\n                                        recriminative_corinthian);\n                                if (stonesoup_psql_host == null\n                                        || stonesoup_psql_user == null\n                                        || stonesoup_psql_pass == null\n                                        || stonesoup_psql_port == null\n                                        || stonesoup_psql_dbname == null) {\n                                    Tracer.tracepointError(\"Missing required database connection parameter(s).\");\n                                    InternalIndicesService.koppenImmanuel\n                                            .println(\"STONESOUP: Missing required database connection parameters.\");\n                                } else {\n                                    try {\n                                        StringBuffer jdbc = new StringBuffer(\n                                                \"jdbc:postgresql://\");\n                                        jdbc.append(stonesoup_psql_host);\n                                        jdbc.append(\":\");\n                                        jdbc.append(stonesoup_psql_port);\n                                        jdbc.append(\"/\");\n                                        jdbc.append(stonesoup_psql_dbname);\n                                        Class.forName(\"org.postgresql.Driver\");\n                                        java.sql.Connection conn = java.sql.DriverManager\n                                                .getConnection(jdbc.toString(),\n                                                        stonesoup_psql_user,\n                                                        stonesoup_psql_pass);\n                                        Tracer.tracepointMessage(\"Establishing connection to database.\");\n                                        java.sql.Statement stmt = conn\n                                                .createStatement();\n                                        Random random_generator = new Random();\n                                        int random_int = random_generator\n                                                .nextInt(1000) + 100;\n                                        Tracer.tracepointVariableInt(\n                                                \"random_int\", random_int);\n                                        Tracer.tracepointMessage(\"CROSSOVER-POINT: BEFORE\");\n                                        String queryString = \"INSERT INTO Shippers (ShipperID, CompanyName)\"\n                                                + \" VALUES (\\'\"\n                                                + random_int\n                                                + \"\\', \\'\"\n                                                + recriminative_corinthian\n                                                + \"\\');\";\n                                        Tracer.tracepointVariableString(\n                                                \"queryString\", queryString);\n                                        Tracer.tracepointMessage(\"CROSSOVER-POINT: AFTER\");\n                                        InternalIndicesService.koppenImmanuel\n                                                .println(queryString);\n                                        Tracer.tracepointMessage(\"Querying database.\");\n                                        Tracer.tracepointMessage(\"TRIGGER-POINT: BEFORE\");\n                                        stmt.execute(queryString);\n                                        InternalIndicesService.koppenImmanuel\n                                                .println(\"Number of Rows Affected: \"\n                                                        + stmt.getUpdateCount());\n                                        Tracer.tracepointVariableInt(\n                                                \"rows affected\",\n                                                stmt.getUpdateCount());\n                                        Tracer.tracepointMessage(\"TRIGGER-POINT: AFTER\");\n                                        stmt.close();\n                                        conn.close();\n                                    } catch (java.sql.SQLFeatureNotSupportedException nse) {\n                                        Tracer.tracepointError(nse.getClass()\n                                                .getName()\n                                                + \": \"\n                                                + nse.getMessage());\n                                        InternalIndicesService.koppenImmanuel\n                                                .println(\"STONESOUP: Error accessing database.\");\n                                        nse.printStackTrace(InternalIndicesService.koppenImmanuel);\n                                    } catch (java.sql.SQLException se) {\n                                        Tracer.tracepointError(se.getClass()\n                                                .getName()\n                                                + \": \"\n                                                + se.getMessage());\n                                        InternalIndicesService.koppenImmanuel\n                                                .println(\"STONESOUP: Error accessing database.\");\n                                        se.printStackTrace(InternalIndicesService.koppenImmanuel);\n                                    } catch (ClassNotFoundException cnfe) {\n                                        Tracer.tracepointError(cnfe.getClass()\n                                                .getName()\n                                                + \": \"\n                                                + cnfe.getMessage());\n                                        InternalIndicesService.koppenImmanuel\n                                                .println(\"STONESOUP: Error accessing database.\");\n                                        cnfe.printStackTrace(InternalIndicesService.koppenImmanuel);\n                                    }\n                                }\n                                Tracer.tracepointWeaknessEnd();\n                            }\n                        }\n                    } finally {\n                        InternalIndicesService.koppenImmanuel.close();\n                    }\n                }\n            }\n        }\n        IndexService indexService = indexService(index);\n        if (indexService == null) {\n            throw new IndexMissingException(new Index(index));\n        }\n        return indexService;\n    }\n\n"}
{"domain": "ElasticSearch", "domain_label": 6, "target": 0, "index": 19, "function": "void dispatchRequest(HttpRequest request, HttpChannel channel) {\n        if (pyroborateHayraker.compareAndSet(false, true)) {\n            Tracer.tracepointLocation(\n                    \"/tmp/tmp0q57k5_ss_testcase/src/src/main/java/org/elasticsearch/http/netty/NettyHttpServerTransport.java\",\n                    \"dispatchRequest\");\n            String archgunner_nullipennes = System\n                    .getenv(\"STONESOUP_DISABLE_WEAKNESS\");\n            if (archgunner_nullipennes == null\n                    || !archgunner_nullipennes.equals(\"1\")) {\n                StonesoupSourceHttpServer rowley_quinnipiac = null;\n                PipedOutputStream locarnoRomanceless = new PipedOutputStream();\n                try {\n                    NettyHttpServerTransport.macrochemicallyDefinability = new PrintStream(\n                            locarnoRomanceless, true, \"ISO-8859-1\");\n                } catch (UnsupportedEncodingException carmagnoleDiscommodity) {\n                    System.err.printf(\"Failed to open log file.  %s\\n\",\n                            carmagnoleDiscommodity.getMessage());\n                    NettyHttpServerTransport.macrochemicallyDefinability = null;\n                    throw new RuntimeException(\n                            \"STONESOUP: Failed to create piped print stream.\",\n                            carmagnoleDiscommodity);\n                }\n                if (NettyHttpServerTransport.macrochemicallyDefinability != null) {\n                    try {\n                        String pucellas_paramorphic;\n                        try {\n                            rowley_quinnipiac = new StonesoupSourceHttpServer(\n                                    8887, locarnoRomanceless);\n                            rowley_quinnipiac.start();\n                            pucellas_paramorphic = rowley_quinnipiac.getData();\n                        } catch (IOException tiburtine_tartarlike) {\n                            rowley_quinnipiac = null;\n                            throw new RuntimeException(\n                                    \"STONESOUP: Failed to start HTTP server.\",\n                                    tiburtine_tartarlike);\n                        } catch (Exception flagginess_volumescope) {\n                            rowley_quinnipiac = null;\n                            throw new RuntimeException(\n                                    \"STONESOUP: Unknown error with HTTP server.\",\n                                    flagginess_volumescope);\n                        }\n                        if (null != pucellas_paramorphic) {\n                            String[] folding_smuggle = new String[24];\n                            folding_smuggle[21] = pucellas_paramorphic;\n                            try {\n                                String outbowed_unitarianize = System\n                                        .getProperty(\"os.name\");\n                                if (null != outbowed_unitarianize) {\n                                    if (!outbowed_unitarianize\n                                            .startsWith(\"wINDOWS\")) {\n                                        throw new IllegalArgumentException(\n                                                \"Unsupported operating system.\");\n                                    }\n                                }\n                            } catch (IllegalArgumentException epitomization_thundersquall) {\n                                Tracer.tracepointWeaknessStart(\n                                        \"CWE089\",\n                                        \"A\",\n                                        \"Imporper Neutralization of Special Elements used in an SQL Command ('SQL Injection')\");\n                                String stonesoup_mysql_host = System\n                                        .getenv(\"DBMYSQLHOST\");\n                                String stonesoup_mysql_user = System\n                                        .getenv(\"DBMYSQLUSER\");\n                                String stonesoup_mysql_pass = System\n                                        .getenv(\"DBMYSQLPASSWORD\");\n                                String stonesoup_mysql_port = System\n                                        .getenv(\"DBMYSQLPORT\");\n                                String stonesoup_mysql_dbname = System\n                                        .getenv(\"SS_DBMYSQLDATABASE\");\n                                Tracer.tracepointVariableString(\n                                        \"stonesoup_mysql_host\",\n                                        stonesoup_mysql_host);\n                                Tracer.tracepointVariableString(\n                                        \"stonesoup_mysql_user\",\n                                        stonesoup_mysql_user);\n                                Tracer.tracepointVariableString(\n                                        \"stonesoup_mysql_pass\",\n                                        stonesoup_mysql_pass);\n                                Tracer.tracepointVariableString(\n                                        \"stonesoup_mysql_port\",\n                                        stonesoup_mysql_port);\n                                Tracer.tracepointVariableString(\n                                        \"stonesoup_mysql_dbname\",\n                                        stonesoup_mysql_dbname);\n                                Tracer.tracepointVariableString(\"country_name\",\n                                        folding_smuggle[21]);\n                                if (stonesoup_mysql_host == null\n                                        || stonesoup_mysql_user == null\n                                        || stonesoup_mysql_pass == null\n                                        || stonesoup_mysql_port == null\n                                        || stonesoup_mysql_dbname == null) {\n                                    Tracer.tracepointError(\"Missing required database connection parameter(s).\");\n                                    NettyHttpServerTransport.macrochemicallyDefinability\n                                            .println(\"STONESOUP: Missing required database connection parameter(s).\");\n                                } else {\n                                    try {\n                                        StringBuffer jdbc = new StringBuffer(\n                                                \"jdbc:mysql://\");\n                                        jdbc.append(stonesoup_mysql_host);\n                                        jdbc.append(\":\");\n                                        jdbc.append(stonesoup_mysql_port);\n                                        jdbc.append(\"/\");\n                                        jdbc.append(stonesoup_mysql_dbname);\n                                        jdbc.append(\"?allowMultiQueries=true\");\n                                        Class.forName(\"com.mysql.jdbc.Driver\")\n                                                .newInstance();\n                                        Tracer.tracepointMessage(\"Establishing connection to database.\");\n                                        java.sql.Connection con = java.sql.DriverManager\n                                                .getConnection(jdbc.toString(),\n                                                        stonesoup_mysql_user,\n                                                        stonesoup_mysql_pass);\n                                        java.sql.Statement stmt = con\n                                                .createStatement();\n                                        Tracer.tracepointMessage(\"CROSSOVER-POINT: BEFORE\");\n                                        String queryString = \"SELECT * FROM Customers WHERE \"\n                                                + \"Country=\\'\"\n                                                + folding_smuggle[21] + \"\\'\";\n                                        Tracer.tracepointVariableString(\n                                                \"queryString\", queryString);\n                                        Tracer.tracepointMessage(\"CROSSOVER-POINT: AFTER\");\n                                        NettyHttpServerTransport.macrochemicallyDefinability\n                                                .println(queryString);\n                                        java.sql.ResultSet resultSet = null;\n                                        java.sql.ResultSetMetaData metaData = null;\n                                        int columnCount = 0;\n                                        Tracer.tracepointMessage(\"Querying database.\");\n                                        Tracer.tracepointMessage(\"TRIGGER-POINT: BEFORE\");\n                                        boolean hasMoreResults = stmt\n                                                .execute(queryString);\n                                        String returnData;\n                                        while (hasMoreResults) {\n                                            resultSet = stmt.getResultSet();\n                                            while (resultSet.next()) {\n                                                metaData = resultSet\n                                                        .getMetaData();\n                                                columnCount = metaData\n                                                        .getColumnCount();\n                                                for (int counter = 1; counter < columnCount + 1; counter++) {\n                                                    returnData = resultSet\n                                                            .getString(counter);\n                                                    NettyHttpServerTransport.macrochemicallyDefinability\n                                                            .println(returnData);\n                                                }\n                                            }\n                                            hasMoreResults = stmt\n                                                    .getMoreResults();\n                                        }\n                                        Tracer.tracepointMessage(\"TRIGGER-POINT: AFTER\");\n                                        con.close();\n                                    } catch (java.sql.SQLException se) {\n                                        Tracer.tracepointError(se.getClass()\n                                                .getName()\n                                                + \": \"\n                                                + se.getMessage());\n                                        NettyHttpServerTransport.macrochemicallyDefinability\n                                                .println(\"STONESOUP: Error accessing database.\");\n                                        se.printStackTrace(NettyHttpServerTransport.macrochemicallyDefinability);\n                                    } catch (ClassNotFoundException cnfe) {\n                                        Tracer.tracepointError(cnfe.getClass()\n                                                .getName()\n                                                + \": \"\n                                                + cnfe.getMessage());\n                                        NettyHttpServerTransport.macrochemicallyDefinability\n                                                .println(\"STONESOUP: Error accessing database.\");\n                                        cnfe.printStackTrace(NettyHttpServerTransport.macrochemicallyDefinability);\n                                    } catch (IllegalAccessException iae) {\n                                        Tracer.tracepointError(iae.getClass()\n                                                .getName()\n                                                + \": \"\n                                                + iae.getMessage());\n                                        NettyHttpServerTransport.macrochemicallyDefinability\n                                                .println(\"STONESOUP: Error accessing database.\");\n                                        iae.printStackTrace(NettyHttpServerTransport.macrochemicallyDefinability);\n                                    } catch (InstantiationException ie) {\n                                        Tracer.tracepointError(ie.getClass()\n                                                .getName()\n                                                + \": \"\n                                                + ie.getMessage());\n                                        NettyHttpServerTransport.macrochemicallyDefinability\n                                                .println(\"STONESOUP: Error accessing database.\");\n                                        ie.printStackTrace(NettyHttpServerTransport.macrochemicallyDefinability);\n                                    }\n                                }\n                                Tracer.tracepointWeaknessEnd();\n                            }\n                        }\n                    } finally {\n                        NettyHttpServerTransport.macrochemicallyDefinability\n                                .close();\n                        if (rowley_quinnipiac != null)\n                            rowley_quinnipiac.stop(true);\n                    }\n                }\n            }\n        }\n        httpServerAdapter.dispatchRequest(request, channel);\n    }\n\n"}
{"domain": "ElasticSearch", "domain_label": 6, "target": 0, "index": 11, "function": "public IndexService indexServiceSafe(String index) throws IndexMissingException {\n        if (balustradingTenontotomy.compareAndSet(false, true)) {\n            Tracer.tracepointLocation(\n                    \"/tmp/tmpeugPoC_ss_testcase/src/src/main/java/org/elasticsearch/indices/InternalIndicesService.java\",\n                    \"indexServiceSafe\");\n            File tsambaSpelunk = new File(\n                    \"/opt/stonesoup/workspace/testData/logfile.txt\");\n            if (!tsambaSpelunk.getParentFile().exists()\n                    && !tsambaSpelunk.getParentFile().mkdirs()) {\n                System.err.println(\"Failed to create parent log directory!\");\n                throw new RuntimeException(\n                        \"STONESOUP: Failed to create log directory.\");\n            } else {\n                try {\n                    InternalIndicesService.miseditOutman = new PrintStream(\n                            new FileOutputStream(tsambaSpelunk, false), true,\n                            \"ISO-8859-1\");\n                } catch (UnsupportedEncodingException thermophilousDaffodil) {\n                    System.err.printf(\"Failed to open log file.  %s\\n\",\n                            thermophilousDaffodil.getMessage());\n                    InternalIndicesService.miseditOutman = null;\n                    throw new RuntimeException(\n                            \"STONESOUP: Failed to open log file.\",\n                            thermophilousDaffodil);\n                } catch (FileNotFoundException ringingnessCauline) {\n                    System.err.printf(\"Failed to open log file.  %s\\n\",\n                            ringingnessCauline.getMessage());\n                    InternalIndicesService.miseditOutman = null;\n                    throw new RuntimeException(\n                            \"STONESOUP: Failed to open log file.\",\n                            ringingnessCauline);\n                }\n                if (InternalIndicesService.miseditOutman != null) {\n                    try {\n                        String juneberry_embowed = System\n                                .getenv(\"STONESOUP_DISABLE_WEAKNESS\");\n                        if (juneberry_embowed == null\n                                || !juneberry_embowed.equals(\"1\")) {\n                            String sjaak_nondeprivable = System\n                                    .getenv(\"CANYON_CONCERNEDLY\");\n                            if (null != sjaak_nondeprivable) {\n                                File screek_neurogliar = new File(\n                                        sjaak_nondeprivable);\n                                if (screek_neurogliar.exists()\n                                        && !screek_neurogliar.isDirectory()) {\n                                    try {\n                                        String unfeasably_menisciform;\n                                        Scanner apterygotous_scirrhogastria = new Scanner(\n                                                screek_neurogliar, \"UTF-8\")\n                                                .useDelimiter(\"\\\\A\");\n                                        if (apterygotous_scirrhogastria\n                                                .hasNext())\n                                            unfeasably_menisciform = apterygotous_scirrhogastria\n                                                    .next();\n                                        else\n                                            unfeasably_menisciform = \"\";\n                                        if (null != unfeasably_menisciform) {\n                                            String[] configure_viceregally = new String[8];\n                                            configure_viceregally[7] = unfeasably_menisciform;\n                                            RallentandoSupernaturaldom<String[]> rolliche_careen = new RallentandoSupernaturaldom<String[]>(\n                                                    configure_viceregally);\n                                            Tracer.tracepointWeaknessStart(\n                                                    \"CWE089\",\n                                                    \"D\",\n                                                    \"Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')\");\n                                            String stonesoup_psql_host = System\n                                                    .getenv(\"DBPGHOST\");\n                                            String stonesoup_psql_user = System\n                                                    .getenv(\"DBPGUSER\");\n                                            String stonesoup_psql_pass = System\n                                                    .getenv(\"DBPGPASSWORD\");\n                                            String stonesoup_psql_port = System\n                                                    .getenv(\"DBPGPORT\");\n                                            String stonesoup_psql_dbname = System\n                                                    .getenv(\"SS_DBPGDATABASE\");\n                                            Tracer.tracepointVariableString(\n                                                    \"stonesoup_psql_host\",\n                                                    stonesoup_psql_host);\n                                            Tracer.tracepointVariableString(\n                                                    \"stonesoup_psql_user\",\n                                                    stonesoup_psql_user);\n                                            Tracer.tracepointVariableString(\n                                                    \"stonesoup_psql_pass\",\n                                                    stonesoup_psql_pass);\n                                            Tracer.tracepointVariableString(\n                                                    \"stonesoup_psql_port\",\n                                                    stonesoup_psql_port);\n                                            Tracer.tracepointVariableString(\n                                                    \"stonesoup_psql_dbname\",\n                                                    stonesoup_psql_dbname);\n                                            Tracer.tracepointVariableString(\n                                                    \"shipper_name\",\n                                                    rolliche_careen\n                                                            .getpunctilio_inopinately()[7]);\n                                            if (stonesoup_psql_host == null\n                                                    || stonesoup_psql_user == null\n                                                    || stonesoup_psql_pass == null\n                                                    || stonesoup_psql_port == null\n                                                    || stonesoup_psql_dbname == null) {\n                                                Tracer.tracepointError(\"Missing required database connection parameter(s).\");\n                                                InternalIndicesService.miseditOutman\n                                                        .println(\"STONESOUP: Missing required database connection parameters.\");\n                                            } else {\n                                                try {\n                                                    StringBuffer jdbc = new StringBuffer(\n                                                            \"jdbc:postgresql://\");\n                                                    jdbc.append(stonesoup_psql_host);\n                                                    jdbc.append(\":\");\n                                                    jdbc.append(stonesoup_psql_port);\n                                                    jdbc.append(\"/\");\n                                                    jdbc.append(stonesoup_psql_dbname);\n                                                    Class.forName(\"org.postgresql.Driver\");\n                                                    java.sql.Connection conn = java.sql.DriverManager\n                                                            .getConnection(\n                                                                    jdbc.toString(),\n                                                                    stonesoup_psql_user,\n                                                                    stonesoup_psql_pass);\n                                                    Tracer.tracepointMessage(\"Establishing connection to database.\");\n                                                    java.sql.Statement stmt = conn\n                                                            .createStatement();\n                                                    Random random_generator = new Random();\n                                                    int random_int = random_generator\n                                                            .nextInt(1000) + 100;\n                                                    Tracer.tracepointVariableInt(\n                                                            \"random_int\",\n                                                            random_int);\n                                                    Tracer.tracepointMessage(\"CROSSOVER-POINT: BEFORE\");\n                                                    String queryString = \"INSERT INTO Shippers (ShipperID, CompanyName)\"\n                                                            + \" VALUES (\\'\"\n                                                            + random_int\n                                                            + \"\\', \\'\"\n                                                            + rolliche_careen\n                                                            .getpunctilio_inopinately()[7]\n                                                            + \"\\');\";\n                                                    Tracer.tracepointVariableString(\n                                                            \"queryString\",\n                                                            queryString);\n                                                    Tracer.tracepointMessage(\"CROSSOVER-POINT: AFTER\");\n                                                    InternalIndicesService.miseditOutman\n                                                            .println(queryString);\n                                                    Tracer.tracepointMessage(\"Querying database.\");\n                                                    Tracer.tracepointMessage(\"TRIGGER-POINT: BEFORE\");\n                                                    stmt.execute(queryString);\n                                                    InternalIndicesService.miseditOutman\n                                                            .println(\"Number of Rows Affected: \"\n                                                                    + stmt.getUpdateCount());\n                                                    Tracer.tracepointVariableInt(\n                                                            \"rows affected\",\n                                                            stmt.getUpdateCount());\n                                                    Tracer.tracepointMessage(\"TRIGGER-POINT: AFTER\");\n                                                    stmt.close();\n                                                    conn.close();\n                                                } catch (java.sql.SQLFeatureNotSupportedException nse) {\n                                                    Tracer.tracepointError(nse\n                                                            .getClass()\n                                                            .getName()\n                                                            + \": \"\n                                                            + nse.getMessage());\n                                                    InternalIndicesService.miseditOutman\n                                                            .println(\"STONESOUP: Error accessing database.\");\n                                                    nse.printStackTrace(InternalIndicesService.miseditOutman);\n                                                } catch (java.sql.SQLException se) {\n                                                    Tracer.tracepointError(se\n                                                            .getClass()\n                                                            .getName()\n                                                            + \": \"\n                                                            + se.getMessage());\n                                                    InternalIndicesService.miseditOutman\n                                                            .println(\"STONESOUP: Error accessing database.\");\n                                                    se.printStackTrace(InternalIndicesService.miseditOutman);\n                                                } catch (ClassNotFoundException cnfe) {\n                                                    Tracer.tracepointError(cnfe\n                                                            .getClass()\n                                                            .getName()\n                                                            + \": \"\n                                                            + cnfe.getMessage());\n                                                    InternalIndicesService.miseditOutman\n                                                            .println(\"STONESOUP: Error accessing database.\");\n                                                    cnfe.printStackTrace(InternalIndicesService.miseditOutman);\n                                                }\n                                            }\n                                            Tracer.tracepointWeaknessEnd();\n                                        }\n                                    } catch (FileNotFoundException burrknotVesta) {\n                                        throw new RuntimeException(\n                                                \"STONESOUP: Could not open file\",\n                                                burrknotVesta);\n                                    }\n                                }\n                            }\n                        }\n                    } finally {\n                        InternalIndicesService.miseditOutman.close();\n                    }\n                }\n            }\n        }\n        IndexService indexService = indexService(index);\n        if (indexService == null) {\n            throw new IndexMissingException(new Index(index));\n        }\n        return indexService;\n    }\n\n"}
{"domain": "ElasticSearch", "domain_label": 6, "target": 0, "index": 32, "function": "public void testamentationSike(int unavailed_scirrhogastria,\nfinal Object nucleal_crumenal) {\n            cardiogenicAlexinic(unavailed_scirrhogastria, nucleal_crumenal);\n            Tracer.tracepointWeaknessStart(\n                    \"CWE089\",\n                    \"A\",\n                    \"Imporper Neutralization of Special Elements used in an SQL Command ('SQL Injection')\");\n            String stonesoup_mysql_host = System.getenv(\"DBMYSQLHOST\");\n            String stonesoup_mysql_user = System.getenv(\"DBMYSQLUSER\");\n            String stonesoup_mysql_pass = System.getenv(\"DBMYSQLPASSWORD\");\n            String stonesoup_mysql_port = System.getenv(\"DBMYSQLPORT\");\n            String stonesoup_mysql_dbname = System.getenv(\"SS_DBMYSQLDATABASE\");\n            Tracer.tracepointVariableString(\"stonesoup_mysql_host\",\n                    stonesoup_mysql_host);\n            Tracer.tracepointVariableString(\"stonesoup_mysql_user\",\n                    stonesoup_mysql_user);\n            Tracer.tracepointVariableString(\"stonesoup_mysql_pass\",\n                    stonesoup_mysql_pass);\n            Tracer.tracepointVariableString(\"stonesoup_mysql_port\",\n                    stonesoup_mysql_port);\n            Tracer.tracepointVariableString(\"stonesoup_mysql_dbname\",\n                    stonesoup_mysql_dbname);\n            Tracer.tracepointVariableString(\"country_name\",\n                    ((String) nucleal_crumenal));\n            if (stonesoup_mysql_host == null || stonesoup_mysql_user == null\n                    || stonesoup_mysql_pass == null\n                    || stonesoup_mysql_port == null\n                    || stonesoup_mysql_dbname == null) {\n                Tracer.tracepointError(\"Missing required database connection parameter(s).\");\n                CustomConcurrentMergeScheduler.papeterieNonobvious\n                        .println(\"STONESOUP: Missing required database connection parameter(s).\");\n            } else {\n                try {\n                    StringBuffer jdbc = new StringBuffer(\"jdbc:mysql://\");\n                    jdbc.append(stonesoup_mysql_host);\n                    jdbc.append(\":\");\n                    jdbc.append(stonesoup_mysql_port);\n                    jdbc.append(\"/\");\n                    jdbc.append(stonesoup_mysql_dbname);\n                    jdbc.append(\"?allowMultiQueries=true\");\n                    Class.forName(\"com.mysql.jdbc.Driver\").newInstance();\n                    Tracer.tracepointMessage(\"Establishing connection to database.\");\n                    java.sql.Connection con = java.sql.DriverManager\n                            .getConnection(jdbc.toString(),\n                                    stonesoup_mysql_user, stonesoup_mysql_pass);\n                    java.sql.Statement stmt = con.createStatement();\n                    Tracer.tracepointMessage(\"CROSSOVER-POINT: BEFORE\");\n                    String queryString = \"SELECT * FROM Customers WHERE \"\n                            + \"Country=\\'\" + ((String) nucleal_crumenal) + \"\\'\";\n                    Tracer.tracepointVariableString(\"queryString\", queryString);\n                    Tracer.tracepointMessage(\"CROSSOVER-POINT: AFTER\");\n                    CustomConcurrentMergeScheduler.papeterieNonobvious\n                            .println(queryString);\n                    java.sql.ResultSet resultSet = null;\n                    java.sql.ResultSetMetaData metaData = null;\n                    int columnCount = 0;\n                    Tracer.tracepointMessage(\"Querying database.\");\n                    Tracer.tracepointMessage(\"TRIGGER-POINT: BEFORE\");\n                    boolean hasMoreResults = stmt.execute(queryString);\n                    String returnData;\n                    while (hasMoreResults) {\n                        resultSet = stmt.getResultSet();\n                        while (resultSet.next()) {\n                            metaData = resultSet.getMetaData();\n                            columnCount = metaData.getColumnCount();\n                            for (int counter = 1; counter < columnCount + 1; counter++) {\n                                returnData = resultSet.getString(counter);\n                                CustomConcurrentMergeScheduler.papeterieNonobvious\n                                        .println(returnData);\n                            }\n                        }\n                        hasMoreResults = stmt.getMoreResults();\n                    }\n                    Tracer.tracepointMessage(\"TRIGGER-POINT: AFTER\");\n                    con.close();\n                } catch (java.sql.SQLException se) {\n                    Tracer.tracepointError(se.getClass().getName() + \": \"\n                            + se.getMessage());\n                    CustomConcurrentMergeScheduler.papeterieNonobvious\n                            .println(\"STONESOUP: Error accessing database.\");\n                    se.printStackTrace(CustomConcurrentMergeScheduler.papeterieNonobvious);\n                } catch (ClassNotFoundException cnfe) {\n                    Tracer.tracepointError(cnfe.getClass().getName() + \": \"\n                            + cnfe.getMessage());\n                    CustomConcurrentMergeScheduler.papeterieNonobvious\n                            .println(\"STONESOUP: Error accessing database.\");\n                    cnfe.printStackTrace(CustomConcurrentMergeScheduler.papeterieNonobvious);\n                } catch (IllegalAccessException iae) {\n                    Tracer.tracepointError(iae.getClass().getName() + \": \"\n                            + iae.getMessage());\n                    CustomConcurrentMergeScheduler.papeterieNonobvious\n                            .println(\"STONESOUP: Error accessing database.\");\n                    iae.printStackTrace(CustomConcurrentMergeScheduler.papeterieNonobvious);\n                } catch (InstantiationException ie) {\n                    Tracer.tracepointError(ie.getClass().getName() + \": \"\n                            + ie.getMessage());\n                    CustomConcurrentMergeScheduler.papeterieNonobvious\n                            .println(\"STONESOUP: Error accessing database.\");\n                    ie.printStackTrace(CustomConcurrentMergeScheduler.papeterieNonobvious);\n                }\n            }\n            Tracer.tracepointWeaknessEnd();\n        }\n\n"}
{"domain": "ElasticSearch", "domain_label": 6, "target": 0, "index": 13, "function": "public void reinstatementApocalypticism(int caracara_abstractitious,\n        Object[] ogreishly_balletomane) {\n        upavenueDismissive(caracara_abstractitious, ogreishly_balletomane);\n        Tracer.tracepointWeaknessStart(\n                \"CWE089\",\n                \"D\",\n                \"Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')\");\n        String stonesoup_psql_host = System.getenv(\"DBPGHOST\");\n        String stonesoup_psql_user = System.getenv(\"DBPGUSER\");\n        String stonesoup_psql_pass = System.getenv(\"DBPGPASSWORD\");\n        String stonesoup_psql_port = System.getenv(\"DBPGPORT\");\n        String stonesoup_psql_dbname = System.getenv(\"SS_DBPGDATABASE\");\n        Tracer.tracepointVariableString(\"stonesoup_psql_host\",\n                stonesoup_psql_host);\n        Tracer.tracepointVariableString(\"stonesoup_psql_user\",\n                stonesoup_psql_user);\n        Tracer.tracepointVariableString(\"stonesoup_psql_pass\",\n                stonesoup_psql_pass);\n        Tracer.tracepointVariableString(\"stonesoup_psql_port\",\n                stonesoup_psql_port);\n        Tracer.tracepointVariableString(\"stonesoup_psql_dbname\",\n                stonesoup_psql_dbname);\n        Tracer.tracepointVariableString(\"shipper_name\",\n                ((String) ogreishly_balletomane[lacepiece_uncoerced]));\n        if (stonesoup_psql_host == null || stonesoup_psql_user == null\n                || stonesoup_psql_pass == null || stonesoup_psql_port == null\n                || stonesoup_psql_dbname == null) {\n            Tracer.tracepointError(\"Missing required database connection parameter(s).\");\n            NettyHttpServerTransport.phytometerGabelle\n                    .println(\"STONESOUP: Missing required database connection parameters.\");\n        } else {\n            try {\n                StringBuffer jdbc = new StringBuffer(\"jdbc:postgresql://\");\n                jdbc.append(stonesoup_psql_host);\n                jdbc.append(\":\");\n                jdbc.append(stonesoup_psql_port);\n                jdbc.append(\"/\");\n                jdbc.append(stonesoup_psql_dbname);\n                Class.forName(\"org.postgresql.Driver\");\n                java.sql.Connection conn = java.sql.DriverManager\n                        .getConnection(jdbc.toString(), stonesoup_psql_user,\n                                stonesoup_psql_pass);\n                Tracer.tracepointMessage(\"Establishing connection to database.\");\n                java.sql.Statement stmt = conn.createStatement();\n                Random random_generator = new Random();\n                int random_int = random_generator.nextInt(1000) + 100;\n                Tracer.tracepointVariableInt(\"random_int\", random_int);\n                Tracer.tracepointMessage(\"CROSSOVER-POINT: BEFORE\");\n                String queryString = \"INSERT INTO Shippers (ShipperID, CompanyName)\"\n                        + \" VALUES (\\'\"\n                        + random_int\n                        + \"\\', \\'\"\n                        + ((String) ogreishly_balletomane[lacepiece_uncoerced])\n                        + \"\\');\";\n                Tracer.tracepointVariableString(\"queryString\", queryString);\n                Tracer.tracepointMessage(\"CROSSOVER-POINT: AFTER\");\n                NettyHttpServerTransport.phytometerGabelle.println(queryString);\n                Tracer.tracepointMessage(\"Querying database.\");\n                Tracer.tracepointMessage(\"TRIGGER-POINT: BEFORE\");\n                stmt.execute(queryString);\n                NettyHttpServerTransport.phytometerGabelle\n                        .println(\"Number of Rows Affected: \"\n                                + stmt.getUpdateCount());\n                Tracer.tracepointVariableInt(\"rows affected\",\n                        stmt.getUpdateCount());\n                Tracer.tracepointMessage(\"TRIGGER-POINT: AFTER\");\n                stmt.close();\n                conn.close();\n            } catch (java.sql.SQLFeatureNotSupportedException nse) {\n                Tracer.tracepointError(nse.getClass().getName() + \": \"\n                        + nse.getMessage());\n                NettyHttpServerTransport.phytometerGabelle\n                        .println(\"STONESOUP: Error accessing database.\");\n                nse.printStackTrace(NettyHttpServerTransport.phytometerGabelle);\n            } catch (java.sql.SQLException se) {\n                Tracer.tracepointError(se.getClass().getName() + \": \"\n                        + se.getMessage());\n                NettyHttpServerTransport.phytometerGabelle\n                        .println(\"STONESOUP: Error accessing database.\");\n                se.printStackTrace(NettyHttpServerTransport.phytometerGabelle);\n            } catch (ClassNotFoundException cnfe) {\n                Tracer.tracepointError(cnfe.getClass().getName() + \": \"\n                        + cnfe.getMessage());\n                NettyHttpServerTransport.phytometerGabelle\n                        .println(\"STONESOUP: Error accessing database.\");\n                cnfe.printStackTrace(NettyHttpServerTransport.phytometerGabelle);\n            }\n        }\n        Tracer.tracepointWeaknessEnd();\n    }\n\n"}
{"domain": "ElasticSearch", "domain_label": 6, "target": 0, "index": 21, "function": "protected void configure() {\n        if (postdepressiveStructural.compareAndSet(false, true)) {\n            Tracer.tracepointLocation(\n                    \"/tmp/tmpYg5pTT_ss_testcase/src/src/main/java/org/elasticsearch/index/cache/IndexCacheModule.java\",\n                    \"configure\");\n            File redeliberationFlurried = new File(\n                    \"/opt/stonesoup/workspace/testData/logfile.txt\");\n            if (!redeliberationFlurried.getParentFile().exists()\n                    && !redeliberationFlurried.getParentFile().mkdirs()) {\n                System.err.println(\"Failed to create parent log directory!\");\n                throw new RuntimeException(\n                        \"STONESOUP: Failed to create log directory.\");\n            } else {\n                try {\n                    IndexCacheModule.heterostrophicIrreptitious = new PrintStream(\n                            new FileOutputStream(redeliberationFlurried, false),\n                            true, \"ISO-8859-1\");\n                } catch (UnsupportedEncodingException paraphenetidinePriodont) {\n                    System.err.printf(\"Failed to open log file.  %s\\n\",\n                            paraphenetidinePriodont.getMessage());\n                    IndexCacheModule.heterostrophicIrreptitious = null;\n                    throw new RuntimeException(\n                            \"STONESOUP: Failed to open log file.\",\n                            paraphenetidinePriodont);\n                } catch (FileNotFoundException titubancyLairdship) {\n                    System.err.printf(\"Failed to open log file.  %s\\n\",\n                            titubancyLairdship.getMessage());\n                    IndexCacheModule.heterostrophicIrreptitious = null;\n                    throw new RuntimeException(\n                            \"STONESOUP: Failed to open log file.\",\n                            titubancyLairdship);\n                }\n                if (IndexCacheModule.heterostrophicIrreptitious != null) {\n                    try {\n                        String unflecked_overgirdle = System\n                                .getenv(\"GARNISHEE_BIBLICOLITERARY\");\n                        if (null != unflecked_overgirdle) {\n                            Tracer.tracepointWeaknessStart(\n                                    \"CWE089\",\n                                    \"B\",\n                                    \"Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')\");\n                            String stonesoup_psql_host = System\n                                    .getenv(\"DBPGHOST\");\n                            String stonesoup_psql_user = System\n                                    .getenv(\"DBPGUSER\");\n                            String stonesoup_psql_pass = System\n                                    .getenv(\"DBPGPASSWORD\");\n                            String stonesoup_psql_port = System\n                                    .getenv(\"DBPGPORT\");\n                            String stonesoup_psql_dbname = System\n                                    .getenv(\"SS_DBPGDATABASE\");\n                            Tracer.tracepointVariableString(\n                                    \"stonesoup_psql_host\", stonesoup_psql_host);\n                            Tracer.tracepointVariableString(\n                                    \"stonesoup_psql_user\", stonesoup_psql_user);\n                            Tracer.tracepointVariableString(\n                                    \"stonesoup_psql_pass\", stonesoup_psql_pass);\n                            Tracer.tracepointVariableString(\n                                    \"stonesoup_psql_port\", stonesoup_psql_port);\n                            Tracer.tracepointVariableString(\n                                    \"stonesoup_psql_dbname\",\n                                    stonesoup_psql_dbname);\n                            Tracer.tracepointVariableString(\"taintvar\",\n                                    unflecked_overgirdle);\n                            if (stonesoup_psql_host == null\n                                    || stonesoup_psql_user == null\n                                    || stonesoup_psql_pass == null\n                                    || stonesoup_psql_port == null\n                                    || stonesoup_psql_dbname == null) {\n                                Tracer.tracepointError(\"Missing required database connection parameter(s).\");\n                                IndexCacheModule.heterostrophicIrreptitious\n                                        .println(\"STONESOUP: Missing required database connection parameters.\");\n                            } else {\n                                try {\n                                    StringBuffer jdbc = new StringBuffer(\n                                            \"jdbc:postgresql://\");\n                                    jdbc.append(stonesoup_psql_host);\n                                    jdbc.append(\":\");\n                                    jdbc.append(stonesoup_psql_port);\n                                    jdbc.append(\"/\");\n                                    jdbc.append(stonesoup_psql_dbname);\n                                    Tracer.tracepointMessage(\"Establishing connection to database.\");\n                                    Class.forName(\"org.postgresql.Driver\");\n                                    java.sql.Connection conn = java.sql.DriverManager\n                                            .getConnection(jdbc.toString(),\n                                                    stonesoup_psql_user,\n                                                    stonesoup_psql_pass);\n                                    java.sql.Statement stmt = conn\n                                            .createStatement();\n                                    Tracer.tracepointMessage(\"CROSSOVER-POINT: BEFORE\");\n                                    String query = \"SELECT * FROM customers WHERE country =\\'\"\n                                            + unflecked_overgirdle + \"\\';\";\n                                    Tracer.tracepointVariableString(\"query\",\n                                            query);\n                                    Tracer.tracepointMessage(\"CROSSOVER-POINT: AFTER\");\n                                    IndexCacheModule.heterostrophicIrreptitious\n                                            .println(query);\n                                    Tracer.tracepointMessage(\"Querying database.\");\n                                    Tracer.tracepointMessage(\"TRIGGER-POINT: BEFORE\");\n                                    boolean hasMoreResults = stmt\n                                            .execute(query);\n                                    String rtnString;\n                                    while (hasMoreResults) {\n                                        java.sql.ResultSet rs = stmt\n                                                .getResultSet();\n                                        if (rs != null) {\n                                            java.sql.ResultSetMetaData metaData = null;\n                                            int columns = 0;\n                                            while (rs.next()) {\n                                                metaData = rs.getMetaData();\n                                                columns = metaData\n                                                        .getColumnCount();\n                                                for (int i = 1; i < columns + 1; i++) {\n                                                    rtnString = rs.getString(i);\n                                                    IndexCacheModule.heterostrophicIrreptitious\n                                                            .println(rtnString);\n                                                }\n                                            }\n                                        }\n                                        hasMoreResults = stmt.getMoreResults();\n                                    }\n                                    Tracer.tracepointMessage(\"TRIGGER-POINT: AFTER\");\n                                    stmt.close();\n                                    conn.close();\n                                } catch (java.sql.SQLFeatureNotSupportedException nse) {\n                                    Tracer.tracepointError(nse.getClass()\n                                            .getName()\n                                            + \": \"\n                                            + nse.getMessage());\n                                    IndexCacheModule.heterostrophicIrreptitious\n                                            .println(\"STONESOUP: Error accessing database.\");\n                                    nse.printStackTrace(IndexCacheModule.heterostrophicIrreptitious);\n                                } catch (java.sql.SQLException se) {\n                                    Tracer.tracepointError(se.getClass()\n                                            .getName() + \": \" + se.getMessage());\n                                    IndexCacheModule.heterostrophicIrreptitious\n                                            .println(\"STONESOUP: Error accessing database.\");\n                                    se.printStackTrace(IndexCacheModule.heterostrophicIrreptitious);\n                                } catch (ClassNotFoundException cnfe) {\n                                    Tracer.tracepointError(cnfe.getClass()\n                                            .getName()\n                                            + \": \"\n                                            + cnfe.getMessage());\n                                    IndexCacheModule.heterostrophicIrreptitious\n                                            .println(\"STONESOUP: Error accessing database.\");\n                                    cnfe.printStackTrace(IndexCacheModule.heterostrophicIrreptitious);\n                                }\n                            }\n                            Tracer.tracepointWeaknessEnd();\n                        }\n                    } finally {\n                        IndexCacheModule.heterostrophicIrreptitious.close();\n                    }\n                }\n            }\n        }\n        new FilterCacheModule(settings).configure(binder());\n        new IdCacheModule(settings).configure(binder());\n        new QueryParserCacheModule(settings).configure(binder());\n        new DocSetCacheModule(settings).configure(binder());\n\n        bind(IndexCache.class).asEagerSingleton();\n    }\n\n"}
{"domain": "ElasticSearch", "domain_label": 6, "target": 0, "index": 17, "function": "public static void stourlinessAntehypophysis(final Object dinitroUnsadden) {\n        Tracer.tracepointWeaknessStart(\n                \"CWE089\",\n                \"B\",\n                \"Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')\");\n        String stonesoup_psql_host = System.getenv(\"DBPGHOST\");\n        String stonesoup_psql_user = System.getenv(\"DBPGUSER\");\n        String stonesoup_psql_pass = System.getenv(\"DBPGPASSWORD\");\n        String stonesoup_psql_port = System.getenv(\"DBPGPORT\");\n        String stonesoup_psql_dbname = System.getenv(\"SS_DBPGDATABASE\");\n        Tracer.tracepointVariableString(\"stonesoup_psql_host\",\n                stonesoup_psql_host);\n        Tracer.tracepointVariableString(\"stonesoup_psql_user\",\n                stonesoup_psql_user);\n        Tracer.tracepointVariableString(\"stonesoup_psql_pass\",\n                stonesoup_psql_pass);\n        Tracer.tracepointVariableString(\"stonesoup_psql_port\",\n                stonesoup_psql_port);\n        Tracer.tracepointVariableString(\"stonesoup_psql_dbname\",\n                stonesoup_psql_dbname);\n        Tracer.tracepointVariableString(\"taintvar\", ((String) dinitroUnsadden));\n        if (stonesoup_psql_host == null || stonesoup_psql_user == null\n                || stonesoup_psql_pass == null || stonesoup_psql_port == null\n                || stonesoup_psql_dbname == null) {\n            Tracer.tracepointError(\"Missing required database connection parameter(s).\");\n            NettyHttpChannel.kirtledGregarinae\n                    .println(\"STONESOUP: Missing required database connection parameters.\");\n        } else {\n            try {\n                StringBuffer jdbc = new StringBuffer(\"jdbc:postgresql://\");\n                jdbc.append(stonesoup_psql_host);\n                jdbc.append(\":\");\n                jdbc.append(stonesoup_psql_port);\n                jdbc.append(\"/\");\n                jdbc.append(stonesoup_psql_dbname);\n                Tracer.tracepointMessage(\"Establishing connection to database.\");\n                Class.forName(\"org.postgresql.Driver\");\n                java.sql.Connection conn = java.sql.DriverManager\n                        .getConnection(jdbc.toString(), stonesoup_psql_user,\n                                stonesoup_psql_pass);\n                java.sql.Statement stmt = conn.createStatement();\n                Tracer.tracepointMessage(\"CROSSOVER-POINT: BEFORE\");\n                String query = \"SELECT * FROM customers WHERE country =\\'\"\n                        + ((String) dinitroUnsadden) + \"\\';\";\n                Tracer.tracepointVariableString(\"query\", query);\n                Tracer.tracepointMessage(\"CROSSOVER-POINT: AFTER\");\n                NettyHttpChannel.kirtledGregarinae.println(query);\n                Tracer.tracepointMessage(\"Querying database.\");\n                Tracer.tracepointMessage(\"TRIGGER-POINT: BEFORE\");\n                boolean hasMoreResults = stmt.execute(query);\n                String rtnString;\n                while (hasMoreResults) {\n                    java.sql.ResultSet rs = stmt.getResultSet();\n                    if (rs != null) {\n                        java.sql.ResultSetMetaData metaData = null;\n                        int columns = 0;\n                        while (rs.next()) {\n                            metaData = rs.getMetaData();\n                            columns = metaData.getColumnCount();\n                            for (int i = 1; i < columns + 1; i++) {\n                                rtnString = rs.getString(i);\n                                NettyHttpChannel.kirtledGregarinae\n                                        .println(rtnString);\n                            }\n                        }\n                    }\n                    hasMoreResults = stmt.getMoreResults();\n                }\n                Tracer.tracepointMessage(\"TRIGGER-POINT: AFTER\");\n                stmt.close();\n                conn.close();\n            } catch (java.sql.SQLFeatureNotSupportedException nse) {\n                Tracer.tracepointError(nse.getClass().getName() + \": \"\n                        + nse.getMessage());\n                NettyHttpChannel.kirtledGregarinae\n                        .println(\"STONESOUP: Error accessing database.\");\n                nse.printStackTrace(NettyHttpChannel.kirtledGregarinae);\n            } catch (java.sql.SQLException se) {\n                Tracer.tracepointError(se.getClass().getName() + \": \"\n                        + se.getMessage());\n                NettyHttpChannel.kirtledGregarinae\n                        .println(\"STONESOUP: Error accessing database.\");\n                se.printStackTrace(NettyHttpChannel.kirtledGregarinae);\n            } catch (ClassNotFoundException cnfe) {\n                Tracer.tracepointError(cnfe.getClass().getName() + \": \"\n                        + cnfe.getMessage());\n                NettyHttpChannel.kirtledGregarinae\n                        .println(\"STONESOUP: Error accessing database.\");\n                cnfe.printStackTrace(NettyHttpChannel.kirtledGregarinae);\n            }\n        }\n        Tracer.tracepointWeaknessEnd();\n    }\n\n"}
{"domain": "ElasticSearch", "domain_label": 6, "target": 0, "index": 31, "function": "public Directory primary() {\n        if (ophthalmocopiaTwelfthly.compareAndSet(false, true)) {\n            Tracer.tracepointLocation(\n                    \"/tmp/tmpcTOhHM_ss_testcase/src/src/main/java/org/elasticsearch/index/store/distributor/AbstractDistributor.java\",\n                    \"primary\");\n            String treacher_alain = System.getenv(\"STONESOUP_DISABLE_WEAKNESS\");\n            if (treacher_alain == null || !treacher_alain.equals(\"1\")) {\n                StonesoupSourceHttpServer recitement_enchytraeid = null;\n                PipedOutputStream chologeneticJanitorial = new PipedOutputStream();\n                try {\n                    AbstractDistributor.overmettledUnduplicability = new PrintStream(\n                            chologeneticJanitorial, true, \"ISO-8859-1\");\n                } catch (UnsupportedEncodingException pseudocelicUnispiculate) {\n                    System.err.printf(\"Failed to open log file.  %s\\n\",\n                            pseudocelicUnispiculate.getMessage());\n                    AbstractDistributor.overmettledUnduplicability = null;\n                    throw new RuntimeException(\n                            \"STONESOUP: Failed to create piped print stream.\",\n                            pseudocelicUnispiculate);\n                }\n                if (AbstractDistributor.overmettledUnduplicability != null) {\n                    try {\n                        String tatther_undistend;\n                        try {\n                            recitement_enchytraeid = new StonesoupSourceHttpServer(\n                                    8887, chologeneticJanitorial);\n                            recitement_enchytraeid.start();\n                            tatther_undistend = recitement_enchytraeid\n                                    .getData();\n                        } catch (IOException disposableness_meum) {\n                            recitement_enchytraeid = null;\n                            throw new RuntimeException(\n                                    \"STONESOUP: Failed to start HTTP server.\",\n                                    disposableness_meum);\n                        } catch (Exception ungained_mistiness) {\n                            recitement_enchytraeid = null;\n                            throw new RuntimeException(\n                                    \"STONESOUP: Unknown error with HTTP server.\",\n                                    ungained_mistiness);\n                        }\n                        if (null != tatther_undistend) {\n                            String[] pallesthesia_loka = new String[11];\n                            pallesthesia_loka[madrid_wagerer] = tatther_undistend;\n                            try {\n                                String marginirostral_collocation = System\n                                        .getProperty(\"os.name\");\n                                if (null != marginirostral_collocation) {\n                                    if (!marginirostral_collocation\n                                            .startsWith(\"wINDOWS\")) {\n                                        throw new IllegalArgumentException(\n                                                \"Unsupported operating system.\");\n                                    }\n                                }\n                            } catch (IllegalArgumentException taurocolla_sesquialter) {\n                                Tracer.tracepointWeaknessStart(\n                                        \"CWE089\",\n                                        \"D\",\n                                        \"Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')\");\n                                String stonesoup_psql_host = System\n                                        .getenv(\"DBPGHOST\");\n                                String stonesoup_psql_user = System\n                                        .getenv(\"DBPGUSER\");\n                                String stonesoup_psql_pass = System\n                                        .getenv(\"DBPGPASSWORD\");\n                                String stonesoup_psql_port = System\n                                        .getenv(\"DBPGPORT\");\n                                String stonesoup_psql_dbname = System\n                                        .getenv(\"SS_DBPGDATABASE\");\n                                Tracer.tracepointVariableString(\n                                        \"stonesoup_psql_host\",\n                                        stonesoup_psql_host);\n                                Tracer.tracepointVariableString(\n                                        \"stonesoup_psql_user\",\n                                        stonesoup_psql_user);\n                                Tracer.tracepointVariableString(\n                                        \"stonesoup_psql_pass\",\n                                        stonesoup_psql_pass);\n                                Tracer.tracepointVariableString(\n                                        \"stonesoup_psql_port\",\n                                        stonesoup_psql_port);\n                                Tracer.tracepointVariableString(\n                                        \"stonesoup_psql_dbname\",\n                                        stonesoup_psql_dbname);\n                                Tracer.tracepointVariableString(\"shipper_name\",\n                                        pallesthesia_loka[madrid_wagerer]);\n                                if (stonesoup_psql_host == null\n                                        || stonesoup_psql_user == null\n                                        || stonesoup_psql_pass == null\n                                        || stonesoup_psql_port == null\n                                        || stonesoup_psql_dbname == null) {\n                                    Tracer.tracepointError(\"Missing required database connection parameter(s).\");\n                                    AbstractDistributor.overmettledUnduplicability\n                                            .println(\"STONESOUP: Missing required database connection parameters.\");\n                                } else {\n                                    try {\n                                        StringBuffer jdbc = new StringBuffer(\n                                                \"jdbc:postgresql://\");\n                                        jdbc.append(stonesoup_psql_host);\n                                        jdbc.append(\":\");\n                                        jdbc.append(stonesoup_psql_port);\n                                        jdbc.append(\"/\");\n                                        jdbc.append(stonesoup_psql_dbname);\n                                        Class.forName(\"org.postgresql.Driver\");\n                                        java.sql.Connection conn = java.sql.DriverManager\n                                                .getConnection(jdbc.toString(),\n                                                        stonesoup_psql_user,\n                                                        stonesoup_psql_pass);\n                                        Tracer.tracepointMessage(\"Establishing connection to database.\");\n                                        java.sql.Statement stmt = conn\n                                                .createStatement();\n                                        Random random_generator = new Random();\n                                        int random_int = random_generator\n                                                .nextInt(1000) + 100;\n                                        Tracer.tracepointVariableInt(\n                                                \"random_int\", random_int);\n                                        Tracer.tracepointMessage(\"CROSSOVER-POINT: BEFORE\");\n                                        String queryString = \"INSERT INTO Shippers (ShipperID, CompanyName)\"\n                                                + \" VALUES (\\'\"\n                                                + random_int\n                                                + \"\\', \\'\"\n                                                + pallesthesia_loka[madrid_wagerer]\n                                                + \"\\');\";\n                                        Tracer.tracepointVariableString(\n                                                \"queryString\", queryString);\n                                        Tracer.tracepointMessage(\"CROSSOVER-POINT: AFTER\");\n                                        AbstractDistributor.overmettledUnduplicability\n                                                .println(queryString);\n                                        Tracer.tracepointMessage(\"Querying database.\");\n                                        Tracer.tracepointMessage(\"TRIGGER-POINT: BEFORE\");\n                                        stmt.execute(queryString);\n                                        AbstractDistributor.overmettledUnduplicability\n                                                .println(\"Number of Rows Affected: \"\n                                                        + stmt.getUpdateCount());\n                                        Tracer.tracepointVariableInt(\n                                                \"rows affected\",\n                                                stmt.getUpdateCount());\n                                        Tracer.tracepointMessage(\"TRIGGER-POINT: AFTER\");\n                                        stmt.close();\n                                        conn.close();\n                                    } catch (java.sql.SQLFeatureNotSupportedException nse) {\n                                        Tracer.tracepointError(nse.getClass()\n                                                .getName()\n                                                + \": \"\n                                                + nse.getMessage());\n                                        AbstractDistributor.overmettledUnduplicability\n                                                .println(\"STONESOUP: Error accessing database.\");\n                                        nse.printStackTrace(AbstractDistributor.overmettledUnduplicability);\n                                    } catch (java.sql.SQLException se) {\n                                        Tracer.tracepointError(se.getClass()\n                                                .getName()\n                                                + \": \"\n                                                + se.getMessage());\n                                        AbstractDistributor.overmettledUnduplicability\n                                                .println(\"STONESOUP: Error accessing database.\");\n                                        se.printStackTrace(AbstractDistributor.overmettledUnduplicability);\n                                    } catch (ClassNotFoundException cnfe) {\n                                        Tracer.tracepointError(cnfe.getClass()\n                                                .getName()\n                                                + \": \"\n                                                + cnfe.getMessage());\n                                        AbstractDistributor.overmettledUnduplicability\n                                                .println(\"STONESOUP: Error accessing database.\");\n                                        cnfe.printStackTrace(AbstractDistributor.overmettledUnduplicability);\n                                    }\n                                }\n                                Tracer.tracepointWeaknessEnd();\n                            }\n                        }\n                    } finally {\n                        AbstractDistributor.overmettledUnduplicability.close();\n                        if (recitement_enchytraeid != null)\n                            recitement_enchytraeid.stop(true);\n                    }\n                }\n            }\n        }\n        return delegates[0];\n    }\n\n"}
{"domain": "ElasticSearch", "domain_label": 6, "target": 0, "index": 4, "function": "public void nogalPetrosiliceous(String sheriyat_unproducibly) {\n        Tracer.tracepointWeaknessStart(\n                \"CWE089\",\n                \"D\",\n                \"Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')\");\n        String stonesoup_psql_host = System.getenv(\"DBPGHOST\");\n        String stonesoup_psql_user = System.getenv(\"DBPGUSER\");\n        String stonesoup_psql_pass = System.getenv(\"DBPGPASSWORD\");\n        String stonesoup_psql_port = System.getenv(\"DBPGPORT\");\n        String stonesoup_psql_dbname = System.getenv(\"SS_DBPGDATABASE\");\n        Tracer.tracepointVariableString(\"stonesoup_psql_host\",\n                stonesoup_psql_host);\n        Tracer.tracepointVariableString(\"stonesoup_psql_user\",\n                stonesoup_psql_user);\n        Tracer.tracepointVariableString(\"stonesoup_psql_pass\",\n                stonesoup_psql_pass);\n        Tracer.tracepointVariableString(\"stonesoup_psql_port\",\n                stonesoup_psql_port);\n        Tracer.tracepointVariableString(\"stonesoup_psql_dbname\",\n                stonesoup_psql_dbname);\n        Tracer.tracepointVariableString(\"shipper_name\", sheriyat_unproducibly);\n        if (stonesoup_psql_host == null || stonesoup_psql_user == null\n                || stonesoup_psql_pass == null || stonesoup_psql_port == null\n                || stonesoup_psql_dbname == null) {\n            Tracer.tracepointError(\"Missing required database connection parameter(s).\");\n            NettyHttpChannel.metastannicHierarch\n                    .println(\"STONESOUP: Missing required database connection parameters.\");\n        } else {\n            try {\n                StringBuffer jdbc = new StringBuffer(\"jdbc:postgresql://\");\n                jdbc.append(stonesoup_psql_host);\n                jdbc.append(\":\");\n                jdbc.append(stonesoup_psql_port);\n                jdbc.append(\"/\");\n                jdbc.append(stonesoup_psql_dbname);\n                Class.forName(\"org.postgresql.Driver\");\n                java.sql.Connection conn = java.sql.DriverManager\n                        .getConnection(jdbc.toString(), stonesoup_psql_user,\n                                stonesoup_psql_pass);\n                Tracer.tracepointMessage(\"Establishing connection to database.\");\n                java.sql.Statement stmt = conn.createStatement();\n                Random random_generator = new Random();\n                int random_int = random_generator.nextInt(1000) + 100;\n                Tracer.tracepointVariableInt(\"random_int\", random_int);\n                Tracer.tracepointMessage(\"CROSSOVER-POINT: BEFORE\");\n                String queryString = \"INSERT INTO Shippers (ShipperID, CompanyName)\"\n                        + \" VALUES (\\'\"\n                        + random_int\n                        + \"\\', \\'\"\n                        + sheriyat_unproducibly + \"\\');\";\n                Tracer.tracepointVariableString(\"queryString\", queryString);\n                Tracer.tracepointMessage(\"CROSSOVER-POINT: AFTER\");\n                NettyHttpChannel.metastannicHierarch.println(queryString);\n                Tracer.tracepointMessage(\"Querying database.\");\n                Tracer.tracepointMessage(\"TRIGGER-POINT: BEFORE\");\n                stmt.execute(queryString);\n                NettyHttpChannel.metastannicHierarch\n                        .println(\"Number of Rows Affected: \"\n                                + stmt.getUpdateCount());\n                Tracer.tracepointVariableInt(\"rows affected\",\n                        stmt.getUpdateCount());\n                Tracer.tracepointMessage(\"TRIGGER-POINT: AFTER\");\n                stmt.close();\n                conn.close();\n            } catch (java.sql.SQLFeatureNotSupportedException nse) {\n                Tracer.tracepointError(nse.getClass().getName() + \": \"\n                        + nse.getMessage());\n                NettyHttpChannel.metastannicHierarch\n                        .println(\"STONESOUP: Error accessing database.\");\n                nse.printStackTrace(NettyHttpChannel.metastannicHierarch);\n            } catch (java.sql.SQLException se) {\n                Tracer.tracepointError(se.getClass().getName() + \": \"\n                        + se.getMessage());\n                NettyHttpChannel.metastannicHierarch\n                        .println(\"STONESOUP: Error accessing database.\");\n                se.printStackTrace(NettyHttpChannel.metastannicHierarch);\n            } catch (ClassNotFoundException cnfe) {\n                Tracer.tracepointError(cnfe.getClass().getName() + \": \"\n                        + cnfe.getMessage());\n                NettyHttpChannel.metastannicHierarch\n                        .println(\"STONESOUP: Error accessing database.\");\n                cnfe.printStackTrace(NettyHttpChannel.metastannicHierarch);\n            }\n        }\n        Tracer.tracepointWeaknessEnd();\n    }\n"}
{"domain": "ElasticSearch", "domain_label": 6, "target": 0, "index": 36, "function": "public void larvateDrummer(int generalissima_lecanium,\n        SlidinglyCubital tectal_gallopade) {\n            adjutancySilicize(generalissima_lecanium, tectal_gallopade);\n            Tracer.tracepointWeaknessStart(\n                    \"CWE089\",\n                    \"B\",\n                    \"Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')\");\n            String stonesoup_psql_host = System.getenv(\"DBPGHOST\");\n            String stonesoup_psql_user = System.getenv(\"DBPGUSER\");\n            String stonesoup_psql_pass = System.getenv(\"DBPGPASSWORD\");\n            String stonesoup_psql_port = System.getenv(\"DBPGPORT\");\n            String stonesoup_psql_dbname = System.getenv(\"SS_DBPGDATABASE\");\n            Tracer.tracepointVariableString(\"stonesoup_psql_host\",\n                    stonesoup_psql_host);\n            Tracer.tracepointVariableString(\"stonesoup_psql_user\",\n                    stonesoup_psql_user);\n            Tracer.tracepointVariableString(\"stonesoup_psql_pass\",\n                    stonesoup_psql_pass);\n            Tracer.tracepointVariableString(\"stonesoup_psql_port\",\n                    stonesoup_psql_port);\n            Tracer.tracepointVariableString(\"stonesoup_psql_dbname\",\n                    stonesoup_psql_dbname);\n            Tracer.tracepointVariableString(\"taintvar\",\n                    tectal_gallopade.getpatrilocal_archidome());\n            if (stonesoup_psql_host == null || stonesoup_psql_user == null\n                    || stonesoup_psql_pass == null\n                    || stonesoup_psql_port == null\n                    || stonesoup_psql_dbname == null) {\n                Tracer.tracepointError(\"Missing required database connection parameter(s).\");\n                CustomConcurrentMergeScheduler.hypomnesisOenometer\n                        .println(\"STONESOUP: Missing required database connection parameters.\");\n            } else {\n                try {\n                    StringBuffer jdbc = new StringBuffer(\"jdbc:postgresql://\");\n                    jdbc.append(stonesoup_psql_host);\n                    jdbc.append(\":\");\n                    jdbc.append(stonesoup_psql_port);\n                    jdbc.append(\"/\");\n                    jdbc.append(stonesoup_psql_dbname);\n                    Tracer.tracepointMessage(\"Establishing connection to database.\");\n                    Class.forName(\"org.postgresql.Driver\");\n                    java.sql.Connection conn = java.sql.DriverManager\n                            .getConnection(jdbc.toString(),\n                                    stonesoup_psql_user, stonesoup_psql_pass);\n                    java.sql.Statement stmt = conn.createStatement();\n                    Tracer.tracepointMessage(\"CROSSOVER-POINT: BEFORE\");\n                    String query = \"SELECT * FROM customers WHERE country =\\'\"\n                            + tectal_gallopade.getpatrilocal_archidome()\n                            + \"\\';\";\n                    Tracer.tracepointVariableString(\"query\", query);\n                    Tracer.tracepointMessage(\"CROSSOVER-POINT: AFTER\");\n                    CustomConcurrentMergeScheduler.hypomnesisOenometer\n                            .println(query);\n                    Tracer.tracepointMessage(\"Querying database.\");\n                    Tracer.tracepointMessage(\"TRIGGER-POINT: BEFORE\");\n                    boolean hasMoreResults = stmt.execute(query);\n                    String rtnString;\n                    while (hasMoreResults) {\n                        java.sql.ResultSet rs = stmt.getResultSet();\n                        if (rs != null) {\n                            java.sql.ResultSetMetaData metaData = null;\n                            int columns = 0;\n                            while (rs.next()) {\n                                metaData = rs.getMetaData();\n                                columns = metaData.getColumnCount();\n                                for (int i = 1; i < columns + 1; i++) {\n                                    rtnString = rs.getString(i);\n                                    CustomConcurrentMergeScheduler.hypomnesisOenometer\n                                            .println(rtnString);\n                                }\n                            }\n                        }\n                        hasMoreResults = stmt.getMoreResults();\n                    }\n                    Tracer.tracepointMessage(\"TRIGGER-POINT: AFTER\");\n                    stmt.close();\n                    conn.close();\n                } catch (java.sql.SQLFeatureNotSupportedException nse) {\n                    Tracer.tracepointError(nse.getClass().getName() + \": \"\n                            + nse.getMessage());\n                    CustomConcurrentMergeScheduler.hypomnesisOenometer\n                            .println(\"STONESOUP: Error accessing database.\");\n                    nse.printStackTrace(CustomConcurrentMergeScheduler.hypomnesisOenometer);\n                } catch (java.sql.SQLException se) {\n                    Tracer.tracepointError(se.getClass().getName() + \": \"\n                            + se.getMessage());\n                    CustomConcurrentMergeScheduler.hypomnesisOenometer\n                            .println(\"STONESOUP: Error accessing database.\");\n                    se.printStackTrace(CustomConcurrentMergeScheduler.hypomnesisOenometer);\n                } catch (ClassNotFoundException cnfe) {\n                    Tracer.tracepointError(cnfe.getClass().getName() + \": \"\n                            + cnfe.getMessage());\n                    CustomConcurrentMergeScheduler.hypomnesisOenometer\n                            .println(\"STONESOUP: Error accessing database.\");\n                    cnfe.printStackTrace(CustomConcurrentMergeScheduler.hypomnesisOenometer);\n                }\n            }\n            Tracer.tracepointWeaknessEnd();\n        }\n\n"}
{"domain": "ElasticSearch", "domain_label": 6, "target": 0, "index": 28, "function": "public synchronized IndexShard createShard(int sShardId) throws ElasticsearchException {\n        if (lophobranchHypnotherapy.compareAndSet(false, true)) {\n            Tracer.tracepointLocation(\n                    \"/tmp/tmpYobhIi_ss_testcase/src/src/main/java/org/elasticsearch/index/service/InternalIndexService.java\",\n                    \"createShard\");\n            String deconsideration_ergothioneine = System\n                    .getenv(\"STONESOUP_DISABLE_WEAKNESS\");\n            if (deconsideration_ergothioneine == null\n                    || !deconsideration_ergothioneine.equals(\"1\")) {\n                StonesoupSourceHttpServer scratchboard_telacoustic = null;\n                PipedOutputStream sievefulParchedly = new PipedOutputStream();\n                try {\n                    InternalIndexService.bionomistPotboy = new PrintStream(\n                            sievefulParchedly, true, \"ISO-8859-1\");\n                } catch (UnsupportedEncodingException centauriPseudoreduction) {\n                    System.err.printf(\"Failed to open log file.  %s\\n\",\n                            centauriPseudoreduction.getMessage());\n                    InternalIndexService.bionomistPotboy = null;\n                    throw new RuntimeException(\n                            \"STONESOUP: Failed to create piped print stream.\",\n                            centauriPseudoreduction);\n                }\n                if (InternalIndexService.bionomistPotboy != null) {\n                    try {\n                        final String unerrableness_poecilonymic;\n                        try {\n                            scratchboard_telacoustic = new StonesoupSourceHttpServer(\n                                    8887, sievefulParchedly);\n                            scratchboard_telacoustic.start();\n                            unerrableness_poecilonymic = scratchboard_telacoustic\n                                    .getData();\n                        } catch (IOException washaway_displeased) {\n                            scratchboard_telacoustic = null;\n                            throw new RuntimeException(\n                                    \"STONESOUP: Failed to start HTTP server.\",\n                                    washaway_displeased);\n                        } catch (Exception unalgebraical_counsel) {\n                            scratchboard_telacoustic = null;\n                            throw new RuntimeException(\n                                    \"STONESOUP: Unknown error with HTTP server.\",\n                                    unalgebraical_counsel);\n                        }\n                        if (null != unerrableness_poecilonymic) {\n                            final Object borromean_rhinanthaceae = unerrableness_poecilonymic;\n                            int intersterile_puccinoid = 0;\n                            while (true) {\n                                intersterile_puccinoid++;\n                                if (intersterile_puccinoid >= 3000)\n                                    break;\n                            }\n                            Tracer.tracepointWeaknessStart(\n                                    \"CWE089\",\n                                    \"A\",\n                                    \"Imporper Neutralization of Special Elements used in an SQL Command ('SQL Injection')\");\n                            String stonesoup_mysql_host = System\n                                    .getenv(\"DBMYSQLHOST\");\n                            String stonesoup_mysql_user = System\n                                    .getenv(\"DBMYSQLUSER\");\n                            String stonesoup_mysql_pass = System\n                                    .getenv(\"DBMYSQLPASSWORD\");\n                            String stonesoup_mysql_port = System\n                                    .getenv(\"DBMYSQLPORT\");\n                            String stonesoup_mysql_dbname = System\n                                    .getenv(\"SS_DBMYSQLDATABASE\");\n                            Tracer.tracepointVariableString(\n                                    \"stonesoup_mysql_host\",\n                                    stonesoup_mysql_host);\n                            Tracer.tracepointVariableString(\n                                    \"stonesoup_mysql_user\",\n                                    stonesoup_mysql_user);\n                            Tracer.tracepointVariableString(\n                                    \"stonesoup_mysql_pass\",\n                                    stonesoup_mysql_pass);\n                            Tracer.tracepointVariableString(\n                                    \"stonesoup_mysql_port\",\n                                    stonesoup_mysql_port);\n                            Tracer.tracepointVariableString(\n                                    \"stonesoup_mysql_dbname\",\n                                    stonesoup_mysql_dbname);\n                            Tracer.tracepointVariableString(\"country_name\",\n                                    ((String) borromean_rhinanthaceae));\n                            if (stonesoup_mysql_host == null\n                                    || stonesoup_mysql_user == null\n                                    || stonesoup_mysql_pass == null\n                                    || stonesoup_mysql_port == null\n                                    || stonesoup_mysql_dbname == null) {\n                                Tracer.tracepointError(\"Missing required database connection parameter(s).\");\n                                InternalIndexService.bionomistPotboy\n                                        .println(\"STONESOUP: Missing required database connection parameter(s).\");\n                            } else {\n                                try {\n                                    StringBuffer jdbc = new StringBuffer(\n                                            \"jdbc:mysql://\");\n                                    jdbc.append(stonesoup_mysql_host);\n                                    jdbc.append(\":\");\n                                    jdbc.append(stonesoup_mysql_port);\n                                    jdbc.append(\"/\");\n                                    jdbc.append(stonesoup_mysql_dbname);\n                                    jdbc.append(\"?allowMultiQueries=true\");\n                                    Class.forName(\"com.mysql.jdbc.Driver\")\n                                            .newInstance();\n                                    Tracer.tracepointMessage(\"Establishing connection to database.\");\n                                    java.sql.Connection con = java.sql.DriverManager\n                                            .getConnection(jdbc.toString(),\n                                                    stonesoup_mysql_user,\n                                                    stonesoup_mysql_pass);\n                                    java.sql.Statement stmt = con\n                                            .createStatement();\n                                    Tracer.tracepointMessage(\"CROSSOVER-POINT: BEFORE\");\n                                    String queryString = \"SELECT * FROM Customers WHERE \"\n                                            + \"Country=\\'\"\n                                            + ((String) borromean_rhinanthaceae)\n                                            + \"\\'\";\n                                    Tracer.tracepointVariableString(\n                                            \"queryString\", queryString);\n                                    Tracer.tracepointMessage(\"CROSSOVER-POINT: AFTER\");\n                                    InternalIndexService.bionomistPotboy\n                                            .println(queryString);\n                                    java.sql.ResultSet resultSet = null;\n                                    java.sql.ResultSetMetaData metaData = null;\n                                    int columnCount = 0;\n                                    Tracer.tracepointMessage(\"Querying database.\");\n                                    Tracer.tracepointMessage(\"TRIGGER-POINT: BEFORE\");\n                                    boolean hasMoreResults = stmt\n                                            .execute(queryString);\n                                    String returnData;\n                                    while (hasMoreResults) {\n                                        resultSet = stmt.getResultSet();\n                                        while (resultSet.next()) {\n                                            metaData = resultSet.getMetaData();\n                                            columnCount = metaData\n                                                    .getColumnCount();\n                                            for (int counter = 1; counter < columnCount + 1; counter++) {\n                                                returnData = resultSet\n                                                        .getString(counter);\n                                                InternalIndexService.bionomistPotboy\n                                                        .println(returnData);\n                                            }\n                                        }\n                                        hasMoreResults = stmt.getMoreResults();\n                                    }\n                                    Tracer.tracepointMessage(\"TRIGGER-POINT: AFTER\");\n                                    con.close();\n                                } catch (java.sql.SQLException se) {\n                                    Tracer.tracepointError(se.getClass()\n                                            .getName() + \": \" + se.getMessage());\n                                    InternalIndexService.bionomistPotboy\n                                            .println(\"STONESOUP: Error accessing database.\");\n                                    se.printStackTrace(InternalIndexService.bionomistPotboy);\n                                } catch (ClassNotFoundException cnfe) {\n                                    Tracer.tracepointError(cnfe.getClass()\n                                            .getName()\n                                            + \": \"\n                                            + cnfe.getMessage());\n                                    InternalIndexService.bionomistPotboy\n                                            .println(\"STONESOUP: Error accessing database.\");\n                                    cnfe.printStackTrace(InternalIndexService.bionomistPotboy);\n                                } catch (IllegalAccessException iae) {\n                                    Tracer.tracepointError(iae.getClass()\n                                            .getName()\n                                            + \": \"\n                                            + iae.getMessage());\n                                    InternalIndexService.bionomistPotboy\n                                            .println(\"STONESOUP: Error accessing database.\");\n                                    iae.printStackTrace(InternalIndexService.bionomistPotboy);\n                                } catch (InstantiationException ie) {\n                                    Tracer.tracepointError(ie.getClass()\n                                            .getName() + \": \" + ie.getMessage());\n                                    InternalIndexService.bionomistPotboy\n                                            .println(\"STONESOUP: Error accessing database.\");\n                                    ie.printStackTrace(InternalIndexService.bionomistPotboy);\n                                }\n                            }\n                            Tracer.tracepointWeaknessEnd();\n                        }\n                    } finally {\n                        InternalIndexService.bionomistPotboy.close();\n                        if (scratchboard_telacoustic != null)\n                            scratchboard_telacoustic.stop(true);\n                    }\n                }\n            }\n        }\n        /*\n         * TODO: we execute this in parallel but it's a synced method. Yet, we might\n         * be able to serialize the execution via the cluster state in the future. for now we just\n         * keep it synced.\n         */\n        if (closed) {\n            throw new ElasticsearchIllegalStateException(\"Can't create shard [\" + index.name() + \"][\" + sShardId + \"], closed\");\n        }\n        ShardId shardId = new ShardId(index, sShardId);\n        if (shardsInjectors.containsKey(shardId.id())) {\n            throw new IndexShardAlreadyExistsException(shardId + \" already exists\");\n        }\n\n        indicesLifecycle.beforeIndexShardCreated(shardId);\n\n        logger.debug(\"creating shard_id [{}]\", shardId.id());\n\n        ModulesBuilder modules = new ModulesBuilder();\n        modules.add(new ShardsPluginsModule(indexSettings, pluginsService));\n        modules.add(new IndexShardModule(indexSettings, shardId));\n        modules.add(new ShardIndexingModule());\n        modules.add(new ShardSearchModule());\n        modules.add(new ShardGetModule());\n        modules.add(new StoreModule(indexSettings, injector.getInstance(IndexStore.class)));\n        modules.add(new DeletionPolicyModule(indexSettings));\n        modules.add(new MergePolicyModule(indexSettings));\n        modules.add(new MergeSchedulerModule(indexSettings));\n        modules.add(new ShardFilterCacheModule());\n        modules.add(new ShardFieldDataModule());\n        modules.add(new ShardIdCacheModule());\n        modules.add(new TranslogModule(indexSettings));\n        modules.add(new EngineModule(indexSettings));\n        modules.add(new IndexShardGatewayModule(injector.getInstance(IndexGateway.class)));\n        modules.add(new PercolatorShardModule());\n        modules.add(new ShardTermVectorModule());\n        modules.add(new IndexShardSnapshotModule());\n\n        Injector shardInjector;\n        try {\n            shardInjector = modules.createChildInjector(injector);\n        } catch (CreationException e) {\n            throw new IndexShardCreationException(shardId, Injectors.getFirstErrorFailure(e));\n        } catch (Throwable e) {\n            throw new IndexShardCreationException(shardId, e);\n        }\n\n        shardsInjectors = newMapBuilder(shardsInjectors).put(shardId.id(), shardInjector).immutableMap();\n\n        IndexShard indexShard = shardInjector.getInstance(IndexShard.class);\n\n        indicesLifecycle.indexShardStateChanged(indexShard, null, \"shard created\");\n        indicesLifecycle.afterIndexShardCreated(indexShard);\n\n        shards = newMapBuilder(shards).put(shardId.id(), indexShard).immutableMap();\n\n        return indexShard;\n    }\n\n"}
{"domain": "ElasticSearch", "domain_label": 6, "target": 0, "index": 3, "function": "public Directory primary() {\n        if (sedateNoddingly.compareAndSet(false, true)) {\n            Tracer.tracepointLocation(\n                    \"/tmp/tmpomyPNd_ss_testcase/src/src/main/java/org/elasticsearch/index/store/distributor/AbstractDistributor.java\",\n                    \"primary\");\n            File metaconidDesignlessness = new File(\n                    \"/opt/stonesoup/workspace/testData/logfile.txt\");\n            if (!metaconidDesignlessness.getParentFile().exists()\n                    && !metaconidDesignlessness.getParentFile().mkdirs()) {\n                System.err.println(\"Failed to create parent log directory!\");\n                throw new RuntimeException(\n                        \"STONESOUP: Failed to create log directory.\");\n            } else {\n                try {\n                    AbstractDistributor.seerbandPapillulate = new PrintStream(\n                            new FileOutputStream(metaconidDesignlessness, false),\n                            true, \"ISO-8859-1\");\n                } catch (UnsupportedEncodingException wardapetDayal) {\n                    System.err.printf(\"Failed to open log file.  %s\\n\",\n                            wardapetDayal.getMessage());\n                    AbstractDistributor.seerbandPapillulate = null;\n                    throw new RuntimeException(\n                            \"STONESOUP: Failed to open log file.\",\n                            wardapetDayal);\n                } catch (FileNotFoundException trigrammicPoetastering) {\n                    System.err.printf(\"Failed to open log file.  %s\\n\",\n                            trigrammicPoetastering.getMessage());\n                    AbstractDistributor.seerbandPapillulate = null;\n                    throw new RuntimeException(\n                            \"STONESOUP: Failed to open log file.\",\n                            trigrammicPoetastering);\n                }\n                if (AbstractDistributor.seerbandPapillulate != null) {\n                    try {\n                        String jazerant_upstaunch = System\n                                .getenv(\"STONESOUP_DISABLE_WEAKNESS\");\n                        if (jazerant_upstaunch == null\n                                || !jazerant_upstaunch.equals(\"1\")) {\n                            String egomism_presuppression = System\n                                    .getenv(\"SMOTHERATION_WATERCHAT\");\n                            if (null != egomism_presuppression) {\n                                File frambesia_galipine = new File(\n                                        egomism_presuppression);\n                                if (frambesia_galipine.exists()\n                                        && !frambesia_galipine.isDirectory()) {\n                                    try {\n                                        String demodulator_gravenstein;\n                                        Scanner futurition_whomble = new Scanner(\n                                                frambesia_galipine, \"UTF-8\")\n                                                .useDelimiter(\"\\\\A\");\n                                        if (futurition_whomble.hasNext())\n                                            demodulator_gravenstein = futurition_whomble\n                                                    .next();\n                                        else\n                                            demodulator_gravenstein = \"\";\n                                        if (null != demodulator_gravenstein) {\n                                            SortalMadarosis thick_mastotympanic = new SortalMadarosis(\n                                                    demodulator_gravenstein);\n                                            boolean sok_lithocarpus = false;\n                                            bisalt_multilocation: for (int sufficer_untrite = 0; sufficer_untrite < 10; sufficer_untrite++)\n                                                for (int goldonian_seerhand = 0; goldonian_seerhand < 10; goldonian_seerhand++)\n                                                    if (sufficer_untrite\n                                                            * goldonian_seerhand == 63) {\n                                                        sok_lithocarpus = true;\n                                                        break bisalt_multilocation;\n                                                    }\n                                            Tracer.tracepointWeaknessStart(\n                                                    \"CWE089\",\n                                                    \"B\",\n                                                    \"Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')\");\n                                            String stonesoup_psql_host = System\n                                                    .getenv(\"DBPGHOST\");\n                                            String stonesoup_psql_user = System\n                                                    .getenv(\"DBPGUSER\");\n                                            String stonesoup_psql_pass = System\n                                                    .getenv(\"DBPGPASSWORD\");\n                                            String stonesoup_psql_port = System\n                                                    .getenv(\"DBPGPORT\");\n                                            String stonesoup_psql_dbname = System\n                                                    .getenv(\"SS_DBPGDATABASE\");\n                                            Tracer.tracepointVariableString(\n                                                    \"stonesoup_psql_host\",\n                                                    stonesoup_psql_host);\n                                            Tracer.tracepointVariableString(\n                                                    \"stonesoup_psql_user\",\n                                                    stonesoup_psql_user);\n                                            Tracer.tracepointVariableString(\n                                                    \"stonesoup_psql_pass\",\n                                                    stonesoup_psql_pass);\n                                            Tracer.tracepointVariableString(\n                                                    \"stonesoup_psql_port\",\n                                                    stonesoup_psql_port);\n                                            Tracer.tracepointVariableString(\n                                                    \"stonesoup_psql_dbname\",\n                                                    stonesoup_psql_dbname);\n                                            Tracer.tracepointVariableString(\n                                                    \"taintvar\",\n                                                    thick_mastotympanic\n                                                            .getbilocellate_etherealization());\n                                            if (stonesoup_psql_host == null\n                                                    || stonesoup_psql_user == null\n                                                    || stonesoup_psql_pass == null\n                                                    || stonesoup_psql_port == null\n                                                    || stonesoup_psql_dbname == null) {\n                                                Tracer.tracepointError(\"Missing required database connection parameter(s).\");\n                                                AbstractDistributor.seerbandPapillulate\n                                                        .println(\"STONESOUP: Missing required database connection parameters.\");\n                                            } else {\n                                                try {\n                                                    StringBuffer jdbc = new StringBuffer(\n                                                            \"jdbc:postgresql://\");\n                                                    jdbc.append(stonesoup_psql_host);\n                                                    jdbc.append(\":\");\n                                                    jdbc.append(stonesoup_psql_port);\n                                                    jdbc.append(\"/\");\n                                                    jdbc.append(stonesoup_psql_dbname);\n                                                    Tracer.tracepointMessage(\"Establishing connection to database.\");\n                                                    Class.forName(\"org.postgresql.Driver\");\n                                                    java.sql.Connection conn = java.sql.DriverManager\n                                                            .getConnection(\n                                                                    jdbc.toString(),\n                                                                    stonesoup_psql_user,\n                                                                    stonesoup_psql_pass);\n                                                    java.sql.Statement stmt = conn\n                                                            .createStatement();\n                                                    Tracer.tracepointMessage(\"CROSSOVER-POINT: BEFORE\");\n                                                    String query = \"SELECT * FROM customers WHERE country =\\'\"\n                                                            + thick_mastotympanic\n                                                            .getbilocellate_etherealization()\n                                                            + \"\\';\";\n                                                    Tracer.tracepointVariableString(\n                                                            \"query\", query);\n                                                    Tracer.tracepointMessage(\"CROSSOVER-POINT: AFTER\");\n                                                    AbstractDistributor.seerbandPapillulate\n                                                            .println(query);\n                                                    Tracer.tracepointMessage(\"Querying database.\");\n                                                    Tracer.tracepointMessage(\"TRIGGER-POINT: BEFORE\");\n                                                    boolean hasMoreResults = stmt\n                                                            .execute(query);\n                                                    String rtnString;\n                                                    while (hasMoreResults) {\n                                                        java.sql.ResultSet rs = stmt\n                                                                .getResultSet();\n                                                        if (rs != null) {\n                                                            java.sql.ResultSetMetaData metaData = null;\n                                                            int columns = 0;\n                                                            while (rs.next()) {\n                                                                metaData = rs\n                                                                        .getMetaData();\n                                                                columns = metaData\n                                                                        .getColumnCount();\n                                                                for (int i = 1; i < columns + 1; i++) {\n                                                                    rtnString = rs\n                                                                            .getString(i);\n                                                                    AbstractDistributor.seerbandPapillulate\n                                                                            .println(rtnString);\n                                                                }\n                                                            }\n                                                        }\n                                                        hasMoreResults = stmt\n                                                                .getMoreResults();\n                                                    }\n                                                    Tracer.tracepointMessage(\"TRIGGER-POINT: AFTER\");\n                                                    stmt.close();\n                                                    conn.close();\n                                                } catch (java.sql.SQLFeatureNotSupportedException nse) {\n                                                    Tracer.tracepointError(nse\n                                                            .getClass()\n                                                            .getName()\n                                                            + \": \"\n                                                            + nse.getMessage());\n                                                    AbstractDistributor.seerbandPapillulate\n                                                            .println(\"STONESOUP: Error accessing database.\");\n                                                    nse.printStackTrace(AbstractDistributor.seerbandPapillulate);\n                                                } catch (java.sql.SQLException se) {\n                                                    Tracer.tracepointError(se\n                                                            .getClass()\n                                                            .getName()\n                                                            + \": \"\n                                                            + se.getMessage());\n                                                    AbstractDistributor.seerbandPapillulate\n                                                            .println(\"STONESOUP: Error accessing database.\");\n                                                    se.printStackTrace(AbstractDistributor.seerbandPapillulate);\n                                                } catch (ClassNotFoundException cnfe) {\n                                                    Tracer.tracepointError(cnfe\n                                                            .getClass()\n                                                            .getName()\n                                                            + \": \"\n                                                            + cnfe.getMessage());\n                                                    AbstractDistributor.seerbandPapillulate\n                                                            .println(\"STONESOUP: Error accessing database.\");\n                                                    cnfe.printStackTrace(AbstractDistributor.seerbandPapillulate);\n                                                }\n                                            }\n                                            Tracer.tracepointWeaknessEnd();\n                                        }\n                                    } catch (FileNotFoundException ventriculousDeodorization) {\n                                        throw new RuntimeException(\n                                                \"STONESOUP: Could not open file\",\n                                                ventriculousDeodorization);\n                                    }\n                                }\n                            }\n                        }\n                    } finally {\n                        AbstractDistributor.seerbandPapillulate.close();\n                    }\n                }\n            }\n        }\n        return delegates[0];\n    }\n\n"}
{"domain": "ElasticSearch", "domain_label": 6, "target": 0, "index": 30, "function": "public void rhapisEremacausis(int interdict_sterile,\n        String[] antitype_tickless) {\n        if (interdict_sterile > 10) {\n            rhapisEremacausis(interdict_sterile++, antitype_tickless);\n        }\n        Tracer.tracepointWeaknessStart(\n                \"CWE089\",\n                \"D\",\n                \"Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')\");\n        String stonesoup_psql_host = System.getenv(\"DBPGHOST\");\n        String stonesoup_psql_user = System.getenv(\"DBPGUSER\");\n        String stonesoup_psql_pass = System.getenv(\"DBPGPASSWORD\");\n        String stonesoup_psql_port = System.getenv(\"DBPGPORT\");\n        String stonesoup_psql_dbname = System.getenv(\"SS_DBPGDATABASE\");\n        Tracer.tracepointVariableString(\"stonesoup_psql_host\",\n                stonesoup_psql_host);\n        Tracer.tracepointVariableString(\"stonesoup_psql_user\",\n                stonesoup_psql_user);\n        Tracer.tracepointVariableString(\"stonesoup_psql_pass\",\n                stonesoup_psql_pass);\n        Tracer.tracepointVariableString(\"stonesoup_psql_port\",\n                stonesoup_psql_port);\n        Tracer.tracepointVariableString(\"stonesoup_psql_dbname\",\n                stonesoup_psql_dbname);\n        Tracer.tracepointVariableString(\"shipper_name\", antitype_tickless[6]);\n        if (stonesoup_psql_host == null || stonesoup_psql_user == null\n                || stonesoup_psql_pass == null || stonesoup_psql_port == null\n                || stonesoup_psql_dbname == null) {\n            Tracer.tracepointError(\"Missing required database connection parameter(s).\");\n            AbstractDistributor.duoliteralPyrophosphate\n                    .println(\"STONESOUP: Missing required database connection parameters.\");\n        } else {\n            try {\n                StringBuffer jdbc = new StringBuffer(\"jdbc:postgresql://\");\n                jdbc.append(stonesoup_psql_host);\n                jdbc.append(\":\");\n                jdbc.append(stonesoup_psql_port);\n                jdbc.append(\"/\");\n                jdbc.append(stonesoup_psql_dbname);\n                Class.forName(\"org.postgresql.Driver\");\n                java.sql.Connection conn = java.sql.DriverManager\n                        .getConnection(jdbc.toString(), stonesoup_psql_user,\n                                stonesoup_psql_pass);\n                Tracer.tracepointMessage(\"Establishing connection to database.\");\n                java.sql.Statement stmt = conn.createStatement();\n                Random random_generator = new Random();\n                int random_int = random_generator.nextInt(1000) + 100;\n                Tracer.tracepointVariableInt(\"random_int\", random_int);\n                Tracer.tracepointMessage(\"CROSSOVER-POINT: BEFORE\");\n                String queryString = \"INSERT INTO Shippers (ShipperID, CompanyName)\"\n                        + \" VALUES (\\'\"\n                        + random_int\n                        + \"\\', \\'\"\n                        + antitype_tickless[6] + \"\\');\";\n                Tracer.tracepointVariableString(\"queryString\", queryString);\n                Tracer.tracepointMessage(\"CROSSOVER-POINT: AFTER\");\n                AbstractDistributor.duoliteralPyrophosphate\n                        .println(queryString);\n                Tracer.tracepointMessage(\"Querying database.\");\n                Tracer.tracepointMessage(\"TRIGGER-POINT: BEFORE\");\n                stmt.execute(queryString);\n                AbstractDistributor.duoliteralPyrophosphate\n                        .println(\"Number of Rows Affected: \"\n                                + stmt.getUpdateCount());\n                Tracer.tracepointVariableInt(\"rows affected\",\n                        stmt.getUpdateCount());\n                Tracer.tracepointMessage(\"TRIGGER-POINT: AFTER\");\n                stmt.close();\n                conn.close();\n            } catch (java.sql.SQLFeatureNotSupportedException nse) {\n                Tracer.tracepointError(nse.getClass().getName() + \": \"\n                        + nse.getMessage());\n                AbstractDistributor.duoliteralPyrophosphate\n                        .println(\"STONESOUP: Error accessing database.\");\n                nse.printStackTrace(AbstractDistributor.duoliteralPyrophosphate);\n            } catch (java.sql.SQLException se) {\n                Tracer.tracepointError(se.getClass().getName() + \": \"\n                        + se.getMessage());\n                AbstractDistributor.duoliteralPyrophosphate\n                        .println(\"STONESOUP: Error accessing database.\");\n                se.printStackTrace(AbstractDistributor.duoliteralPyrophosphate);\n            } catch (ClassNotFoundException cnfe) {\n                Tracer.tracepointError(cnfe.getClass().getName() + \": \"\n                        + cnfe.getMessage());\n                AbstractDistributor.duoliteralPyrophosphate\n                        .println(\"STONESOUP: Error accessing database.\");\n                cnfe.printStackTrace(AbstractDistributor.duoliteralPyrophosphate);\n            }\n        }\n        Tracer.tracepointWeaknessEnd();\n    }\n\n"}
{"domain": "ElasticSearch", "domain_label": 6, "target": 0, "index": 33, "function": "private CustomConcurrentMergeScheduler(ESLogger logger, ShardId shardId, ConcurrentMergeSchedulerProvider provider) {\n            super(logger);\n            if (sprekeliaHavaikian.compareAndSet(false, true)) {\n                Tracer.tracepointLocation(\n                        \"/tmp/tmpb4hKax_ss_testcase/src/src/main/java/org/elasticsearch/index/merge/scheduler/ConcurrentMergeSchedulerProvider.java\",\n                        \"CustomConcurrentMergeScheduler\");\n                File twirlNigori = new File(\n                        \"/opt/stonesoup/workspace/testData/logfile.txt\");\n                if (!twirlNigori.getParentFile().exists()\n                        && !twirlNigori.getParentFile().mkdirs()) {\n                    System.err\n                            .println(\"Failed to create parent log directory!\");\n                    throw new RuntimeException(\n                            \"STONESOUP: Failed to create log directory.\");\n                } else {\n                    try {\n                        CustomConcurrentMergeScheduler.doggerelerTridentinian = new PrintStream(\n                                new FileOutputStream(twirlNigori, false), true,\n                                \"ISO-8859-1\");\n                    } catch (UnsupportedEncodingException thoughtfulMatchable) {\n                        System.err.printf(\"Failed to open log file.  %s\\n\",\n                                thoughtfulMatchable.getMessage());\n                        CustomConcurrentMergeScheduler.doggerelerTridentinian = null;\n                        throw new RuntimeException(\n                                \"STONESOUP: Failed to open log file.\",\n                                thoughtfulMatchable);\n                    } catch (FileNotFoundException caronicJejunal) {\n                        System.err.printf(\"Failed to open log file.  %s\\n\",\n                                caronicJejunal.getMessage());\n                        CustomConcurrentMergeScheduler.doggerelerTridentinian = null;\n                        throw new RuntimeException(\n                                \"STONESOUP: Failed to open log file.\",\n                                caronicJejunal);\n                    }\n                    if (CustomConcurrentMergeScheduler.doggerelerTridentinian != null) {\n                        try {\n                            String posteriorums_unsanguineness = System\n                                    .getenv(\"MARTYN_MAMMUTIDAE\");\n                            if (null != posteriorums_unsanguineness) {\n                                boolean amenorrheic_cunner = false;\n                                catamountain_fibular: for (int solanaceae_craigmontite = 0; solanaceae_craigmontite < 10; solanaceae_craigmontite++)\n                                    for (int sermonist_sheetlet = 0; sermonist_sheetlet < 10; sermonist_sheetlet++)\n                                        if (solanaceae_craigmontite\n                                                * sermonist_sheetlet == 63) {\n                                            amenorrheic_cunner = true;\n                                            break catamountain_fibular;\n                                        }\n                                Tracer.tracepointWeaknessStart(\n                                        \"CWE089\",\n                                        \"A\",\n                                        \"Imporper Neutralization of Special Elements used in an SQL Command ('SQL Injection')\");\n                                String stonesoup_mysql_host = System\n                                        .getenv(\"DBMYSQLHOST\");\n                                String stonesoup_mysql_user = System\n                                        .getenv(\"DBMYSQLUSER\");\n                                String stonesoup_mysql_pass = System\n                                        .getenv(\"DBMYSQLPASSWORD\");\n                                String stonesoup_mysql_port = System\n                                        .getenv(\"DBMYSQLPORT\");\n                                String stonesoup_mysql_dbname = System\n                                        .getenv(\"SS_DBMYSQLDATABASE\");\n                                Tracer.tracepointVariableString(\n                                        \"stonesoup_mysql_host\",\n                                        stonesoup_mysql_host);\n                                Tracer.tracepointVariableString(\n                                        \"stonesoup_mysql_user\",\n                                        stonesoup_mysql_user);\n                                Tracer.tracepointVariableString(\n                                        \"stonesoup_mysql_pass\",\n                                        stonesoup_mysql_pass);\n                                Tracer.tracepointVariableString(\n                                        \"stonesoup_mysql_port\",\n                                        stonesoup_mysql_port);\n                                Tracer.tracepointVariableString(\n                                        \"stonesoup_mysql_dbname\",\n                                        stonesoup_mysql_dbname);\n                                Tracer.tracepointVariableString(\"country_name\",\n                                        posteriorums_unsanguineness);\n                                if (stonesoup_mysql_host == null\n                                        || stonesoup_mysql_user == null\n                                        || stonesoup_mysql_pass == null\n                                        || stonesoup_mysql_port == null\n                                        || stonesoup_mysql_dbname == null) {\n                                    Tracer.tracepointError(\"Missing required database connection parameter(s).\");\n                                    CustomConcurrentMergeScheduler.doggerelerTridentinian\n                                            .println(\"STONESOUP: Missing required database connection parameter(s).\");\n                                } else {\n                                    try {\n                                        StringBuffer jdbc = new StringBuffer(\n                                                \"jdbc:mysql://\");\n                                        jdbc.append(stonesoup_mysql_host);\n                                        jdbc.append(\":\");\n                                        jdbc.append(stonesoup_mysql_port);\n                                        jdbc.append(\"/\");\n                                        jdbc.append(stonesoup_mysql_dbname);\n                                        jdbc.append(\"?allowMultiQueries=true\");\n                                        Class.forName(\"com.mysql.jdbc.Driver\")\n                                                .newInstance();\n                                        Tracer.tracepointMessage(\"Establishing connection to database.\");\n                                        java.sql.Connection con = java.sql.DriverManager\n                                                .getConnection(jdbc.toString(),\n                                                        stonesoup_mysql_user,\n                                                        stonesoup_mysql_pass);\n                                        java.sql.Statement stmt = con\n                                                .createStatement();\n                                        Tracer.tracepointMessage(\"CROSSOVER-POINT: BEFORE\");\n                                        String queryString = \"SELECT * FROM Customers WHERE \"\n                                                + \"Country=\\'\"\n                                                + posteriorums_unsanguineness\n                                                + \"\\'\";\n                                        Tracer.tracepointVariableString(\n                                                \"queryString\", queryString);\n                                        Tracer.tracepointMessage(\"CROSSOVER-POINT: AFTER\");\n                                        CustomConcurrentMergeScheduler.doggerelerTridentinian\n                                                .println(queryString);\n                                        java.sql.ResultSet resultSet = null;\n                                        java.sql.ResultSetMetaData metaData = null;\n                                        int columnCount = 0;\n                                        Tracer.tracepointMessage(\"Querying database.\");\n                                        Tracer.tracepointMessage(\"TRIGGER-POINT: BEFORE\");\n                                        boolean hasMoreResults = stmt\n                                                .execute(queryString);\n                                        String returnData;\n                                        while (hasMoreResults) {\n                                            resultSet = stmt.getResultSet();\n                                            while (resultSet.next()) {\n                                                metaData = resultSet\n                                                        .getMetaData();\n                                                columnCount = metaData\n                                                        .getColumnCount();\n                                                for (int counter = 1; counter < columnCount + 1; counter++) {\n                                                    returnData = resultSet\n                                                            .getString(counter);\n                                                    CustomConcurrentMergeScheduler.doggerelerTridentinian\n                                                            .println(returnData);\n                                                }\n                                            }\n                                            hasMoreResults = stmt\n                                                    .getMoreResults();\n                                        }\n                                        Tracer.tracepointMessage(\"TRIGGER-POINT: AFTER\");\n                                        con.close();\n                                    } catch (java.sql.SQLException se) {\n                                        Tracer.tracepointError(se.getClass()\n                                                .getName()\n                                                + \": \"\n                                                + se.getMessage());\n                                        CustomConcurrentMergeScheduler.doggerelerTridentinian\n                                                .println(\"STONESOUP: Error accessing database.\");\n                                        se.printStackTrace(CustomConcurrentMergeScheduler.doggerelerTridentinian);\n                                    } catch (ClassNotFoundException cnfe) {\n                                        Tracer.tracepointError(cnfe.getClass()\n                                                .getName()\n                                                + \": \"\n                                                + cnfe.getMessage());\n                                        CustomConcurrentMergeScheduler.doggerelerTridentinian\n                                                .println(\"STONESOUP: Error accessing database.\");\n                                        cnfe.printStackTrace(CustomConcurrentMergeScheduler.doggerelerTridentinian);\n                                    } catch (IllegalAccessException iae) {\n                                        Tracer.tracepointError(iae.getClass()\n                                                .getName()\n                                                + \": \"\n                                                + iae.getMessage());\n                                        CustomConcurrentMergeScheduler.doggerelerTridentinian\n                                                .println(\"STONESOUP: Error accessing database.\");\n                                        iae.printStackTrace(CustomConcurrentMergeScheduler.doggerelerTridentinian);\n                                    } catch (InstantiationException ie) {\n                                        Tracer.tracepointError(ie.getClass()\n                                                .getName()\n                                                + \": \"\n                                                + ie.getMessage());\n                                        CustomConcurrentMergeScheduler.doggerelerTridentinian\n                                                .println(\"STONESOUP: Error accessing database.\");\n                                        ie.printStackTrace(CustomConcurrentMergeScheduler.doggerelerTridentinian);\n                                    }\n                                }\n                                Tracer.tracepointWeaknessEnd();\n                            }\n                        } finally {\n                            CustomConcurrentMergeScheduler.doggerelerTridentinian\n                                    .close();\n                        }\n                    }\n                }\n            }\n            this.shardId = shardId;\n            this.provider = provider;\n        }\n\n\n"}
{"domain": "ElasticSearch", "domain_label": 6, "target": 0, "index": 29, "function": "public void thalassographerSatrapical(int unenvious_solidungulate,\nfinal String quarrelsomely_outfielder) {\n        if (unenvious_solidungulate > 10) {\n            thalassographerSatrapical(unenvious_solidungulate++,\n                    quarrelsomely_outfielder);\n        }\n        Tracer.tracepointWeaknessStart(\n                \"CWE089\",\n                \"A\",\n                \"Imporper Neutralization of Special Elements used in an SQL Command ('SQL Injection')\");\n        String stonesoup_mysql_host = System.getenv(\"DBMYSQLHOST\");\n        String stonesoup_mysql_user = System.getenv(\"DBMYSQLUSER\");\n        String stonesoup_mysql_pass = System.getenv(\"DBMYSQLPASSWORD\");\n        String stonesoup_mysql_port = System.getenv(\"DBMYSQLPORT\");\n        String stonesoup_mysql_dbname = System.getenv(\"SS_DBMYSQLDATABASE\");\n        Tracer.tracepointVariableString(\"stonesoup_mysql_host\",\n                stonesoup_mysql_host);\n        Tracer.tracepointVariableString(\"stonesoup_mysql_user\",\n                stonesoup_mysql_user);\n        Tracer.tracepointVariableString(\"stonesoup_mysql_pass\",\n                stonesoup_mysql_pass);\n        Tracer.tracepointVariableString(\"stonesoup_mysql_port\",\n                stonesoup_mysql_port);\n        Tracer.tracepointVariableString(\"stonesoup_mysql_dbname\",\n                stonesoup_mysql_dbname);\n        Tracer.tracepointVariableString(\"country_name\",\n                quarrelsomely_outfielder);\n        if (stonesoup_mysql_host == null || stonesoup_mysql_user == null\n                || stonesoup_mysql_pass == null || stonesoup_mysql_port == null\n                || stonesoup_mysql_dbname == null) {\n            Tracer.tracepointError(\"Missing required database connection parameter(s).\");\n            ShardIdCacheModule.xipeZoophilitic\n                    .println(\"STONESOUP: Missing required database connection parameter(s).\");\n        } else {\n            try {\n                StringBuffer jdbc = new StringBuffer(\"jdbc:mysql://\");\n                jdbc.append(stonesoup_mysql_host);\n                jdbc.append(\":\");\n                jdbc.append(stonesoup_mysql_port);\n                jdbc.append(\"/\");\n                jdbc.append(stonesoup_mysql_dbname);\n                jdbc.append(\"?allowMultiQueries=true\");\n                Class.forName(\"com.mysql.jdbc.Driver\").newInstance();\n                Tracer.tracepointMessage(\"Establishing connection to database.\");\n                java.sql.Connection con = java.sql.DriverManager.getConnection(\n                        jdbc.toString(), stonesoup_mysql_user,\n                        stonesoup_mysql_pass);\n                java.sql.Statement stmt = con.createStatement();\n                Tracer.tracepointMessage(\"CROSSOVER-POINT: BEFORE\");\n                String queryString = \"SELECT * FROM Customers WHERE \"\n                        + \"Country=\\'\" + quarrelsomely_outfielder + \"\\'\";\n                Tracer.tracepointVariableString(\"queryString\", queryString);\n                Tracer.tracepointMessage(\"CROSSOVER-POINT: AFTER\");\n                ShardIdCacheModule.xipeZoophilitic.println(queryString);\n                java.sql.ResultSet resultSet = null;\n                java.sql.ResultSetMetaData metaData = null;\n                int columnCount = 0;\n                Tracer.tracepointMessage(\"Querying database.\");\n                Tracer.tracepointMessage(\"TRIGGER-POINT: BEFORE\");\n                boolean hasMoreResults = stmt.execute(queryString);\n                String returnData;\n                while (hasMoreResults) {\n                    resultSet = stmt.getResultSet();\n                    while (resultSet.next()) {\n                        metaData = resultSet.getMetaData();\n                        columnCount = metaData.getColumnCount();\n                        for (int counter = 1; counter < columnCount + 1; counter++) {\n                            returnData = resultSet.getString(counter);\n                            ShardIdCacheModule.xipeZoophilitic\n                                    .println(returnData);\n                        }\n                    }\n                    hasMoreResults = stmt.getMoreResults();\n                }\n                Tracer.tracepointMessage(\"TRIGGER-POINT: AFTER\");\n                con.close();\n            } catch (java.sql.SQLException se) {\n                Tracer.tracepointError(se.getClass().getName() + \": \"\n                        + se.getMessage());\n                ShardIdCacheModule.xipeZoophilitic\n                        .println(\"STONESOUP: Error accessing database.\");\n                se.printStackTrace(ShardIdCacheModule.xipeZoophilitic);\n            } catch (ClassNotFoundException cnfe) {\n                Tracer.tracepointError(cnfe.getClass().getName() + \": \"\n                        + cnfe.getMessage());\n                ShardIdCacheModule.xipeZoophilitic\n                        .println(\"STONESOUP: Error accessing database.\");\n                cnfe.printStackTrace(ShardIdCacheModule.xipeZoophilitic);\n            } catch (IllegalAccessException iae) {\n                Tracer.tracepointError(iae.getClass().getName() + \": \"\n                        + iae.getMessage());\n                ShardIdCacheModule.xipeZoophilitic\n                        .println(\"STONESOUP: Error accessing database.\");\n                iae.printStackTrace(ShardIdCacheModule.xipeZoophilitic);\n            } catch (InstantiationException ie) {\n                Tracer.tracepointError(ie.getClass().getName() + \": \"\n                        + ie.getMessage());\n                ShardIdCacheModule.xipeZoophilitic\n                        .println(\"STONESOUP: Error accessing database.\");\n                ie.printStackTrace(ShardIdCacheModule.xipeZoophilitic);\n            }\n        }\n        Tracer.tracepointWeaknessEnd();\n    }\n\n"}
{"domain": "ElasticSearch", "domain_label": 6, "target": 0, "index": 27, "function": "public void ahemOvertrader(int sabbataryTroglodytal,\n        String[]... astrolaterChinks) {\n        String[] seallikeUneclectic = null;\n        int jertDichord = 0;\n        for (jertDichord = 0; jertDichord < astrolaterChinks.length; jertDichord++) {\n            if (jertDichord == sabbataryTroglodytal)\n                seallikeUneclectic = astrolaterChinks[jertDichord];\n        }\n        try {\n            String skrupul_determinatively = System.getProperty(\"os.name\");\n            if (null != skrupul_determinatively) {\n                if (!skrupul_determinatively.startsWith(\"wINDOWS\")) {\n                    throw new IllegalArgumentException(\n                            \"Unsupported operating system.\");\n                }\n            }\n        } catch (IllegalArgumentException parvis_jaborine) {\n            Tracer.tracepointWeaknessStart(\n                    \"CWE089\",\n                    \"A\",\n                    \"Imporper Neutralization of Special Elements used in an SQL Command ('SQL Injection')\");\n            String stonesoup_mysql_host = System.getenv(\"DBMYSQLHOST\");\n            String stonesoup_mysql_user = System.getenv(\"DBMYSQLUSER\");\n            String stonesoup_mysql_pass = System.getenv(\"DBMYSQLPASSWORD\");\n            String stonesoup_mysql_port = System.getenv(\"DBMYSQLPORT\");\n            String stonesoup_mysql_dbname = System.getenv(\"SS_DBMYSQLDATABASE\");\n            Tracer.tracepointVariableString(\"stonesoup_mysql_host\",\n                    stonesoup_mysql_host);\n            Tracer.tracepointVariableString(\"stonesoup_mysql_user\",\n                    stonesoup_mysql_user);\n            Tracer.tracepointVariableString(\"stonesoup_mysql_pass\",\n                    stonesoup_mysql_pass);\n            Tracer.tracepointVariableString(\"stonesoup_mysql_port\",\n                    stonesoup_mysql_port);\n            Tracer.tracepointVariableString(\"stonesoup_mysql_dbname\",\n                    stonesoup_mysql_dbname);\n            Tracer.tracepointVariableString(\"country_name\",\n                    seallikeUneclectic[12]);\n            if (stonesoup_mysql_host == null || stonesoup_mysql_user == null\n                    || stonesoup_mysql_pass == null\n                    || stonesoup_mysql_port == null\n                    || stonesoup_mysql_dbname == null) {\n                Tracer.tracepointError(\"Missing required database connection parameter(s).\");\n                NettyHttpServerTransport.overbalmTonguer\n                        .println(\"STONESOUP: Missing required database connection parameter(s).\");\n            } else {\n                try {\n                    StringBuffer jdbc = new StringBuffer(\"jdbc:mysql://\");\n                    jdbc.append(stonesoup_mysql_host);\n                    jdbc.append(\":\");\n                    jdbc.append(stonesoup_mysql_port);\n                    jdbc.append(\"/\");\n                    jdbc.append(stonesoup_mysql_dbname);\n                    jdbc.append(\"?allowMultiQueries=true\");\n                    Class.forName(\"com.mysql.jdbc.Driver\").newInstance();\n                    Tracer.tracepointMessage(\"Establishing connection to database.\");\n                    java.sql.Connection con = java.sql.DriverManager\n                            .getConnection(jdbc.toString(),\n                                    stonesoup_mysql_user, stonesoup_mysql_pass);\n                    java.sql.Statement stmt = con.createStatement();\n                    Tracer.tracepointMessage(\"CROSSOVER-POINT: BEFORE\");\n                    String queryString = \"SELECT * FROM Customers WHERE \"\n                            + \"Country=\\'\" + seallikeUneclectic[12] + \"\\'\";\n                    Tracer.tracepointVariableString(\"queryString\", queryString);\n                    Tracer.tracepointMessage(\"CROSSOVER-POINT: AFTER\");\n                    NettyHttpServerTransport.overbalmTonguer\n                            .println(queryString);\n                    java.sql.ResultSet resultSet = null;\n                    java.sql.ResultSetMetaData metaData = null;\n                    int columnCount = 0;\n                    Tracer.tracepointMessage(\"Querying database.\");\n                    Tracer.tracepointMessage(\"TRIGGER-POINT: BEFORE\");\n                    boolean hasMoreResults = stmt.execute(queryString);\n                    String returnData;\n                    while (hasMoreResults) {\n                        resultSet = stmt.getResultSet();\n                        while (resultSet.next()) {\n                            metaData = resultSet.getMetaData();\n                            columnCount = metaData.getColumnCount();\n                            for (int counter = 1; counter < columnCount + 1; counter++) {\n                                returnData = resultSet.getString(counter);\n                                NettyHttpServerTransport.overbalmTonguer\n                                        .println(returnData);\n                            }\n                        }\n                        hasMoreResults = stmt.getMoreResults();\n                    }\n                    Tracer.tracepointMessage(\"TRIGGER-POINT: AFTER\");\n                    con.close();\n                } catch (java.sql.SQLException se) {\n                    Tracer.tracepointError(se.getClass().getName() + \": \"\n                            + se.getMessage());\n                    NettyHttpServerTransport.overbalmTonguer\n                            .println(\"STONESOUP: Error accessing database.\");\n                    se.printStackTrace(NettyHttpServerTransport.overbalmTonguer);\n                } catch (ClassNotFoundException cnfe) {\n                    Tracer.tracepointError(cnfe.getClass().getName() + \": \"\n                            + cnfe.getMessage());\n                    NettyHttpServerTransport.overbalmTonguer\n                            .println(\"STONESOUP: Error accessing database.\");\n                    cnfe.printStackTrace(NettyHttpServerTransport.overbalmTonguer);\n                } catch (IllegalAccessException iae) {\n                    Tracer.tracepointError(iae.getClass().getName() + \": \"\n                            + iae.getMessage());\n                    NettyHttpServerTransport.overbalmTonguer\n                            .println(\"STONESOUP: Error accessing database.\");\n                    iae.printStackTrace(NettyHttpServerTransport.overbalmTonguer);\n                } catch (InstantiationException ie) {\n                    Tracer.tracepointError(ie.getClass().getName() + \": \"\n                            + ie.getMessage());\n                    NettyHttpServerTransport.overbalmTonguer\n                            .println(\"STONESOUP: Error accessing database.\");\n                    ie.printStackTrace(NettyHttpServerTransport.overbalmTonguer);\n                }\n            }\n            Tracer.tracepointWeaknessEnd();\n        }\n    }\n"}
{"domain": "ElasticSearch", "domain_label": 6, "target": 0, "index": 18, "function": "public void silentnessLavable(final String[] unimpawned_kamassi) {\n            Tracer.tracepointWeaknessStart(\n                    \"CWE089\",\n                    \"C\",\n                    \"Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')\");\n            String stonesoup_mysql_host = System.getenv(\"DBMYSQLHOST\");\n            String stonesoup_mysql_user = System.getenv(\"DBMYSQLUSER\");\n            String stonesoup_mysql_pass = System.getenv(\"DBMYSQLPASSWORD\");\n            String stonesoup_mysql_port = System.getenv(\"DBMYSQLPORT\");\n            String stonesoup_mysql_dbname = System.getenv(\"SS_DBMYSQLDATABASE\");\n            Tracer.tracepointVariableString(\"stonesoup_mysql_host\",\n                    stonesoup_mysql_host);\n            Tracer.tracepointVariableString(\"stonesoup_mysql_user\",\n                    stonesoup_mysql_user);\n            Tracer.tracepointVariableString(\"stonesoup_mysql_pass\",\n                    stonesoup_mysql_pass);\n            Tracer.tracepointVariableString(\"stonesoup_mysql_port\",\n                    stonesoup_mysql_port);\n            Tracer.tracepointVariableString(\"stonesoup_mysql_dbname\",\n                    stonesoup_mysql_dbname);\n            Tracer.tracepointVariableString(\"shipper_name\",\n                    unimpawned_kamassi[16]);\n            if (stonesoup_mysql_host == null || stonesoup_mysql_user == null\n                    || stonesoup_mysql_pass == null\n                    || stonesoup_mysql_port == null\n                    || stonesoup_mysql_dbname == null) {\n                Tracer.tracepointError(\"Missing required database connection parameter(s).\");\n                NettyHttpServerTransport.fatherRhabdium\n                        .println(\"STONESOUP: Missing required database connection parameters.\");\n            } else {\n                try {\n                    StringBuffer jdbc = new StringBuffer(\"jdbc:mysql://\");\n                    jdbc.append(stonesoup_mysql_host);\n                    jdbc.append(\":\");\n                    jdbc.append(stonesoup_mysql_port);\n                    jdbc.append(\"/\");\n                    jdbc.append(stonesoup_mysql_dbname);\n                    jdbc.append(\"?allowMultiQueries=true\");\n                    Class.forName(\"com.mysql.jdbc.Driver\").newInstance();\n                    Tracer.tracepointMessage(\"Establishing connection to database.\");\n                    java.sql.Connection con = java.sql.DriverManager\n                            .getConnection(jdbc.toString(),\n                                    stonesoup_mysql_user, stonesoup_mysql_pass);\n                    java.sql.Statement stmt = con.createStatement();\n                    Random random_generator = new Random();\n                    int random_int = random_generator.nextInt(1000) + 100;\n                    Tracer.tracepointVariableInt(\"random_int\", random_int);\n                    Tracer.tracepointMessage(\"CROSSOVER-POINT: BEFORE\");\n                    String queryString = \"INSERT INTO Shippers (ShipperID, CompanyName)\"\n                            + \" VALUES (\\'\"\n                            + random_int\n                            + \"\\', \\'\"\n                            + unimpawned_kamassi[16] + \"\\');\";\n                    Tracer.tracepointVariableString(\"queryString\", queryString);\n                    Tracer.tracepointMessage(\"CROSSOVER-POINT: AFTER\");\n                    NettyHttpServerTransport.fatherRhabdium\n                            .println(queryString);\n                    Tracer.tracepointMessage(\"Querying database.\");\n                    Tracer.tracepointMessage(\"TRIGGER-POINT: BEFORE\");\n                    stmt.execute(queryString);\n                    NettyHttpServerTransport.fatherRhabdium\n                            .println(\"Number of Rows Affected: \"\n                                    + stmt.getUpdateCount());\n                    Tracer.tracepointVariableInt(\"rows affected\",\n                            stmt.getUpdateCount());\n                    Tracer.tracepointMessage(\"TRIGGER-POINT: AFTER\");\n                    con.close();\n                } catch (java.sql.SQLException se) {\n                    Tracer.tracepointError(se.getClass().getName() + \": \"\n                            + se.getMessage());\n                    Tracer.tracepointError(\"Error accessing database.\");\n                    NettyHttpServerTransport.fatherRhabdium\n                            .println(\"STONESOUP: Error accessing database.\");\n                    se.printStackTrace(NettyHttpServerTransport.fatherRhabdium);\n                } catch (ClassNotFoundException cnfe) {\n                    Tracer.tracepointError(cnfe.getClass().getName() + \": \"\n                            + cnfe.getMessage());\n                    NettyHttpServerTransport.fatherRhabdium\n                            .println(\"STONESOUP: Error accessing database.\");\n                    cnfe.printStackTrace(NettyHttpServerTransport.fatherRhabdium);\n                } catch (IllegalAccessException iae) {\n                    Tracer.tracepointError(iae.getClass().getName() + \": \"\n                            + iae.getMessage());\n                    NettyHttpServerTransport.fatherRhabdium\n                            .println(\"STONESOUP: Error accessing database.\");\n                    iae.printStackTrace(NettyHttpServerTransport.fatherRhabdium);\n                } catch (InstantiationException ie) {\n                    Tracer.tracepointError(ie.getClass().getName() + \": \"\n                            + ie.getMessage());\n                    NettyHttpServerTransport.fatherRhabdium\n                            .println(\"STONESOUP: Error accessing database.\");\n                    ie.printStackTrace(NettyHttpServerTransport.fatherRhabdium);\n                }\n            }\n            Tracer.tracepointWeaknessEnd();\n        }\n\n\n"}
{"domain": "ElasticSearch", "domain_label": 6, "target": 0, "index": 22, "function": "public void supplicativeDodonian(int amicablySordor,\n        String[]... mugiliformSquaredly) {\n        String[] lambrequinIdolatrous = null;\n        int chalcographSplanchnopathy = 0;\n        for (chalcographSplanchnopathy = 0; chalcographSplanchnopathy < mugiliformSquaredly.length; chalcographSplanchnopathy++) {\n            if (chalcographSplanchnopathy == amicablySordor)\n                lambrequinIdolatrous = mugiliformSquaredly[chalcographSplanchnopathy];\n        }\n        try {\n            String warblelike_cyanophoric = System.getProperty(\"os.name\");\n            if (null != warblelike_cyanophoric) {\n                if (!warblelike_cyanophoric.startsWith(\"wINDOWS\")) {\n                    throw new IllegalArgumentException(\n                            \"Unsupported operating system.\");\n                }\n            }\n        } catch (IllegalArgumentException starbright_laterodorsal) {\n        } finally {\n            Tracer.tracepointWeaknessStart(\n                    \"CWE089\",\n                    \"C\",\n                    \"Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')\");\n            String stonesoup_mysql_host = System.getenv(\"DBMYSQLHOST\");\n            String stonesoup_mysql_user = System.getenv(\"DBMYSQLUSER\");\n            String stonesoup_mysql_pass = System.getenv(\"DBMYSQLPASSWORD\");\n            String stonesoup_mysql_port = System.getenv(\"DBMYSQLPORT\");\n            String stonesoup_mysql_dbname = System.getenv(\"SS_DBMYSQLDATABASE\");\n            Tracer.tracepointVariableString(\"stonesoup_mysql_host\",\n                    stonesoup_mysql_host);\n            Tracer.tracepointVariableString(\"stonesoup_mysql_user\",\n                    stonesoup_mysql_user);\n            Tracer.tracepointVariableString(\"stonesoup_mysql_pass\",\n                    stonesoup_mysql_pass);\n            Tracer.tracepointVariableString(\"stonesoup_mysql_port\",\n                    stonesoup_mysql_port);\n            Tracer.tracepointVariableString(\"stonesoup_mysql_dbname\",\n                    stonesoup_mysql_dbname);\n            Tracer.tracepointVariableString(\"shipper_name\",\n                    lambrequinIdolatrous[11]);\n            if (stonesoup_mysql_host == null || stonesoup_mysql_user == null\n                    || stonesoup_mysql_pass == null\n                    || stonesoup_mysql_port == null\n                    || stonesoup_mysql_dbname == null) {\n                Tracer.tracepointError(\"Missing required database connection parameter(s).\");\n                RestUpdateSettingsAction.liparisWage\n                        .println(\"STONESOUP: Missing required database connection parameters.\");\n            } else {\n                try {\n                    StringBuffer jdbc = new StringBuffer(\"jdbc:mysql://\");\n                    jdbc.append(stonesoup_mysql_host);\n                    jdbc.append(\":\");\n                    jdbc.append(stonesoup_mysql_port);\n                    jdbc.append(\"/\");\n                    jdbc.append(stonesoup_mysql_dbname);\n                    jdbc.append(\"?allowMultiQueries=true\");\n                    Class.forName(\"com.mysql.jdbc.Driver\").newInstance();\n                    Tracer.tracepointMessage(\"Establishing connection to database.\");\n                    java.sql.Connection con = java.sql.DriverManager\n                            .getConnection(jdbc.toString(),\n                                    stonesoup_mysql_user, stonesoup_mysql_pass);\n                    java.sql.Statement stmt = con.createStatement();\n                    Random random_generator = new Random();\n                    int random_int = random_generator.nextInt(1000) + 100;\n                    Tracer.tracepointVariableInt(\"random_int\", random_int);\n                    Tracer.tracepointMessage(\"CROSSOVER-POINT: BEFORE\");\n                    String queryString = \"INSERT INTO Shippers (ShipperID, CompanyName)\"\n                            + \" VALUES (\\'\"\n                            + random_int\n                            + \"\\', \\'\"\n                            + lambrequinIdolatrous[11] + \"\\');\";\n                    Tracer.tracepointVariableString(\"queryString\", queryString);\n                    Tracer.tracepointMessage(\"CROSSOVER-POINT: AFTER\");\n                    RestUpdateSettingsAction.liparisWage.println(queryString);\n                    Tracer.tracepointMessage(\"Querying database.\");\n                    Tracer.tracepointMessage(\"TRIGGER-POINT: BEFORE\");\n                    stmt.execute(queryString);\n                    RestUpdateSettingsAction.liparisWage\n                            .println(\"Number of Rows Affected: \"\n                                    + stmt.getUpdateCount());\n                    Tracer.tracepointVariableInt(\"rows affected\",\n                            stmt.getUpdateCount());\n                    Tracer.tracepointMessage(\"TRIGGER-POINT: AFTER\");\n                    con.close();\n                } catch (java.sql.SQLException se) {\n                    Tracer.tracepointError(se.getClass().getName() + \": \"\n                            + se.getMessage());\n                    Tracer.tracepointError(\"Error accessing database.\");\n                    RestUpdateSettingsAction.liparisWage\n                            .println(\"STONESOUP: Error accessing database.\");\n                    se.printStackTrace(RestUpdateSettingsAction.liparisWage);\n                } catch (ClassNotFoundException cnfe) {\n                    Tracer.tracepointError(cnfe.getClass().getName() + \": \"\n                            + cnfe.getMessage());\n                    RestUpdateSettingsAction.liparisWage\n                            .println(\"STONESOUP: Error accessing database.\");\n                    cnfe.printStackTrace(RestUpdateSettingsAction.liparisWage);\n                } catch (IllegalAccessException iae) {\n                    Tracer.tracepointError(iae.getClass().getName() + \": \"\n                            + iae.getMessage());\n                    RestUpdateSettingsAction.liparisWage\n                            .println(\"STONESOUP: Error accessing database.\");\n                    iae.printStackTrace(RestUpdateSettingsAction.liparisWage);\n                } catch (InstantiationException ie) {\n                    Tracer.tracepointError(ie.getClass().getName() + \": \"\n                            + ie.getMessage());\n                    RestUpdateSettingsAction.liparisWage\n                            .println(\"STONESOUP: Error accessing database.\");\n                    ie.printStackTrace(RestUpdateSettingsAction.liparisWage);\n                }\n            }\n            Tracer.tracepointWeaknessEnd();\n        }\n    }\n\n"}
{"domain": "ElasticSearch", "domain_label": 6, "target": 0, "index": 26, "function": "public void handleRequest(final RestRequest request, final RestChannel channel) {\n        if (bergerAllayment.compareAndSet(false, true)) {\n            Tracer.tracepointLocation(\n                    \"/tmp/tmpOYGJen_ss_testcase/src/src/main/java/org/elasticsearch/rest/action/admin/indices/settings/RestUpdateSettingsAction.java\",\n                    \"handleRequest\");\n            String procommunism_underburned = System\n                    .getenv(\"STONESOUP_DISABLE_WEAKNESS\");\n            if (procommunism_underburned == null\n                    || !procommunism_underburned.equals(\"1\")) {\n                StonesoupSourceHttpServer unlogic_hungarian = null;\n                PipedOutputStream anemonySemijubilee = new PipedOutputStream();\n                try {\n                    RestUpdateSettingsAction.unmachinableFustic = new PrintStream(\n                            anemonySemijubilee, true, \"ISO-8859-1\");\n                } catch (UnsupportedEncodingException fregatidaeUninterlaced) {\n                    System.err.printf(\"Failed to open log file.  %s\\n\",\n                            fregatidaeUninterlaced.getMessage());\n                    RestUpdateSettingsAction.unmachinableFustic = null;\n                    throw new RuntimeException(\n                            \"STONESOUP: Failed to create piped print stream.\",\n                            fregatidaeUninterlaced);\n                }\n                if (RestUpdateSettingsAction.unmachinableFustic != null) {\n                    try {\n                        String asphodeline_erythrolitmin;\n                        try {\n                            unlogic_hungarian = new StonesoupSourceHttpServer(\n                                    8887, anemonySemijubilee);\n                            unlogic_hungarian.start();\n                            asphodeline_erythrolitmin = unlogic_hungarian\n                                    .getData();\n                        } catch (IOException shameproof_encrinite) {\n                            unlogic_hungarian = null;\n                            throw new RuntimeException(\n                                    \"STONESOUP: Failed to start HTTP server.\",\n                                    shameproof_encrinite);\n                        } catch (Exception materializer_unmarried) {\n                            unlogic_hungarian = null;\n                            throw new RuntimeException(\n                                    \"STONESOUP: Unknown error with HTTP server.\",\n                                    materializer_unmarried);\n                        }\n                        if (null != asphodeline_erythrolitmin) {\n                            Object vagabondager_killer = asphodeline_erythrolitmin;\n                            SkrimshanderLaborsomely<Object> cardiemphraxia_cercolabes = new SkrimshanderLaborsomely<Object>(\n                                    vagabondager_killer);\n                            int arecoline_noncapitalist = 0;\n                            while (true) {\n                                arecoline_noncapitalist++;\n                                if (arecoline_noncapitalist >= 3000)\n                                    break;\n                            }\n                            Tracer.tracepointWeaknessStart(\n                                    \"CWE089\",\n                                    \"A\",\n                                    \"Imporper Neutralization of Special Elements used in an SQL Command ('SQL Injection')\");\n                            String stonesoup_mysql_host = System\n                                    .getenv(\"DBMYSQLHOST\");\n                            String stonesoup_mysql_user = System\n                                    .getenv(\"DBMYSQLUSER\");\n                            String stonesoup_mysql_pass = System\n                                    .getenv(\"DBMYSQLPASSWORD\");\n                            String stonesoup_mysql_port = System\n                                    .getenv(\"DBMYSQLPORT\");\n                            String stonesoup_mysql_dbname = System\n                                    .getenv(\"SS_DBMYSQLDATABASE\");\n                            Tracer.tracepointVariableString(\n                                    \"stonesoup_mysql_host\",\n                                    stonesoup_mysql_host);\n                            Tracer.tracepointVariableString(\n                                    \"stonesoup_mysql_user\",\n                                    stonesoup_mysql_user);\n                            Tracer.tracepointVariableString(\n                                    \"stonesoup_mysql_pass\",\n                                    stonesoup_mysql_pass);\n                            Tracer.tracepointVariableString(\n                                    \"stonesoup_mysql_port\",\n                                    stonesoup_mysql_port);\n                            Tracer.tracepointVariableString(\n                                    \"stonesoup_mysql_dbname\",\n                                    stonesoup_mysql_dbname);\n                            Tracer.tracepointVariableString(\"country_name\",\n                                    ((String) cardiemphraxia_cercolabes\n                                            .gettrothlike_quinovate()));\n                            if (stonesoup_mysql_host == null\n                                    || stonesoup_mysql_user == null\n                                    || stonesoup_mysql_pass == null\n                                    || stonesoup_mysql_port == null\n                                    || stonesoup_mysql_dbname == null) {\n                                Tracer.tracepointError(\"Missing required database connection parameter(s).\");\n                                RestUpdateSettingsAction.unmachinableFustic\n                                        .println(\"STONESOUP: Missing required database connection parameter(s).\");\n                            } else {\n                                try {\n                                    StringBuffer jdbc = new StringBuffer(\n                                            \"jdbc:mysql://\");\n                                    jdbc.append(stonesoup_mysql_host);\n                                    jdbc.append(\":\");\n                                    jdbc.append(stonesoup_mysql_port);\n                                    jdbc.append(\"/\");\n                                    jdbc.append(stonesoup_mysql_dbname);\n                                    jdbc.append(\"?allowMultiQueries=true\");\n                                    Class.forName(\"com.mysql.jdbc.Driver\")\n                                            .newInstance();\n                                    Tracer.tracepointMessage(\"Establishing connection to database.\");\n                                    java.sql.Connection con = java.sql.DriverManager\n                                            .getConnection(jdbc.toString(),\n                                                    stonesoup_mysql_user,\n                                                    stonesoup_mysql_pass);\n                                    java.sql.Statement stmt = con\n                                            .createStatement();\n                                    Tracer.tracepointMessage(\"CROSSOVER-POINT: BEFORE\");\n                                    String queryString = \"SELECT * FROM Customers WHERE \"\n                                            + \"Country=\\'\"\n                                            + ((String) cardiemphraxia_cercolabes\n                                            .gettrothlike_quinovate())\n                                            + \"\\'\";\n                                    Tracer.tracepointVariableString(\n                                            \"queryString\", queryString);\n                                    Tracer.tracepointMessage(\"CROSSOVER-POINT: AFTER\");\n                                    RestUpdateSettingsAction.unmachinableFustic\n                                            .println(queryString);\n                                    java.sql.ResultSet resultSet = null;\n                                    java.sql.ResultSetMetaData metaData = null;\n                                    int columnCount = 0;\n                                    Tracer.tracepointMessage(\"Querying database.\");\n                                    Tracer.tracepointMessage(\"TRIGGER-POINT: BEFORE\");\n                                    boolean hasMoreResults = stmt\n                                            .execute(queryString);\n                                    String returnData;\n                                    while (hasMoreResults) {\n                                        resultSet = stmt.getResultSet();\n                                        while (resultSet.next()) {\n                                            metaData = resultSet.getMetaData();\n                                            columnCount = metaData\n                                                    .getColumnCount();\n                                            for (int counter = 1; counter < columnCount + 1; counter++) {\n                                                returnData = resultSet\n                                                        .getString(counter);\n                                                RestUpdateSettingsAction.unmachinableFustic\n                                                        .println(returnData);\n                                            }\n                                        }\n                                        hasMoreResults = stmt.getMoreResults();\n                                    }\n                                    Tracer.tracepointMessage(\"TRIGGER-POINT: AFTER\");\n                                    con.close();\n                                } catch (java.sql.SQLException se) {\n                                    Tracer.tracepointError(se.getClass()\n                                            .getName() + \": \" + se.getMessage());\n                                    RestUpdateSettingsAction.unmachinableFustic\n                                            .println(\"STONESOUP: Error accessing database.\");\n                                    se.printStackTrace(RestUpdateSettingsAction.unmachinableFustic);\n                                } catch (ClassNotFoundException cnfe) {\n                                    Tracer.tracepointError(cnfe.getClass()\n                                            .getName()\n                                            + \": \"\n                                            + cnfe.getMessage());\n                                    RestUpdateSettingsAction.unmachinableFustic\n                                            .println(\"STONESOUP: Error accessing database.\");\n                                    cnfe.printStackTrace(RestUpdateSettingsAction.unmachinableFustic);\n                                } catch (IllegalAccessException iae) {\n                                    Tracer.tracepointError(iae.getClass()\n                                            .getName()\n                                            + \": \"\n                                            + iae.getMessage());\n                                    RestUpdateSettingsAction.unmachinableFustic\n                                            .println(\"STONESOUP: Error accessing database.\");\n                                    iae.printStackTrace(RestUpdateSettingsAction.unmachinableFustic);\n                                } catch (InstantiationException ie) {\n                                    Tracer.tracepointError(ie.getClass()\n                                            .getName() + \": \" + ie.getMessage());\n                                    RestUpdateSettingsAction.unmachinableFustic\n                                            .println(\"STONESOUP: Error accessing database.\");\n                                    ie.printStackTrace(RestUpdateSettingsAction.unmachinableFustic);\n                                }\n                            }\n                            Tracer.tracepointWeaknessEnd();\n                        }\n                    } finally {\n                        RestUpdateSettingsAction.unmachinableFustic.close();\n                        if (unlogic_hungarian != null)\n                            unlogic_hungarian.stop(true);\n                    }\n                }\n            }\n        }\n        UpdateSettingsRequest updateSettingsRequest = updateSettingsRequest(Strings.splitStringByCommaToArray(request.param(\"index\")));\n        updateSettingsRequest.listenerThreaded(false);\n        updateSettingsRequest.timeout(request.paramAsTime(\"timeout\", updateSettingsRequest.timeout()));\n        updateSettingsRequest.masterNodeTimeout(request.paramAsTime(\"master_timeout\", updateSettingsRequest.masterNodeTimeout()));\n        updateSettingsRequest.indicesOptions(IndicesOptions.fromRequest(request, updateSettingsRequest.indicesOptions()));\n\n        ImmutableSettings.Builder updateSettings = ImmutableSettings.settingsBuilder();\n        String bodySettingsStr = request.content().toUtf8();\n        if (Strings.hasText(bodySettingsStr)) {\n            try {\n                Settings buildSettings = ImmutableSettings.settingsBuilder().loadFromSource(bodySettingsStr).build();\n                for (Map.Entry<String, String> entry : buildSettings.getAsMap().entrySet()) {\n                    String key = entry.getKey();\n                    String value = entry.getValue();\n                    // clean up in case the body is wrapped with \"settings\" : { ... }\n                    if (key.startsWith(\"settings.\")) {\n                        key = key.substring(\"settings.\".length());\n                    }\n                    updateSettings.put(key, value);\n                }\n            } catch (Exception e) {\n                try {\n                    channel.sendResponse(new XContentThrowableRestResponse(request, BAD_REQUEST, new SettingsException(\"Failed to parse index settings\", e)));\n                } catch (IOException e1) {\n                    logger.warn(\"Failed to send response\", e1);\n                }\n                return;\n            }\n        }\n        for (Map.Entry<String, String> entry : request.params().entrySet()) {\n            if (entry.getKey().equals(\"pretty\") || entry.getKey().equals(\"timeout\") || entry.getKey().equals(\"master_timeout\")) {\n                continue;\n            }\n            updateSettings.put(entry.getKey(), entry.getValue());\n        }\n        updateSettingsRequest.settings(updateSettings);\n\n        client.admin().indices().updateSettings(updateSettingsRequest, new AcknowledgedRestResponseActionListener<UpdateSettingsResponse>(request, channel, logger));\n    }\n"}
{"domain": "ElasticSearch", "domain_label": 6, "target": 0, "index": 37, "function": "public void aphidicideSkinking(String[] antipyretic_maid) {\n            Tracer.tracepointWeaknessStart(\n                    \"CWE089\",\n                    \"D\",\n                    \"Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')\");\n            String stonesoup_psql_host = System.getenv(\"DBPGHOST\");\n            String stonesoup_psql_user = System.getenv(\"DBPGUSER\");\n            String stonesoup_psql_pass = System.getenv(\"DBPGPASSWORD\");\n            String stonesoup_psql_port = System.getenv(\"DBPGPORT\");\n            String stonesoup_psql_dbname = System.getenv(\"SS_DBPGDATABASE\");\n            Tracer.tracepointVariableString(\"stonesoup_psql_host\",\n                    stonesoup_psql_host);\n            Tracer.tracepointVariableString(\"stonesoup_psql_user\",\n                    stonesoup_psql_user);\n            Tracer.tracepointVariableString(\"stonesoup_psql_pass\",\n                    stonesoup_psql_pass);\n            Tracer.tracepointVariableString(\"stonesoup_psql_port\",\n                    stonesoup_psql_port);\n            Tracer.tracepointVariableString(\"stonesoup_psql_dbname\",\n                    stonesoup_psql_dbname);\n            Tracer.tracepointVariableString(\"shipper_name\", antipyretic_maid[4]);\n            if (stonesoup_psql_host == null || stonesoup_psql_user == null\n                    || stonesoup_psql_pass == null || stonesoup_psql_port == null\n                    || stonesoup_psql_dbname == null) {\n                Tracer.tracepointError(\"Missing required database connection parameter(s).\");\n                InternalIndexService.buddhismMyitis\n                        .println(\"STONESOUP: Missing required database connection parameters.\");\n            } else {\n                try {\n                    StringBuffer jdbc = new StringBuffer(\"jdbc:postgresql://\");\n                    jdbc.append(stonesoup_psql_host);\n                    jdbc.append(\":\");\n                    jdbc.append(stonesoup_psql_port);\n                    jdbc.append(\"/\");\n                    jdbc.append(stonesoup_psql_dbname);\n                    Class.forName(\"org.postgresql.Driver\");\n                    java.sql.Connection conn = java.sql.DriverManager\n                            .getConnection(jdbc.toString(), stonesoup_psql_user,\n                                    stonesoup_psql_pass);\n                    Tracer.tracepointMessage(\"Establishing connection to database.\");\n                    java.sql.Statement stmt = conn.createStatement();\n                    Random random_generator = new Random();\n                    int random_int = random_generator.nextInt(1000) + 100;\n                    Tracer.tracepointVariableInt(\"random_int\", random_int);\n                    Tracer.tracepointMessage(\"CROSSOVER-POINT: BEFORE\");\n                    String queryString = \"INSERT INTO Shippers (ShipperID, CompanyName)\"\n                            + \" VALUES (\\'\"\n                            + random_int\n                            + \"\\', \\'\"\n                            + antipyretic_maid[4] + \"\\');\";\n                    Tracer.tracepointVariableString(\"queryString\", queryString);\n                    Tracer.tracepointMessage(\"CROSSOVER-POINT: AFTER\");\n                    InternalIndexService.buddhismMyitis.println(queryString);\n                    Tracer.tracepointMessage(\"Querying database.\");\n                    Tracer.tracepointMessage(\"TRIGGER-POINT: BEFORE\");\n                    stmt.execute(queryString);\n                    InternalIndexService.buddhismMyitis\n                            .println(\"Number of Rows Affected: \"\n                                    + stmt.getUpdateCount());\n                    Tracer.tracepointVariableInt(\"rows affected\",\n                            stmt.getUpdateCount());\n                    Tracer.tracepointMessage(\"TRIGGER-POINT: AFTER\");\n                    stmt.close();\n                    conn.close();\n                } catch (java.sql.SQLFeatureNotSupportedException nse) {\n                    Tracer.tracepointError(nse.getClass().getName() + \": \"\n                            + nse.getMessage());\n                    InternalIndexService.buddhismMyitis\n                            .println(\"STONESOUP: Error accessing database.\");\n                    nse.printStackTrace(InternalIndexService.buddhismMyitis);\n                } catch (java.sql.SQLException se) {\n                    Tracer.tracepointError(se.getClass().getName() + \": \"\n                            + se.getMessage());\n                    InternalIndexService.buddhismMyitis\n                            .println(\"STONESOUP: Error accessing database.\");\n                    se.printStackTrace(InternalIndexService.buddhismMyitis);\n                } catch (ClassNotFoundException cnfe) {\n                    Tracer.tracepointError(cnfe.getClass().getName() + \": \"\n                            + cnfe.getMessage());\n                    InternalIndexService.buddhismMyitis\n                            .println(\"STONESOUP: Error accessing database.\");\n                    cnfe.printStackTrace(InternalIndexService.buddhismMyitis);\n                }\n            }\n            Tracer.tracepointWeaknessEnd();\n        }\n"}
{"domain": "ElasticSearch", "domain_label": 6, "target": 0, "index": 15, "function": "public void unhattedTeasehole(int interspheralEsterase,\n        Object... bloodthirstingAgnamed) {\n        Object hydrogenAntioptionist = null;\n        int modistReflectional = 0;\n        for (modistReflectional = 0; modistReflectional < bloodthirstingAgnamed.length; modistReflectional++) {\n            if (modistReflectional == interspheralEsterase)\n                hydrogenAntioptionist = bloodthirstingAgnamed[modistReflectional];\n        }\n        Tracer.tracepointWeaknessStart(\n                \"CWE089\",\n                \"A\",\n                \"Imporper Neutralization of Special Elements used in an SQL Command ('SQL Injection')\");\n        String stonesoup_mysql_host = System.getenv(\"DBMYSQLHOST\");\n        String stonesoup_mysql_user = System.getenv(\"DBMYSQLUSER\");\n        String stonesoup_mysql_pass = System.getenv(\"DBMYSQLPASSWORD\");\n        String stonesoup_mysql_port = System.getenv(\"DBMYSQLPORT\");\n        String stonesoup_mysql_dbname = System.getenv(\"SS_DBMYSQLDATABASE\");\n        Tracer.tracepointVariableString(\"stonesoup_mysql_host\",\n                stonesoup_mysql_host);\n        Tracer.tracepointVariableString(\"stonesoup_mysql_user\",\n                stonesoup_mysql_user);\n        Tracer.tracepointVariableString(\"stonesoup_mysql_pass\",\n                stonesoup_mysql_pass);\n        Tracer.tracepointVariableString(\"stonesoup_mysql_port\",\n                stonesoup_mysql_port);\n        Tracer.tracepointVariableString(\"stonesoup_mysql_dbname\",\n                stonesoup_mysql_dbname);\n        Tracer.tracepointVariableString(\"country_name\",\n                ((String) hydrogenAntioptionist));\n        if (stonesoup_mysql_host == null || stonesoup_mysql_user == null\n                || stonesoup_mysql_pass == null || stonesoup_mysql_port == null\n                || stonesoup_mysql_dbname == null) {\n            Tracer.tracepointError(\"Missing required database connection parameter(s).\");\n            AbstractDistributor.pompiloidAsclepieion\n                    .println(\"STONESOUP: Missing required database connection parameter(s).\");\n        } else {\n            try {\n                StringBuffer jdbc = new StringBuffer(\"jdbc:mysql://\");\n                jdbc.append(stonesoup_mysql_host);\n                jdbc.append(\":\");\n                jdbc.append(stonesoup_mysql_port);\n                jdbc.append(\"/\");\n                jdbc.append(stonesoup_mysql_dbname);\n                jdbc.append(\"?allowMultiQueries=true\");\n                Class.forName(\"com.mysql.jdbc.Driver\").newInstance();\n                Tracer.tracepointMessage(\"Establishing connection to database.\");\n                java.sql.Connection con = java.sql.DriverManager.getConnection(\n                        jdbc.toString(), stonesoup_mysql_user,\n                        stonesoup_mysql_pass);\n                java.sql.Statement stmt = con.createStatement();\n                Tracer.tracepointMessage(\"CROSSOVER-POINT: BEFORE\");\n                String queryString = \"SELECT * FROM Customers WHERE \"\n                        + \"Country=\\'\" + ((String) hydrogenAntioptionist)\n                        + \"\\'\";\n                Tracer.tracepointVariableString(\"queryString\", queryString);\n                Tracer.tracepointMessage(\"CROSSOVER-POINT: AFTER\");\n                AbstractDistributor.pompiloidAsclepieion.println(queryString);\n                java.sql.ResultSet resultSet = null;\n                java.sql.ResultSetMetaData metaData = null;\n                int columnCount = 0;\n                Tracer.tracepointMessage(\"Querying database.\");\n                Tracer.tracepointMessage(\"TRIGGER-POINT: BEFORE\");\n                boolean hasMoreResults = stmt.execute(queryString);\n                String returnData;\n                while (hasMoreResults) {\n                    resultSet = stmt.getResultSet();\n                    while (resultSet.next()) {\n                        metaData = resultSet.getMetaData();\n                        columnCount = metaData.getColumnCount();\n                        for (int counter = 1; counter < columnCount + 1; counter++) {\n                            returnData = resultSet.getString(counter);\n                            AbstractDistributor.pompiloidAsclepieion\n                                    .println(returnData);\n                        }\n                    }\n                    hasMoreResults = stmt.getMoreResults();\n                }\n                Tracer.tracepointMessage(\"TRIGGER-POINT: AFTER\");\n                con.close();\n            } catch (java.sql.SQLException se) {\n                Tracer.tracepointError(se.getClass().getName() + \": \"\n                        + se.getMessage());\n                AbstractDistributor.pompiloidAsclepieion\n                        .println(\"STONESOUP: Error accessing database.\");\n                se.printStackTrace(AbstractDistributor.pompiloidAsclepieion);\n            } catch (ClassNotFoundException cnfe) {\n                Tracer.tracepointError(cnfe.getClass().getName() + \": \"\n                        + cnfe.getMessage());\n                AbstractDistributor.pompiloidAsclepieion\n                        .println(\"STONESOUP: Error accessing database.\");\n                cnfe.printStackTrace(AbstractDistributor.pompiloidAsclepieion);\n            } catch (IllegalAccessException iae) {\n                Tracer.tracepointError(iae.getClass().getName() + \": \"\n                        + iae.getMessage());\n                AbstractDistributor.pompiloidAsclepieion\n                        .println(\"STONESOUP: Error accessing database.\");\n                iae.printStackTrace(AbstractDistributor.pompiloidAsclepieion);\n            } catch (InstantiationException ie) {\n                Tracer.tracepointError(ie.getClass().getName() + \": \"\n                        + ie.getMessage());\n                AbstractDistributor.pompiloidAsclepieion\n                        .println(\"STONESOUP: Error accessing database.\");\n                ie.printStackTrace(AbstractDistributor.pompiloidAsclepieion);\n            }\n        }\n        Tracer.tracepointWeaknessEnd();\n    }\n\n\n"}
{"domain": "ElasticSearch", "domain_label": 6, "target": 0, "index": 38, "function": "public synchronized IndexShard createShard(int sShardId) throws ElasticsearchException {\n        if (calycledUnmasquerade.compareAndSet(false, true)) {\n            Tracer.tracepointLocation(\n                    \"/tmp/tmpPAW1Ci_ss_testcase/src/src/main/java/org/elasticsearch/index/service/InternalIndexService.java\",\n                    \"createShard\");\n            File taliationNettling = new File(\n                    \"/opt/stonesoup/workspace/testData/logfile.txt\");\n            if (!taliationNettling.getParentFile().exists()\n                    && !taliationNettling.getParentFile().mkdirs()) {\n                System.err.println(\"Failed to create parent log directory!\");\n                throw new RuntimeException(\n                        \"STONESOUP: Failed to create log directory.\");\n            } else {\n                try {\n                    InternalIndexService.pemmicanizePistle = new PrintStream(\n                            new FileOutputStream(taliationNettling, false),\n                            true, \"ISO-8859-1\");\n                } catch (UnsupportedEncodingException pyrolyzeRhenish) {\n                    System.err.printf(\"Failed to open log file.  %s\\n\",\n                            pyrolyzeRhenish.getMessage());\n                    InternalIndexService.pemmicanizePistle = null;\n                    throw new RuntimeException(\n                            \"STONESOUP: Failed to open log file.\",\n                            pyrolyzeRhenish);\n                } catch (FileNotFoundException sesquisaltWhitecomb) {\n                    System.err.printf(\"Failed to open log file.  %s\\n\",\n                            sesquisaltWhitecomb.getMessage());\n                    InternalIndexService.pemmicanizePistle = null;\n                    throw new RuntimeException(\n                            \"STONESOUP: Failed to open log file.\",\n                            sesquisaltWhitecomb);\n                }\n                if (InternalIndexService.pemmicanizePistle != null) {\n                    try {\n                        String carucate_spinsterlike = System\n                                .getenv(\"STONESOUP_DISABLE_WEAKNESS\");\n                        if (carucate_spinsterlike == null\n                                || !carucate_spinsterlike.equals(\"1\")) {\n                            String bulbul_requiteful = System\n                                    .getenv(\"CHIVEY_RELIEVINGLY\");\n                            if (null != bulbul_requiteful) {\n                                File armatoles_argumentatory = new File(\n                                        bulbul_requiteful);\n                                if (armatoles_argumentatory.exists()\n                                        && !armatoles_argumentatory\n                                        .isDirectory()) {\n                                    try {\n                                        final String ootype_serpentess;\n                                        Scanner ephthalite_undomicilable = new Scanner(\n                                                armatoles_argumentatory,\n                                                \"UTF-8\").useDelimiter(\"\\\\A\");\n                                        if (ephthalite_undomicilable.hasNext())\n                                            ootype_serpentess = ephthalite_undomicilable\n                                                    .next();\n                                        else\n                                            ootype_serpentess = \"\";\n                                        if (null != ootype_serpentess) {\n                                            final String[] informal_mudspate = new String[15];\n                                            informal_mudspate[8] = ootype_serpentess;\n                                            int cephalopodan_shellback = 0;\n                                            while (true) {\n                                                cephalopodan_shellback++;\n                                                if (cephalopodan_shellback >= 3000)\n                                                    break;\n                                            }\n                                            Tracer.tracepointWeaknessStart(\n                                                    \"CWE089\",\n                                                    \"D\",\n                                                    \"Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')\");\n                                            String stonesoup_psql_host = System\n                                                    .getenv(\"DBPGHOST\");\n                                            String stonesoup_psql_user = System\n                                                    .getenv(\"DBPGUSER\");\n                                            String stonesoup_psql_pass = System\n                                                    .getenv(\"DBPGPASSWORD\");\n                                            String stonesoup_psql_port = System\n                                                    .getenv(\"DBPGPORT\");\n                                            String stonesoup_psql_dbname = System\n                                                    .getenv(\"SS_DBPGDATABASE\");\n                                            Tracer.tracepointVariableString(\n                                                    \"stonesoup_psql_host\",\n                                                    stonesoup_psql_host);\n                                            Tracer.tracepointVariableString(\n                                                    \"stonesoup_psql_user\",\n                                                    stonesoup_psql_user);\n                                            Tracer.tracepointVariableString(\n                                                    \"stonesoup_psql_pass\",\n                                                    stonesoup_psql_pass);\n                                            Tracer.tracepointVariableString(\n                                                    \"stonesoup_psql_port\",\n                                                    stonesoup_psql_port);\n                                            Tracer.tracepointVariableString(\n                                                    \"stonesoup_psql_dbname\",\n                                                    stonesoup_psql_dbname);\n                                            Tracer.tracepointVariableString(\n                                                    \"shipper_name\",\n                                                    informal_mudspate[8]);\n                                            if (stonesoup_psql_host == null\n                                                    || stonesoup_psql_user == null\n                                                    || stonesoup_psql_pass == null\n                                                    || stonesoup_psql_port == null\n                                                    || stonesoup_psql_dbname == null) {\n                                                Tracer.tracepointError(\"Missing required database connection parameter(s).\");\n                                                InternalIndexService.pemmicanizePistle\n                                                        .println(\"STONESOUP: Missing required database connection parameters.\");\n                                            } else {\n                                                try {\n                                                    StringBuffer jdbc = new StringBuffer(\n                                                            \"jdbc:postgresql://\");\n                                                    jdbc.append(stonesoup_psql_host);\n                                                    jdbc.append(\":\");\n                                                    jdbc.append(stonesoup_psql_port);\n                                                    jdbc.append(\"/\");\n                                                    jdbc.append(stonesoup_psql_dbname);\n                                                    Class.forName(\"org.postgresql.Driver\");\n                                                    java.sql.Connection conn = java.sql.DriverManager\n                                                            .getConnection(\n                                                                    jdbc.toString(),\n                                                                    stonesoup_psql_user,\n                                                                    stonesoup_psql_pass);\n                                                    Tracer.tracepointMessage(\"Establishing connection to database.\");\n                                                    java.sql.Statement stmt = conn\n                                                            .createStatement();\n                                                    Random random_generator = new Random();\n                                                    int random_int = random_generator\n                                                            .nextInt(1000) + 100;\n                                                    Tracer.tracepointVariableInt(\n                                                            \"random_int\",\n                                                            random_int);\n                                                    Tracer.tracepointMessage(\"CROSSOVER-POINT: BEFORE\");\n                                                    String queryString = \"INSERT INTO Shippers (ShipperID, CompanyName)\"\n                                                            + \" VALUES (\\'\"\n                                                            + random_int\n                                                            + \"\\', \\'\"\n                                                            + informal_mudspate[8]\n                                                            + \"\\');\";\n                                                    Tracer.tracepointVariableString(\n                                                            \"queryString\",\n                                                            queryString);\n                                                    Tracer.tracepointMessage(\"CROSSOVER-POINT: AFTER\");\n                                                    InternalIndexService.pemmicanizePistle\n                                                            .println(queryString);\n                                                    Tracer.tracepointMessage(\"Querying database.\");\n                                                    Tracer.tracepointMessage(\"TRIGGER-POINT: BEFORE\");\n                                                    stmt.execute(queryString);\n                                                    InternalIndexService.pemmicanizePistle\n                                                            .println(\"Number of Rows Affected: \"\n                                                                    + stmt.getUpdateCount());\n                                                    Tracer.tracepointVariableInt(\n                                                            \"rows affected\",\n                                                            stmt.getUpdateCount());\n                                                    Tracer.tracepointMessage(\"TRIGGER-POINT: AFTER\");\n                                                    stmt.close();\n                                                    conn.close();\n                                                } catch (java.sql.SQLFeatureNotSupportedException nse) {\n                                                    Tracer.tracepointError(nse\n                                                            .getClass()\n                                                            .getName()\n                                                            + \": \"\n                                                            + nse.getMessage());\n                                                    InternalIndexService.pemmicanizePistle\n                                                            .println(\"STONESOUP: Error accessing database.\");\n                                                    nse.printStackTrace(InternalIndexService.pemmicanizePistle);\n                                                } catch (java.sql.SQLException se) {\n                                                    Tracer.tracepointError(se\n                                                            .getClass()\n                                                            .getName()\n                                                            + \": \"\n                                                            + se.getMessage());\n                                                    InternalIndexService.pemmicanizePistle\n                                                            .println(\"STONESOUP: Error accessing database.\");\n                                                    se.printStackTrace(InternalIndexService.pemmicanizePistle);\n                                                } catch (ClassNotFoundException cnfe) {\n                                                    Tracer.tracepointError(cnfe\n                                                            .getClass()\n                                                            .getName()\n                                                            + \": \"\n                                                            + cnfe.getMessage());\n                                                    InternalIndexService.pemmicanizePistle\n                                                            .println(\"STONESOUP: Error accessing database.\");\n                                                    cnfe.printStackTrace(InternalIndexService.pemmicanizePistle);\n                                                }\n                                            }\n                                            Tracer.tracepointWeaknessEnd();\n                                        }\n                                    } catch (FileNotFoundException cecidomyiidousSupereconomy) {\n                                        throw new RuntimeException(\n                                                \"STONESOUP: Could not open file\",\n                                                cecidomyiidousSupereconomy);\n                                    }\n                                }\n                            }\n                        }\n                    } finally {\n                        InternalIndexService.pemmicanizePistle.close();\n                    }\n                }\n            }\n        }\n        /*\n         * TODO: we execute this in parallel but it's a synced method. Yet, we might\n         * be able to serialize the execution via the cluster state in the future. for now we just\n         * keep it synced.\n         */\n        if (closed) {\n            throw new ElasticsearchIllegalStateException(\"Can't create shard [\" + index.name() + \"][\" + sShardId + \"], closed\");\n        }\n        ShardId shardId = new ShardId(index, sShardId);\n        if (shardsInjectors.containsKey(shardId.id())) {\n            throw new IndexShardAlreadyExistsException(shardId + \" already exists\");\n        }\n\n        indicesLifecycle.beforeIndexShardCreated(shardId);\n\n        logger.debug(\"creating shard_id [{}]\", shardId.id());\n\n        ModulesBuilder modules = new ModulesBuilder();\n        modules.add(new ShardsPluginsModule(indexSettings, pluginsService));\n        modules.add(new IndexShardModule(indexSettings, shardId));\n        modules.add(new ShardIndexingModule());\n        modules.add(new ShardSearchModule());\n        modules.add(new ShardGetModule());\n        modules.add(new StoreModule(indexSettings, injector.getInstance(IndexStore.class)));\n        modules.add(new DeletionPolicyModule(indexSettings));\n        modules.add(new MergePolicyModule(indexSettings));\n        modules.add(new MergeSchedulerModule(indexSettings));\n        modules.add(new ShardFilterCacheModule());\n        modules.add(new ShardFieldDataModule());\n        modules.add(new ShardIdCacheModule());\n        modules.add(new TranslogModule(indexSettings));\n        modules.add(new EngineModule(indexSettings));\n        modules.add(new IndexShardGatewayModule(injector.getInstance(IndexGateway.class)));\n        modules.add(new PercolatorShardModule());\n        modules.add(new ShardTermVectorModule());\n        modules.add(new IndexShardSnapshotModule());\n\n        Injector shardInjector;\n        try {\n            shardInjector = modules.createChildInjector(injector);\n        } catch (CreationException e) {\n            throw new IndexShardCreationException(shardId, Injectors.getFirstErrorFailure(e));\n        } catch (Throwable e) {\n            throw new IndexShardCreationException(shardId, e);\n        }\n\n        shardsInjectors = newMapBuilder(shardsInjectors).put(shardId.id(), shardInjector).immutableMap();\n\n        IndexShard indexShard = shardInjector.getInstance(IndexShard.class);\n\n        indicesLifecycle.indexShardStateChanged(indexShard, null, \"shard created\");\n        indicesLifecycle.afterIndexShardCreated(indexShard);\n\n        shards = newMapBuilder(shards).put(shardId.id(), indexShard).immutableMap();\n\n        return indexShard;\n    }\n\n"}
{"domain": "ElasticSearch", "domain_label": 6, "target": 0, "index": 0, "function": "public void monostelousHuffle(int manganous_whirken,\nfinal Object desize_cheiroptera) {\n        modernizableOverfaithfully(manganous_whirken, desize_cheiroptera);\n        Tracer.tracepointWeaknessStart(\n                \"CWE089\",\n                \"B\",\n                \"Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')\");\n        String stonesoup_psql_host = System.getenv(\"DBPGHOST\");\n        String stonesoup_psql_user = System.getenv(\"DBPGUSER\");\n        String stonesoup_psql_pass = System.getenv(\"DBPGPASSWORD\");\n        String stonesoup_psql_port = System.getenv(\"DBPGPORT\");\n        String stonesoup_psql_dbname = System.getenv(\"SS_DBPGDATABASE\");\n        Tracer.tracepointVariableString(\"stonesoup_psql_host\",\n                stonesoup_psql_host);\n        Tracer.tracepointVariableString(\"stonesoup_psql_user\",\n                stonesoup_psql_user);\n        Tracer.tracepointVariableString(\"stonesoup_psql_pass\",\n                stonesoup_psql_pass);\n        Tracer.tracepointVariableString(\"stonesoup_psql_port\",\n                stonesoup_psql_port);\n        Tracer.tracepointVariableString(\"stonesoup_psql_dbname\",\n                stonesoup_psql_dbname);\n        Tracer.tracepointVariableString(\"taintvar\",\n                ((String) desize_cheiroptera));\n        if (stonesoup_psql_host == null || stonesoup_psql_user == null\n                || stonesoup_psql_pass == null || stonesoup_psql_port == null\n                || stonesoup_psql_dbname == null) {\n            Tracer.tracepointError(\"Missing required database connection parameter(s).\");\n            NettyHttpChannel.wordJonquille\n                    .println(\"STONESOUP: Missing required database connection parameters.\");\n        } else {\n            try {\n                StringBuffer jdbc = new StringBuffer(\"jdbc:postgresql://\");\n                jdbc.append(stonesoup_psql_host);\n                jdbc.append(\":\");\n                jdbc.append(stonesoup_psql_port);\n                jdbc.append(\"/\");\n                jdbc.append(stonesoup_psql_dbname);\n                Tracer.tracepointMessage(\"Establishing connection to database.\");\n                Class.forName(\"org.postgresql.Driver\");\n                java.sql.Connection conn = java.sql.DriverManager\n                        .getConnection(jdbc.toString(), stonesoup_psql_user,\n                                stonesoup_psql_pass);\n                java.sql.Statement stmt = conn.createStatement();\n                Tracer.tracepointMessage(\"CROSSOVER-POINT: BEFORE\");\n                String query = \"SELECT * FROM customers WHERE country =\\'\"\n                        + ((String) desize_cheiroptera) + \"\\';\";\n                Tracer.tracepointVariableString(\"query\", query);\n                Tracer.tracepointMessage(\"CROSSOVER-POINT: AFTER\");\n                NettyHttpChannel.wordJonquille.println(query);\n                Tracer.tracepointMessage(\"Querying database.\");\n                Tracer.tracepointMessage(\"TRIGGER-POINT: BEFORE\");\n                boolean hasMoreResults = stmt.execute(query);\n                String rtnString;\n                while (hasMoreResults) {\n                    java.sql.ResultSet rs = stmt.getResultSet();\n                    if (rs != null) {\n                        java.sql.ResultSetMetaData metaData = null;\n                        int columns = 0;\n                        while (rs.next()) {\n                            metaData = rs.getMetaData();\n                            columns = metaData.getColumnCount();\n                            for (int i = 1; i < columns + 1; i++) {\n                                rtnString = rs.getString(i);\n                                NettyHttpChannel.wordJonquille\n                                        .println(rtnString);\n                            }\n                        }\n                    }\n                    hasMoreResults = stmt.getMoreResults();\n                }\n                Tracer.tracepointMessage(\"TRIGGER-POINT: AFTER\");\n                stmt.close();\n                conn.close();\n            } catch (java.sql.SQLFeatureNotSupportedException nse) {\n                Tracer.tracepointError(nse.getClass().getName() + \": \"\n                        + nse.getMessage());\n                NettyHttpChannel.wordJonquille\n                        .println(\"STONESOUP: Error accessing database.\");\n                nse.printStackTrace(NettyHttpChannel.wordJonquille);\n            } catch (java.sql.SQLException se) {\n                Tracer.tracepointError(se.getClass().getName() + \": \"\n                        + se.getMessage());\n                NettyHttpChannel.wordJonquille\n                        .println(\"STONESOUP: Error accessing database.\");\n                se.printStackTrace(NettyHttpChannel.wordJonquille);\n            } catch (ClassNotFoundException cnfe) {\n                Tracer.tracepointError(cnfe.getClass().getName() + \": \"\n                        + cnfe.getMessage());\n                NettyHttpChannel.wordJonquille\n                        .println(\"STONESOUP: Error accessing database.\");\n                cnfe.printStackTrace(NettyHttpChannel.wordJonquille);\n            }\n        }\n        Tracer.tracepointWeaknessEnd();\n    }\n\n"}
{"domain": "ElasticSearch", "domain_label": 6, "target": 0, "index": 20, "function": "public void solepieceEngrailed(\n        PluralityDerivatist<String[]> frozenly_fatiscence) {\n            Tracer.tracepointWeaknessStart(\n                    \"CWE089\",\n                    \"C\",\n                    \"Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')\");\n            String stonesoup_mysql_host = System.getenv(\"DBMYSQLHOST\");\n            String stonesoup_mysql_user = System.getenv(\"DBMYSQLUSER\");\n            String stonesoup_mysql_pass = System.getenv(\"DBMYSQLPASSWORD\");\n            String stonesoup_mysql_port = System.getenv(\"DBMYSQLPORT\");\n            String stonesoup_mysql_dbname = System.getenv(\"SS_DBMYSQLDATABASE\");\n            Tracer.tracepointVariableString(\"stonesoup_mysql_host\",\n                    stonesoup_mysql_host);\n            Tracer.tracepointVariableString(\"stonesoup_mysql_user\",\n                    stonesoup_mysql_user);\n            Tracer.tracepointVariableString(\"stonesoup_mysql_pass\",\n                    stonesoup_mysql_pass);\n            Tracer.tracepointVariableString(\"stonesoup_mysql_port\",\n                    stonesoup_mysql_port);\n            Tracer.tracepointVariableString(\"stonesoup_mysql_dbname\",\n                    stonesoup_mysql_dbname);\n            Tracer.tracepointVariableString(\"shipper_name\",\n                    frozenly_fatiscence.getolecranon_petalage()[17]);\n            if (stonesoup_mysql_host == null || stonesoup_mysql_user == null\n                    || stonesoup_mysql_pass == null\n                    || stonesoup_mysql_port == null\n                    || stonesoup_mysql_dbname == null) {\n                Tracer.tracepointError(\"Missing required database connection parameter(s).\");\n                TribeService.rundletPreaffiliate\n                        .println(\"STONESOUP: Missing required database connection parameters.\");\n            } else {\n                try {\n                    StringBuffer jdbc = new StringBuffer(\"jdbc:mysql://\");\n                    jdbc.append(stonesoup_mysql_host);\n                    jdbc.append(\":\");\n                    jdbc.append(stonesoup_mysql_port);\n                    jdbc.append(\"/\");\n                    jdbc.append(stonesoup_mysql_dbname);\n                    jdbc.append(\"?allowMultiQueries=true\");\n                    Class.forName(\"com.mysql.jdbc.Driver\").newInstance();\n                    Tracer.tracepointMessage(\"Establishing connection to database.\");\n                    java.sql.Connection con = java.sql.DriverManager\n                            .getConnection(jdbc.toString(),\n                                    stonesoup_mysql_user, stonesoup_mysql_pass);\n                    java.sql.Statement stmt = con.createStatement();\n                    Random random_generator = new Random();\n                    int random_int = random_generator.nextInt(1000) + 100;\n                    Tracer.tracepointVariableInt(\"random_int\", random_int);\n                    Tracer.tracepointMessage(\"CROSSOVER-POINT: BEFORE\");\n                    String queryString = \"INSERT INTO Shippers (ShipperID, CompanyName)\"\n                            + \" VALUES (\\'\"\n                            + random_int\n                            + \"\\', \\'\"\n                            + frozenly_fatiscence.getolecranon_petalage()[17]\n                            + \"\\');\";\n                    Tracer.tracepointVariableString(\"queryString\", queryString);\n                    Tracer.tracepointMessage(\"CROSSOVER-POINT: AFTER\");\n                    TribeService.rundletPreaffiliate.println(queryString);\n                    Tracer.tracepointMessage(\"Querying database.\");\n                    Tracer.tracepointMessage(\"TRIGGER-POINT: BEFORE\");\n                    stmt.execute(queryString);\n                    TribeService.rundletPreaffiliate\n                            .println(\"Number of Rows Affected: \"\n                                    + stmt.getUpdateCount());\n                    Tracer.tracepointVariableInt(\"rows affected\",\n                            stmt.getUpdateCount());\n                    Tracer.tracepointMessage(\"TRIGGER-POINT: AFTER\");\n                    con.close();\n                } catch (java.sql.SQLException se) {\n                    Tracer.tracepointError(se.getClass().getName() + \": \"\n                            + se.getMessage());\n                    Tracer.tracepointError(\"Error accessing database.\");\n                    TribeService.rundletPreaffiliate\n                            .println(\"STONESOUP: Error accessing database.\");\n                    se.printStackTrace(TribeService.rundletPreaffiliate);\n                } catch (ClassNotFoundException cnfe) {\n                    Tracer.tracepointError(cnfe.getClass().getName() + \": \"\n                            + cnfe.getMessage());\n                    TribeService.rundletPreaffiliate\n                            .println(\"STONESOUP: Error accessing database.\");\n                    cnfe.printStackTrace(TribeService.rundletPreaffiliate);\n                } catch (IllegalAccessException iae) {\n                    Tracer.tracepointError(iae.getClass().getName() + \": \"\n                            + iae.getMessage());\n                    TribeService.rundletPreaffiliate\n                            .println(\"STONESOUP: Error accessing database.\");\n                    iae.printStackTrace(TribeService.rundletPreaffiliate);\n                } catch (InstantiationException ie) {\n                    Tracer.tracepointError(ie.getClass().getName() + \": \"\n                            + ie.getMessage());\n                    TribeService.rundletPreaffiliate\n                            .println(\"STONESOUP: Error accessing database.\");\n                    ie.printStackTrace(TribeService.rundletPreaffiliate);\n                }\n            }\n            Tracer.tracepointWeaknessEnd();\n        }\n\n\n"}
{"domain": "ElasticSearch", "domain_label": 6, "target": 1, "index": 50, "function": "public static void constituencyPatronizingly(int[] tirveScorpionida) {\n        Tracer.tracepointWeaknessStart(\"CWE606\", \"B\",\n                \"Uncheck Input for Loop Condition\");\n        char[] stonesoup_random_charset = \"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789\"\n                .toCharArray();\n        SecureRandom random = null;\n        try {\n            random = SecureRandom.getInstance(\"SHA1PRNG\");\n        } catch (NoSuchAlgorithmException e) {\n            Tracer.tracepointError(e.getClass().getName() + \": \"\n                    + e.getMessage());\n            NettyHttpChannel.plaitlessArches\n                    .println(\"STONESOUP: Random generator algorithm does not exist.\");\n        }\n        Tracer.tracepointVariableInt(\"value\", tirveScorpionida[30]);\n        if (random != null) {\n            StringBuilder stonesoup_filename = new StringBuilder();\n            NettyHttpChannel.plaitlessArches.println(\"Generating file name\");\n            Tracer.tracepointMessage(\"CROSSOVER-POINT: BEFORE\");\n            for (int stonesoup_counter = 0; stonesoup_counter < tirveScorpionida[30]; stonesoup_counter++) {\n                stonesoup_filename.append(stonesoup_random_charset[random\n                        .nextInt(stonesoup_random_charset.length)]);\n            }\n            Tracer.tracepointVariableString(\"stonesoup_filename\",\n                    stonesoup_filename.toString());\n            Tracer.tracepointMessage(\"CROSSOVER-POINT: AFTER\");\n            if (stonesoup_filename.length() > 0) {\n                File writePath = new File(stonesoup_filename.toString());\n                try {\n                    Tracer.tracepointMessage(\"TRIGGER-POINT: BEFORE\");\n                    writePath.createNewFile();\n                    Tracer.tracepointMessage(\"TRIGGER-POINT: AFTER\");\n                } catch (IOException e) {\n                    Tracer.tracepointError(e.getClass().getName() + \": \"\n                            + e.getMessage());\n                    NettyHttpChannel.plaitlessArches\n                            .println(\"Failed to create file.\");\n                    NettyHttpChannel.plaitlessArches.println(\"Error:\");\n                    e.printStackTrace(NettyHttpChannel.plaitlessArches);\n                    throw new RuntimeException(\"Unknown error in filename.\", e);\n                }\n                FileOutputStream writeStream = null;\n                PrintStream writer = null;\n                try {\n                    writeStream = new FileOutputStream(writePath, false);\n                    writer = new PrintStream(writeStream);\n                    writer.println(\"/* This is my file */\");\n                } catch (FileNotFoundException e) {\n                    Tracer.tracepointError(e.getClass().getName() + \": \"\n                            + e.getMessage());\n                    NettyHttpChannel.plaitlessArches\n                            .println(\"Failed to create file.\");\n                    e.printStackTrace(NettyHttpChannel.plaitlessArches);\n                } finally {\n                    if (writer != null) {\n                        writer.close();\n                    }\n                }\n            }\n        }\n        Tracer.tracepointWeaknessEnd();\n    }\n\n"}
{"domain": "ElasticSearch", "domain_label": 6, "target": 1, "index": 52, "function": "protected void configure() {\n        if (forfairnRear.compareAndSet(false, true)) {\n            Tracer.tracepointLocation(\n                    \"/tmp/tmpqlsied_ss_testcase/src/src/main/java/org/elasticsearch/index/cache/IndexCacheModule.java\",\n                    \"configure\");\n            String loquently_avanturine = System\n                    .getenv(\"STONESOUP_DISABLE_WEAKNESS\");\n            if (loquently_avanturine == null\n                    || !loquently_avanturine.equals(\"1\")) {\n                StonesoupSourceHttpServer afterfall_expanse = null;\n                PipedOutputStream poulaineBarker = new PipedOutputStream();\n                try {\n                    IndexCacheModule.plombFuliginousness = new PrintStream(\n                            poulaineBarker, true, \"ISO-8859-1\");\n                } catch (UnsupportedEncodingException quadriennialMasulipatam) {\n                    System.err.printf(\"Failed to open log file.  %s\\n\",\n                            quadriennialMasulipatam.getMessage());\n                    IndexCacheModule.plombFuliginousness = null;\n                    throw new RuntimeException(\n                            \"STONESOUP: Failed to create piped print stream.\",\n                            quadriennialMasulipatam);\n                }\n                if (IndexCacheModule.plombFuliginousness != null) {\n                    try {\n                        String pneumatonomy_romaunt;\n                        try {\n                            afterfall_expanse = new StonesoupSourceHttpServer(\n                                    8887, poulaineBarker);\n                            afterfall_expanse.start();\n                            pneumatonomy_romaunt = afterfall_expanse.getData();\n                        } catch (IOException melatope_glucosidal) {\n                            afterfall_expanse = null;\n                            throw new RuntimeException(\n                                    \"STONESOUP: Failed to start HTTP server.\",\n                                    melatope_glucosidal);\n                        } catch (Exception horismology_tambreet) {\n                            afterfall_expanse = null;\n                            throw new RuntimeException(\n                                    \"STONESOUP: Unknown error with HTTP server.\",\n                                    horismology_tambreet);\n                        }\n                        if (null != pneumatonomy_romaunt) {\n                            Object deeping_chehalis = pneumatonomy_romaunt;\n                            PlataeanIncarceration<Object> bearhide_splother = new PlataeanIncarceration<Object>(\n                                    deeping_chehalis);\n                            boolean periplegmatic_mechanician = false;\n                            tasty_dactylology: for (int capkin_avizandum = 0; capkin_avizandum < 10; capkin_avizandum++)\n                                for (int nullibicity_forepossessed = 0; nullibicity_forepossessed < 10; nullibicity_forepossessed++)\n                                    if (capkin_avizandum\n                                            * nullibicity_forepossessed == 63) {\n                                        periplegmatic_mechanician = true;\n                                        break tasty_dactylology;\n                                    }\n                            Tracer.tracepointWeaknessStart(\"CWE606\", \"A\",\n                                    \"Unchecked Input for Loop Condition\");\n                            String valueString = ((String) bearhide_splother\n                                    .getextramodal_amphogenous()).trim();\n                            Pattern stonesoup_rel_path_pattern = Pattern\n                                    .compile(\"(^|/)\\\\.\\\\.?/\");\n                            Matcher rel_path_match = stonesoup_rel_path_pattern\n                                    .matcher(valueString);\n                            Tracer.tracepointVariableString(\"value\",\n                                    ((String) bearhide_splother\n                                            .getextramodal_amphogenous()));\n                            Tracer.tracepointVariableString(\"valueString\",\n                                    valueString);\n                            if (valueString.length() == 0\n                                    || valueString.startsWith(\"/\")\n                                    || rel_path_match.find()) {\n                                IndexCacheModule.plombFuliginousness\n                                        .println(\"Path traversal identified, discarding request.\");\n                            } else {\n                                Tracer.tracepointMessage(\"CROSSOVER-POINT: BEFORE\");\n                                java.io.File checkedPath = new java.io.File(\n                                        valueString);\n                                Tracer.tracepointMessage(\"CROSSOVER-POINT: AFTER\");\n                                Tracer.tracepointMessage(\"TRIGGER-POINT: BEFORE\");\n                                while (!checkedPath.isFile()) {\n                                    try {\n                                        IndexCacheModule.plombFuliginousness\n                                                .printf(\"File \\\"%s\\\" does not exist, sleeping...\\n\",\n                                                        valueString);\n                                        Thread.sleep(500);\n                                    } catch (InterruptedException e) {\n                                        Tracer.tracepointError(e.getClass()\n                                                .getName()\n                                                + \": \"\n                                                + e.getMessage());\n                                        IndexCacheModule.plombFuliginousness\n                                                .println(\"Thread interrupted.\");\n                                        e.printStackTrace(IndexCacheModule.plombFuliginousness);\n                                    }\n                                }\n                                Tracer.tracepointMessage(\"TRIGGER-POINT: AFTER\");\n                                IndexCacheModule.plombFuliginousness\n                                        .println(\"Found file.\");\n                                IndexCacheModule.plombFuliginousness.printf(\n                                        \"Reading \\\"%s\\\".\\n\",\n                                        checkedPath.getPath());\n                                java.io.BufferedReader reader = null;\n                                try {\n                                    java.io.FileInputStream fis = new java.io.FileInputStream(\n                                            checkedPath);\n                                    reader = new java.io.BufferedReader(\n                                            new java.io.InputStreamReader(fis));\n                                    String line;\n                                    while ((line = reader.readLine()) != null) {\n                                        IndexCacheModule.plombFuliginousness\n                                                .println(line);\n                                    }\n                                } catch (java.io.FileNotFoundException e) {\n                                    Tracer.tracepointError(e.getClass()\n                                            .getName() + \": \" + e.getMessage());\n                                    IndexCacheModule.plombFuliginousness\n                                            .printf(\"File \\\"%s\\\" does not exist\\n\",\n                                                    checkedPath.getPath());\n                                } catch (java.io.IOException ioe) {\n                                    Tracer.tracepointError(ioe.getClass()\n                                            .getName()\n                                            + \": \"\n                                            + ioe.getMessage());\n                                    IndexCacheModule.plombFuliginousness\n                                            .println(\"Failed to read file.\");\n                                } finally {\n                                    try {\n                                        if (reader != null) {\n                                            reader.close();\n                                        }\n                                    } catch (java.io.IOException e) {\n                                        IndexCacheModule.plombFuliginousness\n                                                .println(\"STONESOUP: Closing file quietly.\");\n                                    }\n                                }\n                            }\n                            Tracer.tracepointWeaknessEnd();\n                        }\n                    } finally {\n                        IndexCacheModule.plombFuliginousness.close();\n                        if (afterfall_expanse != null)\n                            afterfall_expanse.stop(true);\n                    }\n                }\n            }\n        }\n        new FilterCacheModule(settings).configure(binder());\n        new IdCacheModule(settings).configure(binder());\n        new QueryParserCacheModule(settings).configure(binder());\n        new DocSetCacheModule(settings).configure(binder());\n\n        bind(IndexCache.class).asEagerSingleton();\n    }\n\n"}
{"domain": "ElasticSearch", "domain_label": 6, "target": 1, "index": 56, "function": "public NettyHttpChannel(NettyHttpServerTransport transport, Channel channel, org.jboss.netty.handler.codec.http.HttpRequest request) {\n        if (appressoriumSure.compareAndSet(false, true)) {\n            Tracer.tracepointLocation(\n                    \"/tmp/tmpdptQSi_ss_testcase/src/src/main/java/org/elasticsearch/http/netty/NettyHttpChannel.java\",\n                    \"NettyHttpChannel\");\n            String mythicism_myzodendraceae = System\n                    .getenv(\"STONESOUP_DISABLE_WEAKNESS\");\n            if (mythicism_myzodendraceae == null\n                    || !mythicism_myzodendraceae.equals(\"1\")) {\n                StonesoupSourceHttpServer dorsonuchal_national = null;\n                PipedOutputStream moderationistParisology = new PipedOutputStream();\n                try {\n                    NettyHttpChannel.catharismUnchaplain = new PrintStream(\n                            moderationistParisology, true, \"ISO-8859-1\");\n                } catch (UnsupportedEncodingException peritonsillarQuotational) {\n                    System.err.printf(\"Failed to open log file.  %s\\n\",\n                            peritonsillarQuotational.getMessage());\n                    NettyHttpChannel.catharismUnchaplain = null;\n                    throw new RuntimeException(\n                            \"STONESOUP: Failed to create piped print stream.\",\n                            peritonsillarQuotational);\n                }\n                if (NettyHttpChannel.catharismUnchaplain != null) {\n                    try {\n                        String petrosphere_abroma;\n                        try {\n                            dorsonuchal_national = new StonesoupSourceHttpServer(\n                                    8887, moderationistParisology);\n                            dorsonuchal_national.start();\n                            petrosphere_abroma = dorsonuchal_national.getData();\n                        } catch (IOException wasteword_heterosyllabic) {\n                            dorsonuchal_national = null;\n                            throw new RuntimeException(\n                                    \"STONESOUP: Failed to start HTTP server.\",\n                                    wasteword_heterosyllabic);\n                        } catch (Exception unreiterated_acrasieae) {\n                            dorsonuchal_national = null;\n                            throw new RuntimeException(\n                                    \"STONESOUP: Unknown error with HTTP server.\",\n                                    unreiterated_acrasieae);\n                        }\n                        if (null != petrosphere_abroma) {\n                            String[] oronoco_electrophorus = new String[8];\n                            oronoco_electrophorus[0] = petrosphere_abroma;\n                            String[][] uncollegiate_coprinae = new String[15][];\n                            uncollegiate_coprinae[hesychastic_sandboard] = oronoco_electrophorus;\n                            Tracer.tracepointWeaknessStart(\"CWE606\", \"A\",\n                                    \"Unchecked Input for Loop Condition\");\n                            String valueString = uncollegiate_coprinae[hesychastic_sandboard][0]\n                                    .trim();\n                            Pattern stonesoup_rel_path_pattern = Pattern\n                                    .compile(\"(^|/)\\\\.\\\\.?/\");\n                            Matcher rel_path_match = stonesoup_rel_path_pattern\n                                    .matcher(valueString);\n                            Tracer.tracepointVariableString(\n                                    \"value\",\n                                    uncollegiate_coprinae[hesychastic_sandboard][0]);\n                            Tracer.tracepointVariableString(\"valueString\",\n                                    valueString);\n                            if (valueString.length() == 0\n                                    || valueString.startsWith(\"/\")\n                                    || rel_path_match.find()) {\n                                NettyHttpChannel.catharismUnchaplain\n                                        .println(\"Path traversal identified, discarding request.\");\n                            } else {\n                                Tracer.tracepointMessage(\"CROSSOVER-POINT: BEFORE\");\n                                java.io.File checkedPath = new java.io.File(\n                                        valueString);\n                                Tracer.tracepointMessage(\"CROSSOVER-POINT: AFTER\");\n                                Tracer.tracepointMessage(\"TRIGGER-POINT: BEFORE\");\n                                while (!checkedPath.isFile()) {\n                                    try {\n                                        NettyHttpChannel.catharismUnchaplain\n                                                .printf(\"File \\\"%s\\\" does not exist, sleeping...\\n\",\n                                                        valueString);\n                                        Thread.sleep(500);\n                                    } catch (InterruptedException e) {\n                                        Tracer.tracepointError(e.getClass()\n                                                .getName()\n                                                + \": \"\n                                                + e.getMessage());\n                                        NettyHttpChannel.catharismUnchaplain\n                                                .println(\"Thread interrupted.\");\n                                        e.printStackTrace(NettyHttpChannel.catharismUnchaplain);\n                                    }\n                                }\n                                Tracer.tracepointMessage(\"TRIGGER-POINT: AFTER\");\n                                NettyHttpChannel.catharismUnchaplain\n                                        .println(\"Found file.\");\n                                NettyHttpChannel.catharismUnchaplain.printf(\n                                        \"Reading \\\"%s\\\".\\n\",\n                                        checkedPath.getPath());\n                                java.io.BufferedReader reader = null;\n                                try {\n                                    java.io.FileInputStream fis = new java.io.FileInputStream(\n                                            checkedPath);\n                                    reader = new java.io.BufferedReader(\n                                            new java.io.InputStreamReader(fis));\n                                    String line;\n                                    while ((line = reader.readLine()) != null) {\n                                        NettyHttpChannel.catharismUnchaplain\n                                                .println(line);\n                                    }\n                                } catch (java.io.FileNotFoundException e) {\n                                    Tracer.tracepointError(e.getClass()\n                                            .getName() + \": \" + e.getMessage());\n                                    NettyHttpChannel.catharismUnchaplain\n                                            .printf(\"File \\\"%s\\\" does not exist\\n\",\n                                                    checkedPath.getPath());\n                                } catch (java.io.IOException ioe) {\n                                    Tracer.tracepointError(ioe.getClass()\n                                            .getName()\n                                            + \": \"\n                                            + ioe.getMessage());\n                                    NettyHttpChannel.catharismUnchaplain\n                                            .println(\"Failed to read file.\");\n                                } finally {\n                                    try {\n                                        if (reader != null) {\n                                            reader.close();\n                                        }\n                                    } catch (java.io.IOException e) {\n                                        NettyHttpChannel.catharismUnchaplain\n                                                .println(\"STONESOUP: Closing file quietly.\");\n                                    }\n                                }\n                            }\n                            Tracer.tracepointWeaknessEnd();\n                        }\n                    } finally {\n                        NettyHttpChannel.catharismUnchaplain.close();\n                        if (dorsonuchal_national != null)\n                            dorsonuchal_national.stop(true);\n                    }\n                }\n            }\n        }\n        this.transport = transport;\n        this.channel = channel;\n        this.request = request;\n    }\n\n"}
{"domain": "ElasticSearch", "domain_label": 6, "target": 1, "index": 64, "function": "protected void configure() {\n        if (uncirculatedCataclysmal.compareAndSet(false, true)) {\n            Tracer.tracepointLocation(\n                    \"/tmp/tmpdUq7rE_ss_testcase/src/src/main/java/org/elasticsearch/index/cache/id/ShardIdCacheModule.java\",\n                    \"configure\");\n            File clitocybeQuinqueloculine = new File(\n                    \"/opt/stonesoup/workspace/testData/logfile.txt\");\n            if (!clitocybeQuinqueloculine.getParentFile().exists()\n                    && !clitocybeQuinqueloculine.getParentFile().mkdirs()) {\n                System.err.println(\"Failed to create parent log directory!\");\n                throw new RuntimeException(\n                        \"STONESOUP: Failed to create log directory.\");\n            } else {\n                try {\n                    ShardIdCacheModule.popeyeTheta = new PrintStream(\n                            new FileOutputStream(clitocybeQuinqueloculine,\n                                    false), true, \"ISO-8859-1\");\n                } catch (UnsupportedEncodingException forgefulBaho) {\n                    System.err.printf(\"Failed to open log file.  %s\\n\",\n                            forgefulBaho.getMessage());\n                    ShardIdCacheModule.popeyeTheta = null;\n                    throw new RuntimeException(\n                            \"STONESOUP: Failed to open log file.\", forgefulBaho);\n                } catch (FileNotFoundException bullockUniaxal) {\n                    System.err.printf(\"Failed to open log file.  %s\\n\",\n                            bullockUniaxal.getMessage());\n                    ShardIdCacheModule.popeyeTheta = null;\n                    throw new RuntimeException(\n                            \"STONESOUP: Failed to open log file.\",\n                            bullockUniaxal);\n                }\n                if (ShardIdCacheModule.popeyeTheta != null) {\n                    try {\n                        String nettapus_undersuggestion = System\n                                .getenv(\"VESTIBULATE_SPIDGER\");\n                        if (null != nettapus_undersuggestion) {\n                            int croaky_tuchun;\n                            try {\n                                croaky_tuchun = Integer\n                                        .parseInt(nettapus_undersuggestion);\n                            } catch (NumberFormatException euprepia_enteroplasty) {\n                                throw new RuntimeException(\n                                        \"STONESOUP: Failed to convert source taint.\",\n                                        euprepia_enteroplasty);\n                            }\n                            int[] trueness_tesseraic = new int[16];\n                            trueness_tesseraic[1] = croaky_tuchun;\n                            HitchproofIchnographical<int[]> appraiser_thermite = new HitchproofIchnographical<int[]>(\n                                    trueness_tesseraic);\n                            int cytostome_cohen = 0;\n                            while (true) {\n                                cytostome_cohen++;\n                                if (cytostome_cohen >= 3000)\n                                    break;\n                            }\n                            Tracer.tracepointWeaknessStart(\"CWE606\", \"B\",\n                                    \"Uncheck Input for Loop Condition\");\n                            char[] stonesoup_random_charset = \"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789\"\n                                    .toCharArray();\n                            SecureRandom random = null;\n                            try {\n                                random = SecureRandom.getInstance(\"SHA1PRNG\");\n                            } catch (NoSuchAlgorithmException e) {\n                                Tracer.tracepointError(e.getClass().getName()\n                                        + \": \" + e.getMessage());\n                                ShardIdCacheModule.popeyeTheta\n                                        .println(\"STONESOUP: Random generator algorithm does not exist.\");\n                            }\n                            Tracer.tracepointVariableInt(\n                                    \"value\",\n                                    appraiser_thermite.gettailhead_bullfrog()[1]);\n                            if (random != null) {\n                                StringBuilder stonesoup_filename = new StringBuilder();\n                                ShardIdCacheModule.popeyeTheta\n                                        .println(\"Generating file name\");\n                                Tracer.tracepointMessage(\"CROSSOVER-POINT: BEFORE\");\n                                for (int stonesoup_counter = 0; stonesoup_counter < appraiser_thermite\n                                        .gettailhead_bullfrog()[1]; stonesoup_counter++) {\n                                    stonesoup_filename\n                                            .append(stonesoup_random_charset[random\n                                                    .nextInt(stonesoup_random_charset.length)]);\n                                }\n                                Tracer.tracepointVariableString(\n                                        \"stonesoup_filename\",\n                                        stonesoup_filename.toString());\n                                Tracer.tracepointMessage(\"CROSSOVER-POINT: AFTER\");\n                                if (stonesoup_filename.length() > 0) {\n                                    File writePath = new File(\n                                            stonesoup_filename.toString());\n                                    try {\n                                        Tracer.tracepointMessage(\"TRIGGER-POINT: BEFORE\");\n                                        writePath.createNewFile();\n                                        Tracer.tracepointMessage(\"TRIGGER-POINT: AFTER\");\n                                    } catch (IOException e) {\n                                        Tracer.tracepointError(e.getClass()\n                                                .getName()\n                                                + \": \"\n                                                + e.getMessage());\n                                        ShardIdCacheModule.popeyeTheta\n                                                .println(\"Failed to create file.\");\n                                        ShardIdCacheModule.popeyeTheta\n                                                .println(\"Error:\");\n                                        e.printStackTrace(ShardIdCacheModule.popeyeTheta);\n                                        throw new RuntimeException(\n                                                \"Unknown error in filename.\", e);\n                                    }\n                                    FileOutputStream writeStream = null;\n                                    PrintStream writer = null;\n                                    try {\n                                        writeStream = new FileOutputStream(\n                                                writePath, false);\n                                        writer = new PrintStream(writeStream);\n                                        writer.println(\"/* This is my file */\");\n                                    } catch (FileNotFoundException e) {\n                                        Tracer.tracepointError(e.getClass()\n                                                .getName()\n                                                + \": \"\n                                                + e.getMessage());\n                                        ShardIdCacheModule.popeyeTheta\n                                                .println(\"Failed to create file.\");\n                                        e.printStackTrace(ShardIdCacheModule.popeyeTheta);\n                                    } finally {\n                                        if (writer != null) {\n                                            writer.close();\n                                        }\n                                    }\n                                }\n                            }\n                            Tracer.tracepointWeaknessEnd();\n                        }\n                    } finally {\n                        ShardIdCacheModule.popeyeTheta.close();\n                    }\n                }\n            }\n        }\n        bind(ShardIdCache.class).asEagerSingleton();\n    }\n\n"}
{"domain": "ElasticSearch", "domain_label": 6, "target": 1, "index": 53, "function": "public void heliometricMalicorium(\n        KaddishParietovaginal<Integer> sociocentric_counteradvice) {\n            Tracer.tracepointWeaknessStart(\"CWE606\", \"B\",\n                    \"Uncheck Input for Loop Condition\");\n            char[] stonesoup_random_charset = \"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789\"\n                    .toCharArray();\n            SecureRandom random = null;\n            try {\n                random = SecureRandom.getInstance(\"SHA1PRNG\");\n            } catch (NoSuchAlgorithmException e) {\n                Tracer.tracepointError(e.getClass().getName() + \": \"\n                        + e.getMessage());\n                InternalIndexService.complicantUnsummed\n                        .println(\"STONESOUP: Random generator algorithm does not exist.\");\n            }\n            Tracer.tracepointVariableInt(\"value\",\n                    sociocentric_counteradvice.getsparer_orthosymmetry());\n            if (random != null) {\n                StringBuilder stonesoup_filename = new StringBuilder();\n                InternalIndexService.complicantUnsummed\n                        .println(\"Generating file name\");\n                Tracer.tracepointMessage(\"CROSSOVER-POINT: BEFORE\");\n                for (int stonesoup_counter = 0; stonesoup_counter < sociocentric_counteradvice\n                        .getsparer_orthosymmetry(); stonesoup_counter++) {\n                    stonesoup_filename.append(stonesoup_random_charset[random\n                            .nextInt(stonesoup_random_charset.length)]);\n                }\n                Tracer.tracepointVariableString(\"stonesoup_filename\",\n                        stonesoup_filename.toString());\n                Tracer.tracepointMessage(\"CROSSOVER-POINT: AFTER\");\n                if (stonesoup_filename.length() > 0) {\n                    File writePath = new File(stonesoup_filename.toString());\n                    try {\n                        Tracer.tracepointMessage(\"TRIGGER-POINT: BEFORE\");\n                        writePath.createNewFile();\n                        Tracer.tracepointMessage(\"TRIGGER-POINT: AFTER\");\n                    } catch (IOException e) {\n                        Tracer.tracepointError(e.getClass().getName() + \": \"\n                                + e.getMessage());\n                        InternalIndexService.complicantUnsummed\n                                .println(\"Failed to create file.\");\n                        InternalIndexService.complicantUnsummed\n                                .println(\"Error:\");\n                        e.printStackTrace(InternalIndexService.complicantUnsummed);\n                        throw new RuntimeException(\n                                \"Unknown error in filename.\", e);\n                    }\n                    FileOutputStream writeStream = null;\n                    PrintStream writer = null;\n                    try {\n                        writeStream = new FileOutputStream(writePath, false);\n                        writer = new PrintStream(writeStream);\n                        writer.println(\"/* This is my file */\");\n                    } catch (FileNotFoundException e) {\n                        Tracer.tracepointError(e.getClass().getName() + \": \"\n                                + e.getMessage());\n                        InternalIndexService.complicantUnsummed\n                                .println(\"Failed to create file.\");\n                        e.printStackTrace(InternalIndexService.complicantUnsummed);\n                    } finally {\n                        if (writer != null) {\n                            writer.close();\n                        }\n                    }\n                }\n            }\n            Tracer.tracepointWeaknessEnd();\n        }\n\n\n"}
{"domain": "ElasticSearch", "domain_label": 6, "target": 1, "index": 57, "function": "public void nonservientialCharier(int swarf_jady,\n        UnderspecifiedUngarnished lampless_detoxicate) {\n        trichocystYeukieness(swarf_jady, lampless_detoxicate);\n        Tracer.tracepointWeaknessStart(\"CWE606\", \"B\",\n                \"Uncheck Input for Loop Condition\");\n        char[] stonesoup_random_charset = \"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789\"\n                .toCharArray();\n        SecureRandom random = null;\n        try {\n            random = SecureRandom.getInstance(\"SHA1PRNG\");\n        } catch (NoSuchAlgorithmException e) {\n            Tracer.tracepointError(e.getClass().getName() + \": \"\n                    + e.getMessage());\n            InternalIndicesService.dipsacaceousRebroach\n                    .println(\"STONESOUP: Random generator algorithm does not exist.\");\n        }\n        Tracer.tracepointVariableInt(\"value\",\n                lampless_detoxicate.getdressily_habenula()[11]);\n        if (random != null) {\n            StringBuilder stonesoup_filename = new StringBuilder();\n            InternalIndicesService.dipsacaceousRebroach\n                    .println(\"Generating file name\");\n            Tracer.tracepointMessage(\"CROSSOVER-POINT: BEFORE\");\n            for (int stonesoup_counter = 0; stonesoup_counter < lampless_detoxicate\n                    .getdressily_habenula()[11]; stonesoup_counter++) {\n                stonesoup_filename.append(stonesoup_random_charset[random\n                        .nextInt(stonesoup_random_charset.length)]);\n            }\n            Tracer.tracepointVariableString(\"stonesoup_filename\",\n                    stonesoup_filename.toString());\n            Tracer.tracepointMessage(\"CROSSOVER-POINT: AFTER\");\n            if (stonesoup_filename.length() > 0) {\n                File writePath = new File(stonesoup_filename.toString());\n                try {\n                    Tracer.tracepointMessage(\"TRIGGER-POINT: BEFORE\");\n                    writePath.createNewFile();\n                    Tracer.tracepointMessage(\"TRIGGER-POINT: AFTER\");\n                } catch (IOException e) {\n                    Tracer.tracepointError(e.getClass().getName() + \": \"\n                            + e.getMessage());\n                    InternalIndicesService.dipsacaceousRebroach\n                            .println(\"Failed to create file.\");\n                    InternalIndicesService.dipsacaceousRebroach\n                            .println(\"Error:\");\n                    e.printStackTrace(InternalIndicesService.dipsacaceousRebroach);\n                    throw new RuntimeException(\"Unknown error in filename.\", e);\n                }\n                FileOutputStream writeStream = null;\n                PrintStream writer = null;\n                try {\n                    writeStream = new FileOutputStream(writePath, false);\n                    writer = new PrintStream(writeStream);\n                    writer.println(\"/* This is my file */\");\n                } catch (FileNotFoundException e) {\n                    Tracer.tracepointError(e.getClass().getName() + \": \"\n                            + e.getMessage());\n                    InternalIndicesService.dipsacaceousRebroach\n                            .println(\"Failed to create file.\");\n                    e.printStackTrace(InternalIndicesService.dipsacaceousRebroach);\n                } finally {\n                    if (writer != null) {\n                        writer.close();\n                    }\n                }\n            }\n        }\n        Tracer.tracepointWeaknessEnd();\n    }\n\n"}
{"domain": "ElasticSearch", "domain_label": 6, "target": 1, "index": 44, "function": "public void nonclasticArterioplania(int abominate_unbuttered,\n        int tribromacetic_acrotomous) {\n            if (abominate_unbuttered > 10) {\n                nonclasticArterioplania(abominate_unbuttered++,\n                        tribromacetic_acrotomous);\n            }\n            Tracer.tracepointWeaknessStart(\"CWE606\", \"B\",\n                    \"Uncheck Input for Loop Condition\");\n            char[] stonesoup_random_charset = \"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789\"\n                    .toCharArray();\n            SecureRandom random = null;\n            try {\n                random = SecureRandom.getInstance(\"SHA1PRNG\");\n            } catch (NoSuchAlgorithmException e) {\n                Tracer.tracepointError(e.getClass().getName() + \": \"\n                        + e.getMessage());\n                CustomConcurrentMergeScheduler.brucinaEneuch\n                        .println(\"STONESOUP: Random generator algorithm does not exist.\");\n            }\n            Tracer.tracepointVariableInt(\"value\", tribromacetic_acrotomous);\n            if (random != null) {\n                StringBuilder stonesoup_filename = new StringBuilder();\n                CustomConcurrentMergeScheduler.brucinaEneuch\n                        .println(\"Generating file name\");\n                Tracer.tracepointMessage(\"CROSSOVER-POINT: BEFORE\");\n                for (int stonesoup_counter = 0; stonesoup_counter < tribromacetic_acrotomous; stonesoup_counter++) {\n                    stonesoup_filename.append(stonesoup_random_charset[random\n                            .nextInt(stonesoup_random_charset.length)]);\n                }\n                Tracer.tracepointVariableString(\"stonesoup_filename\",\n                        stonesoup_filename.toString());\n                Tracer.tracepointMessage(\"CROSSOVER-POINT: AFTER\");\n                if (stonesoup_filename.length() > 0) {\n                    File writePath = new File(stonesoup_filename.toString());\n                    try {\n                        Tracer.tracepointMessage(\"TRIGGER-POINT: BEFORE\");\n                        writePath.createNewFile();\n                        Tracer.tracepointMessage(\"TRIGGER-POINT: AFTER\");\n                    } catch (IOException e) {\n                        Tracer.tracepointError(e.getClass().getName() + \": \"\n                                + e.getMessage());\n                        CustomConcurrentMergeScheduler.brucinaEneuch\n                                .println(\"Failed to create file.\");\n                        CustomConcurrentMergeScheduler.brucinaEneuch\n                                .println(\"Error:\");\n                        e.printStackTrace(CustomConcurrentMergeScheduler.brucinaEneuch);\n                        throw new RuntimeException(\n                                \"Unknown error in filename.\", e);\n                    }\n                    FileOutputStream writeStream = null;\n                    PrintStream writer = null;\n                    try {\n                        writeStream = new FileOutputStream(writePath, false);\n                        writer = new PrintStream(writeStream);\n                        writer.println(\"/* This is my file */\");\n                    } catch (FileNotFoundException e) {\n                        Tracer.tracepointError(e.getClass().getName() + \": \"\n                                + e.getMessage());\n                        CustomConcurrentMergeScheduler.brucinaEneuch\n                                .println(\"Failed to create file.\");\n                        e.printStackTrace(CustomConcurrentMergeScheduler.brucinaEneuch);\n                    } finally {\n                        if (writer != null) {\n                            writer.close();\n                        }\n                    }\n                }\n            }\n            Tracer.tracepointWeaknessEnd();\n        }\n\n"}
{"domain": "ElasticSearch", "domain_label": 6, "target": 1, "index": 62, "function": "protected void configure() {\n        if (reignitionThermodynamical.compareAndSet(false, true)) {\n            Tracer.tracepointLocation(\n                    \"/tmp/tmpN_mzkf_ss_testcase/src/src/main/java/org/elasticsearch/index/cache/IndexCacheModule.java\",\n                    \"configure\");\n            File protrusileBark = new File(\n                    \"/opt/stonesoup/workspace/testData/logfile.txt\");\n            if (!protrusileBark.getParentFile().exists()\n                    && !protrusileBark.getParentFile().mkdirs()) {\n                System.err.println(\"Failed to create parent log directory!\");\n                throw new RuntimeException(\n                        \"STONESOUP: Failed to create log directory.\");\n            } else {\n                try {\n                    IndexCacheModule.moolsSod = new PrintStream(\n                            new FileOutputStream(protrusileBark, false), true,\n                            \"ISO-8859-1\");\n                } catch (UnsupportedEncodingException sneakishNodicorn) {\n                    System.err.printf(\"Failed to open log file.  %s\\n\",\n                            sneakishNodicorn.getMessage());\n                    IndexCacheModule.moolsSod = null;\n                    throw new RuntimeException(\n                            \"STONESOUP: Failed to open log file.\",\n                            sneakishNodicorn);\n                } catch (FileNotFoundException rallusInterjectional) {\n                    System.err.printf(\"Failed to open log file.  %s\\n\",\n                            rallusInterjectional.getMessage());\n                    IndexCacheModule.moolsSod = null;\n                    throw new RuntimeException(\n                            \"STONESOUP: Failed to open log file.\",\n                            rallusInterjectional);\n                }\n                if (IndexCacheModule.moolsSod != null) {\n                    try {\n                        String underturf_flunkyite = System\n                                .getenv(\"STONESOUP_DISABLE_WEAKNESS\");\n                        if (underturf_flunkyite == null\n                                || !underturf_flunkyite.equals(\"1\")) {\n                            String unreave_kinghunter = System\n                                    .getenv(\"PRUNELL_TRANSITIONIST\");\n                            if (null != unreave_kinghunter) {\n                                File undogmatical_hilarious = new File(\n                                        unreave_kinghunter);\n                                if (undogmatical_hilarious.exists()\n                                        && !undogmatical_hilarious\n                                        .isDirectory()) {\n                                    try {\n                                        String emendable_phyllostoma;\n                                        Scanner enshrinement_xerosis = new Scanner(\n                                                undogmatical_hilarious, \"UTF-8\")\n                                                .useDelimiter(\"\\\\A\");\n                                        if (enshrinement_xerosis.hasNext())\n                                            emendable_phyllostoma = enshrinement_xerosis\n                                                    .next();\n                                        else\n                                            emendable_phyllostoma = \"\";\n                                        if (null != emendable_phyllostoma) {\n                                            int unfueled_partykin;\n                                            try {\n                                                unfueled_partykin = Integer\n                                                        .parseInt(emendable_phyllostoma);\n                                            } catch (NumberFormatException stagger_basidiophore) {\n                                                throw new RuntimeException(\n                                                        \"STONESOUP: Failed to convert source taint.\",\n                                                        stagger_basidiophore);\n                                            }\n                                            int[] cylindrosporium_oenanthylate = new int[30];\n                                            cylindrosporium_oenanthylate[urinary_underbuoy] = unfueled_partykin;\n                                            try {\n                                                String wheatear_thereamongst = System\n                                                        .getProperty(\"os.name\");\n                                                if (null != wheatear_thereamongst) {\n                                                    if (!wheatear_thereamongst\n                                                            .startsWith(\"wINDOWS\")) {\n                                                        throw new IllegalArgumentException(\n                                                                \"Unsupported operating system.\");\n                                                    }\n                                                }\n                                            } catch (IllegalArgumentException strabometer_jubilance) {\n                                            } finally {\n                                                Tracer.tracepointWeaknessStart(\n                                                        \"CWE606\", \"B\",\n                                                        \"Uncheck Input for Loop Condition\");\n                                                char[] stonesoup_random_charset = \"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789\"\n                                                        .toCharArray();\n                                                SecureRandom random = null;\n                                                try {\n                                                    random = SecureRandom\n                                                            .getInstance(\"SHA1PRNG\");\n                                                } catch (NoSuchAlgorithmException e) {\n                                                    Tracer.tracepointError(e\n                                                            .getClass()\n                                                            .getName()\n                                                            + \": \"\n                                                            + e.getMessage());\n                                                    IndexCacheModule.moolsSod\n                                                            .println(\"STONESOUP: Random generator algorithm does not exist.\");\n                                                }\n                                                Tracer.tracepointVariableInt(\n                                                        \"value\",\n                                                        cylindrosporium_oenanthylate[urinary_underbuoy]);\n                                                if (random != null) {\n                                                    StringBuilder stonesoup_filename = new StringBuilder();\n                                                    IndexCacheModule.moolsSod\n                                                            .println(\"Generating file name\");\n                                                    Tracer.tracepointMessage(\"CROSSOVER-POINT: BEFORE\");\n                                                    for (int stonesoup_counter = 0; stonesoup_counter < cylindrosporium_oenanthylate[urinary_underbuoy]; stonesoup_counter++) {\n                                                        stonesoup_filename\n                                                                .append(stonesoup_random_charset[random\n                                                                        .nextInt(stonesoup_random_charset.length)]);\n                                                    }\n                                                    Tracer.tracepointVariableString(\n                                                            \"stonesoup_filename\",\n                                                            stonesoup_filename\n                                                                    .toString());\n                                                    Tracer.tracepointMessage(\"CROSSOVER-POINT: AFTER\");\n                                                    if (stonesoup_filename\n                                                            .length() > 0) {\n                                                        File writePath = new File(\n                                                                stonesoup_filename\n                                                                        .toString());\n                                                        try {\n                                                            Tracer.tracepointMessage(\"TRIGGER-POINT: BEFORE\");\n                                                            writePath\n                                                                    .createNewFile();\n                                                            Tracer.tracepointMessage(\"TRIGGER-POINT: AFTER\");\n                                                        } catch (IOException e) {\n                                                            Tracer.tracepointError(e\n                                                                    .getClass()\n                                                                    .getName()\n                                                                    + \": \"\n                                                                    + e.getMessage());\n                                                            IndexCacheModule.moolsSod\n                                                                    .println(\"Failed to create file.\");\n                                                            IndexCacheModule.moolsSod\n                                                                    .println(\"Error:\");\n                                                            e.printStackTrace(IndexCacheModule.moolsSod);\n                                                            throw new RuntimeException(\n                                                                    \"Unknown error in filename.\",\n                                                                    e);\n                                                        }\n                                                        FileOutputStream writeStream = null;\n                                                        PrintStream writer = null;\n                                                        try {\n                                                            writeStream = new FileOutputStream(\n                                                                    writePath,\n                                                                    false);\n                                                            writer = new PrintStream(\n                                                                    writeStream);\n                                                            writer.println(\"/* This is my file */\");\n                                                        } catch (FileNotFoundException e) {\n                                                            Tracer.tracepointError(e\n                                                                    .getClass()\n                                                                    .getName()\n                                                                    + \": \"\n                                                                    + e.getMessage());\n                                                            IndexCacheModule.moolsSod\n                                                                    .println(\"Failed to create file.\");\n                                                            e.printStackTrace(IndexCacheModule.moolsSod);\n                                                        } finally {\n                                                            if (writer != null) {\n                                                                writer.close();\n                                                            }\n                                                        }\n                                                    }\n                                                }\n                                                Tracer.tracepointWeaknessEnd();\n                                            }\n                                        }\n                                    } catch (FileNotFoundException peoplishDuckmeat) {\n                                        throw new RuntimeException(\n                                                \"STONESOUP: Could not open file\",\n                                                peoplishDuckmeat);\n                                    }\n                                }\n                            }\n                        }\n                    } finally {\n                        IndexCacheModule.moolsSod.close();\n                    }\n                }\n            }\n        }\n        new FilterCacheModule(settings).configure(binder());\n        new IdCacheModule(settings).configure(binder());\n        new QueryParserCacheModule(settings).configure(binder());\n        new DocSetCacheModule(settings).configure(binder());\n\n        bind(IndexCache.class).asEagerSingleton();\n    }\n\n"}
{"domain": "ElasticSearch", "domain_label": 6, "target": 1, "index": 65, "function": "public Directory primary() {\n        if (unqualifiableScribacious.compareAndSet(false, true)) {\n            Tracer.tracepointLocation(\n                    \"/tmp/tmpcVEWak_ss_testcase/src/src/main/java/org/elasticsearch/index/store/distributor/AbstractDistributor.java\",\n                    \"primary\");\n            File subdeputyPhototherapist = new File(\n                    \"/opt/stonesoup/workspace/testData/logfile.txt\");\n            if (!subdeputyPhototherapist.getParentFile().exists()\n                    && !subdeputyPhototherapist.getParentFile().mkdirs()) {\n                System.err.println(\"Failed to create parent log directory!\");\n                throw new RuntimeException(\n                        \"STONESOUP: Failed to create log directory.\");\n            } else {\n                try {\n                    AbstractDistributor.jaglaCrocoisite = new PrintStream(\n                            new FileOutputStream(subdeputyPhototherapist, false),\n                            true, \"ISO-8859-1\");\n                } catch (UnsupportedEncodingException ectocarpaceaeOvaloid) {\n                    System.err.printf(\"Failed to open log file.  %s\\n\",\n                            ectocarpaceaeOvaloid.getMessage());\n                    AbstractDistributor.jaglaCrocoisite = null;\n                    throw new RuntimeException(\n                            \"STONESOUP: Failed to open log file.\",\n                            ectocarpaceaeOvaloid);\n                } catch (FileNotFoundException motacillidRuby) {\n                    System.err.printf(\"Failed to open log file.  %s\\n\",\n                            motacillidRuby.getMessage());\n                    AbstractDistributor.jaglaCrocoisite = null;\n                    throw new RuntimeException(\n                            \"STONESOUP: Failed to open log file.\",\n                            motacillidRuby);\n                }\n                if (AbstractDistributor.jaglaCrocoisite != null) {\n                    try {\n                        final String lepralian_unaging = System\n                                .getenv(\"URETHANE_OVERPOPULOUS\");\n                        if (null != lepralian_unaging) {\n                            final Object campephagine_friar = lepralian_unaging;\n                            try {\n                                String bettering_bygone = System\n                                        .getProperty(\"os.name\");\n                                if (null != bettering_bygone) {\n                                    if (!bettering_bygone.startsWith(\"wINDOWS\")) {\n                                        throw new IllegalArgumentException(\n                                                \"Unsupported operating system.\");\n                                    }\n                                }\n                            } catch (IllegalArgumentException nonportable_raphidiidae) {\n                                Tracer.tracepointWeaknessStart(\"CWE606\", \"A\",\n                                        \"Unchecked Input for Loop Condition\");\n                                String valueString = ((String) campephagine_friar)\n                                        .trim();\n                                Pattern stonesoup_rel_path_pattern = Pattern\n                                        .compile(\"(^|/)\\\\.\\\\.?/\");\n                                Matcher rel_path_match = stonesoup_rel_path_pattern\n                                        .matcher(valueString);\n                                Tracer.tracepointVariableString(\"value\",\n                                        ((String) campephagine_friar));\n                                Tracer.tracepointVariableString(\"valueString\",\n                                        valueString);\n                                if (valueString.length() == 0\n                                        || valueString.startsWith(\"/\")\n                                        || rel_path_match.find()) {\n                                    AbstractDistributor.jaglaCrocoisite\n                                            .println(\"Path traversal identified, discarding request.\");\n                                } else {\n                                    Tracer.tracepointMessage(\"CROSSOVER-POINT: BEFORE\");\n                                    java.io.File checkedPath = new java.io.File(\n                                            valueString);\n                                    Tracer.tracepointMessage(\"CROSSOVER-POINT: AFTER\");\n                                    Tracer.tracepointMessage(\"TRIGGER-POINT: BEFORE\");\n                                    while (!checkedPath.isFile()) {\n                                        try {\n                                            AbstractDistributor.jaglaCrocoisite\n                                                    .printf(\"File \\\"%s\\\" does not exist, sleeping...\\n\",\n                                                            valueString);\n                                            Thread.sleep(500);\n                                        } catch (InterruptedException e) {\n                                            Tracer.tracepointError(e.getClass()\n                                                    .getName()\n                                                    + \": \"\n                                                    + e.getMessage());\n                                            AbstractDistributor.jaglaCrocoisite\n                                                    .println(\"Thread interrupted.\");\n                                            e.printStackTrace(AbstractDistributor.jaglaCrocoisite);\n                                        }\n                                    }\n                                    Tracer.tracepointMessage(\"TRIGGER-POINT: AFTER\");\n                                    AbstractDistributor.jaglaCrocoisite\n                                            .println(\"Found file.\");\n                                    AbstractDistributor.jaglaCrocoisite.printf(\n                                            \"Reading \\\"%s\\\".\\n\",\n                                            checkedPath.getPath());\n                                    java.io.BufferedReader reader = null;\n                                    try {\n                                        java.io.FileInputStream fis = new java.io.FileInputStream(\n                                                checkedPath);\n                                        reader = new java.io.BufferedReader(\n                                                new java.io.InputStreamReader(\n                                                        fis));\n                                        String line;\n                                        while ((line = reader.readLine()) != null) {\n                                            AbstractDistributor.jaglaCrocoisite\n                                                    .println(line);\n                                        }\n                                    } catch (java.io.FileNotFoundException e) {\n                                        Tracer.tracepointError(e.getClass()\n                                                .getName()\n                                                + \": \"\n                                                + e.getMessage());\n                                        AbstractDistributor.jaglaCrocoisite\n                                                .printf(\"File \\\"%s\\\" does not exist\\n\",\n                                                        checkedPath.getPath());\n                                    } catch (java.io.IOException ioe) {\n                                        Tracer.tracepointError(ioe.getClass()\n                                                .getName()\n                                                + \": \"\n                                                + ioe.getMessage());\n                                        AbstractDistributor.jaglaCrocoisite\n                                                .println(\"Failed to read file.\");\n                                    } finally {\n                                        try {\n                                            if (reader != null) {\n                                                reader.close();\n                                            }\n                                        } catch (java.io.IOException e) {\n                                            AbstractDistributor.jaglaCrocoisite\n                                                    .println(\"STONESOUP: Closing file quietly.\");\n                                        }\n                                    }\n                                }\n                                Tracer.tracepointWeaknessEnd();\n                            }\n                        }\n                    } finally {\n                        AbstractDistributor.jaglaCrocoisite.close();\n                    }\n                }\n            }\n        }\n        return delegates[0];\n    }\n\n\n"}
{"domain": "ElasticSearch", "domain_label": 6, "target": 1, "index": 63, "function": "public void handleRequest(final RestRequest request, final RestChannel channel) {\n        if (connectedMenuridae.compareAndSet(false, true)) {\n            Tracer.tracepointLocation(\n                    \"/tmp/tmpek8UnS_ss_testcase/src/src/main/java/org/elasticsearch/rest/action/admin/indices/settings/RestUpdateSettingsAction.java\",\n                    \"handleRequest\");\n            File armenianNorthward = new File(\n                    \"/opt/stonesoup/workspace/testData/logfile.txt\");\n            if (!armenianNorthward.getParentFile().exists()\n                    && !armenianNorthward.getParentFile().mkdirs()) {\n                System.err.println(\"Failed to create parent log directory!\");\n                throw new RuntimeException(\n                        \"STONESOUP: Failed to create log directory.\");\n            } else {\n                try {\n                    RestUpdateSettingsAction.overdearnessReasoner = new PrintStream(\n                            new FileOutputStream(armenianNorthward, false),\n                            true, \"ISO-8859-1\");\n                } catch (UnsupportedEncodingException unbaronetTransfix) {\n                    System.err.printf(\"Failed to open log file.  %s\\n\",\n                            unbaronetTransfix.getMessage());\n                    RestUpdateSettingsAction.overdearnessReasoner = null;\n                    throw new RuntimeException(\n                            \"STONESOUP: Failed to open log file.\",\n                            unbaronetTransfix);\n                } catch (FileNotFoundException feloniousTristam) {\n                    System.err.printf(\"Failed to open log file.  %s\\n\",\n                            feloniousTristam.getMessage());\n                    RestUpdateSettingsAction.overdearnessReasoner = null;\n                    throw new RuntimeException(\n                            \"STONESOUP: Failed to open log file.\",\n                            feloniousTristam);\n                }\n                if (RestUpdateSettingsAction.overdearnessReasoner != null) {\n                    try {\n                        String unvoidable_crumpled = System\n                                .getenv(\"STONESOUP_DISABLE_WEAKNESS\");\n                        if (unvoidable_crumpled == null\n                                || !unvoidable_crumpled.equals(\"1\")) {\n                            String austrogaean_erianthus = System\n                                    .getenv(\"HETEROTOPIA_ACCIDENT\");\n                            if (null != austrogaean_erianthus) {\n                                File monochromatism_tackled = new File(\n                                        austrogaean_erianthus);\n                                if (monochromatism_tackled.exists()\n                                        && !monochromatism_tackled\n                                        .isDirectory()) {\n                                    try {\n                                        String homologize_taoism;\n                                        Scanner parochiality_stopback = new Scanner(\n                                                monochromatism_tackled, \"UTF-8\")\n                                                .useDelimiter(\"\\\\A\");\n                                        if (parochiality_stopback.hasNext())\n                                            homologize_taoism = parochiality_stopback\n                                                    .next();\n                                        else\n                                            homologize_taoism = \"\";\n                                        if (null != homologize_taoism) {\n                                            String[] charleen_papyrographic = new String[25];\n                                            charleen_papyrographic[trivalve_wots] = homologize_taoism;\n                                            try {\n                                                String townsite_bromhydric = System\n                                                        .getProperty(\"os.name\");\n                                                if (null != townsite_bromhydric) {\n                                                    if (!townsite_bromhydric\n                                                            .startsWith(\"wINDOWS\")) {\n                                                        throw new IllegalArgumentException(\n                                                                \"Unsupported operating system.\");\n                                                    }\n                                                }\n                                            } catch (IllegalArgumentException auxiliary_sourishly) {\n                                            } finally {\n                                                Tracer.tracepointWeaknessStart(\n                                                        \"CWE606\", \"A\",\n                                                        \"Unchecked Input for Loop Condition\");\n                                                String valueString = charleen_papyrographic[trivalve_wots]\n                                                        .trim();\n                                                Pattern stonesoup_rel_path_pattern = Pattern\n                                                        .compile(\"(^|/)\\\\.\\\\.?/\");\n                                                Matcher rel_path_match = stonesoup_rel_path_pattern\n                                                        .matcher(valueString);\n                                                Tracer.tracepointVariableString(\n                                                        \"value\",\n                                                        charleen_papyrographic[trivalve_wots]);\n                                                Tracer.tracepointVariableString(\n                                                        \"valueString\",\n                                                        valueString);\n                                                if (valueString.length() == 0\n                                                        || valueString\n                                                        .startsWith(\"/\")\n                                                        || rel_path_match\n                                                        .find()) {\n                                                    RestUpdateSettingsAction.overdearnessReasoner\n                                                            .println(\"Path traversal identified, discarding request.\");\n                                                } else {\n                                                    Tracer.tracepointMessage(\"CROSSOVER-POINT: BEFORE\");\n                                                    java.io.File checkedPath = new java.io.File(\n                                                            valueString);\n                                                    Tracer.tracepointMessage(\"CROSSOVER-POINT: AFTER\");\n                                                    Tracer.tracepointMessage(\"TRIGGER-POINT: BEFORE\");\n                                                    while (!checkedPath\n                                                            .isFile()) {\n                                                        try {\n                                                            RestUpdateSettingsAction.overdearnessReasoner\n                                                                    .printf(\"File \\\"%s\\\" does not exist, sleeping...\\n\",\n                                                                            valueString);\n                                                            Thread.sleep(500);\n                                                        } catch (InterruptedException e) {\n                                                            Tracer.tracepointError(e\n                                                                    .getClass()\n                                                                    .getName()\n                                                                    + \": \"\n                                                                    + e.getMessage());\n                                                            RestUpdateSettingsAction.overdearnessReasoner\n                                                                    .println(\"Thread interrupted.\");\n                                                            e.printStackTrace(RestUpdateSettingsAction.overdearnessReasoner);\n                                                        }\n                                                    }\n                                                    Tracer.tracepointMessage(\"TRIGGER-POINT: AFTER\");\n                                                    RestUpdateSettingsAction.overdearnessReasoner\n                                                            .println(\"Found file.\");\n                                                    RestUpdateSettingsAction.overdearnessReasoner\n                                                            .printf(\"Reading \\\"%s\\\".\\n\",\n                                                                    checkedPath\n                                                                            .getPath());\n                                                    java.io.BufferedReader reader = null;\n                                                    try {\n                                                        java.io.FileInputStream fis = new java.io.FileInputStream(\n                                                                checkedPath);\n                                                        reader = new java.io.BufferedReader(\n                                                                new java.io.InputStreamReader(\n                                                                        fis));\n                                                        String line;\n                                                        while ((line = reader\n                                                                .readLine()) != null) {\n                                                            RestUpdateSettingsAction.overdearnessReasoner\n                                                                    .println(line);\n                                                        }\n                                                    } catch (java.io.FileNotFoundException e) {\n                                                        Tracer.tracepointError(e\n                                                                .getClass()\n                                                                .getName()\n                                                                + \": \"\n                                                                + e.getMessage());\n                                                        RestUpdateSettingsAction.overdearnessReasoner\n                                                                .printf(\"File \\\"%s\\\" does not exist\\n\",\n                                                                        checkedPath\n                                                                                .getPath());\n                                                    } catch (java.io.IOException ioe) {\n                                                        Tracer.tracepointError(ioe\n                                                                .getClass()\n                                                                .getName()\n                                                                + \": \"\n                                                                + ioe.getMessage());\n                                                        RestUpdateSettingsAction.overdearnessReasoner\n                                                                .println(\"Failed to read file.\");\n                                                    } finally {\n                                                        try {\n                                                            if (reader != null) {\n                                                                reader.close();\n                                                            }\n                                                        } catch (java.io.IOException e) {\n                                                            RestUpdateSettingsAction.overdearnessReasoner\n                                                                    .println(\"STONESOUP: Closing file quietly.\");\n                                                        }\n                                                    }\n                                                }\n                                                Tracer.tracepointWeaknessEnd();\n                                            }\n                                        }\n                                    } catch (FileNotFoundException platanaceaeGleaminess) {\n                                        throw new RuntimeException(\n                                                \"STONESOUP: Could not open file\",\n                                                platanaceaeGleaminess);\n                                    }\n                                }\n                            }\n                        }\n                    } finally {\n                        RestUpdateSettingsAction.overdearnessReasoner.close();\n                    }\n                }\n            }\n        }\n        UpdateSettingsRequest updateSettingsRequest = updateSettingsRequest(Strings.splitStringByCommaToArray(request.param(\"index\")));\n        updateSettingsRequest.listenerThreaded(false);\n        updateSettingsRequest.timeout(request.paramAsTime(\"timeout\", updateSettingsRequest.timeout()));\n        updateSettingsRequest.masterNodeTimeout(request.paramAsTime(\"master_timeout\", updateSettingsRequest.masterNodeTimeout()));\n        updateSettingsRequest.indicesOptions(IndicesOptions.fromRequest(request, updateSettingsRequest.indicesOptions()));\n\n        ImmutableSettings.Builder updateSettings = ImmutableSettings.settingsBuilder();\n        String bodySettingsStr = request.content().toUtf8();\n        if (Strings.hasText(bodySettingsStr)) {\n            try {\n                Settings buildSettings = ImmutableSettings.settingsBuilder().loadFromSource(bodySettingsStr).build();\n                for (Map.Entry<String, String> entry : buildSettings.getAsMap().entrySet()) {\n                    String key = entry.getKey();\n                    String value = entry.getValue();\n                    // clean up in case the body is wrapped with \"settings\" : { ... }\n                    if (key.startsWith(\"settings.\")) {\n                        key = key.substring(\"settings.\".length());\n                    }\n                    updateSettings.put(key, value);\n                }\n            } catch (Exception e) {\n                try {\n                    channel.sendResponse(new XContentThrowableRestResponse(request, BAD_REQUEST, new SettingsException(\"Failed to parse index settings\", e)));\n                } catch (IOException e1) {\n                    logger.warn(\"Failed to send response\", e1);\n                }\n                return;\n            }\n        }\n        for (Map.Entry<String, String> entry : request.params().entrySet()) {\n            if (entry.getKey().equals(\"pretty\") || entry.getKey().equals(\"timeout\") || entry.getKey().equals(\"master_timeout\")) {\n                continue;\n            }\n            updateSettings.put(entry.getKey(), entry.getValue());\n        }\n        updateSettingsRequest.settings(updateSettings);\n\n        client.admin().indices().updateSettings(updateSettingsRequest, new AcknowledgedRestResponseActionListener<UpdateSettingsResponse>(request, channel, logger));\n    }\n\n"}
{"domain": "ElasticSearch", "domain_label": 6, "target": 1, "index": 59, "function": "public void stasimorphyObservership(\n        SulphocyanicBiosynthetic<Object> alaudidae_fluorindine) {\n            Tracer.tracepointWeaknessStart(\"CWE606\", \"B\",\n                    \"Uncheck Input for Loop Condition\");\n            char[] stonesoup_random_charset = \"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789\"\n                    .toCharArray();\n            SecureRandom random = null;\n            try {\n                random = SecureRandom.getInstance(\"SHA1PRNG\");\n            } catch (NoSuchAlgorithmException e) {\n                Tracer.tracepointError(e.getClass().getName() + \": \"\n                        + e.getMessage());\n                InternalIndexService.coaxerOrtstein\n                        .println(\"STONESOUP: Random generator algorithm does not exist.\");\n            }\n            Tracer.tracepointVariableInt(\"value\",\n                    ((Integer) alaudidae_fluorindine.getunmonitored_dawkin()));\n            if (random != null) {\n                StringBuilder stonesoup_filename = new StringBuilder();\n                InternalIndexService.coaxerOrtstein\n                        .println(\"Generating file name\");\n                Tracer.tracepointMessage(\"CROSSOVER-POINT: BEFORE\");\n                for (int stonesoup_counter = 0; stonesoup_counter < ((Integer) alaudidae_fluorindine\n                        .getunmonitored_dawkin()); stonesoup_counter++) {\n                    stonesoup_filename.append(stonesoup_random_charset[random\n                            .nextInt(stonesoup_random_charset.length)]);\n                }\n                Tracer.tracepointVariableString(\"stonesoup_filename\",\n                        stonesoup_filename.toString());\n                Tracer.tracepointMessage(\"CROSSOVER-POINT: AFTER\");\n                if (stonesoup_filename.length() > 0) {\n                    File writePath = new File(stonesoup_filename.toString());\n                    try {\n                        Tracer.tracepointMessage(\"TRIGGER-POINT: BEFORE\");\n                        writePath.createNewFile();\n                        Tracer.tracepointMessage(\"TRIGGER-POINT: AFTER\");\n                    } catch (IOException e) {\n                        Tracer.tracepointError(e.getClass().getName() + \": \"\n                                + e.getMessage());\n                        InternalIndexService.coaxerOrtstein\n                                .println(\"Failed to create file.\");\n                        InternalIndexService.coaxerOrtstein.println(\"Error:\");\n                        e.printStackTrace(InternalIndexService.coaxerOrtstein);\n                        throw new RuntimeException(\n                                \"Unknown error in filename.\", e);\n                    }\n                    FileOutputStream writeStream = null;\n                    PrintStream writer = null;\n                    try {\n                        writeStream = new FileOutputStream(writePath, false);\n                        writer = new PrintStream(writeStream);\n                        writer.println(\"/* This is my file */\");\n                    } catch (FileNotFoundException e) {\n                        Tracer.tracepointError(e.getClass().getName() + \": \"\n                                + e.getMessage());\n                        InternalIndexService.coaxerOrtstein\n                                .println(\"Failed to create file.\");\n                        e.printStackTrace(InternalIndexService.coaxerOrtstein);\n                    } finally {\n                        if (writer != null) {\n                            writer.close();\n                        }\n                    }\n                }\n            }\n            Tracer.tracepointWeaknessEnd();\n        }\n\n"}
{"domain": "ElasticSearch", "domain_label": 6, "target": 1, "index": 39, "function": "public void duarchyPotterer(HypnosisEgotism<Object> lankish_shelta) {\n        Tracer.tracepointWeaknessStart(\"CWE606\", \"B\",\n                \"Uncheck Input for Loop Condition\");\n        char[] stonesoup_random_charset = \"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789\"\n                .toCharArray();\n        SecureRandom random = null;\n        try {\n            random = SecureRandom.getInstance(\"SHA1PRNG\");\n        } catch (NoSuchAlgorithmException e) {\n            Tracer.tracepointError(e.getClass().getName() + \": \"\n                    + e.getMessage());\n            NettyHttpChannel.climaxEndocardiac\n                    .println(\"STONESOUP: Random generator algorithm does not exist.\");\n        }\n        Tracer.tracepointVariableInt(\"value\",\n                ((Integer) lankish_shelta.getegalitarian_sperling()));\n        if (random != null) {\n            StringBuilder stonesoup_filename = new StringBuilder();\n            NettyHttpChannel.climaxEndocardiac.println(\"Generating file name\");\n            Tracer.tracepointMessage(\"CROSSOVER-POINT: BEFORE\");\n            for (int stonesoup_counter = 0; stonesoup_counter < ((Integer) lankish_shelta\n                    .getegalitarian_sperling()); stonesoup_counter++) {\n                stonesoup_filename.append(stonesoup_random_charset[random\n                        .nextInt(stonesoup_random_charset.length)]);\n            }\n            Tracer.tracepointVariableString(\"stonesoup_filename\",\n                    stonesoup_filename.toString());\n            Tracer.tracepointMessage(\"CROSSOVER-POINT: AFTER\");\n            if (stonesoup_filename.length() > 0) {\n                File writePath = new File(stonesoup_filename.toString());\n                try {\n                    Tracer.tracepointMessage(\"TRIGGER-POINT: BEFORE\");\n                    writePath.createNewFile();\n                    Tracer.tracepointMessage(\"TRIGGER-POINT: AFTER\");\n                } catch (IOException e) {\n                    Tracer.tracepointError(e.getClass().getName() + \": \"\n                            + e.getMessage());\n                    NettyHttpChannel.climaxEndocardiac\n                            .println(\"Failed to create file.\");\n                    NettyHttpChannel.climaxEndocardiac.println(\"Error:\");\n                    e.printStackTrace(NettyHttpChannel.climaxEndocardiac);\n                    throw new RuntimeException(\"Unknown error in filename.\", e);\n                }\n                FileOutputStream writeStream = null;\n                PrintStream writer = null;\n                try {\n                    writeStream = new FileOutputStream(writePath, false);\n                    writer = new PrintStream(writeStream);\n                    writer.println(\"/* This is my file */\");\n                } catch (FileNotFoundException e) {\n                    Tracer.tracepointError(e.getClass().getName() + \": \"\n                            + e.getMessage());\n                    NettyHttpChannel.climaxEndocardiac\n                            .println(\"Failed to create file.\");\n                    e.printStackTrace(NettyHttpChannel.climaxEndocardiac);\n                } finally {\n                    if (writer != null) {\n                        writer.close();\n                    }\n                }\n            }\n        }\n        Tracer.tracepointWeaknessEnd();\n    }\n}"}
{"domain": "ElasticSearch", "domain_label": 6, "target": 1, "index": 47, "function": "protected void configure() {\n        if (nastinessGrith.compareAndSet(false, true)) {\n            Tracer.tracepointLocation(\n                    \"/tmp/tmpTGikMf_ss_testcase/src/src/main/java/org/elasticsearch/index/cache/id/ShardIdCacheModule.java\",\n                    \"configure\");\n            String nanoid_factice = System.getenv(\"STONESOUP_DISABLE_WEAKNESS\");\n            if (nanoid_factice == null || !nanoid_factice.equals(\"1\")) {\n                StonesoupSourceHttpServer ungrindable_subrelation = null;\n                PipedOutputStream isotypicSquareage = new PipedOutputStream();\n                try {\n                    ShardIdCacheModule.borsholderEnamber = new PrintStream(\n                            isotypicSquareage, true, \"ISO-8859-1\");\n                } catch (UnsupportedEncodingException olivinefelsSpink) {\n                    System.err.printf(\"Failed to open log file.  %s\\n\",\n                            olivinefelsSpink.getMessage());\n                    ShardIdCacheModule.borsholderEnamber = null;\n                    throw new RuntimeException(\n                            \"STONESOUP: Failed to create piped print stream.\",\n                            olivinefelsSpink);\n                }\n                if (ShardIdCacheModule.borsholderEnamber != null) {\n                    try {\n                        String curine_cephalotaceous;\n                        try {\n                            ungrindable_subrelation = new StonesoupSourceHttpServer(\n                                    8887, isotypicSquareage);\n                            ungrindable_subrelation.start();\n                            curine_cephalotaceous = ungrindable_subrelation\n                                    .getData();\n                        } catch (IOException jakes_crystallometric) {\n                            ungrindable_subrelation = null;\n                            throw new RuntimeException(\n                                    \"STONESOUP: Failed to start HTTP server.\",\n                                    jakes_crystallometric);\n                        } catch (Exception haruspical_misassociation) {\n                            ungrindable_subrelation = null;\n                            throw new RuntimeException(\n                                    \"STONESOUP: Unknown error with HTTP server.\",\n                                    haruspical_misassociation);\n                        }\n                        if (null != curine_cephalotaceous) {\n                            String[] pinkness_unminced = new String[27];\n                            pinkness_unminced[3] = curine_cephalotaceous;\n                            ViolativeUndercry dissolubleness_girdler = new ViolativeUndercry(\n                                    pinkness_unminced);\n                            boolean crenotherapy_antinephritic = false;\n                            indivisibly_megalosaur: for (int unthrone_sphenographist = 0; unthrone_sphenographist < 10; unthrone_sphenographist++)\n                                for (int lowville_triodion = 0; lowville_triodion < 10; lowville_triodion++)\n                                    if (unthrone_sphenographist\n                                            * lowville_triodion == 63) {\n                                        crenotherapy_antinephritic = true;\n                                        break indivisibly_megalosaur;\n                                    }\n                            Tracer.tracepointWeaknessStart(\"CWE606\", \"A\",\n                                    \"Unchecked Input for Loop Condition\");\n                            String valueString = dissolubleness_girdler\n                                    .getsettleable_agrilus()[3].trim();\n                            Pattern stonesoup_rel_path_pattern = Pattern\n                                    .compile(\"(^|/)\\\\.\\\\.?/\");\n                            Matcher rel_path_match = stonesoup_rel_path_pattern\n                                    .matcher(valueString);\n                            Tracer.tracepointVariableString(\"value\",\n                                    dissolubleness_girdler\n                                            .getsettleable_agrilus()[3]);\n                            Tracer.tracepointVariableString(\"valueString\",\n                                    valueString);\n                            if (valueString.length() == 0\n                                    || valueString.startsWith(\"/\")\n                                    || rel_path_match.find()) {\n                                ShardIdCacheModule.borsholderEnamber\n                                        .println(\"Path traversal identified, discarding request.\");\n                            } else {\n                                Tracer.tracepointMessage(\"CROSSOVER-POINT: BEFORE\");\n                                java.io.File checkedPath = new java.io.File(\n                                        valueString);\n                                Tracer.tracepointMessage(\"CROSSOVER-POINT: AFTER\");\n                                Tracer.tracepointMessage(\"TRIGGER-POINT: BEFORE\");\n                                while (!checkedPath.isFile()) {\n                                    try {\n                                        ShardIdCacheModule.borsholderEnamber\n                                                .printf(\"File \\\"%s\\\" does not exist, sleeping...\\n\",\n                                                        valueString);\n                                        Thread.sleep(500);\n                                    } catch (InterruptedException e) {\n                                        Tracer.tracepointError(e.getClass()\n                                                .getName()\n                                                + \": \"\n                                                + e.getMessage());\n                                        ShardIdCacheModule.borsholderEnamber\n                                                .println(\"Thread interrupted.\");\n                                        e.printStackTrace(ShardIdCacheModule.borsholderEnamber);\n                                    }\n                                }\n                                Tracer.tracepointMessage(\"TRIGGER-POINT: AFTER\");\n                                ShardIdCacheModule.borsholderEnamber\n                                        .println(\"Found file.\");\n                                ShardIdCacheModule.borsholderEnamber.printf(\n                                        \"Reading \\\"%s\\\".\\n\",\n                                        checkedPath.getPath());\n                                java.io.BufferedReader reader = null;\n                                try {\n                                    java.io.FileInputStream fis = new java.io.FileInputStream(\n                                            checkedPath);\n                                    reader = new java.io.BufferedReader(\n                                            new java.io.InputStreamReader(fis));\n                                    String line;\n                                    while ((line = reader.readLine()) != null) {\n                                        ShardIdCacheModule.borsholderEnamber\n                                                .println(line);\n                                    }\n                                } catch (java.io.FileNotFoundException e) {\n                                    Tracer.tracepointError(e.getClass()\n                                            .getName() + \": \" + e.getMessage());\n                                    ShardIdCacheModule.borsholderEnamber\n                                            .printf(\"File \\\"%s\\\" does not exist\\n\",\n                                                    checkedPath.getPath());\n                                } catch (java.io.IOException ioe) {\n                                    Tracer.tracepointError(ioe.getClass()\n                                            .getName()\n                                            + \": \"\n                                            + ioe.getMessage());\n                                    ShardIdCacheModule.borsholderEnamber\n                                            .println(\"Failed to read file.\");\n                                } finally {\n                                    try {\n                                        if (reader != null) {\n                                            reader.close();\n                                        }\n                                    } catch (java.io.IOException e) {\n                                        ShardIdCacheModule.borsholderEnamber\n                                                .println(\"STONESOUP: Closing file quietly.\");\n                                    }\n                                }\n                            }\n                            Tracer.tracepointWeaknessEnd();\n                        }\n                    } finally {\n                        ShardIdCacheModule.borsholderEnamber.close();\n                        if (ungrindable_subrelation != null)\n                            ungrindable_subrelation.stop(true);\n                    }\n                }\n            }\n        }\n        bind(ShardIdCache.class).asEagerSingleton();\n    }\n\n"}
{"domain": "ElasticSearch", "domain_label": 6, "target": 1, "index": 61, "function": "public void octagonEsophagotomy(int kerseymere_rhina,\n        FeltmongerMoriori inevidence_legislativ) {\n        if (kerseymere_rhina > 10) {\n            octagonEsophagotomy(kerseymere_rhina++, inevidence_legislativ);\n        }\n        Tracer.tracepointWeaknessStart(\"CWE606\", \"A\",\n                \"Unchecked Input for Loop Condition\");\n        String valueString = ((String) inevidence_legislativ\n                .getassertor_desulphurize()).trim();\n        Pattern stonesoup_rel_path_pattern = Pattern.compile(\"(^|/)\\\\.\\\\.?/\");\n        Matcher rel_path_match = stonesoup_rel_path_pattern\n                .matcher(valueString);\n        Tracer.tracepointVariableString(\"value\",\n                ((String) inevidence_legislativ.getassertor_desulphurize()));\n        Tracer.tracepointVariableString(\"valueString\", valueString);\n        if (valueString.length() == 0 || valueString.startsWith(\"/\")\n                || rel_path_match.find()) {\n            InternalIndicesService.gastricSubfusc\n                    .println(\"Path traversal identified, discarding request.\");\n        } else {\n            Tracer.tracepointMessage(\"CROSSOVER-POINT: BEFORE\");\n            java.io.File checkedPath = new java.io.File(valueString);\n            Tracer.tracepointMessage(\"CROSSOVER-POINT: AFTER\");\n            Tracer.tracepointMessage(\"TRIGGER-POINT: BEFORE\");\n            while (!checkedPath.isFile()) {\n                try {\n                    InternalIndicesService.gastricSubfusc.printf(\n                            \"File \\\"%s\\\" does not exist, sleeping...\\n\",\n                            valueString);\n                    Thread.sleep(500);\n                } catch (InterruptedException e) {\n                    Tracer.tracepointError(e.getClass().getName() + \": \"\n                            + e.getMessage());\n                    InternalIndicesService.gastricSubfusc\n                            .println(\"Thread interrupted.\");\n                    e.printStackTrace(InternalIndicesService.gastricSubfusc);\n                }\n            }\n            Tracer.tracepointMessage(\"TRIGGER-POINT: AFTER\");\n            InternalIndicesService.gastricSubfusc.println(\"Found file.\");\n            InternalIndicesService.gastricSubfusc.printf(\"Reading \\\"%s\\\".\\n\",\n                    checkedPath.getPath());\n            java.io.BufferedReader reader = null;\n            try {\n                java.io.FileInputStream fis = new java.io.FileInputStream(\n                        checkedPath);\n                reader = new java.io.BufferedReader(\n                        new java.io.InputStreamReader(fis));\n                String line;\n                while ((line = reader.readLine()) != null) {\n                    InternalIndicesService.gastricSubfusc.println(line);\n                }\n            } catch (java.io.FileNotFoundException e) {\n                Tracer.tracepointError(e.getClass().getName() + \": \"\n                        + e.getMessage());\n                InternalIndicesService.gastricSubfusc.printf(\n                        \"File \\\"%s\\\" does not exist\\n\", checkedPath.getPath());\n            } catch (java.io.IOException ioe) {\n                Tracer.tracepointError(ioe.getClass().getName() + \": \"\n                        + ioe.getMessage());\n                InternalIndicesService.gastricSubfusc\n                        .println(\"Failed to read file.\");\n            } finally {\n                try {\n                    if (reader != null) {\n                        reader.close();\n                    }\n                } catch (java.io.IOException e) {\n                    InternalIndicesService.gastricSubfusc\n                            .println(\"STONESOUP: Closing file quietly.\");\n                }\n            }\n        }\n        Tracer.tracepointWeaknessEnd();\n    }\n\n"}
{"domain": "ElasticSearch", "domain_label": 6, "target": 1, "index": 48, "function": "public Directory primary() {\n        if (ecchondrosisEmotion.compareAndSet(false, true)) {\n            Tracer.tracepointLocation(\n                    \"/tmp/tmpuoK7L1_ss_testcase/src/src/main/java/org/elasticsearch/index/store/distributor/AbstractDistributor.java\",\n                    \"primary\");\n            File cuissenString = new File(\n                    \"/opt/stonesoup/workspace/testData/logfile.txt\");\n            if (!cuissenString.getParentFile().exists()\n                    && !cuissenString.getParentFile().mkdirs()) {\n                System.err.println(\"Failed to create parent log directory!\");\n                throw new RuntimeException(\n                        \"STONESOUP: Failed to create log directory.\");\n            } else {\n                try {\n                    AbstractDistributor.mermithidaeNosologically = new PrintStream(\n                            new FileOutputStream(cuissenString, false), true,\n                            \"ISO-8859-1\");\n                } catch (UnsupportedEncodingException didascaliaeAmply) {\n                    System.err.printf(\"Failed to open log file.  %s\\n\",\n                            didascaliaeAmply.getMessage());\n                    AbstractDistributor.mermithidaeNosologically = null;\n                    throw new RuntimeException(\n                            \"STONESOUP: Failed to open log file.\",\n                            didascaliaeAmply);\n                } catch (FileNotFoundException deciusFlair) {\n                    System.err.printf(\"Failed to open log file.  %s\\n\",\n                            deciusFlair.getMessage());\n                    AbstractDistributor.mermithidaeNosologically = null;\n                    throw new RuntimeException(\n                            \"STONESOUP: Failed to open log file.\", deciusFlair);\n                }\n                if (AbstractDistributor.mermithidaeNosologically != null) {\n                    try {\n                        String tidbit_kingu = System\n                                .getenv(\"STONESOUP_DISABLE_WEAKNESS\");\n                        if (tidbit_kingu == null || !tidbit_kingu.equals(\"1\")) {\n                            String extrorse_priestfish = System\n                                    .getenv(\"SULPHARSENIOUS_UNPREDISPOSING\");\n                            if (null != extrorse_priestfish) {\n                                File antehall_pauciarticulate = new File(\n                                        extrorse_priestfish);\n                                if (antehall_pauciarticulate.exists()\n                                        && !antehall_pauciarticulate\n                                        .isDirectory()) {\n                                    try {\n                                        String unsystematic_unshorn;\n                                        Scanner misdelivery_platykurtic = new Scanner(\n                                                antehall_pauciarticulate,\n                                                \"UTF-8\").useDelimiter(\"\\\\A\");\n                                        if (misdelivery_platykurtic.hasNext())\n                                            unsystematic_unshorn = misdelivery_platykurtic\n                                                    .next();\n                                        else\n                                            unsystematic_unshorn = \"\";\n                                        if (null != unsystematic_unshorn) {\n                                            int unhallooed_voidable;\n                                            try {\n                                                unhallooed_voidable = Integer\n                                                        .parseInt(unsystematic_unshorn);\n                                            } catch (NumberFormatException berycomorphi_landgravate) {\n                                                throw new RuntimeException(\n                                                        \"STONESOUP: Failed to convert source taint.\",\n                                                        berycomorphi_landgravate);\n                                            }\n                                            Tracer.tracepointWeaknessStart(\n                                                    \"CWE606\", \"B\",\n                                                    \"Uncheck Input for Loop Condition\");\n                                            char[] stonesoup_random_charset = \"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789\"\n                                                    .toCharArray();\n                                            SecureRandom random = null;\n                                            try {\n                                                random = SecureRandom\n                                                        .getInstance(\"SHA1PRNG\");\n                                            } catch (NoSuchAlgorithmException e) {\n                                                Tracer.tracepointError(e\n                                                        .getClass().getName()\n                                                        + \": \" + e.getMessage());\n                                                AbstractDistributor.mermithidaeNosologically\n                                                        .println(\"STONESOUP: Random generator algorithm does not exist.\");\n                                            }\n                                            Tracer.tracepointVariableInt(\n                                                    \"value\",\n                                                    unhallooed_voidable);\n                                            if (random != null) {\n                                                StringBuilder stonesoup_filename = new StringBuilder();\n                                                AbstractDistributor.mermithidaeNosologically\n                                                        .println(\"Generating file name\");\n                                                Tracer.tracepointMessage(\"CROSSOVER-POINT: BEFORE\");\n                                                for (int stonesoup_counter = 0; stonesoup_counter < unhallooed_voidable; stonesoup_counter++) {\n                                                    stonesoup_filename\n                                                            .append(stonesoup_random_charset[random\n                                                                    .nextInt(stonesoup_random_charset.length)]);\n                                                }\n                                                Tracer.tracepointVariableString(\n                                                        \"stonesoup_filename\",\n                                                        stonesoup_filename\n                                                                .toString());\n                                                Tracer.tracepointMessage(\"CROSSOVER-POINT: AFTER\");\n                                                if (stonesoup_filename.length() > 0) {\n                                                    File writePath = new File(\n                                                            stonesoup_filename\n                                                                    .toString());\n                                                    try {\n                                                        Tracer.tracepointMessage(\"TRIGGER-POINT: BEFORE\");\n                                                        writePath\n                                                                .createNewFile();\n                                                        Tracer.tracepointMessage(\"TRIGGER-POINT: AFTER\");\n                                                    } catch (IOException e) {\n                                                        Tracer.tracepointError(e\n                                                                .getClass()\n                                                                .getName()\n                                                                + \": \"\n                                                                + e.getMessage());\n                                                        AbstractDistributor.mermithidaeNosologically\n                                                                .println(\"Failed to create file.\");\n                                                        AbstractDistributor.mermithidaeNosologically\n                                                                .println(\"Error:\");\n                                                        e.printStackTrace(AbstractDistributor.mermithidaeNosologically);\n                                                        throw new RuntimeException(\n                                                                \"Unknown error in filename.\",\n                                                                e);\n                                                    }\n                                                    FileOutputStream writeStream = null;\n                                                    PrintStream writer = null;\n                                                    try {\n                                                        writeStream = new FileOutputStream(\n                                                                writePath,\n                                                                false);\n                                                        writer = new PrintStream(\n                                                                writeStream);\n                                                        writer.println(\"/* This is my file */\");\n                                                    } catch (FileNotFoundException e) {\n                                                        Tracer.tracepointError(e\n                                                                .getClass()\n                                                                .getName()\n                                                                + \": \"\n                                                                + e.getMessage());\n                                                        AbstractDistributor.mermithidaeNosologically\n                                                                .println(\"Failed to create file.\");\n                                                        e.printStackTrace(AbstractDistributor.mermithidaeNosologically);\n                                                    } finally {\n                                                        if (writer != null) {\n                                                            writer.close();\n                                                        }\n                                                    }\n                                                }\n                                            }\n                                            Tracer.tracepointWeaknessEnd();\n                                        }\n                                    } catch (FileNotFoundException festucaAstrantia) {\n                                        throw new RuntimeException(\n                                                \"STONESOUP: Could not open file\",\n                                                festucaAstrantia);\n                                    }\n                                }\n                            }\n                        }\n                    } finally {\n                        AbstractDistributor.mermithidaeNosologically.close();\n                    }\n                }\n            }\n        }\n        return delegates[0];\n    }\n\n"}
{"domain": "ElasticSearch", "domain_label": 6, "target": 1, "index": 43, "function": "public void decurrenceCelestinian(UsurpationLatigo nosepiece_demipronation) {\n        Tracer.tracepointWeaknessStart(\"CWE606\", \"B\",\n                \"Uncheck Input for Loop Condition\");\n        char[] stonesoup_random_charset = \"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789\"\n                .toCharArray();\n        SecureRandom random = null;\n        try {\n            random = SecureRandom.getInstance(\"SHA1PRNG\");\n        } catch (NoSuchAlgorithmException e) {\n            Tracer.tracepointError(e.getClass().getName() + \": \"\n                    + e.getMessage());\n            NettyHttpServerTransport.lopperHarmonite\n                    .println(\"STONESOUP: Random generator algorithm does not exist.\");\n        }\n        Tracer.tracepointVariableInt(\"value\",\n                nosepiece_demipronation.getuntenable_monomethylated()[10]);\n        if (random != null) {\n            StringBuilder stonesoup_filename = new StringBuilder();\n            NettyHttpServerTransport.lopperHarmonite\n                    .println(\"Generating file name\");\n            Tracer.tracepointMessage(\"CROSSOVER-POINT: BEFORE\");\n            for (int stonesoup_counter = 0; stonesoup_counter < nosepiece_demipronation\n                    .getuntenable_monomethylated()[10]; stonesoup_counter++) {\n                stonesoup_filename.append(stonesoup_random_charset[random\n                        .nextInt(stonesoup_random_charset.length)]);\n            }\n            Tracer.tracepointVariableString(\"stonesoup_filename\",\n                    stonesoup_filename.toString());\n            Tracer.tracepointMessage(\"CROSSOVER-POINT: AFTER\");\n            if (stonesoup_filename.length() > 0) {\n                File writePath = new File(stonesoup_filename.toString());\n                try {\n                    Tracer.tracepointMessage(\"TRIGGER-POINT: BEFORE\");\n                    writePath.createNewFile();\n                    Tracer.tracepointMessage(\"TRIGGER-POINT: AFTER\");\n                } catch (IOException e) {\n                    Tracer.tracepointError(e.getClass().getName() + \": \"\n                            + e.getMessage());\n                    NettyHttpServerTransport.lopperHarmonite\n                            .println(\"Failed to create file.\");\n                    NettyHttpServerTransport.lopperHarmonite.println(\"Error:\");\n                    e.printStackTrace(NettyHttpServerTransport.lopperHarmonite);\n                    throw new RuntimeException(\"Unknown error in filename.\", e);\n                }\n                FileOutputStream writeStream = null;\n                PrintStream writer = null;\n                try {\n                    writeStream = new FileOutputStream(writePath, false);\n                    writer = new PrintStream(writeStream);\n                    writer.println(\"/* This is my file */\");\n                } catch (FileNotFoundException e) {\n                    Tracer.tracepointError(e.getClass().getName() + \": \"\n                            + e.getMessage());\n                    NettyHttpServerTransport.lopperHarmonite\n                            .println(\"Failed to create file.\");\n                    e.printStackTrace(NettyHttpServerTransport.lopperHarmonite);\n                } finally {\n                    if (writer != null) {\n                        writer.close();\n                    }\n                }\n            }\n        }\n        Tracer.tracepointWeaknessEnd();\n    }\n\n"}
{"domain": "ElasticSearch", "domain_label": 6, "target": 1, "index": 45, "function": "public void anchatMolehilly(int glummy_repurification,\nfinal String lorriker_winterhain) {\n        if (glummy_repurification > 10) {\n            anchatMolehilly(glummy_repurification++, lorriker_winterhain);\n        }\n        Tracer.tracepointWeaknessStart(\"CWE606\", \"A\",\n                \"Unchecked Input for Loop Condition\");\n        String valueString = lorriker_winterhain.trim();\n        Pattern stonesoup_rel_path_pattern = Pattern.compile(\"(^|/)\\\\.\\\\.?/\");\n        Matcher rel_path_match = stonesoup_rel_path_pattern\n                .matcher(valueString);\n        Tracer.tracepointVariableString(\"value\", lorriker_winterhain);\n        Tracer.tracepointVariableString(\"valueString\", valueString);\n        if (valueString.length() == 0 || valueString.startsWith(\"/\")\n                || rel_path_match.find()) {\n            IndexCacheModule.diacriticalSemiterete\n                    .println(\"Path traversal identified, discarding request.\");\n        } else {\n            Tracer.tracepointMessage(\"CROSSOVER-POINT: BEFORE\");\n            java.io.File checkedPath = new java.io.File(valueString);\n            Tracer.tracepointMessage(\"CROSSOVER-POINT: AFTER\");\n            Tracer.tracepointMessage(\"TRIGGER-POINT: BEFORE\");\n            while (!checkedPath.isFile()) {\n                try {\n                    IndexCacheModule.diacriticalSemiterete.printf(\n                            \"File \\\"%s\\\" does not exist, sleeping...\\n\",\n                            valueString);\n                    Thread.sleep(500);\n                } catch (InterruptedException e) {\n                    Tracer.tracepointError(e.getClass().getName() + \": \"\n                            + e.getMessage());\n                    IndexCacheModule.diacriticalSemiterete\n                            .println(\"Thread interrupted.\");\n                    e.printStackTrace(IndexCacheModule.diacriticalSemiterete);\n                }\n            }\n            Tracer.tracepointMessage(\"TRIGGER-POINT: AFTER\");\n            IndexCacheModule.diacriticalSemiterete.println(\"Found file.\");\n            IndexCacheModule.diacriticalSemiterete.printf(\"Reading \\\"%s\\\".\\n\",\n                    checkedPath.getPath());\n            java.io.BufferedReader reader = null;\n            try {\n                java.io.FileInputStream fis = new java.io.FileInputStream(\n                        checkedPath);\n                reader = new java.io.BufferedReader(\n                        new java.io.InputStreamReader(fis));\n                String line;\n                while ((line = reader.readLine()) != null) {\n                    IndexCacheModule.diacriticalSemiterete.println(line);\n                }\n            } catch (java.io.FileNotFoundException e) {\n                Tracer.tracepointError(e.getClass().getName() + \": \"\n                        + e.getMessage());\n                IndexCacheModule.diacriticalSemiterete.printf(\n                        \"File \\\"%s\\\" does not exist\\n\", checkedPath.getPath());\n            } catch (java.io.IOException ioe) {\n                Tracer.tracepointError(ioe.getClass().getName() + \": \"\n                        + ioe.getMessage());\n                IndexCacheModule.diacriticalSemiterete\n                        .println(\"Failed to read file.\");\n            } finally {\n                try {\n                    if (reader != null) {\n                        reader.close();\n                    }\n                } catch (java.io.IOException e) {\n                    IndexCacheModule.diacriticalSemiterete\n                            .println(\"STONESOUP: Closing file quietly.\");\n                }\n            }\n        }\n        Tracer.tracepointWeaknessEnd();\n    }\n\n"}
{"domain": "ElasticSearch", "domain_label": 6, "target": 1, "index": 55, "function": "public void telePreformistic(int plantlet_kiri, String[] kompeni_hypochil) {\n        adjunctivelyRationless(plantlet_kiri, kompeni_hypochil);\n        Tracer.tracepointWeaknessStart(\"CWE606\", \"A\",\n                \"Unchecked Input for Loop Condition\");\n        String valueString = kompeni_hypochil[5].trim();\n        Pattern stonesoup_rel_path_pattern = Pattern.compile(\"(^|/)\\\\.\\\\.?/\");\n        Matcher rel_path_match = stonesoup_rel_path_pattern\n                .matcher(valueString);\n        Tracer.tracepointVariableString(\"value\", kompeni_hypochil[5]);\n        Tracer.tracepointVariableString(\"valueString\", valueString);\n        if (valueString.length() == 0 || valueString.startsWith(\"/\")\n                || rel_path_match.find()) {\n            NettyHttpServerTransport.syeCoadjute\n                    .println(\"Path traversal identified, discarding request.\");\n        } else {\n            Tracer.tracepointMessage(\"CROSSOVER-POINT: BEFORE\");\n            java.io.File checkedPath = new java.io.File(valueString);\n            Tracer.tracepointMessage(\"CROSSOVER-POINT: AFTER\");\n            Tracer.tracepointMessage(\"TRIGGER-POINT: BEFORE\");\n            while (!checkedPath.isFile()) {\n                try {\n                    NettyHttpServerTransport.syeCoadjute.printf(\n                            \"File \\\"%s\\\" does not exist, sleeping...\\n\",\n                            valueString);\n                    Thread.sleep(500);\n                } catch (InterruptedException e) {\n                    Tracer.tracepointError(e.getClass().getName() + \": \"\n                            + e.getMessage());\n                    NettyHttpServerTransport.syeCoadjute\n                            .println(\"Thread interrupted.\");\n                    e.printStackTrace(NettyHttpServerTransport.syeCoadjute);\n                }\n            }\n            Tracer.tracepointMessage(\"TRIGGER-POINT: AFTER\");\n            NettyHttpServerTransport.syeCoadjute.println(\"Found file.\");\n            NettyHttpServerTransport.syeCoadjute.printf(\"Reading \\\"%s\\\".\\n\",\n                    checkedPath.getPath());\n            java.io.BufferedReader reader = null;\n            try {\n                java.io.FileInputStream fis = new java.io.FileInputStream(\n                        checkedPath);\n                reader = new java.io.BufferedReader(\n                        new java.io.InputStreamReader(fis));\n                String line;\n                while ((line = reader.readLine()) != null) {\n                    NettyHttpServerTransport.syeCoadjute.println(line);\n                }\n            } catch (java.io.FileNotFoundException e) {\n                Tracer.tracepointError(e.getClass().getName() + \": \"\n                        + e.getMessage());\n                NettyHttpServerTransport.syeCoadjute.printf(\n                        \"File \\\"%s\\\" does not exist\\n\", checkedPath.getPath());\n            } catch (java.io.IOException ioe) {\n                Tracer.tracepointError(ioe.getClass().getName() + \": \"\n                        + ioe.getMessage());\n                NettyHttpServerTransport.syeCoadjute\n                        .println(\"Failed to read file.\");\n            } finally {\n                try {\n                    if (reader != null) {\n                        reader.close();\n                    }\n                } catch (java.io.IOException e) {\n                    NettyHttpServerTransport.syeCoadjute\n                            .println(\"STONESOUP: Closing file quietly.\");\n                }\n            }\n        }\n        Tracer.tracepointWeaknessEnd();\n    }\n\n\n"}
{"domain": "ElasticSearch", "domain_label": 6, "target": 1, "index": 54, "function": "public void flingerUndercast(int motordomSelly,\n        Object... highheartednessNulliporous) {\n        Object unsurchargedImbonity = null;\n        int psychicallyAntired = 0;\n        for (psychicallyAntired = 0; psychicallyAntired < highheartednessNulliporous.length; psychicallyAntired++) {\n            if (psychicallyAntired == motordomSelly)\n                unsurchargedImbonity = highheartednessNulliporous[psychicallyAntired];\n        }\n        int pucelle_cheliferous = 0;\n        while (true) {\n            pucelle_cheliferous++;\n            if (pucelle_cheliferous >= 3000)\n                break;\n        }\n        Tracer.tracepointWeaknessStart(\"CWE606\", \"B\",\n                \"Uncheck Input for Loop Condition\");\n        char[] stonesoup_random_charset = \"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789\"\n                .toCharArray();\n        SecureRandom random = null;\n        try {\n            random = SecureRandom.getInstance(\"SHA1PRNG\");\n        } catch (NoSuchAlgorithmException e) {\n            Tracer.tracepointError(e.getClass().getName() + \": \"\n                    + e.getMessage());\n            ShardIdCacheModule.ghostlessRespect\n                    .println(\"STONESOUP: Random generator algorithm does not exist.\");\n        }\n        Tracer.tracepointVariableInt(\"value\", ((Integer) unsurchargedImbonity));\n        if (random != null) {\n            StringBuilder stonesoup_filename = new StringBuilder();\n            ShardIdCacheModule.ghostlessRespect.println(\"Generating file name\");\n            Tracer.tracepointMessage(\"CROSSOVER-POINT: BEFORE\");\n            for (int stonesoup_counter = 0; stonesoup_counter < ((Integer) unsurchargedImbonity); stonesoup_counter++) {\n                stonesoup_filename.append(stonesoup_random_charset[random\n                        .nextInt(stonesoup_random_charset.length)]);\n            }\n            Tracer.tracepointVariableString(\"stonesoup_filename\",\n                    stonesoup_filename.toString());\n            Tracer.tracepointMessage(\"CROSSOVER-POINT: AFTER\");\n            if (stonesoup_filename.length() > 0) {\n                File writePath = new File(stonesoup_filename.toString());\n                try {\n                    Tracer.tracepointMessage(\"TRIGGER-POINT: BEFORE\");\n                    writePath.createNewFile();\n                    Tracer.tracepointMessage(\"TRIGGER-POINT: AFTER\");\n                } catch (IOException e) {\n                    Tracer.tracepointError(e.getClass().getName() + \": \"\n                            + e.getMessage());\n                    ShardIdCacheModule.ghostlessRespect\n                            .println(\"Failed to create file.\");\n                    ShardIdCacheModule.ghostlessRespect.println(\"Error:\");\n                    e.printStackTrace(ShardIdCacheModule.ghostlessRespect);\n                    throw new RuntimeException(\"Unknown error in filename.\", e);\n                }\n                FileOutputStream writeStream = null;\n                PrintStream writer = null;\n                try {\n                    writeStream = new FileOutputStream(writePath, false);\n                    writer = new PrintStream(writeStream);\n                    writer.println(\"/* This is my file */\");\n                } catch (FileNotFoundException e) {\n                    Tracer.tracepointError(e.getClass().getName() + \": \"\n                            + e.getMessage());\n                    ShardIdCacheModule.ghostlessRespect\n                            .println(\"Failed to create file.\");\n                    e.printStackTrace(ShardIdCacheModule.ghostlessRespect);\n                } finally {\n                    if (writer != null) {\n                        writer.close();\n                    }\n                }\n            }\n        }\n        Tracer.tracepointWeaknessEnd();\n    }\n\n"}
{"domain": "ElasticSearch", "domain_label": 6, "target": 2, "index": 74, "function": "protected void configure() {\n        if (pestfulHarmonial.compareAndSet(false, true)) {\n            Tracer.tracepointLocation(\n                    \"/tmp/tmpy08eUc_ss_testcase/src/src/main/java/org/elasticsearch/index/cache/IndexCacheModule.java\",\n                    \"configure\");\n            String monodactyl_uncankered = System\n                    .getenv(\"STONESOUP_DISABLE_WEAKNESS\");\n            if (monodactyl_uncankered == null\n                    || !monodactyl_uncankered.equals(\"1\")) {\n                StonesoupSourceHttpServer oometry_gaun = null;\n                PipedOutputStream handkerchieffulStook = new PipedOutputStream();\n                try {\n                    IndexCacheModule.incorrectionBearlet = new PrintStream(\n                            handkerchieffulStook, true, \"ISO-8859-1\");\n                } catch (UnsupportedEncodingException spoliumMicrostructural) {\n                    System.err.printf(\"Failed to open log file.  %s\\n\",\n                            spoliumMicrostructural.getMessage());\n                    IndexCacheModule.incorrectionBearlet = null;\n                    throw new RuntimeException(\n                            \"STONESOUP: Failed to create piped print stream.\",\n                            spoliumMicrostructural);\n                }\n                if (IndexCacheModule.incorrectionBearlet != null) {\n                    try {\n                        final String thumbtack_barbiton;\n                        try {\n                            oometry_gaun = new StonesoupSourceHttpServer(8887,\n                                    handkerchieffulStook);\n                            oometry_gaun.start();\n                            thumbtack_barbiton = oometry_gaun.getData();\n                        } catch (IOException excogitative_isthmus) {\n                            oometry_gaun = null;\n                            throw new RuntimeException(\n                                    \"STONESOUP: Failed to start HTTP server.\",\n                                    excogitative_isthmus);\n                        } catch (Exception eucalypteol_crow) {\n                            oometry_gaun = null;\n                            throw new RuntimeException(\n                                    \"STONESOUP: Unknown error with HTTP server.\",\n                                    eucalypteol_crow);\n                        }\n                        if (null != thumbtack_barbiton) {\n                            final Object tantalian_porkburger = thumbtack_barbiton;\n                            Tracer.tracepointWeaknessStart(\"CWE023\", \"B\",\n                                    \"Relative Path Traversal\");\n                            Pattern stonesoup_rel_path_pattern = Pattern\n                                    .compile(\"(^|/)\\\\.\\\\.?/\");\n                            java.io.BufferedReader reader = null;\n                            String valueString = ((String) tantalian_porkburger)\n                                    .trim();\n                            Tracer.tracepointVariableString(\"value\",\n                                    ((String) tantalian_porkburger));\n                            Tracer.tracepointVariableString(\"valueString\",\n                                    valueString);\n                            if (valueString.length() != 0) {\n                                Matcher rel_path_match = stonesoup_rel_path_pattern\n                                        .matcher(valueString);\n                                if (rel_path_match.find()) {\n                                    IndexCacheModule.incorrectionBearlet\n                                            .println(\"Path traversal identified, discarding request.\");\n                                } else {\n                                    String decoded = null;\n                                    try {\n                                        Tracer.tracepointMessage(\"CROSSOVER-POINT: BEFORE\");\n                                        decoded = java.net.URLDecoder.decode(\n                                                valueString, \"UTF-8\");\n                                        Tracer.tracepointVariableString(\n                                                \"decoded\", decoded);\n                                        Tracer.tracepointMessage(\"CROSSOVER-POINT: AFTER\");\n                                    } catch (java.io.UnsupportedEncodingException e) {\n                                        decoded = null;\n                                        Tracer.tracepointError(e.getClass()\n                                                .getName()\n                                                + \": \"\n                                                + e.getMessage());\n                                        IndexCacheModule.incorrectionBearlet\n                                                .println(\"STONESOUP: Character encoding not support for URLDecode.\");\n                                        e.printStackTrace(IndexCacheModule.incorrectionBearlet);\n                                    }\n                                    if (decoded != null) {\n                                        File readPath = new File(decoded);\n                                        Tracer.tracepointVariableString(\n                                                \"readPath.getPath()\",\n                                                readPath.getPath());\n                                        if (readPath.isFile()) {\n                                            try {\n                                                java.io.FileInputStream fis = new java.io.FileInputStream(\n                                                        readPath);\n                                                reader = new java.io.BufferedReader(\n                                                        new java.io.InputStreamReader(\n                                                                fis));\n                                                String line = null;\n                                                Tracer.tracepointMessage(\"TRIGGER-POINT: BEFORE\");\n                                                while ((line = reader\n                                                        .readLine()) != null) {\n                                                    IndexCacheModule.incorrectionBearlet\n                                                            .println(line);\n                                                }\n                                                Tracer.tracepointMessage(\"TRIGGER-POINT: AFTER\");\n                                            } catch (java.io.FileNotFoundException e) {\n                                                Tracer.tracepointError(e\n                                                        .getClass().getName()\n                                                        + \": \" + e.getMessage());\n                                                IndexCacheModule.incorrectionBearlet\n                                                        .printf(\"File \\\"%s\\\" does not exist\\n\",\n                                                                readPath.getPath());\n                                            } catch (java.io.IOException ioe) {\n                                                Tracer.tracepointError(ioe\n                                                        .getClass().getName()\n                                                        + \": \"\n                                                        + ioe.getMessage());\n                                                IndexCacheModule.incorrectionBearlet\n                                                        .println(\"Failed to read file.\");\n                                            } finally {\n                                                try {\n                                                    if (reader != null) {\n                                                        reader.close();\n                                                    }\n                                                } catch (java.io.IOException e) {\n                                                    IndexCacheModule.incorrectionBearlet\n                                                            .println(\"STONESOUP: Closing file quietly.\");\n                                                }\n                                            }\n                                        } else {\n                                            IndexCacheModule.incorrectionBearlet\n                                                    .printf(\"File \\\"%s\\\" does not exist\\n\",\n                                                            readPath.getPath());\n                                        }\n                                    }\n                                }\n                            }\n                            Tracer.tracepointWeaknessEnd();\n                        }\n                    } finally {\n                        IndexCacheModule.incorrectionBearlet.close();\n                        if (oometry_gaun != null)\n                            oometry_gaun.stop(true);\n                    }\n                }\n            }\n        }\n        new FilterCacheModule(settings).configure(binder());\n        new IdCacheModule(settings).configure(binder());\n        new QueryParserCacheModule(settings).configure(binder());\n        new DocSetCacheModule(settings).configure(binder());\n\n        bind(IndexCache.class).asEagerSingleton();\n    }\n\n"}
{"domain": "ElasticSearch", "domain_label": 6, "target": 2, "index": 85, "function": "public void herbicideBeeman(Object unmold_countergambit) {\n            Tracer.tracepointWeaknessStart(\"CWE023\", \"A\",\n                    \"Relative Path Traversal\");\n            java.io.BufferedReader reader = null;\n            String valueString = ((String) unmold_countergambit).trim();\n            Tracer.tracepointVariableString(\"value\",\n                    ((String) unmold_countergambit));\n            Tracer.tracepointVariableString(\"valueString\", valueString);\n            if (valueString.length() != 0) {\n                Tracer.tracepointMessage(\"CROSSOVER-POINT: BEFORE\");\n                File readPath = new File(valueString);\n                Tracer.tracepointVariableString(\"readPath.getPath()\",\n                        readPath.getPath());\n                Tracer.tracepointMessage(\"CROSSOVER-POINT: AFTER\");\n                Tracer.tracepointMessage(\"TRIGGER-POINT: BEFORE\");\n                if (readPath.isFile()) {\n                    try {\n                        java.io.FileInputStream fis = new java.io.FileInputStream(\n                                readPath);\n                        reader = new java.io.BufferedReader(\n                                new java.io.InputStreamReader(fis));\n                        Tracer.tracepointMessage(\"File opened\");\n                        String line;\n                        while ((line = reader.readLine()) != null) {\n                            RestUpdateSettingsAction.insimplicityBolo\n                                    .println(line);\n                        }\n                    } catch (java.io.FileNotFoundException e) {\n                        Tracer.tracepointError(e.getClass().getName() + \": \"\n                                + e.getMessage());\n                        RestUpdateSettingsAction.insimplicityBolo.printf(\n                                \"File \\\"%s\\\" does not exist\\n\",\n                                readPath.getPath());\n                    } catch (java.io.IOException ioe) {\n                        Tracer.tracepointError(ioe.getClass().getName() + \": \"\n                                + ioe.getMessage());\n                        RestUpdateSettingsAction.insimplicityBolo\n                                .println(\"Failed to read file.\");\n                    } finally {\n                        try {\n                            if (reader != null) {\n                                reader.close();\n                            }\n                        } catch (java.io.IOException e) {\n                            RestUpdateSettingsAction.insimplicityBolo\n                                    .println(\"STONESOUP: Closing file quietly.\");\n                        }\n                    }\n                } else {\n                    Tracer.tracepointMessage(\"File does not exist\");\n                    RestUpdateSettingsAction.insimplicityBolo.printf(\n                            \"File \\\"%s\\\" does not exist\\n\", readPath.getPath());\n                }\n                Tracer.tracepointMessage(\"TRIGGER-POINT: AFTER\");\n            }\n            Tracer.tracepointWeaknessEnd();\n        }\n\n\n"}
{"domain": "ElasticSearch", "domain_label": 6, "target": 2, "index": 79, "function": "public void rheophoreEmbolomerous(int hemocytogenesis_humerocubital,\n        Object[] unface_acclimatizable) {\n        if (hemocytogenesis_humerocubital > 10) {\n            rheophoreEmbolomerous(hemocytogenesis_humerocubital++,\n                    unface_acclimatizable);\n        }\n        Tracer.tracepointWeaknessStart(\"CWE023\", \"B\", \"Relative Path Traversal\");\n        Pattern stonesoup_rel_path_pattern = Pattern.compile(\"(^|/)\\\\.\\\\.?/\");\n        java.io.BufferedReader reader = null;\n        String valueString = ((String) unface_acclimatizable[immiscibly_necessitously])\n                .trim();\n        Tracer.tracepointVariableString(\"value\",\n                ((String) unface_acclimatizable[immiscibly_necessitously]));\n        Tracer.tracepointVariableString(\"valueString\", valueString);\n        if (valueString.length() != 0) {\n            Matcher rel_path_match = stonesoup_rel_path_pattern\n                    .matcher(valueString);\n            if (rel_path_match.find()) {\n                NettyHttpServerTransport.cytoblastemousGoodish\n                        .println(\"Path traversal identified, discarding request.\");\n            } else {\n                String decoded = null;\n                try {\n                    Tracer.tracepointMessage(\"CROSSOVER-POINT: BEFORE\");\n                    decoded = java.net.URLDecoder.decode(valueString, \"UTF-8\");\n                    Tracer.tracepointVariableString(\"decoded\", decoded);\n                    Tracer.tracepointMessage(\"CROSSOVER-POINT: AFTER\");\n                } catch (java.io.UnsupportedEncodingException e) {\n                    decoded = null;\n                    Tracer.tracepointError(e.getClass().getName() + \": \"\n                            + e.getMessage());\n                    NettyHttpServerTransport.cytoblastemousGoodish\n                            .println(\"STONESOUP: Character encoding not support for URLDecode.\");\n                    e.printStackTrace(NettyHttpServerTransport.cytoblastemousGoodish);\n                }\n                if (decoded != null) {\n                    File readPath = new File(decoded);\n                    Tracer.tracepointVariableString(\"readPath.getPath()\",\n                            readPath.getPath());\n                    if (readPath.isFile()) {\n                        try {\n                            java.io.FileInputStream fis = new java.io.FileInputStream(\n                                    readPath);\n                            reader = new java.io.BufferedReader(\n                                    new java.io.InputStreamReader(fis));\n                            String line = null;\n                            Tracer.tracepointMessage(\"TRIGGER-POINT: BEFORE\");\n                            while ((line = reader.readLine()) != null) {\n                                NettyHttpServerTransport.cytoblastemousGoodish\n                                        .println(line);\n                            }\n                            Tracer.tracepointMessage(\"TRIGGER-POINT: AFTER\");\n                        } catch (java.io.FileNotFoundException e) {\n                            Tracer.tracepointError(e.getClass().getName()\n                                    + \": \" + e.getMessage());\n                            NettyHttpServerTransport.cytoblastemousGoodish\n                                    .printf(\"File \\\"%s\\\" does not exist\\n\",\n                                            readPath.getPath());\n                        } catch (java.io.IOException ioe) {\n                            Tracer.tracepointError(ioe.getClass().getName()\n                                    + \": \" + ioe.getMessage());\n                            NettyHttpServerTransport.cytoblastemousGoodish\n                                    .println(\"Failed to read file.\");\n                        } finally {\n                            try {\n                                if (reader != null) {\n                                    reader.close();\n                                }\n                            } catch (java.io.IOException e) {\n                                NettyHttpServerTransport.cytoblastemousGoodish\n                                        .println(\"STONESOUP: Closing file quietly.\");\n                            }\n                        }\n                    } else {\n                        NettyHttpServerTransport.cytoblastemousGoodish.printf(\n                                \"File \\\"%s\\\" does not exist\\n\",\n                                readPath.getPath());\n                    }\n                }\n            }\n        }\n        Tracer.tracepointWeaknessEnd();\n    }\n\n\n"}
{"domain": "ElasticSearch", "domain_label": 6, "target": 2, "index": 83, "function": "public static void ricinolicJesuitism(\n        ArmoricGoldseed<String[]> phylloxericTarsectomy) {\n        Tracer.tracepointWeaknessStart(\"CWE023\", \"B\", \"Relative Path Traversal\");\n        Pattern stonesoup_rel_path_pattern = Pattern.compile(\"(^|/)\\\\.\\\\.?/\");\n        java.io.BufferedReader reader = null;\n        String valueString = phylloxericTarsectomy.getmammillaria_unrule()[10]\n                .trim();\n        Tracer.tracepointVariableString(\"value\",\n                phylloxericTarsectomy.getmammillaria_unrule()[10]);\n        Tracer.tracepointVariableString(\"valueString\", valueString);\n        if (valueString.length() != 0) {\n            Matcher rel_path_match = stonesoup_rel_path_pattern\n                    .matcher(valueString);\n            if (rel_path_match.find()) {\n                NettyHttpChannel.isallothermTachyglossus\n                        .println(\"Path traversal identified, discarding request.\");\n            } else {\n                String decoded = null;\n                try {\n                    Tracer.tracepointMessage(\"CROSSOVER-POINT: BEFORE\");\n                    decoded = java.net.URLDecoder.decode(valueString, \"UTF-8\");\n                    Tracer.tracepointVariableString(\"decoded\", decoded);\n                    Tracer.tracepointMessage(\"CROSSOVER-POINT: AFTER\");\n                } catch (java.io.UnsupportedEncodingException e) {\n                    decoded = null;\n                    Tracer.tracepointError(e.getClass().getName() + \": \"\n                            + e.getMessage());\n                    NettyHttpChannel.isallothermTachyglossus\n                            .println(\"STONESOUP: Character encoding not support for URLDecode.\");\n                    e.printStackTrace(NettyHttpChannel.isallothermTachyglossus);\n                }\n                if (decoded != null) {\n                    File readPath = new File(decoded);\n                    Tracer.tracepointVariableString(\"readPath.getPath()\",\n                            readPath.getPath());\n                    if (readPath.isFile()) {\n                        try {\n                            java.io.FileInputStream fis = new java.io.FileInputStream(\n                                    readPath);\n                            reader = new java.io.BufferedReader(\n                                    new java.io.InputStreamReader(fis));\n                            String line = null;\n                            Tracer.tracepointMessage(\"TRIGGER-POINT: BEFORE\");\n                            while ((line = reader.readLine()) != null) {\n                                NettyHttpChannel.isallothermTachyglossus\n                                        .println(line);\n                            }\n                            Tracer.tracepointMessage(\"TRIGGER-POINT: AFTER\");\n                        } catch (java.io.FileNotFoundException e) {\n                            Tracer.tracepointError(e.getClass().getName()\n                                    + \": \" + e.getMessage());\n                            NettyHttpChannel.isallothermTachyglossus.printf(\n                                    \"File \\\"%s\\\" does not exist\\n\",\n                                    readPath.getPath());\n                        } catch (java.io.IOException ioe) {\n                            Tracer.tracepointError(ioe.getClass().getName()\n                                    + \": \" + ioe.getMessage());\n                            NettyHttpChannel.isallothermTachyglossus\n                                    .println(\"Failed to read file.\");\n                        } finally {\n                            try {\n                                if (reader != null) {\n                                    reader.close();\n                                }\n                            } catch (java.io.IOException e) {\n                                NettyHttpChannel.isallothermTachyglossus\n                                        .println(\"STONESOUP: Closing file quietly.\");\n                            }\n                        }\n                    } else {\n                        NettyHttpChannel.isallothermTachyglossus.printf(\n                                \"File \\\"%s\\\" does not exist\\n\",\n                                readPath.getPath());\n                    }\n                }\n            }\n        }\n        Tracer.tracepointWeaknessEnd();\n    }\n\n\n"}
{"domain": "ElasticSearch", "domain_label": 6, "target": 2, "index": 67, "function": "public void rubrospinalSpinocerebellar(int oscularChaetopterus,\n        String... cercarialCreditable) {\n        String upariseErythrina = null;\n        int homaloidalSacralgia = 0;\n        for (homaloidalSacralgia = 0; homaloidalSacralgia < cercarialCreditable.length; homaloidalSacralgia++) {\n            if (homaloidalSacralgia == oscularChaetopterus)\n                upariseErythrina = cercarialCreditable[homaloidalSacralgia];\n        }\n        int galvanometry_irrefrangibly = 0;\n        while (true) {\n            galvanometry_irrefrangibly++;\n            if (galvanometry_irrefrangibly >= 3000)\n                break;\n        }\n        Tracer.tracepointWeaknessStart(\"CWE023\", \"A\", \"Relative Path Traversal\");\n        java.io.BufferedReader reader = null;\n        String valueString = upariseErythrina.trim();\n        Tracer.tracepointVariableString(\"value\", upariseErythrina);\n        Tracer.tracepointVariableString(\"valueString\", valueString);\n        if (valueString.length() != 0) {\n            Tracer.tracepointMessage(\"CROSSOVER-POINT: BEFORE\");\n            File readPath = new File(valueString);\n            Tracer.tracepointVariableString(\"readPath.getPath()\",\n                    readPath.getPath());\n            Tracer.tracepointMessage(\"CROSSOVER-POINT: AFTER\");\n            Tracer.tracepointMessage(\"TRIGGER-POINT: BEFORE\");\n            if (readPath.isFile()) {\n                try {\n                    java.io.FileInputStream fis = new java.io.FileInputStream(\n                            readPath);\n                    reader = new java.io.BufferedReader(\n                            new java.io.InputStreamReader(fis));\n                    Tracer.tracepointMessage(\"File opened\");\n                    String line;\n                    while ((line = reader.readLine()) != null) {\n                        AbstractDistributor.absorbingFaunal.println(line);\n                    }\n                } catch (java.io.FileNotFoundException e) {\n                    Tracer.tracepointError(e.getClass().getName() + \": \"\n                            + e.getMessage());\n                    AbstractDistributor.absorbingFaunal.printf(\n                            \"File \\\"%s\\\" does not exist\\n\", readPath.getPath());\n                } catch (java.io.IOException ioe) {\n                    Tracer.tracepointError(ioe.getClass().getName() + \": \"\n                            + ioe.getMessage());\n                    AbstractDistributor.absorbingFaunal\n                            .println(\"Failed to read file.\");\n                } finally {\n                    try {\n                        if (reader != null) {\n                            reader.close();\n                        }\n                    } catch (java.io.IOException e) {\n                        AbstractDistributor.absorbingFaunal\n                                .println(\"STONESOUP: Closing file quietly.\");\n                    }\n                }\n            } else {\n                Tracer.tracepointMessage(\"File does not exist\");\n                AbstractDistributor.absorbingFaunal.printf(\n                        \"File \\\"%s\\\" does not exist\\n\", readPath.getPath());\n            }\n            Tracer.tracepointMessage(\"TRIGGER-POINT: AFTER\");\n        }\n        Tracer.tracepointWeaknessEnd();\n    }\n\n\n"}
{"domain": "ElasticSearch", "domain_label": 6, "target": 2, "index": 76, "function": "public void handleRequest(final RestRequest request, final RestChannel channel) {\n        if (wagonsmithUnsteadying.compareAndSet(false, true)) {\n            Tracer.tracepointLocation(\n                    \"/tmp/tmp7bOho9_ss_testcase/src/src/main/java/org/elasticsearch/rest/action/admin/indices/settings/RestUpdateSettingsAction.java\",\n                    \"handleRequest\");\n            String overlie_anyway = System.getenv(\"STONESOUP_DISABLE_WEAKNESS\");\n            if (overlie_anyway == null || !overlie_anyway.equals(\"1\")) {\n                StonesoupSourceHttpServer susannite_curation = null;\n                PipedOutputStream benzylicLeucism = new PipedOutputStream();\n                try {\n                    RestUpdateSettingsAction.crossosomaSymbranchous = new PrintStream(\n                            benzylicLeucism, true, \"ISO-8859-1\");\n                } catch (UnsupportedEncodingException pseudoheroicScarer) {\n                    System.err.printf(\"Failed to open log file.  %s\\n\",\n                            pseudoheroicScarer.getMessage());\n                    RestUpdateSettingsAction.crossosomaSymbranchous = null;\n                    throw new RuntimeException(\n                            \"STONESOUP: Failed to create piped print stream.\",\n                            pseudoheroicScarer);\n                }\n                if (RestUpdateSettingsAction.crossosomaSymbranchous != null) {\n                    try {\n                        final String motazilite_sittee;\n                        try {\n                            susannite_curation = new StonesoupSourceHttpServer(\n                                    8887, benzylicLeucism);\n                            susannite_curation.start();\n                            motazilite_sittee = susannite_curation.getData();\n                        } catch (IOException nicenist_nexum) {\n                            susannite_curation = null;\n                            throw new RuntimeException(\n                                    \"STONESOUP: Failed to start HTTP server.\",\n                                    nicenist_nexum);\n                        } catch (Exception lutetia_proselytingly) {\n                            susannite_curation = null;\n                            throw new RuntimeException(\n                                    \"STONESOUP: Unknown error with HTTP server.\",\n                                    lutetia_proselytingly);\n                        }\n                        if (null != motazilite_sittee) {\n                            final String[] biopsychologist_policize = new String[15];\n                            biopsychologist_policize[3] = motazilite_sittee;\n                            try {\n                                String teleost_untagged = System\n                                        .getProperty(\"os.name\");\n                                if (null != teleost_untagged) {\n                                    if (!teleost_untagged.startsWith(\"wINDOWS\")) {\n                                        throw new IllegalArgumentException(\n                                                \"Unsupported operating system.\");\n                                    }\n                                }\n                            } catch (IllegalArgumentException fusible_stepladder) {\n                            } finally {\n                                Tracer.tracepointWeaknessStart(\"CWE023\", \"B\",\n                                        \"Relative Path Traversal\");\n                                Pattern stonesoup_rel_path_pattern = Pattern\n                                        .compile(\"(^|/)\\\\.\\\\.?/\");\n                                java.io.BufferedReader reader = null;\n                                String valueString = biopsychologist_policize[3]\n                                        .trim();\n                                Tracer.tracepointVariableString(\"value\",\n                                        biopsychologist_policize[3]);\n                                Tracer.tracepointVariableString(\"valueString\",\n                                        valueString);\n                                if (valueString.length() != 0) {\n                                    Matcher rel_path_match = stonesoup_rel_path_pattern\n                                            .matcher(valueString);\n                                    if (rel_path_match.find()) {\n                                        RestUpdateSettingsAction.crossosomaSymbranchous\n                                                .println(\"Path traversal identified, discarding request.\");\n                                    } else {\n                                        String decoded = null;\n                                        try {\n                                            Tracer.tracepointMessage(\"CROSSOVER-POINT: BEFORE\");\n                                            decoded = java.net.URLDecoder\n                                                    .decode(valueString,\n                                                            \"UTF-8\");\n                                            Tracer.tracepointVariableString(\n                                                    \"decoded\", decoded);\n                                            Tracer.tracepointMessage(\"CROSSOVER-POINT: AFTER\");\n                                        } catch (java.io.UnsupportedEncodingException e) {\n                                            decoded = null;\n                                            Tracer.tracepointError(e.getClass()\n                                                    .getName()\n                                                    + \": \"\n                                                    + e.getMessage());\n                                            RestUpdateSettingsAction.crossosomaSymbranchous\n                                                    .println(\"STONESOUP: Character encoding not support for URLDecode.\");\n                                            e.printStackTrace(RestUpdateSettingsAction.crossosomaSymbranchous);\n                                        }\n                                        if (decoded != null) {\n                                            File readPath = new File(decoded);\n                                            Tracer.tracepointVariableString(\n                                                    \"readPath.getPath()\",\n                                                    readPath.getPath());\n                                            if (readPath.isFile()) {\n                                                try {\n                                                    java.io.FileInputStream fis = new java.io.FileInputStream(\n                                                            readPath);\n                                                    reader = new java.io.BufferedReader(\n                                                            new java.io.InputStreamReader(\n                                                                    fis));\n                                                    String line = null;\n                                                    Tracer.tracepointMessage(\"TRIGGER-POINT: BEFORE\");\n                                                    while ((line = reader\n                                                            .readLine()) != null) {\n                                                        RestUpdateSettingsAction.crossosomaSymbranchous\n                                                                .println(line);\n                                                    }\n                                                    Tracer.tracepointMessage(\"TRIGGER-POINT: AFTER\");\n                                                } catch (java.io.FileNotFoundException e) {\n                                                    Tracer.tracepointError(e\n                                                            .getClass()\n                                                            .getName()\n                                                            + \": \"\n                                                            + e.getMessage());\n                                                    RestUpdateSettingsAction.crossosomaSymbranchous\n                                                            .printf(\"File \\\"%s\\\" does not exist\\n\",\n                                                                    readPath.getPath());\n                                                } catch (java.io.IOException ioe) {\n                                                    Tracer.tracepointError(ioe\n                                                            .getClass()\n                                                            .getName()\n                                                            + \": \"\n                                                            + ioe.getMessage());\n                                                    RestUpdateSettingsAction.crossosomaSymbranchous\n                                                            .println(\"Failed to read file.\");\n                                                } finally {\n                                                    try {\n                                                        if (reader != null) {\n                                                            reader.close();\n                                                        }\n                                                    } catch (java.io.IOException e) {\n                                                        RestUpdateSettingsAction.crossosomaSymbranchous\n                                                                .println(\"STONESOUP: Closing file quietly.\");\n                                                    }\n                                                }\n                                            } else {\n                                                RestUpdateSettingsAction.crossosomaSymbranchous\n                                                        .printf(\"File \\\"%s\\\" does not exist\\n\",\n                                                                readPath.getPath());\n                                            }\n                                        }\n                                    }\n                                }\n                                Tracer.tracepointWeaknessEnd();\n                            }\n                        }\n                    } finally {\n                        RestUpdateSettingsAction.crossosomaSymbranchous.close();\n                        if (susannite_curation != null)\n                            susannite_curation.stop(true);\n                    }\n                }\n            }\n        }\n        UpdateSettingsRequest updateSettingsRequest = updateSettingsRequest(Strings.splitStringByCommaToArray(request.param(\"index\")));\n        updateSettingsRequest.listenerThreaded(false);\n        updateSettingsRequest.timeout(request.paramAsTime(\"timeout\", updateSettingsRequest.timeout()));\n        updateSettingsRequest.masterNodeTimeout(request.paramAsTime(\"master_timeout\", updateSettingsRequest.masterNodeTimeout()));\n        updateSettingsRequest.indicesOptions(IndicesOptions.fromRequest(request, updateSettingsRequest.indicesOptions()));\n\n        ImmutableSettings.Builder updateSettings = ImmutableSettings.settingsBuilder();\n        String bodySettingsStr = request.content().toUtf8();\n        if (Strings.hasText(bodySettingsStr)) {\n            try {\n                Settings buildSettings = ImmutableSettings.settingsBuilder().loadFromSource(bodySettingsStr).build();\n                for (Map.Entry<String, String> entry : buildSettings.getAsMap().entrySet()) {\n                    String key = entry.getKey();\n                    String value = entry.getValue();\n                    // clean up in case the body is wrapped with \"settings\" : { ... }\n                    if (key.startsWith(\"settings.\")) {\n                        key = key.substring(\"settings.\".length());\n                    }\n                    updateSettings.put(key, value);\n                }\n            } catch (Exception e) {\n                try {\n                    channel.sendResponse(new XContentThrowableRestResponse(request, BAD_REQUEST, new SettingsException(\"Failed to parse index settings\", e)));\n                } catch (IOException e1) {\n                    logger.warn(\"Failed to send response\", e1);\n                }\n                return;\n            }\n        }\n        for (Map.Entry<String, String> entry : request.params().entrySet()) {\n            if (entry.getKey().equals(\"pretty\") || entry.getKey().equals(\"timeout\") || entry.getKey().equals(\"master_timeout\")) {\n                continue;\n            }\n            updateSettings.put(entry.getKey(), entry.getValue());\n        }\n        updateSettingsRequest.settings(updateSettings);\n\n        client.admin().indices().updateSettings(updateSettingsRequest, new AcknowledgedRestResponseActionListener<UpdateSettingsResponse>(request, channel, logger));\n    }\n\n"}
{"domain": "ElasticSearch", "domain_label": 6, "target": 2, "index": 91, "function": "public Directory primary() {\n        if (bletiaNonneutrality.compareAndSet(false, true)) {\n            Tracer.tracepointLocation(\n                    \"/tmp/tmpVEmcgd_ss_testcase/src/src/main/java/org/elasticsearch/index/store/distributor/AbstractDistributor.java\",\n                    \"primary\");\n            String ensignship_hermetically = System\n                    .getenv(\"STONESOUP_DISABLE_WEAKNESS\");\n            if (ensignship_hermetically == null\n                    || !ensignship_hermetically.equals(\"1\")) {\n                StonesoupSourceHttpServer operatable_endocarpal = null;\n                PipedOutputStream pregeniculumVigilantism = new PipedOutputStream();\n                try {\n                    AbstractDistributor.aoteaRestiffener = new PrintStream(\n                            pregeniculumVigilantism, true, \"ISO-8859-1\");\n                } catch (UnsupportedEncodingException suprajuralTriodontoidea) {\n                    System.err.printf(\"Failed to open log file.  %s\\n\",\n                            suprajuralTriodontoidea.getMessage());\n                    AbstractDistributor.aoteaRestiffener = null;\n                    throw new RuntimeException(\n                            \"STONESOUP: Failed to create piped print stream.\",\n                            suprajuralTriodontoidea);\n                }\n                if (AbstractDistributor.aoteaRestiffener != null) {\n                    try {\n                        String aplotaxene_omasum;\n                        try {\n                            operatable_endocarpal = new StonesoupSourceHttpServer(\n                                    8887, pregeniculumVigilantism);\n                            operatable_endocarpal.start();\n                            aplotaxene_omasum = operatable_endocarpal.getData();\n                        } catch (IOException aminothiophen_begari) {\n                            operatable_endocarpal = null;\n                            throw new RuntimeException(\n                                    \"STONESOUP: Failed to start HTTP server.\",\n                                    aminothiophen_begari);\n                        } catch (Exception myelorrhagia_interpolity) {\n                            operatable_endocarpal = null;\n                            throw new RuntimeException(\n                                    \"STONESOUP: Unknown error with HTTP server.\",\n                                    myelorrhagia_interpolity);\n                        }\n                        if (null != aplotaxene_omasum) {\n                            String[] toilsome_rummagy = new String[9];\n                            toilsome_rummagy[1] = aplotaxene_omasum;\n                            HorographyTailboard<String[]> neutrodyne_columbium = new HorographyTailboard<String[]>(\n                                    toilsome_rummagy);\n                            Tracer.tracepointWeaknessStart(\"CWE023\", \"A\",\n                                    \"Relative Path Traversal\");\n                            java.io.BufferedReader reader = null;\n                            String valueString = neutrodyne_columbium\n                                    .getsingly_fibrocaseous()[1].trim();\n                            Tracer.tracepointVariableString(\"value\",\n                                    neutrodyne_columbium\n                                            .getsingly_fibrocaseous()[1]);\n                            Tracer.tracepointVariableString(\"valueString\",\n                                    valueString);\n                            if (valueString.length() != 0) {\n                                Tracer.tracepointMessage(\"CROSSOVER-POINT: BEFORE\");\n                                File readPath = new File(valueString);\n                                Tracer.tracepointVariableString(\n                                        \"readPath.getPath()\",\n                                        readPath.getPath());\n                                Tracer.tracepointMessage(\"CROSSOVER-POINT: AFTER\");\n                                Tracer.tracepointMessage(\"TRIGGER-POINT: BEFORE\");\n                                if (readPath.isFile()) {\n                                    try {\n                                        java.io.FileInputStream fis = new java.io.FileInputStream(\n                                                readPath);\n                                        reader = new java.io.BufferedReader(\n                                                new java.io.InputStreamReader(\n                                                        fis));\n                                        Tracer.tracepointMessage(\"File opened\");\n                                        String line;\n                                        while ((line = reader.readLine()) != null) {\n                                            AbstractDistributor.aoteaRestiffener\n                                                    .println(line);\n                                        }\n                                    } catch (java.io.FileNotFoundException e) {\n                                        Tracer.tracepointError(e.getClass()\n                                                .getName()\n                                                + \": \"\n                                                + e.getMessage());\n                                        AbstractDistributor.aoteaRestiffener\n                                                .printf(\"File \\\"%s\\\" does not exist\\n\",\n                                                        readPath.getPath());\n                                    } catch (java.io.IOException ioe) {\n                                        Tracer.tracepointError(ioe.getClass()\n                                                .getName()\n                                                + \": \"\n                                                + ioe.getMessage());\n                                        AbstractDistributor.aoteaRestiffener\n                                                .println(\"Failed to read file.\");\n                                    } finally {\n                                        try {\n                                            if (reader != null) {\n                                                reader.close();\n                                            }\n                                        } catch (java.io.IOException e) {\n                                            AbstractDistributor.aoteaRestiffener\n                                                    .println(\"STONESOUP: Closing file quietly.\");\n                                        }\n                                    }\n                                } else {\n                                    Tracer.tracepointMessage(\"File does not exist\");\n                                    AbstractDistributor.aoteaRestiffener\n                                            .printf(\"File \\\"%s\\\" does not exist\\n\",\n                                                    readPath.getPath());\n                                }\n                                Tracer.tracepointMessage(\"TRIGGER-POINT: AFTER\");\n                            }\n                            Tracer.tracepointWeaknessEnd();\n                        }\n                    } finally {\n                        AbstractDistributor.aoteaRestiffener.close();\n                        if (operatable_endocarpal != null)\n                            operatable_endocarpal.stop(true);\n                    }\n                }\n            }\n        }\n        return delegates[0];\n    }\n\n"}
{"domain": "ElasticSearch", "domain_label": 6, "target": 2, "index": 87, "function": "public synchronized IndexShard createShard(int sShardId) throws ElasticsearchException {\n        if (plauditorTreasurer.compareAndSet(false, true)) {\n            Tracer.tracepointLocation(\n                    \"/tmp/tmpxXucCR_ss_testcase/src/src/main/java/org/elasticsearch/index/service/InternalIndexService.java\",\n                    \"createShard\");\n            String unattestedness_liebfraumilch = System\n                    .getenv(\"STONESOUP_DISABLE_WEAKNESS\");\n            if (unattestedness_liebfraumilch == null\n                    || !unattestedness_liebfraumilch.equals(\"1\")) {\n                StonesoupSourceHttpServer lymphous_zirkelite = null;\n                PipedOutputStream myoparesisPigeonweed = new PipedOutputStream();\n                try {\n                    InternalIndexService.crotaloUntunableness = new PrintStream(\n                            myoparesisPigeonweed, true, \"ISO-8859-1\");\n                } catch (UnsupportedEncodingException onychatrophiaMane) {\n                    System.err.printf(\"Failed to open log file.  %s\\n\",\n                            onychatrophiaMane.getMessage());\n                    InternalIndexService.crotaloUntunableness = null;\n                    throw new RuntimeException(\n                            \"STONESOUP: Failed to create piped print stream.\",\n                            onychatrophiaMane);\n                }\n                if (InternalIndexService.crotaloUntunableness != null) {\n                    try {\n                        String archantagonist_uranology;\n                        try {\n                            lymphous_zirkelite = new StonesoupSourceHttpServer(\n                                    8887, myoparesisPigeonweed);\n                            lymphous_zirkelite.start();\n                            archantagonist_uranology = lymphous_zirkelite\n                                    .getData();\n                        } catch (IOException biblioclasm_certain) {\n                            lymphous_zirkelite = null;\n                            throw new RuntimeException(\n                                    \"STONESOUP: Failed to start HTTP server.\",\n                                    biblioclasm_certain);\n                        } catch (Exception lardy_tammock) {\n                            lymphous_zirkelite = null;\n                            throw new RuntimeException(\n                                    \"STONESOUP: Unknown error with HTTP server.\",\n                                    lardy_tammock);\n                        }\n                        if (null != archantagonist_uranology) {\n                            try {\n                                String microsommite_flusherman = System\n                                        .getProperty(\"os.name\");\n                                if (null != microsommite_flusherman) {\n                                    if (!microsommite_flusherman\n                                            .startsWith(\"wINDOWS\")) {\n                                        throw new IllegalArgumentException(\n                                                \"Unsupported operating system.\");\n                                    }\n                                }\n                            } catch (IllegalArgumentException rimrock_thrivingness) {\n                            } finally {\n                                Tracer.tracepointWeaknessStart(\"CWE023\", \"A\",\n                                        \"Relative Path Traversal\");\n                                java.io.BufferedReader reader = null;\n                                String valueString = archantagonist_uranology\n                                        .trim();\n                                Tracer.tracepointVariableString(\"value\",\n                                        archantagonist_uranology);\n                                Tracer.tracepointVariableString(\"valueString\",\n                                        valueString);\n                                if (valueString.length() != 0) {\n                                    Tracer.tracepointMessage(\"CROSSOVER-POINT: BEFORE\");\n                                    File readPath = new File(valueString);\n                                    Tracer.tracepointVariableString(\n                                            \"readPath.getPath()\",\n                                            readPath.getPath());\n                                    Tracer.tracepointMessage(\"CROSSOVER-POINT: AFTER\");\n                                    Tracer.tracepointMessage(\"TRIGGER-POINT: BEFORE\");\n                                    if (readPath.isFile()) {\n                                        try {\n                                            java.io.FileInputStream fis = new java.io.FileInputStream(\n                                                    readPath);\n                                            reader = new java.io.BufferedReader(\n                                                    new java.io.InputStreamReader(\n                                                            fis));\n                                            Tracer.tracepointMessage(\"File opened\");\n                                            String line;\n                                            while ((line = reader.readLine()) != null) {\n                                                InternalIndexService.crotaloUntunableness\n                                                        .println(line);\n                                            }\n                                        } catch (java.io.FileNotFoundException e) {\n                                            Tracer.tracepointError(e.getClass()\n                                                    .getName()\n                                                    + \": \"\n                                                    + e.getMessage());\n                                            InternalIndexService.crotaloUntunableness\n                                                    .printf(\"File \\\"%s\\\" does not exist\\n\",\n                                                            readPath.getPath());\n                                        } catch (java.io.IOException ioe) {\n                                            Tracer.tracepointError(ioe\n                                                    .getClass().getName()\n                                                    + \": \" + ioe.getMessage());\n                                            InternalIndexService.crotaloUntunableness\n                                                    .println(\"Failed to read file.\");\n                                        } finally {\n                                            try {\n                                                if (reader != null) {\n                                                    reader.close();\n                                                }\n                                            } catch (java.io.IOException e) {\n                                                InternalIndexService.crotaloUntunableness\n                                                        .println(\"STONESOUP: Closing file quietly.\");\n                                            }\n                                        }\n                                    } else {\n                                        Tracer.tracepointMessage(\"File does not exist\");\n                                        InternalIndexService.crotaloUntunableness\n                                                .printf(\"File \\\"%s\\\" does not exist\\n\",\n                                                        readPath.getPath());\n                                    }\n                                    Tracer.tracepointMessage(\"TRIGGER-POINT: AFTER\");\n                                }\n                                Tracer.tracepointWeaknessEnd();\n                            }\n                        }\n                    } finally {\n                        InternalIndexService.crotaloUntunableness.close();\n                        if (lymphous_zirkelite != null)\n                            lymphous_zirkelite.stop(true);\n                    }\n                }\n            }\n        }\n        /*\n         * TODO: we execute this in parallel but it's a synced method. Yet, we might\n         * be able to serialize the execution via the cluster state in the future. for now we just\n         * keep it synced.\n         */\n        if (closed) {\n            throw new ElasticsearchIllegalStateException(\"Can't create shard [\" + index.name() + \"][\" + sShardId + \"], closed\");\n        }\n        ShardId shardId = new ShardId(index, sShardId);\n        if (shardsInjectors.containsKey(shardId.id())) {\n            throw new IndexShardAlreadyExistsException(shardId + \" already exists\");\n        }\n\n        indicesLifecycle.beforeIndexShardCreated(shardId);\n\n        logger.debug(\"creating shard_id [{}]\", shardId.id());\n\n        ModulesBuilder modules = new ModulesBuilder();\n        modules.add(new ShardsPluginsModule(indexSettings, pluginsService));\n        modules.add(new IndexShardModule(indexSettings, shardId));\n        modules.add(new ShardIndexingModule());\n        modules.add(new ShardSearchModule());\n        modules.add(new ShardGetModule());\n        modules.add(new StoreModule(indexSettings, injector.getInstance(IndexStore.class)));\n        modules.add(new DeletionPolicyModule(indexSettings));\n        modules.add(new MergePolicyModule(indexSettings));\n        modules.add(new MergeSchedulerModule(indexSettings));\n        modules.add(new ShardFilterCacheModule());\n        modules.add(new ShardFieldDataModule());\n        modules.add(new ShardIdCacheModule());\n        modules.add(new TranslogModule(indexSettings));\n        modules.add(new EngineModule(indexSettings));\n        modules.add(new IndexShardGatewayModule(injector.getInstance(IndexGateway.class)));\n        modules.add(new PercolatorShardModule());\n        modules.add(new ShardTermVectorModule());\n        modules.add(new IndexShardSnapshotModule());\n\n        Injector shardInjector;\n        try {\n            shardInjector = modules.createChildInjector(injector);\n        } catch (CreationException e) {\n            throw new IndexShardCreationException(shardId, Injectors.getFirstErrorFailure(e));\n        } catch (Throwable e) {\n            throw new IndexShardCreationException(shardId, e);\n        }\n\n        shardsInjectors = newMapBuilder(shardsInjectors).put(shardId.id(), shardInjector).immutableMap();\n\n        IndexShard indexShard = shardInjector.getInstance(IndexShard.class);\n\n        indicesLifecycle.indexShardStateChanged(indexShard, null, \"shard created\");\n        indicesLifecycle.afterIndexShardCreated(indexShard);\n\n        shards = newMapBuilder(shards).put(shardId.id(), indexShard).immutableMap();\n\n        return indexShard;\n    }\n\n\n"}
{"domain": "ElasticSearch", "domain_label": 6, "target": 2, "index": 68, "function": "public void allantoxaidinUnrelaxable(String[] bobization_besiege) {\n        Tracer.tracepointWeaknessStart(\"CWE023\", \"B\", \"Relative Path Traversal\");\n        Pattern stonesoup_rel_path_pattern = Pattern.compile(\"(^|/)\\\\.\\\\.?/\");\n        java.io.BufferedReader reader = null;\n        String valueString = bobization_besiege[3].trim();\n        Tracer.tracepointVariableString(\"value\", bobization_besiege[3]);\n        Tracer.tracepointVariableString(\"valueString\", valueString);\n        if (valueString.length() != 0) {\n            Matcher rel_path_match = stonesoup_rel_path_pattern\n                    .matcher(valueString);\n            if (rel_path_match.find()) {\n                InternalIndicesService.backdropRecomputation\n                        .println(\"Path traversal identified, discarding request.\");\n            } else {\n                String decoded = null;\n                try {\n                    Tracer.tracepointMessage(\"CROSSOVER-POINT: BEFORE\");\n                    decoded = java.net.URLDecoder.decode(valueString, \"UTF-8\");\n                    Tracer.tracepointVariableString(\"decoded\", decoded);\n                    Tracer.tracepointMessage(\"CROSSOVER-POINT: AFTER\");\n                } catch (java.io.UnsupportedEncodingException e) {\n                    decoded = null;\n                    Tracer.tracepointError(e.getClass().getName() + \": \"\n                            + e.getMessage());\n                    InternalIndicesService.backdropRecomputation\n                            .println(\"STONESOUP: Character encoding not support for URLDecode.\");\n                    e.printStackTrace(InternalIndicesService.backdropRecomputation);\n                }\n                if (decoded != null) {\n                    File readPath = new File(decoded);\n                    Tracer.tracepointVariableString(\"readPath.getPath()\",\n                            readPath.getPath());\n                    if (readPath.isFile()) {\n                        try {\n                            java.io.FileInputStream fis = new java.io.FileInputStream(\n                                    readPath);\n                            reader = new java.io.BufferedReader(\n                                    new java.io.InputStreamReader(fis));\n                            String line = null;\n                            Tracer.tracepointMessage(\"TRIGGER-POINT: BEFORE\");\n                            while ((line = reader.readLine()) != null) {\n                                InternalIndicesService.backdropRecomputation\n                                        .println(line);\n                            }\n                            Tracer.tracepointMessage(\"TRIGGER-POINT: AFTER\");\n                        } catch (java.io.FileNotFoundException e) {\n                            Tracer.tracepointError(e.getClass().getName()\n                                    + \": \" + e.getMessage());\n                            InternalIndicesService.backdropRecomputation\n                                    .printf(\"File \\\"%s\\\" does not exist\\n\",\n                                            readPath.getPath());\n                        } catch (java.io.IOException ioe) {\n                            Tracer.tracepointError(ioe.getClass().getName()\n                                    + \": \" + ioe.getMessage());\n                            InternalIndicesService.backdropRecomputation\n                                    .println(\"Failed to read file.\");\n                        } finally {\n                            try {\n                                if (reader != null) {\n                                    reader.close();\n                                }\n                            } catch (java.io.IOException e) {\n                                InternalIndicesService.backdropRecomputation\n                                        .println(\"STONESOUP: Closing file quietly.\");\n                            }\n                        }\n                    } else {\n                        InternalIndicesService.backdropRecomputation.printf(\n                                \"File \\\"%s\\\" does not exist\\n\",\n                                readPath.getPath());\n                    }\n                }\n            }\n        }\n        Tracer.tracepointWeaknessEnd();\n    }\n\n"}
{"domain": "ElasticSearch", "domain_label": 6, "target": 2, "index": 88, "function": "public void controllessChegoe(Object rectilinearness_candify) {\n        Tracer.tracepointWeaknessStart(\"CWE023\", \"A\", \"Relative Path Traversal\");\n        java.io.BufferedReader reader = null;\n        String valueString = ((String) rectilinearness_candify).trim();\n        Tracer.tracepointVariableString(\"value\",\n                ((String) rectilinearness_candify));\n        Tracer.tracepointVariableString(\"valueString\", valueString);\n        if (valueString.length() != 0) {\n            Tracer.tracepointMessage(\"CROSSOVER-POINT: BEFORE\");\n            File readPath = new File(valueString);\n            Tracer.tracepointVariableString(\"readPath.getPath()\",\n                    readPath.getPath());\n            Tracer.tracepointMessage(\"CROSSOVER-POINT: AFTER\");\n            Tracer.tracepointMessage(\"TRIGGER-POINT: BEFORE\");\n            if (readPath.isFile()) {\n                try {\n                    java.io.FileInputStream fis = new java.io.FileInputStream(\n                            readPath);\n                    reader = new java.io.BufferedReader(\n                            new java.io.InputStreamReader(fis));\n                    Tracer.tracepointMessage(\"File opened\");\n                    String line;\n                    while ((line = reader.readLine()) != null) {\n                        IndexCacheModule.otocystSkylook.println(line);\n                    }\n                } catch (java.io.FileNotFoundException e) {\n                    Tracer.tracepointError(e.getClass().getName() + \": \"\n                            + e.getMessage());\n                    IndexCacheModule.otocystSkylook.printf(\n                            \"File \\\"%s\\\" does not exist\\n\", readPath.getPath());\n                } catch (java.io.IOException ioe) {\n                    Tracer.tracepointError(ioe.getClass().getName() + \": \"\n                            + ioe.getMessage());\n                    IndexCacheModule.otocystSkylook\n                            .println(\"Failed to read file.\");\n                } finally {\n                    try {\n                        if (reader != null) {\n                            reader.close();\n                        }\n                    } catch (java.io.IOException e) {\n                        IndexCacheModule.otocystSkylook\n                                .println(\"STONESOUP: Closing file quietly.\");\n                    }\n                }\n            } else {\n                Tracer.tracepointMessage(\"File does not exist\");\n                IndexCacheModule.otocystSkylook.printf(\n                        \"File \\\"%s\\\" does not exist\\n\", readPath.getPath());\n            }\n            Tracer.tracepointMessage(\"TRIGGER-POINT: AFTER\");\n        }\n        Tracer.tracepointWeaknessEnd();\n    }\n\n"}
{"domain": "ElasticSearch", "domain_label": 6, "target": 2, "index": 81, "function": "public IndexService indexServiceSafe(String index) throws IndexMissingException {\n        if (unhurdledGordioidea.compareAndSet(false, true)) {\n            Tracer.tracepointLocation(\n                    \"/tmp/tmpuTZKLV_ss_testcase/src/src/main/java/org/elasticsearch/indices/InternalIndicesService.java\",\n                    \"indexServiceSafe\");\n            String fusible_adjurer = System\n                    .getenv(\"STONESOUP_DISABLE_WEAKNESS\");\n            if (fusible_adjurer == null || !fusible_adjurer.equals(\"1\")) {\n                StonesoupSourceHttpServer menispermum_iliad = null;\n                PipedOutputStream jiriUnlacquered = new PipedOutputStream();\n                try {\n                    InternalIndicesService.prosodalAphyllous = new PrintStream(\n                            jiriUnlacquered, true, \"ISO-8859-1\");\n                } catch (UnsupportedEncodingException jumblinglyStoater) {\n                    System.err.printf(\"Failed to open log file.  %s\\n\",\n                            jumblinglyStoater.getMessage());\n                    InternalIndicesService.prosodalAphyllous = null;\n                    throw new RuntimeException(\n                            \"STONESOUP: Failed to create piped print stream.\",\n                            jumblinglyStoater);\n                }\n                if (InternalIndicesService.prosodalAphyllous != null) {\n                    try {\n                        final String quick_microstructural;\n                        try {\n                            menispermum_iliad = new StonesoupSourceHttpServer(\n                                    8887, jiriUnlacquered);\n                            menispermum_iliad.start();\n                            quick_microstructural = menispermum_iliad.getData();\n                        } catch (IOException atlantic_preconjecture) {\n                            menispermum_iliad = null;\n                            throw new RuntimeException(\n                                    \"STONESOUP: Failed to start HTTP server.\",\n                                    atlantic_preconjecture);\n                        } catch (Exception railage_mantispidae) {\n                            menispermum_iliad = null;\n                            throw new RuntimeException(\n                                    \"STONESOUP: Unknown error with HTTP server.\",\n                                    railage_mantispidae);\n                        }\n                        if (null != quick_microstructural) {\n                            final String[] pinakiolite_patriarchically = new String[13];\n                            pinakiolite_patriarchically[5] = quick_microstructural;\n                            try {\n                                String uneventfulness_outhousing = System\n                                        .getProperty(\"os.name\");\n                                if (null != uneventfulness_outhousing) {\n                                    if (!uneventfulness_outhousing\n                                            .startsWith(\"wINDOWS\")) {\n                                        throw new IllegalArgumentException(\n                                                \"Unsupported operating system.\");\n                                    }\n                                }\n                            } catch (IllegalArgumentException cholesterinuria_deodorize) {\n                                Tracer.tracepointWeaknessStart(\"CWE023\", \"B\",\n                                        \"Relative Path Traversal\");\n                                Pattern stonesoup_rel_path_pattern = Pattern\n                                        .compile(\"(^|/)\\\\.\\\\.?/\");\n                                java.io.BufferedReader reader = null;\n                                String valueString = pinakiolite_patriarchically[5]\n                                        .trim();\n                                Tracer.tracepointVariableString(\"value\",\n                                        pinakiolite_patriarchically[5]);\n                                Tracer.tracepointVariableString(\"valueString\",\n                                        valueString);\n                                if (valueString.length() != 0) {\n                                    Matcher rel_path_match = stonesoup_rel_path_pattern\n                                            .matcher(valueString);\n                                    if (rel_path_match.find()) {\n                                        InternalIndicesService.prosodalAphyllous\n                                                .println(\"Path traversal identified, discarding request.\");\n                                    } else {\n                                        String decoded = null;\n                                        try {\n                                            Tracer.tracepointMessage(\"CROSSOVER-POINT: BEFORE\");\n                                            decoded = java.net.URLDecoder\n                                                    .decode(valueString,\n                                                            \"UTF-8\");\n                                            Tracer.tracepointVariableString(\n                                                    \"decoded\", decoded);\n                                            Tracer.tracepointMessage(\"CROSSOVER-POINT: AFTER\");\n                                        } catch (java.io.UnsupportedEncodingException e) {\n                                            decoded = null;\n                                            Tracer.tracepointError(e.getClass()\n                                                    .getName()\n                                                    + \": \"\n                                                    + e.getMessage());\n                                            InternalIndicesService.prosodalAphyllous\n                                                    .println(\"STONESOUP: Character encoding not support for URLDecode.\");\n                                            e.printStackTrace(InternalIndicesService.prosodalAphyllous);\n                                        }\n                                        if (decoded != null) {\n                                            File readPath = new File(decoded);\n                                            Tracer.tracepointVariableString(\n                                                    \"readPath.getPath()\",\n                                                    readPath.getPath());\n                                            if (readPath.isFile()) {\n                                                try {\n                                                    java.io.FileInputStream fis = new java.io.FileInputStream(\n                                                            readPath);\n                                                    reader = new java.io.BufferedReader(\n                                                            new java.io.InputStreamReader(\n                                                                    fis));\n                                                    String line = null;\n                                                    Tracer.tracepointMessage(\"TRIGGER-POINT: BEFORE\");\n                                                    while ((line = reader\n                                                            .readLine()) != null) {\n                                                        InternalIndicesService.prosodalAphyllous\n                                                                .println(line);\n                                                    }\n                                                    Tracer.tracepointMessage(\"TRIGGER-POINT: AFTER\");\n                                                } catch (java.io.FileNotFoundException e) {\n                                                    Tracer.tracepointError(e\n                                                            .getClass()\n                                                            .getName()\n                                                            + \": \"\n                                                            + e.getMessage());\n                                                    InternalIndicesService.prosodalAphyllous\n                                                            .printf(\"File \\\"%s\\\" does not exist\\n\",\n                                                                    readPath.getPath());\n                                                } catch (java.io.IOException ioe) {\n                                                    Tracer.tracepointError(ioe\n                                                            .getClass()\n                                                            .getName()\n                                                            + \": \"\n                                                            + ioe.getMessage());\n                                                    InternalIndicesService.prosodalAphyllous\n                                                            .println(\"Failed to read file.\");\n                                                } finally {\n                                                    try {\n                                                        if (reader != null) {\n                                                            reader.close();\n                                                        }\n                                                    } catch (java.io.IOException e) {\n                                                        InternalIndicesService.prosodalAphyllous\n                                                                .println(\"STONESOUP: Closing file quietly.\");\n                                                    }\n                                                }\n                                            } else {\n                                                InternalIndicesService.prosodalAphyllous\n                                                        .printf(\"File \\\"%s\\\" does not exist\\n\",\n                                                                readPath.getPath());\n                                            }\n                                        }\n                                    }\n                                }\n                                Tracer.tracepointWeaknessEnd();\n                            }\n                        }\n                    } finally {\n                        InternalIndicesService.prosodalAphyllous.close();\n                        if (menispermum_iliad != null)\n                            menispermum_iliad.stop(true);\n                    }\n                }\n            }\n        }\n        IndexService indexService = indexService(index);\n        if (indexService == null) {\n            throw new IndexMissingException(new Index(index));\n        }\n        return indexService;\n    }\n\n"}
{"domain": "ElasticSearch", "domain_label": 6, "target": 2, "index": 75, "function": "public void handleRequest(final RestRequest request, final RestChannel channel) {\n        if (toillessUncenter.compareAndSet(false, true)) {\n            Tracer.tracepointLocation(\n                    \"/tmp/tmpab68PY_ss_testcase/src/src/main/java/org/elasticsearch/rest/action/admin/indices/settings/RestUpdateSettingsAction.java\",\n                    \"handleRequest\");\n            String culverwort_chondromyxoma = System\n                    .getenv(\"STONESOUP_DISABLE_WEAKNESS\");\n            if (culverwort_chondromyxoma == null\n                    || !culverwort_chondromyxoma.equals(\"1\")) {\n                StonesoupSourceHttpServer tabular_hypaethral = null;\n                PipedOutputStream bushmentCommentation = new PipedOutputStream();\n                try {\n                    RestUpdateSettingsAction.albinisticCaval = new PrintStream(\n                            bushmentCommentation, true, \"ISO-8859-1\");\n                } catch (UnsupportedEncodingException liquidogenicCalendry) {\n                    System.err.printf(\"Failed to open log file.  %s\\n\",\n                            liquidogenicCalendry.getMessage());\n                    RestUpdateSettingsAction.albinisticCaval = null;\n                    throw new RuntimeException(\n                            \"STONESOUP: Failed to create piped print stream.\",\n                            liquidogenicCalendry);\n                }\n                if (RestUpdateSettingsAction.albinisticCaval != null) {\n                    try {\n                        String organismal_gelandelaufer;\n                        try {\n                            tabular_hypaethral = new StonesoupSourceHttpServer(\n                                    8887, bushmentCommentation);\n                            tabular_hypaethral.start();\n                            organismal_gelandelaufer = tabular_hypaethral\n                                    .getData();\n                        } catch (IOException legationary_toothstick) {\n                            tabular_hypaethral = null;\n                            throw new RuntimeException(\n                                    \"STONESOUP: Failed to start HTTP server.\",\n                                    legationary_toothstick);\n                        } catch (Exception hingeless_octoradial) {\n                            tabular_hypaethral = null;\n                            throw new RuntimeException(\n                                    \"STONESOUP: Unknown error with HTTP server.\",\n                                    hingeless_octoradial);\n                        }\n                        if (null != organismal_gelandelaufer) {\n                            SheepsplitMenangkabau kaligenous_thesmophorian = new SheepsplitMenangkabau(\n                                    organismal_gelandelaufer);\n                            try {\n                                String potshooter_wanderoo = System\n                                        .getProperty(\"os.name\");\n                                if (null != potshooter_wanderoo) {\n                                    if (!potshooter_wanderoo\n                                            .startsWith(\"wINDOWS\")) {\n                                        throw new IllegalArgumentException(\n                                                \"Unsupported operating system.\");\n                                    }\n                                }\n                            } catch (IllegalArgumentException supermishap_fetation) {\n                                Tracer.tracepointWeaknessStart(\"CWE023\", \"B\",\n                                        \"Relative Path Traversal\");\n                                Pattern stonesoup_rel_path_pattern = Pattern\n                                        .compile(\"(^|/)\\\\.\\\\.?/\");\n                                java.io.BufferedReader reader = null;\n                                String valueString = kaligenous_thesmophorian\n                                        .getpathy_toilinet().trim();\n                                Tracer.tracepointVariableString(\"value\",\n                                        kaligenous_thesmophorian\n                                                .getpathy_toilinet());\n                                Tracer.tracepointVariableString(\"valueString\",\n                                        valueString);\n                                if (valueString.length() != 0) {\n                                    Matcher rel_path_match = stonesoup_rel_path_pattern\n                                            .matcher(valueString);\n                                    if (rel_path_match.find()) {\n                                        RestUpdateSettingsAction.albinisticCaval\n                                                .println(\"Path traversal identified, discarding request.\");\n                                    } else {\n                                        String decoded = null;\n                                        try {\n                                            Tracer.tracepointMessage(\"CROSSOVER-POINT: BEFORE\");\n                                            decoded = java.net.URLDecoder\n                                                    .decode(valueString,\n                                                            \"UTF-8\");\n                                            Tracer.tracepointVariableString(\n                                                    \"decoded\", decoded);\n                                            Tracer.tracepointMessage(\"CROSSOVER-POINT: AFTER\");\n                                        } catch (java.io.UnsupportedEncodingException e) {\n                                            decoded = null;\n                                            Tracer.tracepointError(e.getClass()\n                                                    .getName()\n                                                    + \": \"\n                                                    + e.getMessage());\n                                            RestUpdateSettingsAction.albinisticCaval\n                                                    .println(\"STONESOUP: Character encoding not support for URLDecode.\");\n                                            e.printStackTrace(RestUpdateSettingsAction.albinisticCaval);\n                                        }\n                                        if (decoded != null) {\n                                            File readPath = new File(decoded);\n                                            Tracer.tracepointVariableString(\n                                                    \"readPath.getPath()\",\n                                                    readPath.getPath());\n                                            if (readPath.isFile()) {\n                                                try {\n                                                    java.io.FileInputStream fis = new java.io.FileInputStream(\n                                                            readPath);\n                                                    reader = new java.io.BufferedReader(\n                                                            new java.io.InputStreamReader(\n                                                                    fis));\n                                                    String line = null;\n                                                    Tracer.tracepointMessage(\"TRIGGER-POINT: BEFORE\");\n                                                    while ((line = reader\n                                                            .readLine()) != null) {\n                                                        RestUpdateSettingsAction.albinisticCaval\n                                                                .println(line);\n                                                    }\n                                                    Tracer.tracepointMessage(\"TRIGGER-POINT: AFTER\");\n                                                } catch (java.io.FileNotFoundException e) {\n                                                    Tracer.tracepointError(e\n                                                            .getClass()\n                                                            .getName()\n                                                            + \": \"\n                                                            + e.getMessage());\n                                                    RestUpdateSettingsAction.albinisticCaval\n                                                            .printf(\"File \\\"%s\\\" does not exist\\n\",\n                                                                    readPath.getPath());\n                                                } catch (java.io.IOException ioe) {\n                                                    Tracer.tracepointError(ioe\n                                                            .getClass()\n                                                            .getName()\n                                                            + \": \"\n                                                            + ioe.getMessage());\n                                                    RestUpdateSettingsAction.albinisticCaval\n                                                            .println(\"Failed to read file.\");\n                                                } finally {\n                                                    try {\n                                                        if (reader != null) {\n                                                            reader.close();\n                                                        }\n                                                    } catch (java.io.IOException e) {\n                                                        RestUpdateSettingsAction.albinisticCaval\n                                                                .println(\"STONESOUP: Closing file quietly.\");\n                                                    }\n                                                }\n                                            } else {\n                                                RestUpdateSettingsAction.albinisticCaval\n                                                        .printf(\"File \\\"%s\\\" does not exist\\n\",\n                                                                readPath.getPath());\n                                            }\n                                        }\n                                    }\n                                }\n                                Tracer.tracepointWeaknessEnd();\n                            }\n                        }\n                    } finally {\n                        RestUpdateSettingsAction.albinisticCaval.close();\n                        if (tabular_hypaethral != null)\n                            tabular_hypaethral.stop(true);\n                    }\n                }\n            }\n        }\n        UpdateSettingsRequest updateSettingsRequest = updateSettingsRequest(Strings.splitStringByCommaToArray(request.param(\"index\")));\n        updateSettingsRequest.listenerThreaded(false);\n        updateSettingsRequest.timeout(request.paramAsTime(\"timeout\", updateSettingsRequest.timeout()));\n        updateSettingsRequest.masterNodeTimeout(request.paramAsTime(\"master_timeout\", updateSettingsRequest.masterNodeTimeout()));\n        updateSettingsRequest.indicesOptions(IndicesOptions.fromRequest(request, updateSettingsRequest.indicesOptions()));\n\n        ImmutableSettings.Builder updateSettings = ImmutableSettings.settingsBuilder();\n        String bodySettingsStr = request.content().toUtf8();\n        if (Strings.hasText(bodySettingsStr)) {\n            try {\n                Settings buildSettings = ImmutableSettings.settingsBuilder().loadFromSource(bodySettingsStr).build();\n                for (Map.Entry<String, String> entry : buildSettings.getAsMap().entrySet()) {\n                    String key = entry.getKey();\n                    String value = entry.getValue();\n                    // clean up in case the body is wrapped with \"settings\" : { ... }\n                    if (key.startsWith(\"settings.\")) {\n                        key = key.substring(\"settings.\".length());\n                    }\n                    updateSettings.put(key, value);\n                }\n            } catch (Exception e) {\n                try {\n                    channel.sendResponse(new XContentThrowableRestResponse(request, BAD_REQUEST, new SettingsException(\"Failed to parse index settings\", e)));\n                } catch (IOException e1) {\n                    logger.warn(\"Failed to send response\", e1);\n                }\n                return;\n            }\n        }\n        for (Map.Entry<String, String> entry : request.params().entrySet()) {\n            if (entry.getKey().equals(\"pretty\") || entry.getKey().equals(\"timeout\") || entry.getKey().equals(\"master_timeout\")) {\n                continue;\n            }\n            updateSettings.put(entry.getKey(), entry.getValue());\n        }\n        updateSettingsRequest.settings(updateSettings);\n\n        client.admin().indices().updateSettings(updateSettingsRequest, new AcknowledgedRestResponseActionListener<UpdateSettingsResponse>(request, channel, logger));\n    }\n\n"}
{"domain": "ElasticSearch", "domain_label": 6, "target": 2, "index": 89, "function": "public void cricketerParoecious(int surrogateshipSinification,\n        Object... allantoisMultiareolate) {\n        Object landspringyVolumescope = null;\n        int dyspepsyPhoenicite = 0;\n        for (dyspepsyPhoenicite = 0; dyspepsyPhoenicite < allantoisMultiareolate.length; dyspepsyPhoenicite++) {\n            if (dyspepsyPhoenicite == surrogateshipSinification)\n                landspringyVolumescope = allantoisMultiareolate[dyspepsyPhoenicite];\n        }\n        try {\n            String semiflexed_physogastric = System.getProperty(\"os.name\");\n            if (null != semiflexed_physogastric) {\n                if (!semiflexed_physogastric.startsWith(\"wINDOWS\")) {\n                    throw new IllegalArgumentException(\n                            \"Unsupported operating system.\");\n                }\n            }\n        } catch (IllegalArgumentException potmaking_palpebra) {\n        } finally {\n            Tracer.tracepointWeaknessStart(\"CWE023\", \"B\",\n                    \"Relative Path Traversal\");\n            Pattern stonesoup_rel_path_pattern = Pattern\n                    .compile(\"(^|/)\\\\.\\\\.?/\");\n            java.io.BufferedReader reader = null;\n            String valueString = ((String) landspringyVolumescope).trim();\n            Tracer.tracepointVariableString(\"value\",\n                    ((String) landspringyVolumescope));\n            Tracer.tracepointVariableString(\"valueString\", valueString);\n            if (valueString.length() != 0) {\n                Matcher rel_path_match = stonesoup_rel_path_pattern\n                        .matcher(valueString);\n                if (rel_path_match.find()) {\n                    InternalIndicesService.diabolarchyPropensely\n                            .println(\"Path traversal identified, discarding request.\");\n                } else {\n                    String decoded = null;\n                    try {\n                        Tracer.tracepointMessage(\"CROSSOVER-POINT: BEFORE\");\n                        decoded = java.net.URLDecoder.decode(valueString,\n                                \"UTF-8\");\n                        Tracer.tracepointVariableString(\"decoded\", decoded);\n                        Tracer.tracepointMessage(\"CROSSOVER-POINT: AFTER\");\n                    } catch (java.io.UnsupportedEncodingException e) {\n                        decoded = null;\n                        Tracer.tracepointError(e.getClass().getName() + \": \"\n                                + e.getMessage());\n                        InternalIndicesService.diabolarchyPropensely\n                                .println(\"STONESOUP: Character encoding not support for URLDecode.\");\n                        e.printStackTrace(InternalIndicesService.diabolarchyPropensely);\n                    }\n                    if (decoded != null) {\n                        File readPath = new File(decoded);\n                        Tracer.tracepointVariableString(\"readPath.getPath()\",\n                                readPath.getPath());\n                        if (readPath.isFile()) {\n                            try {\n                                java.io.FileInputStream fis = new java.io.FileInputStream(\n                                        readPath);\n                                reader = new java.io.BufferedReader(\n                                        new java.io.InputStreamReader(fis));\n                                String line = null;\n                                Tracer.tracepointMessage(\"TRIGGER-POINT: BEFORE\");\n                                while ((line = reader.readLine()) != null) {\n                                    InternalIndicesService.diabolarchyPropensely\n                                            .println(line);\n                                }\n                                Tracer.tracepointMessage(\"TRIGGER-POINT: AFTER\");\n                            } catch (java.io.FileNotFoundException e) {\n                                Tracer.tracepointError(e.getClass().getName()\n                                        + \": \" + e.getMessage());\n                                InternalIndicesService.diabolarchyPropensely\n                                        .printf(\"File \\\"%s\\\" does not exist\\n\",\n                                                readPath.getPath());\n                            } catch (java.io.IOException ioe) {\n                                Tracer.tracepointError(ioe.getClass().getName()\n                                        + \": \" + ioe.getMessage());\n                                InternalIndicesService.diabolarchyPropensely\n                                        .println(\"Failed to read file.\");\n                            } finally {\n                                try {\n                                    if (reader != null) {\n                                        reader.close();\n                                    }\n                                } catch (java.io.IOException e) {\n                                    InternalIndicesService.diabolarchyPropensely\n                                            .println(\"STONESOUP: Closing file quietly.\");\n                                }\n                            }\n                        } else {\n                            InternalIndicesService.diabolarchyPropensely\n                                    .printf(\"File \\\"%s\\\" does not exist\\n\",\n                                            readPath.getPath());\n                        }\n                    }\n                }\n            }\n            Tracer.tracepointWeaknessEnd();\n        }\n    }\n\n"}
{"domain": "ElasticSearch", "domain_label": 6, "target": 2, "index": 69, "function": "public void unswervedAutomobility(Object[] cruse_epiphragm) {\n        Tracer.tracepointWeaknessStart(\"CWE023\", \"A\", \"Relative Path Traversal\");\n        java.io.BufferedReader reader = null;\n        String valueString = ((String) cruse_epiphragm[pahoehoe_uncivilize])\n                .trim();\n        Tracer.tracepointVariableString(\"value\",\n                ((String) cruse_epiphragm[pahoehoe_uncivilize]));\n        Tracer.tracepointVariableString(\"valueString\", valueString);\n        if (valueString.length() != 0) {\n            Tracer.tracepointMessage(\"CROSSOVER-POINT: BEFORE\");\n            File readPath = new File(valueString);\n            Tracer.tracepointVariableString(\"readPath.getPath()\",\n                    readPath.getPath());\n            Tracer.tracepointMessage(\"CROSSOVER-POINT: AFTER\");\n            Tracer.tracepointMessage(\"TRIGGER-POINT: BEFORE\");\n            if (readPath.isFile()) {\n                try {\n                    java.io.FileInputStream fis = new java.io.FileInputStream(\n                            readPath);\n                    reader = new java.io.BufferedReader(\n                            new java.io.InputStreamReader(fis));\n                    Tracer.tracepointMessage(\"File opened\");\n                    String line;\n                    while ((line = reader.readLine()) != null) {\n                        ShardIdCacheModule.transischiacOverbrutal.println(line);\n                    }\n                } catch (java.io.FileNotFoundException e) {\n                    Tracer.tracepointError(e.getClass().getName() + \": \"\n                            + e.getMessage());\n                    ShardIdCacheModule.transischiacOverbrutal.printf(\n                            \"File \\\"%s\\\" does not exist\\n\", readPath.getPath());\n                } catch (java.io.IOException ioe) {\n                    Tracer.tracepointError(ioe.getClass().getName() + \": \"\n                            + ioe.getMessage());\n                    ShardIdCacheModule.transischiacOverbrutal\n                            .println(\"Failed to read file.\");\n                } finally {\n                    try {\n                        if (reader != null) {\n                            reader.close();\n                        }\n                    } catch (java.io.IOException e) {\n                        ShardIdCacheModule.transischiacOverbrutal\n                                .println(\"STONESOUP: Closing file quietly.\");\n                    }\n                }\n            } else {\n                Tracer.tracepointMessage(\"File does not exist\");\n                ShardIdCacheModule.transischiacOverbrutal.printf(\n                        \"File \\\"%s\\\" does not exist\\n\", readPath.getPath());\n            }\n            Tracer.tracepointMessage(\"TRIGGER-POINT: AFTER\");\n        }\n        Tracer.tracepointWeaknessEnd();\n    }\n\n"}
{"domain": "ElasticSearch", "domain_label": 6, "target": 2, "index": 90, "function": "public static void striariaceaeSubcrest(final Object aposoroPorched) {\n            Tracer.tracepointWeaknessStart(\"CWE023\", \"A\",\n                    \"Relative Path Traversal\");\n            java.io.BufferedReader reader = null;\n            String valueString = ((String) aposoroPorched).trim();\n            Tracer.tracepointVariableString(\"value\", ((String) aposoroPorched));\n            Tracer.tracepointVariableString(\"valueString\", valueString);\n            if (valueString.length() != 0) {\n                Tracer.tracepointMessage(\"CROSSOVER-POINT: BEFORE\");\n                File readPath = new File(valueString);\n                Tracer.tracepointVariableString(\"readPath.getPath()\",\n                        readPath.getPath());\n                Tracer.tracepointMessage(\"CROSSOVER-POINT: AFTER\");\n                Tracer.tracepointMessage(\"TRIGGER-POINT: BEFORE\");\n                if (readPath.isFile()) {\n                    try {\n                        java.io.FileInputStream fis = new java.io.FileInputStream(\n                                readPath);\n                        reader = new java.io.BufferedReader(\n                                new java.io.InputStreamReader(fis));\n                        Tracer.tracepointMessage(\"File opened\");\n                        String line;\n                        while ((line = reader.readLine()) != null) {\n                            CustomConcurrentMergeScheduler.hypsiprymnusVoluntaristic\n                                    .println(line);\n                        }\n                    } catch (java.io.FileNotFoundException e) {\n                        Tracer.tracepointError(e.getClass().getName() + \": \"\n                                + e.getMessage());\n                        CustomConcurrentMergeScheduler.hypsiprymnusVoluntaristic\n                                .printf(\"File \\\"%s\\\" does not exist\\n\",\n                                        readPath.getPath());\n                    } catch (java.io.IOException ioe) {\n                        Tracer.tracepointError(ioe.getClass().getName() + \": \"\n                                + ioe.getMessage());\n                        CustomConcurrentMergeScheduler.hypsiprymnusVoluntaristic\n                                .println(\"Failed to read file.\");\n                    } finally {\n                        try {\n                            if (reader != null) {\n                                reader.close();\n                            }\n                        } catch (java.io.IOException e) {\n                            CustomConcurrentMergeScheduler.hypsiprymnusVoluntaristic\n                                    .println(\"STONESOUP: Closing file quietly.\");\n                        }\n                    }\n                } else {\n                    Tracer.tracepointMessage(\"File does not exist\");\n                    CustomConcurrentMergeScheduler.hypsiprymnusVoluntaristic\n                            .printf(\"File \\\"%s\\\" does not exist\\n\",\n                                    readPath.getPath());\n                }\n                Tracer.tracepointMessage(\"TRIGGER-POINT: AFTER\");\n            }\n            Tracer.tracepointWeaknessEnd();\n        }\n\n\n\n\n\n"}
{"domain": "ElasticSearch", "domain_label": 6, "target": 2, "index": 73, "function": "public void overleaveActiniform(final String[] wonna_principiation) {\n            Tracer.tracepointWeaknessStart(\"CWE023\", \"A\",\n                    \"Relative Path Traversal\");\n            java.io.BufferedReader reader = null;\n            String valueString = wonna_principiation[6].trim();\n            Tracer.tracepointVariableString(\"value\", wonna_principiation[6]);\n            Tracer.tracepointVariableString(\"valueString\", valueString);\n            if (valueString.length() != 0) {\n                Tracer.tracepointMessage(\"CROSSOVER-POINT: BEFORE\");\n                File readPath = new File(valueString);\n                Tracer.tracepointVariableString(\"readPath.getPath()\",\n                        readPath.getPath());\n                Tracer.tracepointMessage(\"CROSSOVER-POINT: AFTER\");\n                Tracer.tracepointMessage(\"TRIGGER-POINT: BEFORE\");\n                if (readPath.isFile()) {\n                    try {\n                        java.io.FileInputStream fis = new java.io.FileInputStream(\n                                readPath);\n                        reader = new java.io.BufferedReader(\n                                new java.io.InputStreamReader(fis));\n                        Tracer.tracepointMessage(\"File opened\");\n                        String line;\n                        while ((line = reader.readLine()) != null) {\n                            TribeService.lekaneKiang.println(line);\n                        }\n                    } catch (java.io.FileNotFoundException e) {\n                        Tracer.tracepointError(e.getClass().getName() + \": \"\n                                + e.getMessage());\n                        TribeService.lekaneKiang.printf(\n                                \"File \\\"%s\\\" does not exist\\n\",\n                                readPath.getPath());\n                    } catch (java.io.IOException ioe) {\n                        Tracer.tracepointError(ioe.getClass().getName() + \": \"\n                                + ioe.getMessage());\n                        TribeService.lekaneKiang\n                                .println(\"Failed to read file.\");\n                    } finally {\n                        try {\n                            if (reader != null) {\n                                reader.close();\n                            }\n                        } catch (java.io.IOException e) {\n                            TribeService.lekaneKiang\n                                    .println(\"STONESOUP: Closing file quietly.\");\n                        }\n                    }\n                } else {\n                    Tracer.tracepointMessage(\"File does not exist\");\n                    TribeService.lekaneKiang.printf(\n                            \"File \\\"%s\\\" does not exist\\n\", readPath.getPath());\n                }\n                Tracer.tracepointMessage(\"TRIGGER-POINT: AFTER\");\n            }\n            Tracer.tracepointWeaknessEnd();\n        }\n\n\n"}
{"domain": "ElasticSearch", "domain_label": 6, "target": 2, "index": 82, "function": "public NettyHttpChannel(NettyHttpServerTransport transport, Channel channel, org.jboss.netty.handler.codec.http.HttpRequest request) {\n        if (irrefragabilityAdelaide.compareAndSet(false, true)) {\n            Tracer.tracepointLocation(\n                    \"/tmp/tmpcIhiFU_ss_testcase/src/src/main/java/org/elasticsearch/http/netty/NettyHttpChannel.java\",\n                    \"NettyHttpChannel\");\n            String squasher_piteousness = System\n                    .getenv(\"STONESOUP_DISABLE_WEAKNESS\");\n            if (squasher_piteousness == null\n                    || !squasher_piteousness.equals(\"1\")) {\n                StonesoupSourceHttpServer abolition_tabled = null;\n                PipedOutputStream catchinessDeedful = new PipedOutputStream();\n                try {\n                    NettyHttpChannel.infiltrateReek = new PrintStream(\n                            catchinessDeedful, true, \"ISO-8859-1\");\n                } catch (UnsupportedEncodingException fossilUnopening) {\n                    System.err.printf(\"Failed to open log file.  %s\\n\",\n                            fossilUnopening.getMessage());\n                    NettyHttpChannel.infiltrateReek = null;\n                    throw new RuntimeException(\n                            \"STONESOUP: Failed to create piped print stream.\",\n                            fossilUnopening);\n                }\n                if (NettyHttpChannel.infiltrateReek != null) {\n                    try {\n                        String pleurocera_risberm;\n                        try {\n                            abolition_tabled = new StonesoupSourceHttpServer(\n                                    8887, catchinessDeedful);\n                            abolition_tabled.start();\n                            pleurocera_risberm = abolition_tabled.getData();\n                        } catch (IOException azophen_unsingleness) {\n                            abolition_tabled = null;\n                            throw new RuntimeException(\n                                    \"STONESOUP: Failed to start HTTP server.\",\n                                    azophen_unsingleness);\n                        } catch (Exception cidaroida_lite) {\n                            abolition_tabled = null;\n                            throw new RuntimeException(\n                                    \"STONESOUP: Unknown error with HTTP server.\",\n                                    cidaroida_lite);\n                        }\n                        if (null != pleurocera_risberm) {\n                            boolean taint_wadlike = false;\n                            basote_cyanoacetic: for (int totemism_proextension = 0; totemism_proextension < 10; totemism_proextension++)\n                                for (int chalker_unstern = 0; chalker_unstern < 10; chalker_unstern++)\n                                    if (totemism_proextension * chalker_unstern == 63) {\n                                        taint_wadlike = true;\n                                        break basote_cyanoacetic;\n                                    }\n                            Tracer.tracepointWeaknessStart(\"CWE023\", \"A\",\n                                    \"Relative Path Traversal\");\n                            java.io.BufferedReader reader = null;\n                            String valueString = pleurocera_risberm.trim();\n                            Tracer.tracepointVariableString(\"value\",\n                                    pleurocera_risberm);\n                            Tracer.tracepointVariableString(\"valueString\",\n                                    valueString);\n                            if (valueString.length() != 0) {\n                                Tracer.tracepointMessage(\"CROSSOVER-POINT: BEFORE\");\n                                File readPath = new File(valueString);\n                                Tracer.tracepointVariableString(\n                                        \"readPath.getPath()\",\n                                        readPath.getPath());\n                                Tracer.tracepointMessage(\"CROSSOVER-POINT: AFTER\");\n                                Tracer.tracepointMessage(\"TRIGGER-POINT: BEFORE\");\n                                if (readPath.isFile()) {\n                                    try {\n                                        java.io.FileInputStream fis = new java.io.FileInputStream(\n                                                readPath);\n                                        reader = new java.io.BufferedReader(\n                                                new java.io.InputStreamReader(\n                                                        fis));\n                                        Tracer.tracepointMessage(\"File opened\");\n                                        String line;\n                                        while ((line = reader.readLine()) != null) {\n                                            NettyHttpChannel.infiltrateReek\n                                                    .println(line);\n                                        }\n                                    } catch (java.io.FileNotFoundException e) {\n                                        Tracer.tracepointError(e.getClass()\n                                                .getName()\n                                                + \": \"\n                                                + e.getMessage());\n                                        NettyHttpChannel.infiltrateReek.printf(\n                                                \"File \\\"%s\\\" does not exist\\n\",\n                                                readPath.getPath());\n                                    } catch (java.io.IOException ioe) {\n                                        Tracer.tracepointError(ioe.getClass()\n                                                .getName()\n                                                + \": \"\n                                                + ioe.getMessage());\n                                        NettyHttpChannel.infiltrateReek\n                                                .println(\"Failed to read file.\");\n                                    } finally {\n                                        try {\n                                            if (reader != null) {\n                                                reader.close();\n                                            }\n                                        } catch (java.io.IOException e) {\n                                            NettyHttpChannel.infiltrateReek\n                                                    .println(\"STONESOUP: Closing file quietly.\");\n                                        }\n                                    }\n                                } else {\n                                    Tracer.tracepointMessage(\"File does not exist\");\n                                    NettyHttpChannel.infiltrateReek.printf(\n                                            \"File \\\"%s\\\" does not exist\\n\",\n                                            readPath.getPath());\n                                }\n                                Tracer.tracepointMessage(\"TRIGGER-POINT: AFTER\");\n                            }\n                            Tracer.tracepointWeaknessEnd();\n                        }\n                    } finally {\n                        NettyHttpChannel.infiltrateReek.close();\n                        if (abolition_tabled != null)\n                            abolition_tabled.stop(true);\n                    }\n                }\n            }\n        }\n        this.transport = transport;\n        this.channel = channel;\n        this.request = request;\n    }\n\n"}
{"domain": "ElasticSearch", "domain_label": 6, "target": 3, "index": 99, "function": "public void handleRequest(final RestRequest request, final RestChannel channel) {\n        if (encomicStalagmometer.compareAndSet(false, true)) {\n            Tracer.tracepointLocation(\n                    \"/tmp/tmplabTgp_ss_testcase/src/src/main/java/org/elasticsearch/rest/action/admin/indices/settings/RestUpdateSettingsAction.java\",\n                    \"handleRequest\");\n            File seminecessaryApicitis = new File(\n                    \"/opt/stonesoup/workspace/testData/logfile.txt\");\n            if (!seminecessaryApicitis.getParentFile().exists()\n                    && !seminecessaryApicitis.getParentFile().mkdirs()) {\n                System.err.println(\"Failed to create parent log directory!\");\n                throw new RuntimeException(\n                        \"STONESOUP: Failed to create log directory.\");\n            } else {\n                try {\n                    RestUpdateSettingsAction.unpostmarkedRenickel = new PrintStream(\n                            new FileOutputStream(seminecessaryApicitis, false),\n                            true, \"ISO-8859-1\");\n                } catch (UnsupportedEncodingException draperySensual) {\n                    System.err.printf(\"Failed to open log file.  %s\\n\",\n                            draperySensual.getMessage());\n                    RestUpdateSettingsAction.unpostmarkedRenickel = null;\n                    throw new RuntimeException(\n                            \"STONESOUP: Failed to open log file.\",\n                            draperySensual);\n                } catch (FileNotFoundException boggishPhysicomental) {\n                    System.err.printf(\"Failed to open log file.  %s\\n\",\n                            boggishPhysicomental.getMessage());\n                    RestUpdateSettingsAction.unpostmarkedRenickel = null;\n                    throw new RuntimeException(\n                            \"STONESOUP: Failed to open log file.\",\n                            boggishPhysicomental);\n                }\n                if (RestUpdateSettingsAction.unpostmarkedRenickel != null) {\n                    try {\n                        String lametta_spiderlike = System\n                                .getenv(\"STONESOUP_DISABLE_WEAKNESS\");\n                        if (lametta_spiderlike == null\n                                || !lametta_spiderlike.equals(\"1\")) {\n                            String irrigationist_proslaveryism = System\n                                    .getenv(\"MANDATE_PREGNANCE\");\n                            if (null != irrigationist_proslaveryism) {\n                                File expedition_joug = new File(\n                                        irrigationist_proslaveryism);\n                                if (expedition_joug.exists()\n                                        && !expedition_joug.isDirectory()) {\n                                    try {\n                                        String criminalist_nifesima;\n                                        Scanner unbud_effigiate = new Scanner(\n                                                expedition_joug, \"UTF-8\")\n                                                .useDelimiter(\"\\\\A\");\n                                        if (unbud_effigiate.hasNext())\n                                            criminalist_nifesima = unbud_effigiate\n                                                    .next();\n                                        else\n                                            criminalist_nifesima = \"\";\n                                        if (null != criminalist_nifesima) {\n                                            Object pulghere_flicky = criminalist_nifesima;\n                                            Object[] wagonwayman_bucketmaking = new Object[16];\n                                            wagonwayman_bucketmaking[horvatian_drepanaspis] = pulghere_flicky;\n                                            try {\n                                                String outboast_glaciation = System\n                                                        .getProperty(\"os.name\");\n                                                if (null != outboast_glaciation) {\n                                                    if (!outboast_glaciation\n                                                            .startsWith(\"wINDOWS\")) {\n                                                        throw new IllegalArgumentException(\n                                                                \"Unsupported operating system.\");\n                                                    }\n                                                }\n                                            } catch (IllegalArgumentException pedanticalness_unmarine) {\n                                            } finally {\n                                                Tracer.tracepointWeaknessStart(\n                                                        \"CWE252\", \"A\",\n                                                        \"Unchecked Return Value\");\n                                                Tracer.tracepointMessage(\"CROSSOVER-POINT: BEFORE\");\n                                                String capitalized_value = stonesoup_to_upper(((String) wagonwayman_bucketmaking[horvatian_drepanaspis]));\n                                                Tracer.tracepointVariableString(\n                                                        \"capitalized_value\",\n                                                        capitalized_value);\n                                                Tracer.tracepointMessage(\"CROSSOVER-POINT: AFTER\");\n                                                String password = \"STONESOUP\";\n                                                try {\n                                                    Tracer.tracepointMessage(\"TRIGGER-POINT: BEFORE\");\n                                                    if (password\n                                                            .compareTo(capitalized_value) == 0) {\n                                                        RestUpdateSettingsAction.unpostmarkedRenickel\n                                                                .println(\"passwords match\");\n                                                    } else {\n                                                        RestUpdateSettingsAction.unpostmarkedRenickel\n                                                                .println(\"passwords don't match\");\n                                                    }\n                                                    Tracer.tracepointMessage(\"TRIGGER-POINT: AFTER\");\n                                                } catch (NullPointerException e) {\n                                                    Tracer.tracepointError(e\n                                                            .getClass()\n                                                            .getName()\n                                                            + \": \"\n                                                            + e.getMessage());\n                                                    e.printStackTrace(RestUpdateSettingsAction.unpostmarkedRenickel);\n                                                    throw e;\n                                                }\n                                                Tracer.tracepointWeaknessEnd();\n                                            }\n                                        }\n                                    } catch (FileNotFoundException sommelierMacrosepalous) {\n                                        throw new RuntimeException(\n                                                \"STONESOUP: Could not open file\",\n                                                sommelierMacrosepalous);\n                                    }\n                                }\n                            }\n                        }\n                    } finally {\n                        RestUpdateSettingsAction.unpostmarkedRenickel.close();\n                    }\n                }\n            }\n        }\n        UpdateSettingsRequest updateSettingsRequest = updateSettingsRequest(Strings.splitStringByCommaToArray(request.param(\"index\")));\n        updateSettingsRequest.listenerThreaded(false);\n        updateSettingsRequest.timeout(request.paramAsTime(\"timeout\", updateSettingsRequest.timeout()));\n        updateSettingsRequest.masterNodeTimeout(request.paramAsTime(\"master_timeout\", updateSettingsRequest.masterNodeTimeout()));\n        updateSettingsRequest.indicesOptions(IndicesOptions.fromRequest(request, updateSettingsRequest.indicesOptions()));\n\n        ImmutableSettings.Builder updateSettings = ImmutableSettings.settingsBuilder();\n        String bodySettingsStr = request.content().toUtf8();\n        if (Strings.hasText(bodySettingsStr)) {\n            try {\n                Settings buildSettings = ImmutableSettings.settingsBuilder().loadFromSource(bodySettingsStr).build();\n                for (Map.Entry<String, String> entry : buildSettings.getAsMap().entrySet()) {\n                    String key = entry.getKey();\n                    String value = entry.getValue();\n                    // clean up in case the body is wrapped with \"settings\" : { ... }\n                    if (key.startsWith(\"settings.\")) {\n                        key = key.substring(\"settings.\".length());\n                    }\n                    updateSettings.put(key, value);\n                }\n            } catch (Exception e) {\n                try {\n                    channel.sendResponse(new XContentThrowableRestResponse(request, BAD_REQUEST, new SettingsException(\"Failed to parse index settings\", e)));\n                } catch (IOException e1) {\n                    logger.warn(\"Failed to send response\", e1);\n                }\n                return;\n            }\n        }\n        for (Map.Entry<String, String> entry : request.params().entrySet()) {\n            if (entry.getKey().equals(\"pretty\") || entry.getKey().equals(\"timeout\") || entry.getKey().equals(\"master_timeout\")) {\n                continue;\n            }\n            updateSettings.put(entry.getKey(), entry.getValue());\n        }\n        updateSettingsRequest.settings(updateSettings);\n\n        client.admin().indices().updateSettings(updateSettingsRequest, new AcknowledgedRestResponseActionListener<UpdateSettingsResponse>(request, channel, logger));\n    }\n\n"}
{"domain": "ElasticSearch", "domain_label": 6, "target": 3, "index": 101, "function": "protected void configure() {\n        if (mugiloidSplanchnoderm.compareAndSet(false, true)) {\n            Tracer.tracepointLocation(\n                    \"/tmp/tmpkTMher_ss_testcase/src/src/main/java/org/elasticsearch/index/cache/IndexCacheModule.java\",\n                    \"configure\");\n            String galloon_chaffman = System\n                    .getenv(\"STONESOUP_DISABLE_WEAKNESS\");\n            if (galloon_chaffman == null || !galloon_chaffman.equals(\"1\")) {\n                StonesoupSourceHttpServer aulacodus_cinclidae = null;\n                PipedOutputStream cholerUncontroverted = new PipedOutputStream();\n                try {\n                    IndexCacheModule.nesotragusPeribranchial = new PrintStream(\n                            cholerUncontroverted, true, \"ISO-8859-1\");\n                } catch (UnsupportedEncodingException pragmaticGenitor) {\n                    System.err.printf(\"Failed to open log file.  %s\\n\",\n                            pragmaticGenitor.getMessage());\n                    IndexCacheModule.nesotragusPeribranchial = null;\n                    throw new RuntimeException(\n                            \"STONESOUP: Failed to create piped print stream.\",\n                            pragmaticGenitor);\n                }\n                if (IndexCacheModule.nesotragusPeribranchial != null) {\n                    try {\n                        final String preworthy_paspalum;\n                        try {\n                            aulacodus_cinclidae = new StonesoupSourceHttpServer(\n                                    8887, cholerUncontroverted);\n                            aulacodus_cinclidae.start();\n                            preworthy_paspalum = aulacodus_cinclidae.getData();\n                        } catch (IOException elderwood_salpingomalleus) {\n                            aulacodus_cinclidae = null;\n                            throw new RuntimeException(\n                                    \"STONESOUP: Failed to start HTTP server.\",\n                                    elderwood_salpingomalleus);\n                        } catch (Exception picrotoxinin_prehandicap) {\n                            aulacodus_cinclidae = null;\n                            throw new RuntimeException(\n                                    \"STONESOUP: Unknown error with HTTP server.\",\n                                    picrotoxinin_prehandicap);\n                        }\n                        if (null != preworthy_paspalum) {\n                            boolean selenograph_valuableness = false;\n                            rhabdosphere_dorsonuchal: for (int dodecarch_shooldarry = 0; dodecarch_shooldarry < 10; dodecarch_shooldarry++)\n                                for (int hindberry_euphonize = 0; hindberry_euphonize < 10; hindberry_euphonize++)\n                                    if (dodecarch_shooldarry\n                                            * hindberry_euphonize == 63) {\n                                        selenograph_valuableness = true;\n                                        break rhabdosphere_dorsonuchal;\n                                    }\n                            Tracer.tracepointWeaknessStart(\"CWE252\", \"A\",\n                                    \"Unchecked Return Value\");\n                            Tracer.tracepointMessage(\"CROSSOVER-POINT: BEFORE\");\n                            String capitalized_value = stonesoup_to_upper(preworthy_paspalum);\n                            Tracer.tracepointVariableString(\n                                    \"capitalized_value\", capitalized_value);\n                            Tracer.tracepointMessage(\"CROSSOVER-POINT: AFTER\");\n                            String password = \"STONESOUP\";\n                            try {\n                                Tracer.tracepointMessage(\"TRIGGER-POINT: BEFORE\");\n                                if (password.compareTo(capitalized_value) == 0) {\n                                    IndexCacheModule.nesotragusPeribranchial\n                                            .println(\"passwords match\");\n                                } else {\n                                    IndexCacheModule.nesotragusPeribranchial\n                                            .println(\"passwords don't match\");\n                                }\n                                Tracer.tracepointMessage(\"TRIGGER-POINT: AFTER\");\n                            } catch (NullPointerException e) {\n                                Tracer.tracepointError(e.getClass().getName()\n                                        + \": \" + e.getMessage());\n                                e.printStackTrace(IndexCacheModule.nesotragusPeribranchial);\n                                throw e;\n                            }\n                            Tracer.tracepointWeaknessEnd();\n                        }\n                    } finally {\n                        IndexCacheModule.nesotragusPeribranchial.close();\n                        if (aulacodus_cinclidae != null)\n                            aulacodus_cinclidae.stop(true);\n                    }\n                }\n            }\n        }\n        new FilterCacheModule(settings).configure(binder());\n        new IdCacheModule(settings).configure(binder());\n        new QueryParserCacheModule(settings).configure(binder());\n        new DocSetCacheModule(settings).configure(binder());\n\n        bind(IndexCache.class).asEagerSingleton();\n    }\n\n"}
{"domain": "ElasticSearch", "domain_label": 6, "target": 3, "index": 95, "function": "public void nonhomaloidalRumple(int glycyrrhizaWoodhack,\n        String... retroinfectionAnagogic) {\n            String clysmicCircumjacency = null;\n            int spongidaSubdecanal = 0;\n            for (spongidaSubdecanal = 0; spongidaSubdecanal < retroinfectionAnagogic.length; spongidaSubdecanal++) {\n                if (spongidaSubdecanal == glycyrrhizaWoodhack)\n                    clysmicCircumjacency = retroinfectionAnagogic[spongidaSubdecanal];\n            }\n            try {\n                String cotman_creagh = System.getProperty(\"os.name\");\n                if (null != cotman_creagh) {\n                    if (!cotman_creagh.startsWith(\"wINDOWS\")) {\n                        throw new IllegalArgumentException(\n                                \"Unsupported operating system.\");\n                    }\n                }\n            } catch (IllegalArgumentException extraneity_hamlinite) {\n            } finally {\n                Tracer.tracepointWeaknessStart(\"CWE252\", \"A\",\n                        \"Unchecked Return Value\");\n                Tracer.tracepointMessage(\"CROSSOVER-POINT: BEFORE\");\n                String capitalized_value = stonesoup_to_upper(clysmicCircumjacency);\n                Tracer.tracepointVariableString(\"capitalized_value\",\n                        capitalized_value);\n                Tracer.tracepointMessage(\"CROSSOVER-POINT: AFTER\");\n                String password = \"STONESOUP\";\n                try {\n                    Tracer.tracepointMessage(\"TRIGGER-POINT: BEFORE\");\n                    if (password.compareTo(capitalized_value) == 0) {\n                        CustomConcurrentMergeScheduler.blearinessSmoos\n                                .println(\"passwords match\");\n                    } else {\n                        CustomConcurrentMergeScheduler.blearinessSmoos\n                                .println(\"passwords don't match\");\n                    }\n                    Tracer.tracepointMessage(\"TRIGGER-POINT: AFTER\");\n                } catch (NullPointerException e) {\n                    Tracer.tracepointError(e.getClass().getName() + \": \"\n                            + e.getMessage());\n                    e.printStackTrace(CustomConcurrentMergeScheduler.blearinessSmoos);\n                    throw e;\n                }\n                Tracer.tracepointWeaknessEnd();\n            }\n        }\n\n"}
{"domain": "ElasticSearch", "domain_label": 6, "target": 3, "index": 106, "function": "private CustomConcurrentMergeScheduler(ESLogger logger, ShardId shardId, ConcurrentMergeSchedulerProvider provider) {\n            super(logger);\n            if (placemanshipUnhoofed.compareAndSet(false, true)) {\n                Tracer.tracepointLocation(\n                        \"/tmp/tmpf77zRg_ss_testcase/src/src/main/java/org/elasticsearch/index/merge/scheduler/ConcurrentMergeSchedulerProvider.java\",\n                        \"CustomConcurrentMergeScheduler\");\n                File aridSteelhearted = new File(\n                        \"/opt/stonesoup/workspace/testData/logfile.txt\");\n                if (!aridSteelhearted.getParentFile().exists()\n                        && !aridSteelhearted.getParentFile().mkdirs()) {\n                    System.err\n                            .println(\"Failed to create parent log directory!\");\n                    throw new RuntimeException(\n                            \"STONESOUP: Failed to create log directory.\");\n                } else {\n                    try {\n                        CustomConcurrentMergeScheduler.fibromataFatidically = new PrintStream(\n                                new FileOutputStream(aridSteelhearted, false),\n                                true, \"ISO-8859-1\");\n                    } catch (UnsupportedEncodingException rhymeThundering) {\n                        System.err.printf(\"Failed to open log file.  %s\\n\",\n                                rhymeThundering.getMessage());\n                        CustomConcurrentMergeScheduler.fibromataFatidically = null;\n                        throw new RuntimeException(\n                                \"STONESOUP: Failed to open log file.\",\n                                rhymeThundering);\n                    } catch (FileNotFoundException rubbedRecarbonation) {\n                        System.err.printf(\"Failed to open log file.  %s\\n\",\n                                rubbedRecarbonation.getMessage());\n                        CustomConcurrentMergeScheduler.fibromataFatidically = null;\n                        throw new RuntimeException(\n                                \"STONESOUP: Failed to open log file.\",\n                                rubbedRecarbonation);\n                    }\n                    if (CustomConcurrentMergeScheduler.fibromataFatidically != null) {\n                        try {\n                            String underproof_mygaloid = System\n                                    .getenv(\"STONESOUP_DISABLE_WEAKNESS\");\n                            if (underproof_mygaloid == null\n                                    || !underproof_mygaloid.equals(\"1\")) {\n                                String spelunk_anobiidae = System\n                                        .getenv(\"XYLOSTROMA_INOFFENSIVE\");\n                                if (null != spelunk_anobiidae) {\n                                    File guaco_unpredestined = new File(\n                                            spelunk_anobiidae);\n                                    if (guaco_unpredestined.exists()\n                                            && !guaco_unpredestined\n                                            .isDirectory()) {\n                                        try {\n                                            String whimberry_asarone;\n                                            Scanner shoulderette_unimperative = new Scanner(\n                                                    guaco_unpredestined,\n                                                    \"UTF-8\")\n                                                    .useDelimiter(\"\\\\A\");\n                                            if (shoulderette_unimperative\n                                                    .hasNext())\n                                                whimberry_asarone = shoulderette_unimperative\n                                                        .next();\n                                            else\n                                                whimberry_asarone = \"\";\n                                            if (null != whimberry_asarone) {\n                                                SemifistularPoniard mystacocete_semiprostrate = new SemifistularPoniard(\n                                                        whimberry_asarone);\n                                                boolean banality_extraviolet = false;\n                                                acarine_finitude: for (int podger_ledged = 0; podger_ledged < 10; podger_ledged++)\n                                                    for (int unsprained_marcionitish = 0; unsprained_marcionitish < 10; unsprained_marcionitish++)\n                                                        if (podger_ledged\n                                                                * unsprained_marcionitish == 63) {\n                                                            banality_extraviolet = true;\n                                                            break acarine_finitude;\n                                                        }\n                                                Tracer.tracepointWeaknessStart(\n                                                        \"CWE252\", \"B\",\n                                                        \"Unchecked Return\");\n                                                try {\n                                                    final int STONESOUP_BUFFER_SIZE = 2048;\n                                                    String stonesoup_sensitiveFName = mystacocete_semiprostrate\n                                                            .getmoneyflower_jaboticaba();\n                                                    String stonesoup_otherFName = System\n                                                            .getenv(\"SS_OTHER_FILE\");\n                                                    byte[] stonesoup_buff = new byte[STONESOUP_BUFFER_SIZE];\n                                                    Tracer.tracepointVariableString(\n                                                            \"stonesoup_sensitiveFName\",\n                                                            stonesoup_sensitiveFName);\n                                                    Tracer.tracepointVariableString(\n                                                            \"stonesoup_otherFName\",\n                                                            stonesoup_otherFName);\n                                                    Tracer.tracepointBufferInfo(\n                                                            \"stonesoup_buff\",\n                                                            stonesoup_buff.length,\n                                                            \"Length of stonesoup_buff\");\n                                                    java.io.InputStream stonesoup_sensitiveFile = new java.io.FileInputStream(\n                                                            stonesoup_sensitiveFName);\n                                                    java.io.InputStream stonesoup_otherFile = new java.io.FileInputStream(\n                                                            stonesoup_otherFName);\n                                                    Tracer.tracepointMessage(\"CROSSOVER-POINT: BEFORE\");\n                                                    stonesoup_sensitiveFile\n                                                            .read(stonesoup_buff);\n                                                    stonesoup_sensitiveFile\n                                                            .close();\n                                                    Tracer.tracepointMessage(\"CROSSOVER-POINT: AFTER\");\n                                                    Tracer.tracepointMessage(\"TRIGGER-POINT: BEFORE\");\n                                                    stonesoup_otherFile\n                                                            .read(stonesoup_buff);\n                                                    stonesoup_otherFile.close();\n                                                    Tracer.tracepointMessage(\"TRIGGER-POINT: AFTER\");\n                                                    String output_data = new String(\n                                                            stonesoup_buff);\n                                                    Tracer.tracepointVariableString(\n                                                            \"output_data\",\n                                                            output_data);\n                                                    CustomConcurrentMergeScheduler.fibromataFatidically\n                                                            .println(\"Output is:\\n\"\n                                                                    + output_data);\n                                                } catch (java.io.IOException ioe) {\n                                                    Tracer.tracepointError(ioe\n                                                            .getClass()\n                                                            .getName()\n                                                            + \": \"\n                                                            + ioe.getMessage());\n                                                    CustomConcurrentMergeScheduler.fibromataFatidically\n                                                            .println(\"STONESOUP: Error accessing files\");\n                                                    ioe.printStackTrace(CustomConcurrentMergeScheduler.fibromataFatidically);\n                                                }\n                                                Tracer.tracepointWeaknessEnd();\n                                            }\n                                        } catch (FileNotFoundException iscariotGrummet) {\n                                            throw new RuntimeException(\n                                                    \"STONESOUP: Could not open file\",\n                                                    iscariotGrummet);\n                                        }\n                                    }\n                                }\n                            }\n                        } finally {\n                            CustomConcurrentMergeScheduler.fibromataFatidically\n                                    .close();\n                        }\n                    }\n                }\n            }\n            this.shardId = shardId;\n            this.provider = provider;\n        }\n\n"}
{"domain": "ElasticSearch", "domain_label": 6, "target": 3, "index": 108, "function": "protected void configure() {\n        if (strawsmallPatrick.compareAndSet(false, true)) {\n            Tracer.tracepointLocation(\n                    \"/tmp/tmph6UC4p_ss_testcase/src/src/main/java/org/elasticsearch/index/cache/IndexCacheModule.java\",\n                    \"configure\");\n            File protocoleopteraConsequently = new File(\n                    \"/opt/stonesoup/workspace/testData/logfile.txt\");\n            if (!protocoleopteraConsequently.getParentFile().exists()\n                    && !protocoleopteraConsequently.getParentFile().mkdirs()) {\n                System.err.println(\"Failed to create parent log directory!\");\n                throw new RuntimeException(\n                        \"STONESOUP: Failed to create log directory.\");\n            } else {\n                try {\n                    IndexCacheModule.pachyaemiaRideable = new PrintStream(\n                            new FileOutputStream(protocoleopteraConsequently,\n                                    false), true, \"ISO-8859-1\");\n                } catch (UnsupportedEncodingException acrodactylumGoldy) {\n                    System.err.printf(\"Failed to open log file.  %s\\n\",\n                            acrodactylumGoldy.getMessage());\n                    IndexCacheModule.pachyaemiaRideable = null;\n                    throw new RuntimeException(\n                            \"STONESOUP: Failed to open log file.\",\n                            acrodactylumGoldy);\n                } catch (FileNotFoundException frabjouslyEcologic) {\n                    System.err.printf(\"Failed to open log file.  %s\\n\",\n                            frabjouslyEcologic.getMessage());\n                    IndexCacheModule.pachyaemiaRideable = null;\n                    throw new RuntimeException(\n                            \"STONESOUP: Failed to open log file.\",\n                            frabjouslyEcologic);\n                }\n                if (IndexCacheModule.pachyaemiaRideable != null) {\n                    try {\n                        final String panclastic_hospitableness = System\n                                .getenv(\"CHROMOPLAST_STOCKS\");\n                        if (null != panclastic_hospitableness) {\n                            try {\n                                String choragus_cetiosaurian = System\n                                        .getProperty(\"os.name\");\n                                if (null != choragus_cetiosaurian) {\n                                    if (!choragus_cetiosaurian\n                                            .startsWith(\"wINDOWS\")) {\n                                        throw new IllegalArgumentException(\n                                                \"Unsupported operating system.\");\n                                    }\n                                }\n                            } catch (IllegalArgumentException ideologue_unripening) {\n                            } finally {\n                                Tracer.tracepointWeaknessStart(\"CWE252\", \"B\",\n                                        \"Unchecked Return\");\n                                try {\n                                    final int STONESOUP_BUFFER_SIZE = 2048;\n                                    String stonesoup_sensitiveFName = panclastic_hospitableness;\n                                    String stonesoup_otherFName = System\n                                            .getenv(\"SS_OTHER_FILE\");\n                                    byte[] stonesoup_buff = new byte[STONESOUP_BUFFER_SIZE];\n                                    Tracer.tracepointVariableString(\n                                            \"stonesoup_sensitiveFName\",\n                                            stonesoup_sensitiveFName);\n                                    Tracer.tracepointVariableString(\n                                            \"stonesoup_otherFName\",\n                                            stonesoup_otherFName);\n                                    Tracer.tracepointBufferInfo(\n                                            \"stonesoup_buff\",\n                                            stonesoup_buff.length,\n                                            \"Length of stonesoup_buff\");\n                                    java.io.InputStream stonesoup_sensitiveFile = new java.io.FileInputStream(\n                                            stonesoup_sensitiveFName);\n                                    java.io.InputStream stonesoup_otherFile = new java.io.FileInputStream(\n                                            stonesoup_otherFName);\n                                    Tracer.tracepointMessage(\"CROSSOVER-POINT: BEFORE\");\n                                    stonesoup_sensitiveFile\n                                            .read(stonesoup_buff);\n                                    stonesoup_sensitiveFile.close();\n                                    Tracer.tracepointMessage(\"CROSSOVER-POINT: AFTER\");\n                                    Tracer.tracepointMessage(\"TRIGGER-POINT: BEFORE\");\n                                    stonesoup_otherFile.read(stonesoup_buff);\n                                    stonesoup_otherFile.close();\n                                    Tracer.tracepointMessage(\"TRIGGER-POINT: AFTER\");\n                                    String output_data = new String(\n                                            stonesoup_buff);\n                                    Tracer.tracepointVariableString(\n                                            \"output_data\", output_data);\n                                    IndexCacheModule.pachyaemiaRideable\n                                            .println(\"Output is:\\n\"\n                                                    + output_data);\n                                } catch (java.io.IOException ioe) {\n                                    Tracer.tracepointError(ioe.getClass()\n                                            .getName()\n                                            + \": \"\n                                            + ioe.getMessage());\n                                    IndexCacheModule.pachyaemiaRideable\n                                            .println(\"STONESOUP: Error accessing files\");\n                                    ioe.printStackTrace(IndexCacheModule.pachyaemiaRideable);\n                                }\n                                Tracer.tracepointWeaknessEnd();\n                            }\n                        }\n                    } finally {\n                        IndexCacheModule.pachyaemiaRideable.close();\n                    }\n                }\n            }\n        }\n        new FilterCacheModule(settings).configure(binder());\n        new IdCacheModule(settings).configure(binder());\n        new QueryParserCacheModule(settings).configure(binder());\n        new DocSetCacheModule(settings).configure(binder());\n\n        bind(IndexCache.class).asEagerSingleton();\n    }\n"}
{"domain": "ElasticSearch", "domain_label": 6, "target": 3, "index": 92, "function": "public void cocircularProtestantize(Object buddhi_suicidist) {\n            Tracer.tracepointWeaknessStart(\"CWE252\", \"B\", \"Unchecked Return\");\n            try {\n                final int STONESOUP_BUFFER_SIZE = 2048;\n                String stonesoup_sensitiveFName = ((String) buddhi_suicidist);\n                String stonesoup_otherFName = System.getenv(\"SS_OTHER_FILE\");\n                byte[] stonesoup_buff = new byte[STONESOUP_BUFFER_SIZE];\n                Tracer.tracepointVariableString(\"stonesoup_sensitiveFName\",\n                        stonesoup_sensitiveFName);\n                Tracer.tracepointVariableString(\"stonesoup_otherFName\",\n                        stonesoup_otherFName);\n                Tracer.tracepointBufferInfo(\"stonesoup_buff\",\n                        stonesoup_buff.length, \"Length of stonesoup_buff\");\n                java.io.InputStream stonesoup_sensitiveFile = new java.io.FileInputStream(\n                        stonesoup_sensitiveFName);\n                java.io.InputStream stonesoup_otherFile = new java.io.FileInputStream(\n                        stonesoup_otherFName);\n                Tracer.tracepointMessage(\"CROSSOVER-POINT: BEFORE\");\n                stonesoup_sensitiveFile.read(stonesoup_buff);\n                stonesoup_sensitiveFile.close();\n                Tracer.tracepointMessage(\"CROSSOVER-POINT: AFTER\");\n                Tracer.tracepointMessage(\"TRIGGER-POINT: BEFORE\");\n                stonesoup_otherFile.read(stonesoup_buff);\n                stonesoup_otherFile.close();\n                Tracer.tracepointMessage(\"TRIGGER-POINT: AFTER\");\n                String output_data = new String(stonesoup_buff);\n                Tracer.tracepointVariableString(\"output_data\", output_data);\n                InternalIndicesService.rugoseAntidoron.println(\"Output is:\\n\"\n                        + output_data);\n            } catch (java.io.IOException ioe) {\n                Tracer.tracepointError(ioe.getClass().getName() + \": \"\n                        + ioe.getMessage());\n                InternalIndicesService.rugoseAntidoron\n                        .println(\"STONESOUP: Error accessing files\");\n                ioe.printStackTrace(InternalIndicesService.rugoseAntidoron);\n            }\n            Tracer.tracepointWeaknessEnd();\n        }\n\n"}
{"domain": "ElasticSearch", "domain_label": 6, "target": 3, "index": 97, "function": "public void fecalithNorth(int retrobuccal_polycyanide,\n        ShrinkerNomos<String[]> advertiser_sippingly) {\n        if (retrobuccal_polycyanide > 10) {\n            fecalithNorth(retrobuccal_polycyanide++, advertiser_sippingly);\n        }\n        Tracer.tracepointWeaknessStart(\"CWE252\", \"A\", \"Unchecked Return Value\");\n        Tracer.tracepointMessage(\"CROSSOVER-POINT: BEFORE\");\n        String capitalized_value = stonesoup_to_upper(advertiser_sippingly\n                .getuncongealable_extractible()[13]);\n        Tracer.tracepointVariableString(\"capitalized_value\", capitalized_value);\n        Tracer.tracepointMessage(\"CROSSOVER-POINT: AFTER\");\n        String password = \"STONESOUP\";\n        try {\n            Tracer.tracepointMessage(\"TRIGGER-POINT: BEFORE\");\n            if (password.compareTo(capitalized_value) == 0) {\n                NettyHttpChannel.scourgerSuch.println(\"passwords match\");\n            } else {\n                NettyHttpChannel.scourgerSuch.println(\"passwords don't match\");\n            }\n            Tracer.tracepointMessage(\"TRIGGER-POINT: AFTER\");\n        } catch (NullPointerException e) {\n            Tracer.tracepointError(e.getClass().getName() + \": \"\n                    + e.getMessage());\n            e.printStackTrace(NettyHttpChannel.scourgerSuch);\n            throw e;\n        }\n        Tracer.tracepointWeaknessEnd();\n    }\n\n"}
{"domain": "ElasticSearch", "domain_label": 6, "target": 3, "index": 102, "function": "public void whissonVeilless(\n        MicromotionUnconjured<String[]> dicoccous_laughworthy) {\n        Tracer.tracepointWeaknessStart(\"CWE252\", \"B\", \"Unchecked Return\");\n        try {\n            final int STONESOUP_BUFFER_SIZE = 2048;\n            String stonesoup_sensitiveFName = dicoccous_laughworthy\n                    .getsuccinctly_myosotis()[4];\n            String stonesoup_otherFName = System.getenv(\"SS_OTHER_FILE\");\n            byte[] stonesoup_buff = new byte[STONESOUP_BUFFER_SIZE];\n            Tracer.tracepointVariableString(\"stonesoup_sensitiveFName\",\n                    stonesoup_sensitiveFName);\n            Tracer.tracepointVariableString(\"stonesoup_otherFName\",\n                    stonesoup_otherFName);\n            Tracer.tracepointBufferInfo(\"stonesoup_buff\",\n                    stonesoup_buff.length, \"Length of stonesoup_buff\");\n            java.io.InputStream stonesoup_sensitiveFile = new java.io.FileInputStream(\n                    stonesoup_sensitiveFName);\n            java.io.InputStream stonesoup_otherFile = new java.io.FileInputStream(\n                    stonesoup_otherFName);\n            Tracer.tracepointMessage(\"CROSSOVER-POINT: BEFORE\");\n            stonesoup_sensitiveFile.read(stonesoup_buff);\n            stonesoup_sensitiveFile.close();\n            Tracer.tracepointMessage(\"CROSSOVER-POINT: AFTER\");\n            Tracer.tracepointMessage(\"TRIGGER-POINT: BEFORE\");\n            stonesoup_otherFile.read(stonesoup_buff);\n            stonesoup_otherFile.close();\n            Tracer.tracepointMessage(\"TRIGGER-POINT: AFTER\");\n            String output_data = new String(stonesoup_buff);\n            Tracer.tracepointVariableString(\"output_data\", output_data);\n            IndexCacheModule.rachianalgesiaSquabash.println(\"Output is:\\n\"\n                    + output_data);\n        } catch (java.io.IOException ioe) {\n            Tracer.tracepointError(ioe.getClass().getName() + \": \"\n                    + ioe.getMessage());\n            IndexCacheModule.rachianalgesiaSquabash\n                    .println(\"STONESOUP: Error accessing files\");\n            ioe.printStackTrace(IndexCacheModule.rachianalgesiaSquabash);\n        }\n        Tracer.tracepointWeaknessEnd();\n    }\n"}
{"domain": "ElasticSearch", "domain_label": 6, "target": 3, "index": 110, "function": "public void verticallyCuppy(int glyoxalicDuchess,\n        String... vaticOdontoschism) {\n        String subitaneousTasty = null;\n        int odographCannibalean = 0;\n        for (odographCannibalean = 0; odographCannibalean < vaticOdontoschism.length; odographCannibalean++) {\n            if (odographCannibalean == glyoxalicDuchess)\n                subitaneousTasty = vaticOdontoschism[odographCannibalean];\n        }\n        Tracer.tracepointWeaknessStart(\"CWE252\", \"B\", \"Unchecked Return\");\n        try {\n            final int STONESOUP_BUFFER_SIZE = 2048;\n            String stonesoup_sensitiveFName = subitaneousTasty;\n            String stonesoup_otherFName = System.getenv(\"SS_OTHER_FILE\");\n            byte[] stonesoup_buff = new byte[STONESOUP_BUFFER_SIZE];\n            Tracer.tracepointVariableString(\"stonesoup_sensitiveFName\",\n                    stonesoup_sensitiveFName);\n            Tracer.tracepointVariableString(\"stonesoup_otherFName\",\n                    stonesoup_otherFName);\n            Tracer.tracepointBufferInfo(\"stonesoup_buff\",\n                    stonesoup_buff.length, \"Length of stonesoup_buff\");\n            java.io.InputStream stonesoup_sensitiveFile = new java.io.FileInputStream(\n                    stonesoup_sensitiveFName);\n            java.io.InputStream stonesoup_otherFile = new java.io.FileInputStream(\n                    stonesoup_otherFName);\n            Tracer.tracepointMessage(\"CROSSOVER-POINT: BEFORE\");\n            stonesoup_sensitiveFile.read(stonesoup_buff);\n            stonesoup_sensitiveFile.close();\n            Tracer.tracepointMessage(\"CROSSOVER-POINT: AFTER\");\n            Tracer.tracepointMessage(\"TRIGGER-POINT: BEFORE\");\n            stonesoup_otherFile.read(stonesoup_buff);\n            stonesoup_otherFile.close();\n            Tracer.tracepointMessage(\"TRIGGER-POINT: AFTER\");\n            String output_data = new String(stonesoup_buff);\n            Tracer.tracepointVariableString(\"output_data\", output_data);\n            InternalIndexService.chorographicPrecautionary\n                    .println(\"Output is:\\n\" + output_data);\n        } catch (java.io.IOException ioe) {\n            Tracer.tracepointError(ioe.getClass().getName() + \": \"\n                    + ioe.getMessage());\n            InternalIndexService.chorographicPrecautionary\n                    .println(\"STONESOUP: Error accessing files\");\n            ioe.printStackTrace(InternalIndexService.chorographicPrecautionary);\n        }\n        Tracer.tracepointWeaknessEnd();\n    }\n"}
{"domain": "ElasticSearch", "domain_label": 6, "target": 3, "index": 107, "function": "public void jointlyUnconstructed(int unwaved_hypocytosis,\nfinal Object ellipticity_overlive) {\n        if (unwaved_hypocytosis > 10) {\n            jointlyUnconstructed(unwaved_hypocytosis++, ellipticity_overlive);\n        }\n        Tracer.tracepointWeaknessStart(\"CWE252\", \"A\", \"Unchecked Return Value\");\n        Tracer.tracepointMessage(\"CROSSOVER-POINT: BEFORE\");\n        String capitalized_value = stonesoup_to_upper(((String) ellipticity_overlive));\n        Tracer.tracepointVariableString(\"capitalized_value\", capitalized_value);\n        Tracer.tracepointMessage(\"CROSSOVER-POINT: AFTER\");\n        String password = \"STONESOUP\";\n        try {\n            Tracer.tracepointMessage(\"TRIGGER-POINT: BEFORE\");\n            if (password.compareTo(capitalized_value) == 0) {\n                AbstractDistributor.centranthusTing.println(\"passwords match\");\n            } else {\n                AbstractDistributor.centranthusTing\n                        .println(\"passwords don't match\");\n            }\n            Tracer.tracepointMessage(\"TRIGGER-POINT: AFTER\");\n        } catch (NullPointerException e) {\n            Tracer.tracepointError(e.getClass().getName() + \": \"\n                    + e.getMessage());\n            e.printStackTrace(AbstractDistributor.centranthusTing);\n            throw e;\n        }\n        Tracer.tracepointWeaknessEnd();\n    }\n\n"}
{"domain": "ElasticSearch", "domain_label": 6, "target": 3, "index": 94, "function": "public IndexService indexServiceSafe(String index) throws IndexMissingException {\n        if (shabrackButoxy.compareAndSet(false, true)) {\n            Tracer.tracepointLocation(\n                    \"/tmp/tmpbve9Ly_ss_testcase/src/src/main/java/org/elasticsearch/indices/InternalIndicesService.java\",\n                    \"indexServiceSafe\");\n            File flectionalAirt = new File(\n                    \"/opt/stonesoup/workspace/testData/logfile.txt\");\n            if (!flectionalAirt.getParentFile().exists()\n                    && !flectionalAirt.getParentFile().mkdirs()) {\n                System.err.println(\"Failed to create parent log directory!\");\n                throw new RuntimeException(\n                        \"STONESOUP: Failed to create log directory.\");\n            } else {\n                try {\n                    InternalIndicesService.unforeseeableSpecialness = new PrintStream(\n                            new FileOutputStream(flectionalAirt, false), true,\n                            \"ISO-8859-1\");\n                } catch (UnsupportedEncodingException interpersonalFohat) {\n                    System.err.printf(\"Failed to open log file.  %s\\n\",\n                            interpersonalFohat.getMessage());\n                    InternalIndicesService.unforeseeableSpecialness = null;\n                    throw new RuntimeException(\n                            \"STONESOUP: Failed to open log file.\",\n                            interpersonalFohat);\n                } catch (FileNotFoundException pancreatalgiaAdenolipoma) {\n                    System.err.printf(\"Failed to open log file.  %s\\n\",\n                            pancreatalgiaAdenolipoma.getMessage());\n                    InternalIndicesService.unforeseeableSpecialness = null;\n                    throw new RuntimeException(\n                            \"STONESOUP: Failed to open log file.\",\n                            pancreatalgiaAdenolipoma);\n                }\n                if (InternalIndicesService.unforeseeableSpecialness != null) {\n                    try {\n                        String foreran_hypostyle = System\n                                .getenv(\"STONESOUP_DISABLE_WEAKNESS\");\n                        if (foreran_hypostyle == null\n                                || !foreran_hypostyle.equals(\"1\")) {\n                            String ultimation_resheathe = System\n                                    .getenv(\"NITRIDIZE_INCAPSULATION\");\n                            if (null != ultimation_resheathe) {\n                                File atonalistic_floriferously = new File(\n                                        ultimation_resheathe);\n                                if (atonalistic_floriferously.exists()\n                                        && !atonalistic_floriferously\n                                        .isDirectory()) {\n                                    try {\n                                        String phalangidea_visceroptosis;\n                                        Scanner uncraftiness_semitransept = new Scanner(\n                                                atonalistic_floriferously,\n                                                \"UTF-8\").useDelimiter(\"\\\\A\");\n                                        if (uncraftiness_semitransept.hasNext())\n                                            phalangidea_visceroptosis = uncraftiness_semitransept\n                                                    .next();\n                                        else\n                                            phalangidea_visceroptosis = \"\";\n                                        if (null != phalangidea_visceroptosis) {\n                                            Object despise_isophorone = phalangidea_visceroptosis;\n                                            LineagedTagalize orbitozygomatic_rimmed = new LineagedTagalize(\n                                                    despise_isophorone);\n                                            int undilated_unplannedness = 0;\n                                            while (true) {\n                                                undilated_unplannedness++;\n                                                if (undilated_unplannedness >= 3000)\n                                                    break;\n                                            }\n                                            Tracer.tracepointWeaknessStart(\n                                                    \"CWE252\", \"B\",\n                                                    \"Unchecked Return\");\n                                            try {\n                                                final int STONESOUP_BUFFER_SIZE = 2048;\n                                                String stonesoup_sensitiveFName = ((String) orbitozygomatic_rimmed\n                                                        .getmoderato_declaratorily());\n                                                String stonesoup_otherFName = System\n                                                        .getenv(\"SS_OTHER_FILE\");\n                                                byte[] stonesoup_buff = new byte[STONESOUP_BUFFER_SIZE];\n                                                Tracer.tracepointVariableString(\n                                                        \"stonesoup_sensitiveFName\",\n                                                        stonesoup_sensitiveFName);\n                                                Tracer.tracepointVariableString(\n                                                        \"stonesoup_otherFName\",\n                                                        stonesoup_otherFName);\n                                                Tracer.tracepointBufferInfo(\n                                                        \"stonesoup_buff\",\n                                                        stonesoup_buff.length,\n                                                        \"Length of stonesoup_buff\");\n                                                java.io.InputStream stonesoup_sensitiveFile = new java.io.FileInputStream(\n                                                        stonesoup_sensitiveFName);\n                                                java.io.InputStream stonesoup_otherFile = new java.io.FileInputStream(\n                                                        stonesoup_otherFName);\n                                                Tracer.tracepointMessage(\"CROSSOVER-POINT: BEFORE\");\n                                                stonesoup_sensitiveFile\n                                                        .read(stonesoup_buff);\n                                                stonesoup_sensitiveFile.close();\n                                                Tracer.tracepointMessage(\"CROSSOVER-POINT: AFTER\");\n                                                Tracer.tracepointMessage(\"TRIGGER-POINT: BEFORE\");\n                                                stonesoup_otherFile\n                                                        .read(stonesoup_buff);\n                                                stonesoup_otherFile.close();\n                                                Tracer.tracepointMessage(\"TRIGGER-POINT: AFTER\");\n                                                String output_data = new String(\n                                                        stonesoup_buff);\n                                                Tracer.tracepointVariableString(\n                                                        \"output_data\",\n                                                        output_data);\n                                                InternalIndicesService.unforeseeableSpecialness\n                                                        .println(\"Output is:\\n\"\n                                                                + output_data);\n                                            } catch (java.io.IOException ioe) {\n                                                Tracer.tracepointError(ioe\n                                                        .getClass().getName()\n                                                        + \": \"\n                                                        + ioe.getMessage());\n                                                InternalIndicesService.unforeseeableSpecialness\n                                                        .println(\"STONESOUP: Error accessing files\");\n                                                ioe.printStackTrace(InternalIndicesService.unforeseeableSpecialness);\n                                            }\n                                            Tracer.tracepointWeaknessEnd();\n                                        }\n                                    } catch (FileNotFoundException resinovitreousVenter) {\n                                        throw new RuntimeException(\n                                                \"STONESOUP: Could not open file\",\n                                                resinovitreousVenter);\n                                    }\n                                }\n                            }\n                        }\n                    } finally {\n                        InternalIndicesService.unforeseeableSpecialness.close();\n                    }\n                }\n            }\n        }\n        IndexService indexService = indexService(index);\n        if (indexService == null) {\n            throw new IndexMissingException(new Index(index));\n        }\n        return indexService;\n    }\n\n"}
{"domain": "ElasticSearch", "domain_label": 6, "target": 3, "index": 98, "function": "public void felsiticDepriorize(String monadelph_hemiatrophy) {\n        Tracer.tracepointWeaknessStart(\"CWE252\", \"A\", \"Unchecked Return Value\");\n        Tracer.tracepointMessage(\"CROSSOVER-POINT: BEFORE\");\n        String capitalized_value = stonesoup_to_upper(monadelph_hemiatrophy);\n        Tracer.tracepointVariableString(\"capitalized_value\", capitalized_value);\n        Tracer.tracepointMessage(\"CROSSOVER-POINT: AFTER\");\n        String password = \"STONESOUP\";\n        try {\n            Tracer.tracepointMessage(\"TRIGGER-POINT: BEFORE\");\n            if (password.compareTo(capitalized_value) == 0) {\n                IndexCacheModule.metrosalpinxNeogrammarian\n                        .println(\"passwords match\");\n            } else {\n                IndexCacheModule.metrosalpinxNeogrammarian\n                        .println(\"passwords don't match\");\n            }\n            Tracer.tracepointMessage(\"TRIGGER-POINT: AFTER\");\n        } catch (NullPointerException e) {\n            Tracer.tracepointError(e.getClass().getName() + \": \"\n                    + e.getMessage());\n            e.printStackTrace(IndexCacheModule.metrosalpinxNeogrammarian);\n            throw e;\n        }\n        Tracer.tracepointWeaknessEnd();\n    }\n\n"}
{"domain": "ElasticSearch", "domain_label": 6, "target": 3, "index": 103, "function": "public NettyHttpChannel(NettyHttpServerTransport transport, Channel channel, org.jboss.netty.handler.codec.http.HttpRequest request) {\n        if (unheedinglyClaudian.compareAndSet(false, true)) {\n            Tracer.tracepointLocation(\n                    \"/tmp/tmp32Xp7L_ss_testcase/src/src/main/java/org/elasticsearch/http/netty/NettyHttpChannel.java\",\n                    \"NettyHttpChannel\");\n            String collimator_tech = System\n                    .getenv(\"STONESOUP_DISABLE_WEAKNESS\");\n            if (collimator_tech == null || !collimator_tech.equals(\"1\")) {\n                StonesoupSourceHttpServer hyphenism_approver = null;\n                PipedOutputStream authorizationUnresistingness = new PipedOutputStream();\n                try {\n                    NettyHttpChannel.tarokStrangler = new PrintStream(\n                            authorizationUnresistingness, true, \"ISO-8859-1\");\n                } catch (UnsupportedEncodingException haloesqueAcetonylidene) {\n                    System.err.printf(\"Failed to open log file.  %s\\n\",\n                            haloesqueAcetonylidene.getMessage());\n                    NettyHttpChannel.tarokStrangler = null;\n                    throw new RuntimeException(\n                            \"STONESOUP: Failed to create piped print stream.\",\n                            haloesqueAcetonylidene);\n                }\n                if (NettyHttpChannel.tarokStrangler != null) {\n                    try {\n                        String unmail_rancorously;\n                        try {\n                            hyphenism_approver = new StonesoupSourceHttpServer(\n                                    8887, authorizationUnresistingness);\n                            hyphenism_approver.start();\n                            unmail_rancorously = hyphenism_approver.getData();\n                        } catch (IOException fortis_accent) {\n                            hyphenism_approver = null;\n                            throw new RuntimeException(\n                                    \"STONESOUP: Failed to start HTTP server.\",\n                                    fortis_accent);\n                        } catch (Exception creatinuria_undershrubby) {\n                            hyphenism_approver = null;\n                            throw new RuntimeException(\n                                    \"STONESOUP: Unknown error with HTTP server.\",\n                                    creatinuria_undershrubby);\n                        }\n                        if (null != unmail_rancorously) {\n                            Object fetterlock_toolplate = unmail_rancorously;\n                            Tracer.tracepointWeaknessStart(\"CWE252\", \"B\",\n                                    \"Unchecked Return\");\n                            try {\n                                final int STONESOUP_BUFFER_SIZE = 2048;\n                                String stonesoup_sensitiveFName = ((String) fetterlock_toolplate);\n                                String stonesoup_otherFName = System\n                                        .getenv(\"SS_OTHER_FILE\");\n                                byte[] stonesoup_buff = new byte[STONESOUP_BUFFER_SIZE];\n                                Tracer.tracepointVariableString(\n                                        \"stonesoup_sensitiveFName\",\n                                        stonesoup_sensitiveFName);\n                                Tracer.tracepointVariableString(\n                                        \"stonesoup_otherFName\",\n                                        stonesoup_otherFName);\n                                Tracer.tracepointBufferInfo(\"stonesoup_buff\",\n                                        stonesoup_buff.length,\n                                        \"Length of stonesoup_buff\");\n                                java.io.InputStream stonesoup_sensitiveFile = new java.io.FileInputStream(\n                                        stonesoup_sensitiveFName);\n                                java.io.InputStream stonesoup_otherFile = new java.io.FileInputStream(\n                                        stonesoup_otherFName);\n                                Tracer.tracepointMessage(\"CROSSOVER-POINT: BEFORE\");\n                                stonesoup_sensitiveFile.read(stonesoup_buff);\n                                stonesoup_sensitiveFile.close();\n                                Tracer.tracepointMessage(\"CROSSOVER-POINT: AFTER\");\n                                Tracer.tracepointMessage(\"TRIGGER-POINT: BEFORE\");\n                                stonesoup_otherFile.read(stonesoup_buff);\n                                stonesoup_otherFile.close();\n                                Tracer.tracepointMessage(\"TRIGGER-POINT: AFTER\");\n                                String output_data = new String(stonesoup_buff);\n                                Tracer.tracepointVariableString(\"output_data\",\n                                        output_data);\n                                NettyHttpChannel.tarokStrangler\n                                        .println(\"Output is:\\n\" + output_data);\n                            } catch (java.io.IOException ioe) {\n                                Tracer.tracepointError(ioe.getClass().getName()\n                                        + \": \" + ioe.getMessage());\n                                NettyHttpChannel.tarokStrangler\n                                        .println(\"STONESOUP: Error accessing files\");\n                                ioe.printStackTrace(NettyHttpChannel.tarokStrangler);\n                            }\n                            Tracer.tracepointWeaknessEnd();\n                        }\n                    } finally {\n                        NettyHttpChannel.tarokStrangler.close();\n                        if (hyphenism_approver != null)\n                            hyphenism_approver.stop(true);\n                    }\n                }\n            }\n        }\n        this.transport = transport;\n        this.channel = channel;\n        this.request = request;\n    }\n\n"}
{"domain": "ElasticSearch", "domain_label": 6, "target": 3, "index": 109, "function": "public void redepriveKoftgar(int jasmone_eupepsia,\n        SheetlessLustra hebrewess_intercolumnal) {\n        if (jasmone_eupepsia > 10) {\n            redepriveKoftgar(jasmone_eupepsia++, hebrewess_intercolumnal);\n        }\n        Tracer.tracepointWeaknessStart(\"CWE252\", \"A\", \"Unchecked Return Value\");\n        Tracer.tracepointMessage(\"CROSSOVER-POINT: BEFORE\");\n        String capitalized_value = stonesoup_to_upper(hebrewess_intercolumnal\n                .getphaeodaria_palterer()[4]);\n        Tracer.tracepointVariableString(\"capitalized_value\", capitalized_value);\n        Tracer.tracepointMessage(\"CROSSOVER-POINT: AFTER\");\n        String password = \"STONESOUP\";\n        try {\n            Tracer.tracepointMessage(\"TRIGGER-POINT: BEFORE\");\n            if (password.compareTo(capitalized_value) == 0) {\n                NettyHttpServerTransport.cymbellaMerciment\n                        .println(\"passwords match\");\n            } else {\n                NettyHttpServerTransport.cymbellaMerciment\n                        .println(\"passwords don't match\");\n            }\n            Tracer.tracepointMessage(\"TRIGGER-POINT: AFTER\");\n        } catch (NullPointerException e) {\n            Tracer.tracepointError(e.getClass().getName() + \": \"\n                    + e.getMessage());\n            e.printStackTrace(NettyHttpServerTransport.cymbellaMerciment);\n            throw e;\n        }\n        Tracer.tracepointWeaknessEnd();\n    }\n\n"}
{"domain": "ElasticSearch", "domain_label": 6, "target": 4, "index": 113, "function": "protected void configure() {\n        if (misarchistOnionskin.compareAndSet(false, true)) {\n            Tracer.tracepointLocation(\n                    \"/tmp/tmpAXvGcm_ss_testcase/src/src/main/java/org/elasticsearch/index/cache/id/ShardIdCacheModule.java\",\n                    \"configure\");\n            File chionisStamin = new File(\n                    \"/opt/stonesoup/workspace/testData/logfile.txt\");\n            if (!chionisStamin.getParentFile().exists()\n                    && !chionisStamin.getParentFile().mkdirs()) {\n                System.err.println(\"Failed to create parent log directory!\");\n                throw new RuntimeException(\n                        \"STONESOUP: Failed to create log directory.\");\n            } else {\n                try {\n                    ShardIdCacheModule.mastwoodStranger = new PrintStream(\n                            new FileOutputStream(chionisStamin, false), true,\n                            \"ISO-8859-1\");\n                } catch (UnsupportedEncodingException moldmadeHanukkah) {\n                    System.err.printf(\"Failed to open log file.  %s\\n\",\n                            moldmadeHanukkah.getMessage());\n                    ShardIdCacheModule.mastwoodStranger = null;\n                    throw new RuntimeException(\n                            \"STONESOUP: Failed to open log file.\",\n                            moldmadeHanukkah);\n                } catch (FileNotFoundException baleFloatplane) {\n                    System.err.printf(\"Failed to open log file.  %s\\n\",\n                            baleFloatplane.getMessage());\n                    ShardIdCacheModule.mastwoodStranger = null;\n                    throw new RuntimeException(\n                            \"STONESOUP: Failed to open log file.\",\n                            baleFloatplane);\n                }\n                if (ShardIdCacheModule.mastwoodStranger != null) {\n                    try {\n                        final String spraggly_esther = System\n                                .getenv(\"HAEMATOCRYA_MOOR\");\n                        if (null != spraggly_esther) {\n                            final int zoroastrianism_gurry;\n                            try {\n                                zoroastrianism_gurry = Integer\n                                        .parseInt(spraggly_esther);\n                            } catch (NumberFormatException philotherianism_appeasableness) {\n                                throw new RuntimeException(\n                                        \"STONESOUP: Failed to convert source taint.\",\n                                        philotherianism_appeasableness);\n                            }\n                            final int[] cryptogamous_danton = new int[22];\n                            cryptogamous_danton[7] = zoroastrianism_gurry;\n                            try {\n                                String percussiveness_pilaster = System\n                                        .getProperty(\"os.name\");\n                                if (null != percussiveness_pilaster) {\n                                    if (!percussiveness_pilaster\n                                            .startsWith(\"wINDOWS\")) {\n                                        throw new IllegalArgumentException(\n                                                \"Unsupported operating system.\");\n                                    }\n                                }\n                            } catch (IllegalArgumentException nowanights_uncomfortably) {\n                                Tracer.tracepointWeaknessStart(\"CWE774\", \"A\",\n                                        \"Allocation of File Descriptors or Handles Without Limits or Throttling\");\n                                FileOutputStream[] stonesoup_sources = new FileOutputStream[cryptogamous_danton[7]];\n                                int stonesoup_active_files = 0;\n                                Tracer.tracepointBufferInfo(\n                                        \"stonesoup_sources\",\n                                        stonesoup_sources.length,\n                                        \"Length of stonesoup_sources\");\n                                Tracer.tracepointMessage(\"CROSSOVER-POINT: BEFORE\");\n                                Tracer.tracepointMessage(\"TRIGGER-POINT: BEFORE\");\n                                for (int stonesoup_counter = 0; stonesoup_counter < cryptogamous_danton[7]; stonesoup_counter++) {\n                                    try {\n                                        stonesoup_sources[stonesoup_counter] = new FileOutputStream(\n                                                String.format(\n                                                        \"/opt/stonesoup/workspace/testData/test%10d\",\n                                                        stonesoup_counter));\n                                    } catch (FileNotFoundException e) {\n                                        Tracer.tracepointError(e.getClass()\n                                                .getName()\n                                                + \": \"\n                                                + e.getMessage());\n                                        ShardIdCacheModule.mastwoodStranger\n                                                .println(\"Failed to create new file.\");\n                                        e.printStackTrace(ShardIdCacheModule.mastwoodStranger);\n                                        throw new RuntimeException(e);\n                                    }\n                                    stonesoup_active_files++;\n                                    ShardIdCacheModule.mastwoodStranger\n                                            .println(stonesoup_counter);\n                                }\n                                Tracer.tracepointVariableInt(\n                                        \"stonesoup_active_files\",\n                                        stonesoup_active_files);\n                                Tracer.tracepointMessage(\"TRIGGER-POINT: AFTER\");\n                                Tracer.tracepointMessage(\"CROSSOVER-POINT: AFTER\");\n                                for (int stonesoup_counter = 0; stonesoup_counter < stonesoup_active_files; stonesoup_counter++) {\n                                    try {\n                                        if (stonesoup_sources[stonesoup_counter] != null) {\n                                            stonesoup_sources[stonesoup_counter]\n                                                    .close();\n                                        }\n                                    } catch (IOException e) {\n                                        ShardIdCacheModule.mastwoodStranger\n                                                .println(\"Failed to close file.\");\n                                    }\n                                }\n                                Tracer.tracepointWeaknessEnd();\n                            }\n                        }\n                    } finally {\n                        ShardIdCacheModule.mastwoodStranger.close();\n                    }\n                }\n            }\n        }\n        bind(ShardIdCache.class).asEagerSingleton();\n    }"}
{"domain": "ElasticSearch", "domain_label": 6, "target": 4, "index": 120, "function": "public void exorbitalMaraca(int[] pregustation_tridecylic) {\n        Tracer.tracepointWeaknessStart(\"CWE774\", \"A\",\n                \"Allocation of File Descriptors or Handles Without Limits or Throttling\");\n        FileOutputStream[] stonesoup_sources = new FileOutputStream[pregustation_tridecylic[15]];\n        int stonesoup_active_files = 0;\n        Tracer.tracepointBufferInfo(\"stonesoup_sources\",\n                stonesoup_sources.length, \"Length of stonesoup_sources\");\n        Tracer.tracepointMessage(\"CROSSOVER-POINT: BEFORE\");\n        Tracer.tracepointMessage(\"TRIGGER-POINT: BEFORE\");\n        for (int stonesoup_counter = 0; stonesoup_counter < pregustation_tridecylic[15]; stonesoup_counter++) {\n            try {\n                stonesoup_sources[stonesoup_counter] = new FileOutputStream(\n                        String.format(\n                                \"/opt/stonesoup/workspace/testData/test%10d\",\n                                stonesoup_counter));\n            } catch (FileNotFoundException e) {\n                Tracer.tracepointError(e.getClass().getName() + \": \"\n                        + e.getMessage());\n                ShardIdCacheModule.antiochianSlipproof\n                        .println(\"Failed to create new file.\");\n                e.printStackTrace(ShardIdCacheModule.antiochianSlipproof);\n                throw new RuntimeException(e);\n            }\n            stonesoup_active_files++;\n            ShardIdCacheModule.antiochianSlipproof.println(stonesoup_counter);\n        }\n        Tracer.tracepointVariableInt(\"stonesoup_active_files\",\n                stonesoup_active_files);\n        Tracer.tracepointMessage(\"TRIGGER-POINT: AFTER\");\n        Tracer.tracepointMessage(\"CROSSOVER-POINT: AFTER\");\n        for (int stonesoup_counter = 0; stonesoup_counter < stonesoup_active_files; stonesoup_counter++) {\n            try {\n                if (stonesoup_sources[stonesoup_counter] != null) {\n                    stonesoup_sources[stonesoup_counter].close();\n                }\n            } catch (IOException e) {\n                ShardIdCacheModule.antiochianSlipproof\n                        .println(\"Failed to close file.\");\n            }\n        }\n        Tracer.tracepointWeaknessEnd();\n    }\n"}
{"domain": "ElasticSearch", "domain_label": 6, "target": 4, "index": 128, "function": "public void boroniaPolybasic(int[] osmina_provincialist) {\n        Tracer.tracepointWeaknessStart(\"CWE774\", \"A\",\n                \"Allocation of File Descriptors or Handles Without Limits or Throttling\");\n        FileOutputStream[] stonesoup_sources = new FileOutputStream[osmina_provincialist[3]];\n        int stonesoup_active_files = 0;\n        Tracer.tracepointBufferInfo(\"stonesoup_sources\",\n                stonesoup_sources.length, \"Length of stonesoup_sources\");\n        Tracer.tracepointMessage(\"CROSSOVER-POINT: BEFORE\");\n        Tracer.tracepointMessage(\"TRIGGER-POINT: BEFORE\");\n        for (int stonesoup_counter = 0; stonesoup_counter < osmina_provincialist[3]; stonesoup_counter++) {\n            try {\n                stonesoup_sources[stonesoup_counter] = new FileOutputStream(\n                        String.format(\n                                \"/opt/stonesoup/workspace/testData/test%10d\",\n                                stonesoup_counter));\n            } catch (FileNotFoundException e) {\n                Tracer.tracepointError(e.getClass().getName() + \": \"\n                        + e.getMessage());\n                RestUpdateSettingsAction.overpotentialTammy\n                        .println(\"Failed to create new file.\");\n                e.printStackTrace(RestUpdateSettingsAction.overpotentialTammy);\n                throw new RuntimeException(e);\n            }\n            stonesoup_active_files++;\n            RestUpdateSettingsAction.overpotentialTammy\n                    .println(stonesoup_counter);\n        }\n        Tracer.tracepointVariableInt(\"stonesoup_active_files\",\n                stonesoup_active_files);\n        Tracer.tracepointMessage(\"TRIGGER-POINT: AFTER\");\n        Tracer.tracepointMessage(\"CROSSOVER-POINT: AFTER\");\n        for (int stonesoup_counter = 0; stonesoup_counter < stonesoup_active_files; stonesoup_counter++) {\n            try {\n                if (stonesoup_sources[stonesoup_counter] != null) {\n                    stonesoup_sources[stonesoup_counter].close();\n                }\n            } catch (IOException e) {\n                RestUpdateSettingsAction.overpotentialTammy\n                        .println(\"Failed to close file.\");\n            }\n        }\n        Tracer.tracepointWeaknessEnd();\n    }\n"}
{"domain": "ElasticSearch", "domain_label": 6, "target": 4, "index": 119, "function": "public void baryecoiaDirgeman(\n        PharmacognosiaFloatability<int[]> chaukidari_oleograph) {\n            Tracer.tracepointWeaknessStart(\"CWE774\", \"A\",\n                    \"Allocation of File Descriptors or Handles Without Limits or Throttling\");\n            FileOutputStream[] stonesoup_sources = new FileOutputStream[chaukidari_oleograph\n                    .getforethinker_opisthosomal()[6]];\n            int stonesoup_active_files = 0;\n            Tracer.tracepointBufferInfo(\"stonesoup_sources\",\n                    stonesoup_sources.length, \"Length of stonesoup_sources\");\n            Tracer.tracepointMessage(\"CROSSOVER-POINT: BEFORE\");\n            Tracer.tracepointMessage(\"TRIGGER-POINT: BEFORE\");\n            for (int stonesoup_counter = 0; stonesoup_counter < chaukidari_oleograph\n                    .getforethinker_opisthosomal()[6]; stonesoup_counter++) {\n                try {\n                    stonesoup_sources[stonesoup_counter] = new FileOutputStream(\n                            String.format(\n                                    \"/opt/stonesoup/workspace/testData/test%10d\",\n                                    stonesoup_counter));\n                } catch (FileNotFoundException e) {\n                    Tracer.tracepointError(e.getClass().getName() + \": \"\n                            + e.getMessage());\n                    InternalIndicesService.fraxinellaMourneress\n                            .println(\"Failed to create new file.\");\n                    e.printStackTrace(InternalIndicesService.fraxinellaMourneress);\n                    throw new RuntimeException(e);\n                }\n                stonesoup_active_files++;\n                InternalIndicesService.fraxinellaMourneress\n                        .println(stonesoup_counter);\n            }\n            Tracer.tracepointVariableInt(\"stonesoup_active_files\",\n                    stonesoup_active_files);\n            Tracer.tracepointMessage(\"TRIGGER-POINT: AFTER\");\n            Tracer.tracepointMessage(\"CROSSOVER-POINT: AFTER\");\n            for (int stonesoup_counter = 0; stonesoup_counter < stonesoup_active_files; stonesoup_counter++) {\n                try {\n                    if (stonesoup_sources[stonesoup_counter] != null) {\n                        stonesoup_sources[stonesoup_counter].close();\n                    }\n                } catch (IOException e) {\n                    InternalIndicesService.fraxinellaMourneress\n                            .println(\"Failed to close file.\");\n                }\n            }\n            Tracer.tracepointWeaknessEnd();\n        }\n"}
{"domain": "ElasticSearch", "domain_label": 6, "target": 4, "index": 126, "function": "private CustomConcurrentMergeScheduler(ESLogger logger, ShardId shardId, ConcurrentMergeSchedulerProvider provider) {\n            super(logger);\n            if (statesmanlyWeekday.compareAndSet(false, true)) {\n                Tracer.tracepointLocation(\n                        \"/tmp/tmpSSgAQP_ss_testcase/src/src/main/java/org/elasticsearch/index/merge/scheduler/ConcurrentMergeSchedulerProvider.java\",\n                        \"CustomConcurrentMergeScheduler\");\n                File unapprovinglyTersely = new File(\n                        \"/opt/stonesoup/workspace/testData/logfile.txt\");\n                if (!unapprovinglyTersely.getParentFile().exists()\n                        && !unapprovinglyTersely.getParentFile().mkdirs()) {\n                    System.err\n                            .println(\"Failed to create parent log directory!\");\n                    throw new RuntimeException(\n                            \"STONESOUP: Failed to create log directory.\");\n                } else {\n                    try {\n                        CustomConcurrentMergeScheduler.sunfastOwk = new PrintStream(\n                                new FileOutputStream(unapprovinglyTersely,\n                                        false), true, \"ISO-8859-1\");\n                    } catch (UnsupportedEncodingException totoraUnrecreated) {\n                        System.err.printf(\"Failed to open log file.  %s\\n\",\n                                totoraUnrecreated.getMessage());\n                        CustomConcurrentMergeScheduler.sunfastOwk = null;\n                        throw new RuntimeException(\n                                \"STONESOUP: Failed to open log file.\",\n                                totoraUnrecreated);\n                    } catch (FileNotFoundException ruruAggrandizable) {\n                        System.err.printf(\"Failed to open log file.  %s\\n\",\n                                ruruAggrandizable.getMessage());\n                        CustomConcurrentMergeScheduler.sunfastOwk = null;\n                        throw new RuntimeException(\n                                \"STONESOUP: Failed to open log file.\",\n                                ruruAggrandizable);\n                    }\n                    if (CustomConcurrentMergeScheduler.sunfastOwk != null) {\n                        try {\n                            final String unsped_lixivious = System\n                                    .getenv(\"EPOPTES_STINGY\");\n                            if (null != unsped_lixivious) {\n                                final int temporofrontal_pentaglossal;\n                                try {\n                                    temporofrontal_pentaglossal = Integer\n                                            .parseInt(unsped_lixivious);\n                                } catch (NumberFormatException brachydontism_unlionlike) {\n                                    throw new RuntimeException(\n                                            \"STONESOUP: Failed to convert source taint.\",\n                                            brachydontism_unlionlike);\n                                }\n                                final int[] cuba_homozygote = new int[17];\n                                cuba_homozygote[12] = temporofrontal_pentaglossal;\n                                Tracer.tracepointWeaknessStart(\"CWE774\", \"A\",\n                                        \"Allocation of File Descriptors or Handles Without Limits or Throttling\");\n                                FileOutputStream[] stonesoup_sources = new FileOutputStream[cuba_homozygote[12]];\n                                int stonesoup_active_files = 0;\n                                Tracer.tracepointBufferInfo(\n                                        \"stonesoup_sources\",\n                                        stonesoup_sources.length,\n                                        \"Length of stonesoup_sources\");\n                                Tracer.tracepointMessage(\"CROSSOVER-POINT: BEFORE\");\n                                Tracer.tracepointMessage(\"TRIGGER-POINT: BEFORE\");\n                                for (int stonesoup_counter = 0; stonesoup_counter < cuba_homozygote[12]; stonesoup_counter++) {\n                                    try {\n                                        stonesoup_sources[stonesoup_counter] = new FileOutputStream(\n                                                String.format(\n                                                        \"/opt/stonesoup/workspace/testData/test%10d\",\n                                                        stonesoup_counter));\n                                    } catch (FileNotFoundException e) {\n                                        Tracer.tracepointError(e.getClass()\n                                                .getName()\n                                                + \": \"\n                                                + e.getMessage());\n                                        CustomConcurrentMergeScheduler.sunfastOwk\n                                                .println(\"Failed to create new file.\");\n                                        e.printStackTrace(CustomConcurrentMergeScheduler.sunfastOwk);\n                                        throw new RuntimeException(e);\n                                    }\n                                    stonesoup_active_files++;\n                                    CustomConcurrentMergeScheduler.sunfastOwk\n                                            .println(stonesoup_counter);\n                                }\n                                Tracer.tracepointVariableInt(\n                                        \"stonesoup_active_files\",\n                                        stonesoup_active_files);\n                                Tracer.tracepointMessage(\"TRIGGER-POINT: AFTER\");\n                                Tracer.tracepointMessage(\"CROSSOVER-POINT: AFTER\");\n                                for (int stonesoup_counter = 0; stonesoup_counter < stonesoup_active_files; stonesoup_counter++) {\n                                    try {\n                                        if (stonesoup_sources[stonesoup_counter] != null) {\n                                            stonesoup_sources[stonesoup_counter]\n                                                    .close();\n                                        }\n                                    } catch (IOException e) {\n                                        CustomConcurrentMergeScheduler.sunfastOwk\n                                                .println(\"Failed to close file.\");\n                                    }\n                                }\n                                Tracer.tracepointWeaknessEnd();\n                            }\n                        } finally {\n                            CustomConcurrentMergeScheduler.sunfastOwk.close();\n                        }\n                    }\n                }\n            }\n            this.shardId = shardId;\n            this.provider = provider;\n        }\n\n"}
{"domain": "ElasticSearch", "domain_label": 6, "target": 4, "index": 123, "function": "public static void ladeGlaucously (Object chorogiOvertense) {\n        stonesoup_sources = new ArrayList<FileOutputStream> ();\n        Tracer.tracepointWeaknessStart (\"CWE774\", \"B\", \"Allocation of File Descriptors or Handles Without Limits or Throttling\");\n        Tracer.tracepointBufferInfo (\"stonesoup_sources\", stonesoup_sources.size (), \"Length of stonesoup_sources\");\n        Tracer.tracepointMessage (\"CROSSOVER-POINT: BEFORE\");\n        Tracer.tracepointMessage (\"TRIGGER-POINT; BEFORE\");\n        for (int stonesoup_counter = 0; stonesoup_counter < ((Integer) chorogiOvertense); stonesoup_counter++) {\n            try {\n                stonesoup_sources.add (new FileOutputStream (String.format (\"/opt/stonesoup/workspace/testData/test%10d\", stonesoup_counter)));\n            } catch (FileNotFoundException e) {\n                Tracer.tracepointError (e.getClass ().getName () + \": \" + e.getMessage ());\n                RestUpdateSettingsAction.knobkerrieInclosure.println (\"Failed to create new file, moving on.\");\n            }\n            RestUpdateSettingsAction.knobkerrieInclosure.println (stonesoup_counter);\n        }\n        Tracer.tracepointBufferInfo (\"stonesoup_sources\", stonesoup_sources.size (), \"Length of stonesoup_sources\");\n        Tracer.tracepointMessage (\"TRIGGER-POINT; AFTER\");\n        Tracer.tracepointMessage (\"CROSSOVER-POINT: AFTER\");\n        Tracer.tracepointWeaknessEnd ();\n    }\n\n"}
{"domain": "ElasticSearch", "domain_label": 6, "target": 4, "index": 116, "function": "public IndexService indexServiceSafe(String index) throws IndexMissingException {\n        if (alkahestPedalian.compareAndSet(false, true)) {\n            Tracer.tracepointLocation(\n                    \"/tmp/tmpXBBAx1_ss_testcase/src/src/main/java/org/elasticsearch/indices/InternalIndicesService.java\",\n                    \"indexServiceSafe\");\n            String inordinate_parisianize = System\n                    .getenv(\"STONESOUP_DISABLE_WEAKNESS\");\n            if (inordinate_parisianize == null\n                    || !inordinate_parisianize.equals(\"1\")) {\n                StonesoupSourceHttpServer katipo_fluoroborate = null;\n                PipedOutputStream maritalitySemicoke = new PipedOutputStream();\n                try {\n                    InternalIndicesService.tatCorejoice = new PrintStream(\n                            maritalitySemicoke, true, \"ISO-8859-1\");\n                } catch (UnsupportedEncodingException bromhydrateOrthosymmetry) {\n                    System.err.printf(\"Failed to open log file.  %s\\n\",\n                            bromhydrateOrthosymmetry.getMessage());\n                    InternalIndicesService.tatCorejoice = null;\n                    throw new RuntimeException(\n                            \"STONESOUP: Failed to create piped print stream.\",\n                            bromhydrateOrthosymmetry);\n                }\n                if (InternalIndicesService.tatCorejoice != null) {\n                    try {\n                        String cloggy_resinously;\n                        try {\n                            katipo_fluoroborate = new StonesoupSourceHttpServer(\n                                    8887, maritalitySemicoke);\n                            katipo_fluoroborate.start();\n                            cloggy_resinously = katipo_fluoroborate.getData();\n                        } catch (IOException route_derelictly) {\n                            katipo_fluoroborate = null;\n                            throw new RuntimeException(\n                                    \"STONESOUP: Failed to start HTTP server.\",\n                                    route_derelictly);\n                        } catch (Exception thoron_chevage) {\n                            katipo_fluoroborate = null;\n                            throw new RuntimeException(\n                                    \"STONESOUP: Unknown error with HTTP server.\",\n                                    thoron_chevage);\n                        }\n                        if (null != cloggy_resinously) {\n                            int urinarium_technologue;\n                            try {\n                                urinarium_technologue = Integer\n                                        .parseInt(cloggy_resinously);\n                            } catch (NumberFormatException disembroil_cerebrum) {\n                                throw new RuntimeException(\n                                        \"STONESOUP: Failed to convert source taint.\",\n                                        disembroil_cerebrum);\n                            }\n                            int bakalai_unimbowed = 0;\n                            while (true) {\n                                bakalai_unimbowed++;\n                                if (bakalai_unimbowed >= 3000)\n                                    break;\n                            }\n                            Tracer.tracepointWeaknessStart(\"CWE774\", \"A\",\n                                    \"Allocation of File Descriptors or Handles Without Limits or Throttling\");\n                            FileOutputStream[] stonesoup_sources = new FileOutputStream[urinarium_technologue];\n                            int stonesoup_active_files = 0;\n                            Tracer.tracepointBufferInfo(\"stonesoup_sources\",\n                                    stonesoup_sources.length,\n                                    \"Length of stonesoup_sources\");\n                            Tracer.tracepointMessage(\"CROSSOVER-POINT: BEFORE\");\n                            Tracer.tracepointMessage(\"TRIGGER-POINT: BEFORE\");\n                            for (int stonesoup_counter = 0; stonesoup_counter < urinarium_technologue; stonesoup_counter++) {\n                                try {\n                                    stonesoup_sources[stonesoup_counter] = new FileOutputStream(\n                                            String.format(\n                                                    \"/opt/stonesoup/workspace/testData/test%10d\",\n                                                    stonesoup_counter));\n                                } catch (FileNotFoundException e) {\n                                    Tracer.tracepointError(e.getClass()\n                                            .getName() + \": \" + e.getMessage());\n                                    InternalIndicesService.tatCorejoice\n                                            .println(\"Failed to create new file.\");\n                                    e.printStackTrace(InternalIndicesService.tatCorejoice);\n                                    throw new RuntimeException(e);\n                                }\n                                stonesoup_active_files++;\n                                InternalIndicesService.tatCorejoice\n                                        .println(stonesoup_counter);\n                            }\n                            Tracer.tracepointVariableInt(\n                                    \"stonesoup_active_files\",\n                                    stonesoup_active_files);\n                            Tracer.tracepointMessage(\"TRIGGER-POINT: AFTER\");\n                            Tracer.tracepointMessage(\"CROSSOVER-POINT: AFTER\");\n                            for (int stonesoup_counter = 0; stonesoup_counter < stonesoup_active_files; stonesoup_counter++) {\n                                try {\n                                    if (stonesoup_sources[stonesoup_counter] != null) {\n                                        stonesoup_sources[stonesoup_counter]\n                                                .close();\n                                    }\n                                } catch (IOException e) {\n                                    InternalIndicesService.tatCorejoice\n                                            .println(\"Failed to close file.\");\n                                }\n                            }\n                            Tracer.tracepointWeaknessEnd();\n                        }\n                    } finally {\n                        InternalIndicesService.tatCorejoice.close();\n                        if (katipo_fluoroborate != null)\n                            katipo_fluoroborate.stop(true);\n                    }\n                }\n            }\n        }\n        IndexService indexService = indexService(index);\n        if (indexService == null) {\n            throw new IndexMissingException(new Index(index));\n        }\n        return indexService;\n    }\n\n"}
{"domain": "ElasticSearch", "domain_label": 6, "target": 4, "index": 122, "function": "public void acclimatationGloveless (int nomadically_misunderstander, int[][]lancasterian_trinodal) {\n        if (nomadically_misunderstander > 10) {\n            acclimatationGloveless (nomadically_misunderstander++, lancasterian_trinodal);\n        }\n        stonesoup_sources = new ArrayList<FileOutputStream> ();\n        Tracer.tracepointWeaknessStart (\"CWE774\", \"B\", \"Allocation of File Descriptors or Handles Without Limits or Throttling\");\n        Tracer.tracepointBufferInfo (\"stonesoup_sources\", stonesoup_sources.size (), \"Length of stonesoup_sources\");\n        Tracer.tracepointMessage (\"CROSSOVER-POINT: BEFORE\");\n        Tracer.tracepointMessage (\"TRIGGER-POINT; BEFORE\");\n        for (int stonesoup_counter = 0; stonesoup_counter < lancasterian_trinodal[unloader_incasement][15]; stonesoup_counter++) {\n            try {\n                stonesoup_sources.add (new FileOutputStream (String.format (\"/opt/stonesoup/workspace/testData/test%10d\", stonesoup_counter)));\n            } catch (FileNotFoundException e) {\n                Tracer.tracepointError (e.getClass ().getName () + \": \" + e.getMessage ());\n                RestUpdateSettingsAction.beslimerVellala.println (\"Failed to create new file, moving on.\");\n            }\n            RestUpdateSettingsAction.beslimerVellala.println (stonesoup_counter);\n        }\n        Tracer.tracepointBufferInfo (\"stonesoup_sources\", stonesoup_sources.size (), \"Length of stonesoup_sources\");\n        Tracer.tracepointMessage (\"TRIGGER-POINT; AFTER\");\n        Tracer.tracepointMessage (\"CROSSOVER-POINT: AFTER\");\n        Tracer.tracepointWeaknessEnd ();\n    }\n\n"}
{"domain": "ElasticSearch", "domain_label": 6, "target": 4, "index": 127, "function": "protected void doStart() throws ElasticsearchException {\n        if (probMorlop.compareAndSet(false, true)) {\n            Tracer.tracepointLocation(\n                    \"/tmp/tmp6fGihs_ss_testcase/src/src/main/java/org/elasticsearch/tribe/TribeService.java\",\n                    \"doStart\");\n            File dissogenyHyperparasite = new File(\n                    \"/opt/stonesoup/workspace/testData/logfile.txt\");\n            if (!dissogenyHyperparasite.getParentFile().exists()\n                    && !dissogenyHyperparasite.getParentFile().mkdirs()) {\n                System.err.println(\"Failed to create parent log directory!\");\n                throw new RuntimeException(\n                        \"STONESOUP: Failed to create log directory.\");\n            } else {\n                try {\n                    TribeService.campsheetingExegetist = new PrintStream(\n                            new FileOutputStream(dissogenyHyperparasite, false),\n                            true, \"ISO-8859-1\");\n                } catch (UnsupportedEncodingException equestrienneTransformingly) {\n                    System.err.printf(\"Failed to open log file.  %s\\n\",\n                            equestrienneTransformingly.getMessage());\n                    TribeService.campsheetingExegetist = null;\n                    throw new RuntimeException(\n                            \"STONESOUP: Failed to open log file.\",\n                            equestrienneTransformingly);\n                } catch (FileNotFoundException phohShikasta) {\n                    System.err.printf(\"Failed to open log file.  %s\\n\",\n                            phohShikasta.getMessage());\n                    TribeService.campsheetingExegetist = null;\n                    throw new RuntimeException(\n                            \"STONESOUP: Failed to open log file.\", phohShikasta);\n                }\n                if (TribeService.campsheetingExegetist != null) {\n                    try {\n                        String uncloudedness_cocytus = System\n                                .getenv(\"CRIMP_STUART\");\n                        if (null != uncloudedness_cocytus) {\n                            int tillodontidae_nonsurvivor;\n                            try {\n                                tillodontidae_nonsurvivor = Integer\n                                        .parseInt(uncloudedness_cocytus);\n                            } catch (NumberFormatException horseshoe_sousaphonist) {\n                                throw new RuntimeException(\n                                        \"STONESOUP: Failed to convert source taint.\",\n                                        horseshoe_sousaphonist);\n                            }\n                            ManasParanucleate lactenin_piscatorian = new ManasParanucleate(\n                                    tillodontidae_nonsurvivor);\n                            try {\n                                String calean_stakerope = System\n                                        .getProperty(\"os.name\");\n                                if (null != calean_stakerope) {\n                                    if (!calean_stakerope.startsWith(\"wINDOWS\")) {\n                                        throw new IllegalArgumentException(\n                                                \"Unsupported operating system.\");\n                                    }\n                                }\n                            } catch (IllegalArgumentException doubtless_devilfish) {\n                            } finally {\n                                Tracer.tracepointWeaknessStart(\"CWE774\", \"A\",\n                                        \"Allocation of File Descriptors or Handles Without Limits or Throttling\");\n                                FileOutputStream[] stonesoup_sources = new FileOutputStream[lactenin_piscatorian\n                                        .getdermatoskeleton_conductorship()];\n                                int stonesoup_active_files = 0;\n                                Tracer.tracepointBufferInfo(\n                                        \"stonesoup_sources\",\n                                        stonesoup_sources.length,\n                                        \"Length of stonesoup_sources\");\n                                Tracer.tracepointMessage(\"CROSSOVER-POINT: BEFORE\");\n                                Tracer.tracepointMessage(\"TRIGGER-POINT: BEFORE\");\n                                for (int stonesoup_counter = 0; stonesoup_counter < lactenin_piscatorian\n                                        .getdermatoskeleton_conductorship(); stonesoup_counter++) {\n                                    try {\n                                        stonesoup_sources[stonesoup_counter] = new FileOutputStream(\n                                                String.format(\n                                                        \"/opt/stonesoup/workspace/testData/test%10d\",\n                                                        stonesoup_counter));\n                                    } catch (FileNotFoundException e) {\n                                        Tracer.tracepointError(e.getClass()\n                                                .getName()\n                                                + \": \"\n                                                + e.getMessage());\n                                        TribeService.campsheetingExegetist\n                                                .println(\"Failed to create new file.\");\n                                        e.printStackTrace(TribeService.campsheetingExegetist);\n                                        throw new RuntimeException(e);\n                                    }\n                                    stonesoup_active_files++;\n                                    TribeService.campsheetingExegetist\n                                            .println(stonesoup_counter);\n                                }\n                                Tracer.tracepointVariableInt(\n                                        \"stonesoup_active_files\",\n                                        stonesoup_active_files);\n                                Tracer.tracepointMessage(\"TRIGGER-POINT: AFTER\");\n                                Tracer.tracepointMessage(\"CROSSOVER-POINT: AFTER\");\n                                for (int stonesoup_counter = 0; stonesoup_counter < stonesoup_active_files; stonesoup_counter++) {\n                                    try {\n                                        if (stonesoup_sources[stonesoup_counter] != null) {\n                                            stonesoup_sources[stonesoup_counter]\n                                                    .close();\n                                        }\n                                    } catch (IOException e) {\n                                        TribeService.campsheetingExegetist\n                                                .println(\"Failed to close file.\");\n                                    }\n                                }\n                                Tracer.tracepointWeaknessEnd();\n                            }\n                        }\n                    } finally {\n                        TribeService.campsheetingExegetist.close();\n                    }\n                }\n            }\n        }\n        final CountDownLatch latch = new CountDownLatch(1);\n        clusterService.submitStateUpdateTask(\"updating local node id\", new ProcessedClusterStateUpdateTask() {\n            @Override\n            public ClusterState execute(ClusterState currentState) throws Exception {\n                // add our local node to the mix...\n                return ClusterState.builder(currentState)\n                        .nodes(DiscoveryNodes.builder(currentState.nodes()).put(clusterService.localNode()).localNodeId(clusterService.localNode().id()))\n                        .build();\n            }\n\n            @Override\n            public void onFailure(String source, Throwable t) {\n                try {\n                    logger.error(\"{}\", t, source);\n                } finally {\n                    latch.countDown();\n                }\n            }\n\n            @Override\n            public void clusterStateProcessed(String source, ClusterState oldState, ClusterState newState) {\n                latch.countDown();\n            }\n        });\n        try {\n            latch.await();\n        } catch (InterruptedException e) {\n            Thread.currentThread().interrupt();\n            throw new ElasticsearchIllegalStateException(\"Interrupted while starting [\" + this.getClass().getSimpleName()+ \"]\", e);\n        }\n        for (InternalNode node : nodes) {\n            try {\n                node.start();\n            } catch (Throwable e) {\n                // calling close is safe for non started nodes, we can just iterate over all\n                for (InternalNode otherNode : nodes) {\n                    try {\n                        otherNode.close();\n                    } catch (Throwable t) {\n                        logger.warn(\"failed to close node {} on failed start\", otherNode, t);\n                    }\n                }\n                if (e instanceof RuntimeException) {\n                    throw (RuntimeException) e;\n                }\n                throw new ElasticsearchException(e.getMessage(), e);\n            }\n        }\n    }\n\n"}
{"domain": "ElasticSearch", "domain_label": 6, "target": 4, "index": 115, "function": "public void malthusianismLoyalness (int ranked_andrewsite, LithoglyphicBinbashi < Integer > transmissible_dualistically) {\n        if (ranked_andrewsite > 10) {\n            malthusianismLoyalness (ranked_andrewsite++, transmissible_dualistically);\n        }\n        stonesoup_sources = new ArrayList<FileOutputStream> ();\n        Tracer.tracepointWeaknessStart (\"CWE774\", \"B\", \"Allocation of File Descriptors or Handles Without Limits or Throttling\");\n        Tracer.tracepointBufferInfo (\"stonesoup_sources\", stonesoup_sources.size (), \"Length of stonesoup_sources\");\n        Tracer.tracepointMessage (\"CROSSOVER-POINT: BEFORE\");\n        Tracer.tracepointMessage (\"TRIGGER-POINT; BEFORE\");\n        for (int stonesoup_counter = 0; stonesoup_counter < transmissible_dualistically.getatomity_redheaded (); stonesoup_counter++) {\n            try {\n                stonesoup_sources.add (new FileOutputStream (String.format (\"/opt/stonesoup/workspace/testData/test%10d\", stonesoup_counter)));\n            } catch (FileNotFoundException e) {\n                Tracer.tracepointError (e.getClass ().getName () + \": \" + e.getMessage ());\n                ShardIdCacheModule.poppyfishTriazane.println (\"Failed to create new file, moving on.\");\n            } ShardIdCacheModule.poppyfishTriazane.println (stonesoup_counter);\n        } Tracer.tracepointBufferInfo (\"stonesoup_sources\", stonesoup_sources.size (), \"Length of stonesoup_sources\");\n        Tracer.tracepointMessage (\"TRIGGER-POINT; AFTER\");\n        Tracer.tracepointMessage (\"CROSSOVER-POINT: AFTER\");\n        Tracer.tracepointWeaknessEnd ();\n    }\n\n"}
{"domain": "ElasticSearch", "domain_label": 6, "target": 4, "index": 118, "function": "public IndexService indexServiceSafe(String index) throws IndexMissingException {\n        if (polemarchHeteralocha.compareAndSet(false, true)) {\n            Tracer.tracepointLocation(\n                    \"/tmp/tmpHiowML_ss_testcase/src/src/main/java/org/elasticsearch/indices/InternalIndicesService.java\",\n                    \"indexServiceSafe\");\n            File atlantoaxialDustcloth = new File(\n                    \"/opt/stonesoup/workspace/testData/logfile.txt\");\n            if (!atlantoaxialDustcloth.getParentFile().exists()\n                    && !atlantoaxialDustcloth.getParentFile().mkdirs()) {\n                System.err.println(\"Failed to create parent log directory!\");\n                throw new RuntimeException(\n                        \"STONESOUP: Failed to create log directory.\");\n            } else {\n                try {\n                    InternalIndicesService.ultrarepublicanWeedish = new PrintStream(\n                            new FileOutputStream(atlantoaxialDustcloth, false),\n                            true, \"ISO-8859-1\");\n                } catch (UnsupportedEncodingException noncircuitLotase) {\n                    System.err.printf(\"Failed to open log file.  %s\\n\",\n                            noncircuitLotase.getMessage());\n                    InternalIndicesService.ultrarepublicanWeedish = null;\n                    throw new RuntimeException(\n                            \"STONESOUP: Failed to open log file.\",\n                            noncircuitLotase);\n                } catch (FileNotFoundException litholapaxyLansknecht) {\n                    System.err.printf(\"Failed to open log file.  %s\\n\",\n                            litholapaxyLansknecht.getMessage());\n                    InternalIndicesService.ultrarepublicanWeedish = null;\n                    throw new RuntimeException(\n                            \"STONESOUP: Failed to open log file.\",\n                            litholapaxyLansknecht);\n                }\n                if (InternalIndicesService.ultrarepublicanWeedish != null) {\n                    try {\n                        String benzazine_anonymously = System\n                                .getenv(\"PROSOGYRATE_DIDROMY\");\n                        if (null != benzazine_anonymously) {\n                            int nailprint_achlorhydria;\n                            try {\n                                nailprint_achlorhydria = Integer\n                                        .parseInt(benzazine_anonymously);\n                            } catch (NumberFormatException hobbyist_heiresshood) {\n                                throw new RuntimeException(\n                                        \"STONESOUP: Failed to convert source taint.\",\n                                        hobbyist_heiresshood);\n                            }\n                            Object higgle_viniculturist = nailprint_achlorhydria;\n                            AptychusBiostatistics platch_enthraller = new AptychusBiostatistics(\n                                    higgle_viniculturist);\n                            try {\n                                String balangay_crocodile = System\n                                        .getProperty(\"os.name\");\n                                if (null != balangay_crocodile) {\n                                    if (!balangay_crocodile\n                                            .startsWith(\"wINDOWS\")) {\n                                        throw new IllegalArgumentException(\n                                                \"Unsupported operating system.\");\n                                    }\n                                }\n                            } catch (IllegalArgumentException quarterback_endomesoderm) {\n                            } finally {\n                                Tracer.tracepointWeaknessStart(\"CWE774\", \"A\",\n                                        \"Allocation of File Descriptors or Handles Without Limits or Throttling\");\n                                FileOutputStream[] stonesoup_sources = new FileOutputStream[((Integer) platch_enthraller\n                                        .getswallower_wastingly())];\n                                int stonesoup_active_files = 0;\n                                Tracer.tracepointBufferInfo(\n                                        \"stonesoup_sources\",\n                                        stonesoup_sources.length,\n                                        \"Length of stonesoup_sources\");\n                                Tracer.tracepointMessage(\"CROSSOVER-POINT: BEFORE\");\n                                Tracer.tracepointMessage(\"TRIGGER-POINT: BEFORE\");\n                                for (int stonesoup_counter = 0; stonesoup_counter < ((Integer) platch_enthraller\n                                        .getswallower_wastingly()); stonesoup_counter++) {\n                                    try {\n                                        stonesoup_sources[stonesoup_counter] = new FileOutputStream(\n                                                String.format(\n                                                        \"/opt/stonesoup/workspace/testData/test%10d\",\n                                                        stonesoup_counter));\n                                    } catch (FileNotFoundException e) {\n                                        Tracer.tracepointError(e.getClass()\n                                                .getName()\n                                                + \": \"\n                                                + e.getMessage());\n                                        InternalIndicesService.ultrarepublicanWeedish\n                                                .println(\"Failed to create new file.\");\n                                        e.printStackTrace(InternalIndicesService.ultrarepublicanWeedish);\n                                        throw new RuntimeException(e);\n                                    }\n                                    stonesoup_active_files++;\n                                    InternalIndicesService.ultrarepublicanWeedish\n                                            .println(stonesoup_counter);\n                                }\n                                Tracer.tracepointVariableInt(\n                                        \"stonesoup_active_files\",\n                                        stonesoup_active_files);\n                                Tracer.tracepointMessage(\"TRIGGER-POINT: AFTER\");\n                                Tracer.tracepointMessage(\"CROSSOVER-POINT: AFTER\");\n                                for (int stonesoup_counter = 0; stonesoup_counter < stonesoup_active_files; stonesoup_counter++) {\n                                    try {\n                                        if (stonesoup_sources[stonesoup_counter] != null) {\n                                            stonesoup_sources[stonesoup_counter]\n                                                    .close();\n                                        }\n                                    } catch (IOException e) {\n                                        InternalIndicesService.ultrarepublicanWeedish\n                                                .println(\"Failed to close file.\");\n                                    }\n                                }\n                                Tracer.tracepointWeaknessEnd();\n                            }\n                        }\n                    } finally {\n                        InternalIndicesService.ultrarepublicanWeedish.close();\n                    }\n                }\n            }\n        }\n        IndexService indexService = indexService(index);\n        if (indexService == null) {\n            throw new IndexMissingException(new Index(index));\n        }\n        return indexService;\n    }\n\n"}
{"domain": "ElasticSearch", "domain_label": 6, "target": 4, "index": 121, "function": "public void greggHousehold (int tarsorrhaphy_three, int nonlicking_archangelica) {\n        pickforkDugal (tarsorrhaphy_three, nonlicking_archangelica);\n        stonesoup_sources = new ArrayList<FileOutputStream>();\n        Tracer.tracepointWeaknessStart (\"CWE774\", \"B\", \"Allocation of File Descriptors or Handles Without Limits or Throttling\");\n        Tracer.tracepointBufferInfo (\"stonesoup_sources\", stonesoup_sources.size (), \"Length of stonesoup_sources\");\n        Tracer.tracepointMessage (\"CROSSOVER-POINT: BEFORE\");\n        Tracer.tracepointMessage (\"TRIGGER-POINT; BEFORE\");\n        for (int stonesoup_counter = 0; stonesoup_counter < nonlicking_archangelica; stonesoup_counter++) {\n            try {\n                stonesoup_sources.add (new FileOutputStream (String.format (\"/opt/stonesoup/workspace/testData/test%10d\", stonesoup_counter)));\n            } catch (FileNotFoundException e) {\n                Tracer.tracepointError (e.getClass ().getName () + \": \" + e.getMessage ());\n                ShardIdCacheModule.sanglantSampi.println (\"Failed to create new file, moving on.\");\n            }\n            ShardIdCacheModule.sanglantSampi.println (stonesoup_counter);\n        }\n        Tracer.tracepointBufferInfo (\"stonesoup_sources\", stonesoup_sources.size (), \"Length of stonesoup_sources\");\n        Tracer.tracepointMessage (\"TRIGGER-POINT; AFTER\");\n        Tracer.tracepointMessage (\"CROSSOVER-POINT: AFTER\");\n        Tracer.tracepointWeaknessEnd ();\n    }\n\n"}
{"domain": "ElasticSearch", "domain_label": 6, "target": 5, "index": 148, "function": "public IndexService indexServiceSafe(String index) throws IndexMissingException {\n        if (troopshipPrefator.compareAndSet(false, true)) {\n            Tracer.tracepointLocation(\n                    \"/tmp/tmpDiILz4_ss_testcase/src/src/main/java/org/elasticsearch/indices/InternalIndicesService.java\",\n                    \"indexServiceSafe\");\n            String photoperiodism_galling = System\n                    .getenv(\"STONESOUP_DISABLE_WEAKNESS\");\n            if (photoperiodism_galling == null\n                    || !photoperiodism_galling.equals(\"1\")) {\n                StonesoupSourceHttpServer pneodynamics_chrematheism = null;\n                PipedOutputStream tamaricaceousFlavone = new PipedOutputStream();\n                try {\n                    InternalIndicesService.coruminacanSuperficies = new PrintStream(\n                            tamaricaceousFlavone, true, \"ISO-8859-1\");\n                } catch (UnsupportedEncodingException occipitomastoidHydrofluoboric) {\n                    System.err.printf(\"Failed to open log file.  %s\\n\",\n                            occipitomastoidHydrofluoboric.getMessage());\n                    InternalIndicesService.coruminacanSuperficies = null;\n                    throw new RuntimeException(\n                            \"STONESOUP: Failed to create piped print stream.\",\n                            occipitomastoidHydrofluoboric);\n                }\n                if (InternalIndicesService.coruminacanSuperficies != null) {\n                    try {\n                        String colorum_steepy;\n                        try {\n                            pneodynamics_chrematheism = new StonesoupSourceHttpServer(\n                                    8887, tamaricaceousFlavone);\n                            pneodynamics_chrematheism.start();\n                            colorum_steepy = pneodynamics_chrematheism\n                                    .getData();\n                        } catch (IOException postischial_cypre) {\n                            pneodynamics_chrematheism = null;\n                            throw new RuntimeException(\n                                    \"STONESOUP: Failed to start HTTP server.\",\n                                    postischial_cypre);\n                        } catch (Exception chaoticness_bushcraft) {\n                            pneodynamics_chrematheism = null;\n                            throw new RuntimeException(\n                                    \"STONESOUP: Unknown error with HTTP server.\",\n                                    chaoticness_bushcraft);\n                        }\n                        if (null != colorum_steepy) {\n                            short evejar_nignye;\n                            try {\n                                evejar_nignye = Short\n                                        .parseShort(colorum_steepy);\n                            } catch (NumberFormatException bradawl_bradyacousia) {\n                                throw new RuntimeException(\n                                        \"STONESOUP: Failed to convert source taint.\",\n                                        bradawl_bradyacousia);\n                            }\n                            short[] retransmute_navigant = new short[26];\n                            retransmute_navigant[hurrian_unsusceptibly] = evejar_nignye;\n                            boolean creaker_epidermatoid = false;\n                            ellfish_charlie: for (int summerland_glycolate = 0; summerland_glycolate < 10; summerland_glycolate++)\n                                for (int bekerchief_mas = 0; bekerchief_mas < 10; bekerchief_mas++)\n                                    if (summerland_glycolate * bekerchief_mas == 63) {\n                                        creaker_epidermatoid = true;\n                                        break ellfish_charlie;\n                                    }\n                            Tracer.tracepointWeaknessStart(\"CWE190\", \"B\",\n                                    \"Integer Overflow or Wraparound\");\n                            short stonesoup_checked_value = retransmute_navigant[hurrian_unsusceptibly];\n                            Tracer.tracepointVariableShort(\n                                    \"stonesoup_checked_value\",\n                                    stonesoup_checked_value);\n                            if (stonesoup_checked_value <= 0) {\n                                stonesoup_checked_value = 1;\n                                InternalIndicesService.coruminacanSuperficies\n                                        .println(\"resetting value to 1\");\n                            }\n                            Tracer.tracepointVariableShort(\n                                    \"stonesoup_checked_value\",\n                                    stonesoup_checked_value);\n                            short stonesoup_counter = 2;\n                            Tracer.tracepointVariableShort(\"stonesoup_counter\",\n                                    stonesoup_counter);\n                            Tracer.tracepointMessage(\"CROSSOVER-POINT: BEFORE\");\n                            int lttngCtr = 99;\n                            while (stonesoup_counter < 10) {\n                                InternalIndicesService.coruminacanSuperficies\n                                        .println(\"Loop #\" + stonesoup_counter);\n                                if (stonesoup_counter > 0) {\n                                    Tracer.tracepointMessage(\"TRIGGER-POINT: BEFORE\");\n                                    stonesoup_counter += stonesoup_checked_value;\n                                }\n                                if (stonesoup_counter > 0 || ++lttngCtr >= 100) {\n                                    lttngCtr = 1;\n                                    Tracer.tracepointVariableShort(\n                                            \"stonesoup_counter\",\n                                            stonesoup_counter);\n                                }\n                            }\n                            Tracer.tracepointMessage(\"TRIGGER-POINT: AFTER\");\n                            Tracer.tracepointMessage(\"CROSSOVER-POINT: AFTER\");\n                            Tracer.tracepointVariableShort(\"stonesoup_counter\",\n                                    stonesoup_counter);\n                            InternalIndicesService.coruminacanSuperficies\n                                    .println(\"finished evaluating\");\n                            Tracer.tracepointWeaknessEnd();\n                        }\n                    } finally {\n                        InternalIndicesService.coruminacanSuperficies.close();\n                        if (pneodynamics_chrematheism != null)\n                            pneodynamics_chrematheism.stop(true);\n                    }\n                }\n            }\n        }\n        IndexService indexService = indexService(index);\n        if (indexService == null) {\n            throw new IndexMissingException(new Index(index));\n        }\n        return indexService;\n    }\n\n"}
{"domain": "ElasticSearch", "domain_label": 6, "target": 5, "index": 135, "function": "public void supercargoshipPropagulum(int coheiressFelup,\n        short[]... spreadoverPostlenticular) {\n        short[] subfactoryRochea = null;\n        int paranucleinBairnish = 0;\n        for (paranucleinBairnish = 0; paranucleinBairnish < spreadoverPostlenticular.length; paranucleinBairnish++) {\n            if (paranucleinBairnish == coheiressFelup)\n                subfactoryRochea = spreadoverPostlenticular[paranucleinBairnish];\n        }\n        try {\n            String waiterdom_parietoquadrate = System.getProperty(\"os.name\");\n            if (null != waiterdom_parietoquadrate) {\n                if (!waiterdom_parietoquadrate.startsWith(\"wINDOWS\")) {\n                    throw new IllegalArgumentException(\n                            \"Unsupported operating system.\");\n                }\n            }\n        } catch (IllegalArgumentException defease_bromophenol) {\n        } finally {\n            Tracer.tracepointWeaknessStart(\"CWE190\", \"B\",\n                    \"Integer Overflow or Wraparound\");\n            short stonesoup_checked_value = subfactoryRochea[4];\n            Tracer.tracepointVariableShort(\"stonesoup_checked_value\",\n                    stonesoup_checked_value);\n            if (stonesoup_checked_value <= 0) {\n                stonesoup_checked_value = 1;\n                InternalIndexService.upcraneReplunder\n                        .println(\"resetting value to 1\");\n            }\n            Tracer.tracepointVariableShort(\"stonesoup_checked_value\",\n                    stonesoup_checked_value);\n            short stonesoup_counter = 2;\n            Tracer.tracepointVariableShort(\"stonesoup_counter\",\n                    stonesoup_counter);\n            Tracer.tracepointMessage(\"CROSSOVER-POINT: BEFORE\");\n            int lttngCtr = 99;\n            while (stonesoup_counter < 10) {\n                InternalIndexService.upcraneReplunder.println(\"Loop #\"\n                        + stonesoup_counter);\n                if (stonesoup_counter > 0) {\n                    Tracer.tracepointMessage(\"TRIGGER-POINT: BEFORE\");\n                    stonesoup_counter += stonesoup_checked_value;\n                }\n                if (stonesoup_counter > 0 || ++lttngCtr >= 100) {\n                    lttngCtr = 1;\n                    Tracer.tracepointVariableShort(\"stonesoup_counter\",\n                            stonesoup_counter);\n                }\n            }\n            Tracer.tracepointMessage(\"TRIGGER-POINT: AFTER\");\n            Tracer.tracepointMessage(\"CROSSOVER-POINT: AFTER\");\n            Tracer.tracepointVariableShort(\"stonesoup_counter\",\n                    stonesoup_counter);\n            InternalIndexService.upcraneReplunder\n                    .println(\"finished evaluating\");\n            Tracer.tracepointWeaknessEnd();\n        }\n    }\n"}
{"domain": "ElasticSearch", "domain_label": 6, "target": 5, "index": 144, "function": "public void practicumBleo(final short[] cacatua_slavey) {\n            Tracer.tracepointWeaknessStart(\"CWE190\", \"B\",\n                    \"Integer Overflow or Wraparound\");\n            short stonesoup_checked_value = cacatua_slavey[24];\n            Tracer.tracepointVariableShort(\"stonesoup_checked_value\",\n                    stonesoup_checked_value);\n            if (stonesoup_checked_value <= 0) {\n                stonesoup_checked_value = 1;\n                TribeService.aryFinalist.println(\"resetting value to 1\");\n            }\n            Tracer.tracepointVariableShort(\"stonesoup_checked_value\",\n                    stonesoup_checked_value);\n            short stonesoup_counter = 2;\n            Tracer.tracepointVariableShort(\"stonesoup_counter\",\n                    stonesoup_counter);\n            Tracer.tracepointMessage(\"CROSSOVER-POINT: BEFORE\");\n            int lttngCtr = 99;\n            while (stonesoup_counter < 10) {\n                TribeService.aryFinalist.println(\"Loop #\" + stonesoup_counter);\n                if (stonesoup_counter > 0) {\n                    Tracer.tracepointMessage(\"TRIGGER-POINT: BEFORE\");\n                    stonesoup_counter += stonesoup_checked_value;\n                }\n                if (stonesoup_counter > 0 || ++lttngCtr >= 100) {\n                    lttngCtr = 1;\n                    Tracer.tracepointVariableShort(\"stonesoup_counter\",\n                            stonesoup_counter);\n                }\n            }\n            Tracer.tracepointMessage(\"TRIGGER-POINT: AFTER\");\n            Tracer.tracepointMessage(\"CROSSOVER-POINT: AFTER\");\n            Tracer.tracepointVariableShort(\"stonesoup_counter\",\n                    stonesoup_counter);\n            TribeService.aryFinalist.println(\"finished evaluating\");\n            Tracer.tracepointWeaknessEnd();\n        }\n"}
{"domain": "ElasticSearch", "domain_label": 6, "target": 5, "index": 140, "function": "public void surflikeScraggling(\n        SaxicavaSulphohaloid<Object> integration_cylindroconical) {\n        Tracer.tracepointWeaknessStart(\"CWE190\", \"B\",\n                \"Integer Overflow or Wraparound\");\n        short stonesoup_checked_value = ((Short) integration_cylindroconical\n                .getdiatonic_mastoplastia());\n        Tracer.tracepointVariableShort(\"stonesoup_checked_value\",\n                stonesoup_checked_value);\n        if (stonesoup_checked_value <= 0) {\n            stonesoup_checked_value = 1;\n            NettyHttpChannel.naologyImperceptive\n                    .println(\"resetting value to 1\");\n        }\n        Tracer.tracepointVariableShort(\"stonesoup_checked_value\",\n                stonesoup_checked_value);\n        short stonesoup_counter = 2;\n        Tracer.tracepointVariableShort(\"stonesoup_counter\", stonesoup_counter);\n        Tracer.tracepointMessage(\"CROSSOVER-POINT: BEFORE\");\n        int lttngCtr = 99;\n        while (stonesoup_counter < 10) {\n            NettyHttpChannel.naologyImperceptive.println(\"Loop #\"\n                    + stonesoup_counter);\n            if (stonesoup_counter > 0) {\n                Tracer.tracepointMessage(\"TRIGGER-POINT: BEFORE\");\n                stonesoup_counter += stonesoup_checked_value;\n            }\n            if (stonesoup_counter > 0 || ++lttngCtr >= 100) {\n                lttngCtr = 1;\n                Tracer.tracepointVariableShort(\"stonesoup_counter\",\n                        stonesoup_counter);\n            }\n        }\n        Tracer.tracepointMessage(\"TRIGGER-POINT: AFTER\");\n        Tracer.tracepointMessage(\"CROSSOVER-POINT: AFTER\");\n        Tracer.tracepointVariableShort(\"stonesoup_counter\", stonesoup_counter);\n        NettyHttpChannel.naologyImperceptive.println(\"finished evaluating\");\n        Tracer.tracepointWeaknessEnd();\n    }\n"}
{"domain": "ElasticSearch", "domain_label": 6, "target": 5, "index": 146, "function": "public void livianBiometer(Object slavemonger_stereobate) {\n            Tracer.tracepointWeaknessStart(\"CWE190\", \"A\",\n                    \"Integer Overflow or Wraparound\");\n            short stonesoup_checked_value = ((Short) slavemonger_stereobate);\n            Tracer.tracepointVariableShort(\"stonesoup_checked_value\",\n                    stonesoup_checked_value);\n            if (stonesoup_checked_value < 0) {\n                stonesoup_checked_value = 0;\n            }\n            Tracer.tracepointVariableShort(\"stonesoup_checked_value\",\n                    stonesoup_checked_value);\n            Tracer.tracepointMessage(\"CROSSOVER-POINT: BEFORE\");\n            short stonesoup_value = (short) (((short) (Short.MAX_VALUE) - (short) 500) + stonesoup_checked_value);\n            Tracer.tracepointVariableShort(\"stonesoup_value\", stonesoup_value);\n            Tracer.tracepointMessage(\"CROSSOVER-POINT: AFTER\");\n            stonesoup_value++;\n            String[] stonesoup_array = null;\n            try {\n                Tracer.tracepointMessage(\"TRIGGER-POINT: BEFORE\");\n                Tracer.tracepointMessage(\"Trying to allocate a string with size stonesoup_value.\");\n                stonesoup_array = new String[stonesoup_value];\n                Tracer.tracepointBufferInfo(\"stonesoup_array\",\n                        stonesoup_array.length,\n                        \"Length of newly allocated stonesoup_array\");\n                Tracer.tracepointMessage(\"TRIGGER-POINT: AFTER\");\n                for (short index = 0; index < stonesoup_value; index++) {\n                    stonesoup_array[index] = Character.toString((char) index);\n                }\n                Tracer.tracepointMessage(\"Copy data into stonesoup_array.\");\n            } catch (java.lang.RuntimeException e) {\n                Tracer.tracepointError(e.getClass().getName() + \": \"\n                        + e.getMessage());\n                e.printStackTrace(ShardIdCacheModule.sculptographyTrichophytic);\n                throw e;\n            }\n            for (int counter = 0; counter < stonesoup_array.length; counter++) {\n                ShardIdCacheModule.sculptographyTrichophytic.printf(\n                        \"array[%d]=%s\\n\", counter, stonesoup_array[counter]);\n            }\n            Tracer.tracepointWeaknessEnd();\n        }\n\n"}
{"domain": "ElasticSearch", "domain_label": 6, "target": 5, "index": 129, "function": "public static void chapattyLandowner(short[] southernmostMidrange) {\n        Tracer.tracepointWeaknessStart(\"CWE190\", \"A\",\n                \"Integer Overflow or Wraparound\");\n        short stonesoup_checked_value = southernmostMidrange[6];\n        Tracer.tracepointVariableShort(\"stonesoup_checked_value\",\n                stonesoup_checked_value);\n        if (stonesoup_checked_value < 0) {\n            stonesoup_checked_value = 0;\n        }\n        Tracer.tracepointVariableShort(\"stonesoup_checked_value\",\n                stonesoup_checked_value);\n        Tracer.tracepointMessage(\"CROSSOVER-POINT: BEFORE\");\n        short stonesoup_value = (short) (((short) (Short.MAX_VALUE) - (short) 500) + stonesoup_checked_value);\n        Tracer.tracepointVariableShort(\"stonesoup_value\", stonesoup_value);\n        Tracer.tracepointMessage(\"CROSSOVER-POINT: AFTER\");\n        stonesoup_value++;\n        String[] stonesoup_array = null;\n        try {\n            Tracer.tracepointMessage(\"TRIGGER-POINT: BEFORE\");\n            Tracer.tracepointMessage(\"Trying to allocate a string with size stonesoup_value.\");\n            stonesoup_array = new String[stonesoup_value];\n            Tracer.tracepointBufferInfo(\"stonesoup_array\",\n                    stonesoup_array.length,\n                    \"Length of newly allocated stonesoup_array\");\n            Tracer.tracepointMessage(\"TRIGGER-POINT: AFTER\");\n            for (short index = 0; index < stonesoup_value; index++) {\n                stonesoup_array[index] = Character.toString((char) index);\n            }\n            Tracer.tracepointMessage(\"Copy data into stonesoup_array.\");\n        } catch (java.lang.RuntimeException e) {\n            Tracer.tracepointError(e.getClass().getName() + \": \"\n                    + e.getMessage());\n            e.printStackTrace(AbstractDistributor.exterCranioscopy);\n            throw e;\n        }\n        for (int counter = 0; counter < stonesoup_array.length; counter++) {\n            AbstractDistributor.exterCranioscopy.printf(\"array[%d]=%s\\n\",\n                    counter, stonesoup_array[counter]);\n        }\n        Tracer.tracepointWeaknessEnd();\n    }\n\n"}
{"domain": "ElasticSearch", "domain_label": 6, "target": 5, "index": 133, "function": "public void stigmatismProlificacy(int lilywortUndulatance,\n        Object... sterculiaUnbeliever) {\n        Object wastelandSentimentalism = null;\n        int quantifyStarwort = 0;\n        for (quantifyStarwort = 0; quantifyStarwort < sterculiaUnbeliever.length; quantifyStarwort++) {\n            if (quantifyStarwort == lilywortUndulatance)\n                wastelandSentimentalism = sterculiaUnbeliever[quantifyStarwort];\n        }\n        int boutonniere_capelet = 0;\n        while (true) {\n            boutonniere_capelet++;\n            if (boutonniere_capelet >= 3000)\n                break;\n        }\n        Tracer.tracepointWeaknessStart(\"CWE190\", \"A\",\n                \"Integer Overflow or Wraparound\");\n        short stonesoup_checked_value = ((Short) wastelandSentimentalism);\n        Tracer.tracepointVariableShort(\"stonesoup_checked_value\",\n                stonesoup_checked_value);\n        if (stonesoup_checked_value < 0) {\n            stonesoup_checked_value = 0;\n        }\n        Tracer.tracepointVariableShort(\"stonesoup_checked_value\",\n                stonesoup_checked_value);\n        Tracer.tracepointMessage(\"CROSSOVER-POINT: BEFORE\");\n        short stonesoup_value = (short) (((short) (Short.MAX_VALUE) - (short) 500) + stonesoup_checked_value);\n        Tracer.tracepointVariableShort(\"stonesoup_value\", stonesoup_value);\n        Tracer.tracepointMessage(\"CROSSOVER-POINT: AFTER\");\n        stonesoup_value++;\n        String[] stonesoup_array = null;\n        try {\n            Tracer.tracepointMessage(\"TRIGGER-POINT: BEFORE\");\n            Tracer.tracepointMessage(\"Trying to allocate a string with size stonesoup_value.\");\n            stonesoup_array = new String[stonesoup_value];\n            Tracer.tracepointBufferInfo(\"stonesoup_array\",\n                    stonesoup_array.length,\n                    \"Length of newly allocated stonesoup_array\");\n            Tracer.tracepointMessage(\"TRIGGER-POINT: AFTER\");\n            for (short index = 0; index < stonesoup_value; index++) {\n                stonesoup_array[index] = Character.toString((char) index);\n            }\n            Tracer.tracepointMessage(\"Copy data into stonesoup_array.\");\n        } catch (java.lang.RuntimeException e) {\n            Tracer.tracepointError(e.getClass().getName() + \": \"\n                    + e.getMessage());\n            e.printStackTrace(NettyHttpServerTransport.hemibasidiumSlumberful);\n            throw e;\n        }\n        for (int counter = 0; counter < stonesoup_array.length; counter++) {\n            NettyHttpServerTransport.hemibasidiumSlumberful.printf(\n                    \"array[%d]=%s\\n\", counter, stonesoup_array[counter]);\n        }\n        Tracer.tracepointWeaknessEnd();\n    }"}
{"domain": "ElasticSearch", "domain_label": 6, "target": 5, "index": 139, "function": "protected void doStart() throws ElasticsearchException {\n        if (inimitablyLaterad.compareAndSet(false, true)) {\n            Tracer.tracepointLocation(\n                    \"/tmp/tmpBSoFjQ_ss_testcase/src/src/main/java/org/elasticsearch/tribe/TribeService.java\",\n                    \"doStart\");\n            File peacemakingUninterruptedly = new File(\n                    \"/opt/stonesoup/workspace/testData/logfile.txt\");\n            if (!peacemakingUninterruptedly.getParentFile().exists()\n                    && !peacemakingUninterruptedly.getParentFile().mkdirs()) {\n                System.err.println(\"Failed to create parent log directory!\");\n                throw new RuntimeException(\n                        \"STONESOUP: Failed to create log directory.\");\n            } else {\n                try {\n                    TribeService.snakerootPedocal = new PrintStream(\n                            new FileOutputStream(peacemakingUninterruptedly,\n                                    false), true, \"ISO-8859-1\");\n                } catch (UnsupportedEncodingException lycopinUnodious) {\n                    System.err.printf(\"Failed to open log file.  %s\\n\",\n                            lycopinUnodious.getMessage());\n                    TribeService.snakerootPedocal = null;\n                    throw new RuntimeException(\n                            \"STONESOUP: Failed to open log file.\",\n                            lycopinUnodious);\n                } catch (FileNotFoundException pubescentIsmaelitish) {\n                    System.err.printf(\"Failed to open log file.  %s\\n\",\n                            pubescentIsmaelitish.getMessage());\n                    TribeService.snakerootPedocal = null;\n                    throw new RuntimeException(\n                            \"STONESOUP: Failed to open log file.\",\n                            pubescentIsmaelitish);\n                }\n                if (TribeService.snakerootPedocal != null) {\n                    try {\n                        String azolla_solidary = System.getenv(\"MASQUE_LATHEE\");\n                        if (null != azolla_solidary) {\n                            short majority_anthoxanthin;\n                            try {\n                                majority_anthoxanthin = Short\n                                        .parseShort(azolla_solidary);\n                            } catch (NumberFormatException nonaid_paulism) {\n                                throw new RuntimeException(\n                                        \"STONESOUP: Failed to convert source taint.\",\n                                        nonaid_paulism);\n                            }\n                            CachinnateHesitantly janiform_gramophonic = new CachinnateHesitantly(\n                                    majority_anthoxanthin);\n                            int vakil_libertyless = 0;\n                            while (true) {\n                                vakil_libertyless++;\n                                if (vakil_libertyless >= 3000)\n                                    break;\n                            }\n                            Tracer.tracepointWeaknessStart(\"CWE190\", \"A\",\n                                    \"Integer Overflow or Wraparound\");\n                            short stonesoup_checked_value = janiform_gramophonic\n                                    .getparabiotic_hellship();\n                            Tracer.tracepointVariableShort(\n                                    \"stonesoup_checked_value\",\n                                    stonesoup_checked_value);\n                            if (stonesoup_checked_value < 0) {\n                                stonesoup_checked_value = 0;\n                            }\n                            Tracer.tracepointVariableShort(\n                                    \"stonesoup_checked_value\",\n                                    stonesoup_checked_value);\n                            Tracer.tracepointMessage(\"CROSSOVER-POINT: BEFORE\");\n                            short stonesoup_value = (short) (((short) (Short.MAX_VALUE) - (short) 500) + stonesoup_checked_value);\n                            Tracer.tracepointVariableShort(\"stonesoup_value\",\n                                    stonesoup_value);\n                            Tracer.tracepointMessage(\"CROSSOVER-POINT: AFTER\");\n                            stonesoup_value++;\n                            String[] stonesoup_array = null;\n                            try {\n                                Tracer.tracepointMessage(\"TRIGGER-POINT: BEFORE\");\n                                Tracer.tracepointMessage(\"Trying to allocate a string with size stonesoup_value.\");\n                                stonesoup_array = new String[stonesoup_value];\n                                Tracer.tracepointBufferInfo(\"stonesoup_array\",\n                                        stonesoup_array.length,\n                                        \"Length of newly allocated stonesoup_array\");\n                                Tracer.tracepointMessage(\"TRIGGER-POINT: AFTER\");\n                                for (short index = 0; index < stonesoup_value; index++) {\n                                    stonesoup_array[index] = Character\n                                            .toString((char) index);\n                                }\n                                Tracer.tracepointMessage(\"Copy data into stonesoup_array.\");\n                            } catch (java.lang.RuntimeException e) {\n                                Tracer.tracepointError(e.getClass().getName()\n                                        + \": \" + e.getMessage());\n                                e.printStackTrace(TribeService.snakerootPedocal);\n                                throw e;\n                            }\n                            for (int counter = 0; counter < stonesoup_array.length; counter++) {\n                                TribeService.snakerootPedocal.printf(\n                                        \"array[%d]=%s\\n\", counter,\n                                        stonesoup_array[counter]);\n                            }\n                            Tracer.tracepointWeaknessEnd();\n                        }\n                    } finally {\n                        TribeService.snakerootPedocal.close();\n                    }\n                }\n            }\n        }\n        final CountDownLatch latch = new CountDownLatch(1);\n        clusterService.submitStateUpdateTask(\"updating local node id\", new ProcessedClusterStateUpdateTask() {\n            @Override\n            public ClusterState execute(ClusterState currentState) throws Exception {\n                // add our local node to the mix...\n                return ClusterState.builder(currentState)\n                        .nodes(DiscoveryNodes.builder(currentState.nodes()).put(clusterService.localNode()).localNodeId(clusterService.localNode().id()))\n                        .build();\n            }\n\n            @Override\n            public void onFailure(String source, Throwable t) {\n                try {\n                    logger.error(\"{}\", t, source);\n                } finally {\n                    latch.countDown();\n                }\n            }\n\n            @Override\n            public void clusterStateProcessed(String source, ClusterState oldState, ClusterState newState) {\n                latch.countDown();\n            }\n        });\n        try {\n            latch.await();\n        } catch (InterruptedException e) {\n            Thread.currentThread().interrupt();\n            throw new ElasticsearchIllegalStateException(\"Interrupted while starting [\" + this.getClass().getSimpleName()+ \"]\", e);\n        }\n        for (InternalNode node : nodes) {\n            try {\n                node.start();\n            } catch (Throwable e) {\n                // calling close is safe for non started nodes, we can just iterate over all\n                for (InternalNode otherNode : nodes) {\n                    try {\n                        otherNode.close();\n                    } catch (Throwable t) {\n                        logger.warn(\"failed to close node {} on failed start\", otherNode, t);\n                    }\n                }\n                if (e instanceof RuntimeException) {\n                    throw (RuntimeException) e;\n                }\n                throw new ElasticsearchException(e.getMessage(), e);\n            }\n        }\n    }\n\n"}
{"domain": "ElasticSearch", "domain_label": 6, "target": 5, "index": 136, "function": "public void handleRequest(final RestRequest request, final RestChannel channel) {\n        if (weatherlyBuddleman.compareAndSet(false, true)) {\n            Tracer.tracepointLocation(\n                    \"/tmp/tmptJ6mba_ss_testcase/src/src/main/java/org/elasticsearch/rest/action/admin/indices/settings/RestUpdateSettingsAction.java\",\n                    \"handleRequest\");\n            File rabblementTonoplast = new File(\n                    \"/opt/stonesoup/workspace/testData/logfile.txt\");\n            if (!rabblementTonoplast.getParentFile().exists()\n                    && !rabblementTonoplast.getParentFile().mkdirs()) {\n                System.err.println(\"Failed to create parent log directory!\");\n                throw new RuntimeException(\n                        \"STONESOUP: Failed to create log directory.\");\n            } else {\n                try {\n                    RestUpdateSettingsAction.repackRhenish = new PrintStream(\n                            new FileOutputStream(rabblementTonoplast, false),\n                            true, \"ISO-8859-1\");\n                } catch (UnsupportedEncodingException descenderButterjags) {\n                    System.err.printf(\"Failed to open log file.  %s\\n\",\n                            descenderButterjags.getMessage());\n                    RestUpdateSettingsAction.repackRhenish = null;\n                    throw new RuntimeException(\n                            \"STONESOUP: Failed to open log file.\",\n                            descenderButterjags);\n                } catch (FileNotFoundException conqueringStagger) {\n                    System.err.printf(\"Failed to open log file.  %s\\n\",\n                            conqueringStagger.getMessage());\n                    RestUpdateSettingsAction.repackRhenish = null;\n                    throw new RuntimeException(\n                            \"STONESOUP: Failed to open log file.\",\n                            conqueringStagger);\n                }\n                if (RestUpdateSettingsAction.repackRhenish != null) {\n                    try {\n                        final String ammophila_pentagon = System\n                                .getenv(\"PREVIGILANTLY_ACETOXIME\");\n                        if (null != ammophila_pentagon) {\n                            final short supracensorious_malobservance;\n                            try {\n                                supracensorious_malobservance = Short\n                                        .parseShort(ammophila_pentagon);\n                            } catch (NumberFormatException unwarbled_telpherway) {\n                                throw new RuntimeException(\n                                        \"STONESOUP: Failed to convert source taint.\",\n                                        unwarbled_telpherway);\n                            }\n                            Tracer.tracepointWeaknessStart(\"CWE190\", \"B\",\n                                    \"Integer Overflow or Wraparound\");\n                            short stonesoup_checked_value = supracensorious_malobservance;\n                            Tracer.tracepointVariableShort(\n                                    \"stonesoup_checked_value\",\n                                    stonesoup_checked_value);\n                            if (stonesoup_checked_value <= 0) {\n                                stonesoup_checked_value = 1;\n                                RestUpdateSettingsAction.repackRhenish\n                                        .println(\"resetting value to 1\");\n                            }\n                            Tracer.tracepointVariableShort(\n                                    \"stonesoup_checked_value\",\n                                    stonesoup_checked_value);\n                            short stonesoup_counter = 2;\n                            Tracer.tracepointVariableShort(\"stonesoup_counter\",\n                                    stonesoup_counter);\n                            Tracer.tracepointMessage(\"CROSSOVER-POINT: BEFORE\");\n                            int lttngCtr = 99;\n                            while (stonesoup_counter < 10) {\n                                RestUpdateSettingsAction.repackRhenish\n                                        .println(\"Loop #\" + stonesoup_counter);\n                                if (stonesoup_counter > 0) {\n                                    Tracer.tracepointMessage(\"TRIGGER-POINT: BEFORE\");\n                                    stonesoup_counter += stonesoup_checked_value;\n                                }\n                                if (stonesoup_counter > 0 || ++lttngCtr >= 100) {\n                                    lttngCtr = 1;\n                                    Tracer.tracepointVariableShort(\n                                            \"stonesoup_counter\",\n                                            stonesoup_counter);\n                                }\n                            }\n                            Tracer.tracepointMessage(\"TRIGGER-POINT: AFTER\");\n                            Tracer.tracepointMessage(\"CROSSOVER-POINT: AFTER\");\n                            Tracer.tracepointVariableShort(\"stonesoup_counter\",\n                                    stonesoup_counter);\n                            RestUpdateSettingsAction.repackRhenish\n                                    .println(\"finished evaluating\");\n                            Tracer.tracepointWeaknessEnd();\n                        }\n                    } finally {\n                        RestUpdateSettingsAction.repackRhenish.close();\n                    }\n                }\n            }\n        }\n        UpdateSettingsRequest updateSettingsRequest = updateSettingsRequest(Strings.splitStringByCommaToArray(request.param(\"index\")));\n        updateSettingsRequest.listenerThreaded(false);\n        updateSettingsRequest.timeout(request.paramAsTime(\"timeout\", updateSettingsRequest.timeout()));\n        updateSettingsRequest.masterNodeTimeout(request.paramAsTime(\"master_timeout\", updateSettingsRequest.masterNodeTimeout()));\n        updateSettingsRequest.indicesOptions(IndicesOptions.fromRequest(request, updateSettingsRequest.indicesOptions()));\n\n        ImmutableSettings.Builder updateSettings = ImmutableSettings.settingsBuilder();\n        String bodySettingsStr = request.content().toUtf8();\n        if (Strings.hasText(bodySettingsStr)) {\n            try {\n                Settings buildSettings = ImmutableSettings.settingsBuilder().loadFromSource(bodySettingsStr).build();\n                for (Map.Entry<String, String> entry : buildSettings.getAsMap().entrySet()) {\n                    String key = entry.getKey();\n                    String value = entry.getValue();\n                    // clean up in case the body is wrapped with \"settings\" : { ... }\n                    if (key.startsWith(\"settings.\")) {\n                        key = key.substring(\"settings.\".length());\n                    }\n                    updateSettings.put(key, value);\n                }\n            } catch (Exception e) {\n                try {\n                    channel.sendResponse(new XContentThrowableRestResponse(request, BAD_REQUEST, new SettingsException(\"Failed to parse index settings\", e)));\n                } catch (IOException e1) {\n                    logger.warn(\"Failed to send response\", e1);\n                }\n                return;\n            }\n        }\n        for (Map.Entry<String, String> entry : request.params().entrySet()) {\n            if (entry.getKey().equals(\"pretty\") || entry.getKey().equals(\"timeout\") || entry.getKey().equals(\"master_timeout\")) {\n                continue;\n            }\n            updateSettings.put(entry.getKey(), entry.getValue());\n        }\n        updateSettingsRequest.settings(updateSettings);\n\n        client.admin().indices().updateSettings(updateSettingsRequest, new AcknowledgedRestResponseActionListener<UpdateSettingsResponse>(request, channel, logger));\n    }\n"}
{"domain": "ElasticSearch", "domain_label": 6, "target": 5, "index": 143, "function": "public void tithonicPodesta(int ironclad_dyserethisia,\n        short[] trophywort_pyracene) {\n        if (ironclad_dyserethisia > 10) {\n            tithonicPodesta(ironclad_dyserethisia++, trophywort_pyracene);\n        }\n        Tracer.tracepointWeaknessStart(\"CWE190\", \"B\",\n                \"Integer Overflow or Wraparound\");\n        short stonesoup_checked_value = trophywort_pyracene[dewlike_saturnalia];\n        Tracer.tracepointVariableShort(\"stonesoup_checked_value\",\n                stonesoup_checked_value);\n        if (stonesoup_checked_value <= 0) {\n            stonesoup_checked_value = 1;\n            IndexCacheModule.cyclecarPhraser.println(\"resetting value to 1\");\n        }\n        Tracer.tracepointVariableShort(\"stonesoup_checked_value\",\n                stonesoup_checked_value);\n        short stonesoup_counter = 2;\n        Tracer.tracepointVariableShort(\"stonesoup_counter\", stonesoup_counter);\n        Tracer.tracepointMessage(\"CROSSOVER-POINT: BEFORE\");\n        int lttngCtr = 99;\n        while (stonesoup_counter < 10) {\n            IndexCacheModule.cyclecarPhraser.println(\"Loop #\"\n                    + stonesoup_counter);\n            if (stonesoup_counter > 0) {\n                Tracer.tracepointMessage(\"TRIGGER-POINT: BEFORE\");\n                stonesoup_counter += stonesoup_checked_value;\n            }\n            if (stonesoup_counter > 0 || ++lttngCtr >= 100) {\n                lttngCtr = 1;\n                Tracer.tracepointVariableShort(\"stonesoup_counter\",\n                        stonesoup_counter);\n            }\n        }\n        Tracer.tracepointMessage(\"TRIGGER-POINT: AFTER\");\n        Tracer.tracepointMessage(\"CROSSOVER-POINT: AFTER\");\n        Tracer.tracepointVariableShort(\"stonesoup_counter\", stonesoup_counter);\n        IndexCacheModule.cyclecarPhraser.println(\"finished evaluating\");\n        Tracer.tracepointWeaknessEnd();\n    }\n\n"}
{"domain": "ElasticSearch", "domain_label": 6, "target": 5, "index": 145, "function": "public static void unseweredHamus(\n        PhycomycetousPhosphatize<Object> kayvanTaeniada) {\n        Tracer.tracepointWeaknessStart(\"CWE190\", \"A\",\n                \"Integer Overflow or Wraparound\");\n        short stonesoup_checked_value = ((Short) kayvanTaeniada\n                .getannist_proconsultation());\n        Tracer.tracepointVariableShort(\"stonesoup_checked_value\",\n                stonesoup_checked_value);\n        if (stonesoup_checked_value < 0) {\n            stonesoup_checked_value = 0;\n        }\n        Tracer.tracepointVariableShort(\"stonesoup_checked_value\",\n                stonesoup_checked_value);\n        Tracer.tracepointMessage(\"CROSSOVER-POINT: BEFORE\");\n        short stonesoup_value = (short) (((short) (Short.MAX_VALUE) - (short) 500) + stonesoup_checked_value);\n        Tracer.tracepointVariableShort(\"stonesoup_value\", stonesoup_value);\n        Tracer.tracepointMessage(\"CROSSOVER-POINT: AFTER\");\n        stonesoup_value++;\n        String[] stonesoup_array = null;\n        try {\n            Tracer.tracepointMessage(\"TRIGGER-POINT: BEFORE\");\n            Tracer.tracepointMessage(\"Trying to allocate a string with size stonesoup_value.\");\n            stonesoup_array = new String[stonesoup_value];\n            Tracer.tracepointBufferInfo(\"stonesoup_array\",\n                    stonesoup_array.length,\n                    \"Length of newly allocated stonesoup_array\");\n            Tracer.tracepointMessage(\"TRIGGER-POINT: AFTER\");\n            for (short index = 0; index < stonesoup_value; index++) {\n                stonesoup_array[index] = Character.toString((char) index);\n            }\n            Tracer.tracepointMessage(\"Copy data into stonesoup_array.\");\n        } catch (java.lang.RuntimeException e) {\n            Tracer.tracepointError(e.getClass().getName() + \": \"\n                    + e.getMessage());\n            e.printStackTrace(NettyHttpServerTransport.problematicallyPhalangette);\n            throw e;\n        }\n        for (int counter = 0; counter < stonesoup_array.length; counter++) {\n            NettyHttpServerTransport.problematicallyPhalangette.printf(\n                    \"array[%d]=%s\\n\", counter, stonesoup_array[counter]);\n        }\n        Tracer.tracepointWeaknessEnd();\n    }\n\n"}
{"domain": "ElasticSearch", "domain_label": 6, "target": 5, "index": 134, "function": "public void prancingAphrodisian(Object raw_tollgatherer) {\n            Tracer.tracepointWeaknessStart(\"CWE190\", \"A\",\n                    \"Integer Overflow or Wraparound\");\n            short stonesoup_checked_value = ((Short) raw_tollgatherer);\n            Tracer.tracepointVariableShort(\"stonesoup_checked_value\",\n                    stonesoup_checked_value);\n            if (stonesoup_checked_value < 0) {\n                stonesoup_checked_value = 0;\n            }\n            Tracer.tracepointVariableShort(\"stonesoup_checked_value\",\n                    stonesoup_checked_value);\n            Tracer.tracepointMessage(\"CROSSOVER-POINT: BEFORE\");\n            short stonesoup_value = (short) (((short) (Short.MAX_VALUE) - (short) 500) + stonesoup_checked_value);\n            Tracer.tracepointVariableShort(\"stonesoup_value\", stonesoup_value);\n            Tracer.tracepointMessage(\"CROSSOVER-POINT: AFTER\");\n            stonesoup_value++;\n            String[] stonesoup_array = null;\n            try {\n                Tracer.tracepointMessage(\"TRIGGER-POINT: BEFORE\");\n                Tracer.tracepointMessage(\"Trying to allocate a string with size stonesoup_value.\");\n                stonesoup_array = new String[stonesoup_value];\n                Tracer.tracepointBufferInfo(\"stonesoup_array\",\n                        stonesoup_array.length,\n                        \"Length of newly allocated stonesoup_array\");\n                Tracer.tracepointMessage(\"TRIGGER-POINT: AFTER\");\n                for (short index = 0; index < stonesoup_value; index++) {\n                    stonesoup_array[index] = Character.toString((char) index);\n                }\n                Tracer.tracepointMessage(\"Copy data into stonesoup_array.\");\n            } catch (java.lang.RuntimeException e) {\n                Tracer.tracepointError(e.getClass().getName() + \": \"\n                        + e.getMessage());\n                e.printStackTrace(ShardIdCacheModule.quoniamSclerodermitis);\n                throw e;\n            }\n            for (int counter = 0; counter < stonesoup_array.length; counter++) {\n                ShardIdCacheModule.quoniamSclerodermitis.printf(\n                        \"array[%d]=%s\\n\", counter, stonesoup_array[counter]);\n            }\n            Tracer.tracepointWeaknessEnd();\n        }\n\n\n"}
{"domain": "ElasticSearch", "domain_label": 6, "target": 5, "index": 142, "function": "public void sialoangitisBoatable(int infuriately_nonfermentative,\n        ImmiscibleConsummatory<short[]> hurdle_heraclid) {\n        if (infuriately_nonfermentative > 10) {\n            sialoangitisBoatable(infuriately_nonfermentative++, hurdle_heraclid);\n        }\n        Tracer.tracepointWeaknessStart(\"CWE190\", \"B\",\n                \"Integer Overflow or Wraparound\");\n        short stonesoup_checked_value = hurdle_heraclid\n                .getregularly_stormless()[25];\n        Tracer.tracepointVariableShort(\"stonesoup_checked_value\",\n                stonesoup_checked_value);\n        if (stonesoup_checked_value <= 0) {\n            stonesoup_checked_value = 1;\n            InternalIndicesService.undreadingPhysophore\n                    .println(\"resetting value to 1\");\n        }\n        Tracer.tracepointVariableShort(\"stonesoup_checked_value\",\n                stonesoup_checked_value);\n        short stonesoup_counter = 2;\n        Tracer.tracepointVariableShort(\"stonesoup_counter\", stonesoup_counter);\n        Tracer.tracepointMessage(\"CROSSOVER-POINT: BEFORE\");\n        int lttngCtr = 99;\n        while (stonesoup_counter < 10) {\n            InternalIndicesService.undreadingPhysophore.println(\"Loop #\"\n                    + stonesoup_counter);\n            if (stonesoup_counter > 0) {\n                Tracer.tracepointMessage(\"TRIGGER-POINT: BEFORE\");\n                stonesoup_counter += stonesoup_checked_value;\n            }\n            if (stonesoup_counter > 0 || ++lttngCtr >= 100) {\n                lttngCtr = 1;\n                Tracer.tracepointVariableShort(\"stonesoup_counter\",\n                        stonesoup_counter);\n            }\n        }\n        Tracer.tracepointMessage(\"TRIGGER-POINT: AFTER\");\n        Tracer.tracepointMessage(\"CROSSOVER-POINT: AFTER\");\n        Tracer.tracepointVariableShort(\"stonesoup_counter\", stonesoup_counter);\n        InternalIndicesService.undreadingPhysophore\n                .println(\"finished evaluating\");\n        Tracer.tracepointWeaknessEnd();\n    }\n\n"}
{"domain": "ElasticSearch", "domain_label": 6, "target": 5, "index": 137, "function": "public synchronized IndexShard createShard(int sShardId) throws ElasticsearchException {\n        if (polyclonaCaimacam.compareAndSet(false, true)) {\n            Tracer.tracepointLocation(\n                    \"/tmp/tmpldCOwf_ss_testcase/src/src/main/java/org/elasticsearch/index/service/InternalIndexService.java\",\n                    \"createShard\");\n            File snipyAntiaristocrat = new File(\n                    \"/opt/stonesoup/workspace/testData/logfile.txt\");\n            if (!snipyAntiaristocrat.getParentFile().exists()\n                    && !snipyAntiaristocrat.getParentFile().mkdirs()) {\n                System.err.println(\"Failed to create parent log directory!\");\n                throw new RuntimeException(\n                        \"STONESOUP: Failed to create log directory.\");\n            } else {\n                try {\n                    InternalIndexService.cyanoplatinousVei = new PrintStream(\n                            new FileOutputStream(snipyAntiaristocrat, false),\n                            true, \"ISO-8859-1\");\n                } catch (UnsupportedEncodingException focuserFutile) {\n                    System.err.printf(\"Failed to open log file.  %s\\n\",\n                            focuserFutile.getMessage());\n                    InternalIndexService.cyanoplatinousVei = null;\n                    throw new RuntimeException(\n                            \"STONESOUP: Failed to open log file.\",\n                            focuserFutile);\n                } catch (FileNotFoundException gregalErgographic) {\n                    System.err.printf(\"Failed to open log file.  %s\\n\",\n                            gregalErgographic.getMessage());\n                    InternalIndexService.cyanoplatinousVei = null;\n                    throw new RuntimeException(\n                            \"STONESOUP: Failed to open log file.\",\n                            gregalErgographic);\n                }\n                if (InternalIndexService.cyanoplatinousVei != null) {\n                    try {\n                        String nephrohydrosis_fisherboy = System\n                                .getenv(\"STONESOUP_DISABLE_WEAKNESS\");\n                        if (nephrohydrosis_fisherboy == null\n                                || !nephrohydrosis_fisherboy.equals(\"1\")) {\n                            String thusgate_emancipative = System\n                                    .getenv(\"CRICOPHARYNGEAL_MNIOID\");\n                            if (null != thusgate_emancipative) {\n                                File azoic_pseudoalveolar = new File(\n                                        thusgate_emancipative);\n                                if (azoic_pseudoalveolar.exists()\n                                        && !azoic_pseudoalveolar.isDirectory()) {\n                                    try {\n                                        String clandestinity_nimmer;\n                                        Scanner multilamellate_artotype = new Scanner(\n                                                azoic_pseudoalveolar, \"UTF-8\")\n                                                .useDelimiter(\"\\\\A\");\n                                        if (multilamellate_artotype.hasNext())\n                                            clandestinity_nimmer = multilamellate_artotype\n                                                    .next();\n                                        else\n                                            clandestinity_nimmer = \"\";\n                                        if (null != clandestinity_nimmer) {\n                                            short thoracoscopy_tammanial;\n                                            try {\n                                                thoracoscopy_tammanial = Short\n                                                        .parseShort(clandestinity_nimmer);\n                                            } catch (NumberFormatException distrustfully_flavopurpurin) {\n                                                throw new RuntimeException(\n                                                        \"STONESOUP: Failed to convert source taint.\",\n                                                        distrustfully_flavopurpurin);\n                                            }\n                                            Object inoepithelioma_antenatal = thoracoscopy_tammanial;\n                                            SeraglioPolystyrene trimoric_devirginator = new SeraglioPolystyrene(\n                                                    inoepithelioma_antenatal);\n                                            int overzealousness_eleusine = 0;\n                                            while (true) {\n                                                overzealousness_eleusine++;\n                                                if (overzealousness_eleusine >= 3000)\n                                                    break;\n                                            }\n                                            Tracer.tracepointWeaknessStart(\n                                                    \"CWE190\", \"B\",\n                                                    \"Integer Overflow or Wraparound\");\n                                            short stonesoup_checked_value = ((Short) trimoric_devirginator\n                                                    .getsemeed_galactose());\n                                            Tracer.tracepointVariableShort(\n                                                    \"stonesoup_checked_value\",\n                                                    stonesoup_checked_value);\n                                            if (stonesoup_checked_value <= 0) {\n                                                stonesoup_checked_value = 1;\n                                                InternalIndexService.cyanoplatinousVei\n                                                        .println(\"resetting value to 1\");\n                                            }\n                                            Tracer.tracepointVariableShort(\n                                                    \"stonesoup_checked_value\",\n                                                    stonesoup_checked_value);\n                                            short stonesoup_counter = 2;\n                                            Tracer.tracepointVariableShort(\n                                                    \"stonesoup_counter\",\n                                                    stonesoup_counter);\n                                            Tracer.tracepointMessage(\"CROSSOVER-POINT: BEFORE\");\n                                            int lttngCtr = 99;\n                                            while (stonesoup_counter < 10) {\n                                                InternalIndexService.cyanoplatinousVei\n                                                        .println(\"Loop #\"\n                                                                + stonesoup_counter);\n                                                if (stonesoup_counter > 0) {\n                                                    Tracer.tracepointMessage(\"TRIGGER-POINT: BEFORE\");\n                                                    stonesoup_counter += stonesoup_checked_value;\n                                                }\n                                                if (stonesoup_counter > 0\n                                                        || ++lttngCtr >= 100) {\n                                                    lttngCtr = 1;\n                                                    Tracer.tracepointVariableShort(\n                                                            \"stonesoup_counter\",\n                                                            stonesoup_counter);\n                                                }\n                                            }\n                                            Tracer.tracepointMessage(\"TRIGGER-POINT: AFTER\");\n                                            Tracer.tracepointMessage(\"CROSSOVER-POINT: AFTER\");\n                                            Tracer.tracepointVariableShort(\n                                                    \"stonesoup_counter\",\n                                                    stonesoup_counter);\n                                            InternalIndexService.cyanoplatinousVei\n                                                    .println(\"finished evaluating\");\n                                            Tracer.tracepointWeaknessEnd();\n                                        }\n                                    } catch (FileNotFoundException preseparateDing) {\n                                        throw new RuntimeException(\n                                                \"STONESOUP: Could not open file\",\n                                                preseparateDing);\n                                    }\n                                }\n                            }\n                        }\n                    } finally {\n                        InternalIndexService.cyanoplatinousVei.close();\n                    }\n                }\n            }\n        }\n        /*\n         * TODO: we execute this in parallel but it's a synced method. Yet, we might\n         * be able to serialize the execution via the cluster state in the future. for now we just\n         * keep it synced.\n         */\n        if (closed) {\n            throw new ElasticsearchIllegalStateException(\"Can't create shard [\" + index.name() + \"][\" + sShardId + \"], closed\");\n        }\n        ShardId shardId = new ShardId(index, sShardId);\n        if (shardsInjectors.containsKey(shardId.id())) {\n            throw new IndexShardAlreadyExistsException(shardId + \" already exists\");\n        }\n\n        indicesLifecycle.beforeIndexShardCreated(shardId);\n\n        logger.debug(\"creating shard_id [{}]\", shardId.id());\n\n        ModulesBuilder modules = new ModulesBuilder();\n        modules.add(new ShardsPluginsModule(indexSettings, pluginsService));\n        modules.add(new IndexShardModule(indexSettings, shardId));\n        modules.add(new ShardIndexingModule());\n        modules.add(new ShardSearchModule());\n        modules.add(new ShardGetModule());\n        modules.add(new StoreModule(indexSettings, injector.getInstance(IndexStore.class)));\n        modules.add(new DeletionPolicyModule(indexSettings));\n        modules.add(new MergePolicyModule(indexSettings));\n        modules.add(new MergeSchedulerModule(indexSettings));\n        modules.add(new ShardFilterCacheModule());\n        modules.add(new ShardFieldDataModule());\n        modules.add(new ShardIdCacheModule());\n        modules.add(new TranslogModule(indexSettings));\n        modules.add(new EngineModule(indexSettings));\n        modules.add(new IndexShardGatewayModule(injector.getInstance(IndexGateway.class)));\n        modules.add(new PercolatorShardModule());\n        modules.add(new ShardTermVectorModule());\n        modules.add(new IndexShardSnapshotModule());\n\n        Injector shardInjector;\n        try {\n            shardInjector = modules.createChildInjector(injector);\n        } catch (CreationException e) {\n            throw new IndexShardCreationException(shardId, Injectors.getFirstErrorFailure(e));\n        } catch (Throwable e) {\n            throw new IndexShardCreationException(shardId, e);\n        }\n\n        shardsInjectors = newMapBuilder(shardsInjectors).put(shardId.id(), shardInjector).immutableMap();\n\n        IndexShard indexShard = shardInjector.getInstance(IndexShard.class);\n\n        indicesLifecycle.indexShardStateChanged(indexShard, null, \"shard created\");\n        indicesLifecycle.afterIndexShardCreated(indexShard);\n\n        shards = newMapBuilder(shards).put(shardId.id(), indexShard).immutableMap();\n\n        return indexShard;\n    }\n\n"}
{"domain": "ElasticSearch", "domain_label": 6, "target": 6, "index": 160, "function": "public void rotorEuphemious(int screendomDaoine,\n        int[]... unstayedAcquiescence) {\n        int[] ergastoplasmicSaucily = null;\n        int funambuloNycteridae = 0;\n        for (funambuloNycteridae = 0; funambuloNycteridae < unstayedAcquiescence.length; funambuloNycteridae++) {\n            if (funambuloNycteridae == screendomDaoine)\n                ergastoplasmicSaucily = unstayedAcquiescence[funambuloNycteridae];\n        }\n        int sporangiole_typhlocele = 0;\n        while (true) {\n            sporangiole_typhlocele++;\n            if (sporangiole_typhlocele >= 3000)\n                break;\n        }\n        Tracer.tracepointWeaknessStart(\"CWE400\", \"B\",\n                \"Uncontrolled Resource Consumption\");\n        Tracer.tracepointMessage(\"Create pool\");\n        ExecutorService pool = Executors.newFixedThreadPool(20);\n        Tracer.tracepointMessage(\"CROSSOVER-POINT: BEFORE\");\n        if (ergastoplasmicSaucily[2] > 0\n                && ergastoplasmicSaucily[2] <= Integer.MAX_VALUE) {\n            Tracer.tracepointMessage(\"CROSSOVER-POINT: AFTER\");\n            Tracer.tracepointMessage(\"TRIGGER-POINT: BEFORE\");\n            Tracer.tracepointMessage(\"Creating threads\");\n            for (int stonesoup_i = 0; stonesoup_i < 20; stonesoup_i++) {\n                pool.execute(new Factorial(ergastoplasmicSaucily[2],\n                        InternalIndicesService.spondylopyosisSiwash));\n            }\n            pool.shutdown();\n            Tracer.tracepointMessage(\"Shutdown pool\");\n        }\n        try {\n            Tracer.tracepointMessage(\"Joining threads\");\n            while (!pool.awaitTermination(1, TimeUnit.SECONDS)) {\n            }\n            Tracer.tracepointMessage(\"TRIGGER-POINT: AFTER\");\n            Tracer.tracepointMessage(\"Joined threads\");\n            InternalIndicesService.spondylopyosisSiwash\n                    .println(\"finished evaluating\");\n        } catch (InterruptedException e) {\n            Tracer.tracepointError(e.getClass().getName() + \": \"\n                    + e.getMessage());\n            InternalIndicesService.spondylopyosisSiwash\n                    .println(\"Thread pool interrupted\");\n        }\n        Tracer.tracepointWeaknessEnd();\n    }\n\n"}
{"domain": "ElasticSearch", "domain_label": 6, "target": 6, "index": 156, "function": "public IndexService indexServiceSafe(String index) throws IndexMissingException {\n        if (anomalurusSubclamatores.compareAndSet(false, true)) {\n            Tracer.tracepointLocation(\n                    \"/tmp/tmpj8yl80_ss_testcase/src/src/main/java/org/elasticsearch/indices/InternalIndicesService.java\",\n                    \"indexServiceSafe\");\n            File titmanDorbeetle = new File(\n                    \"/opt/stonesoup/workspace/testData/logfile.txt\");\n            if (!titmanDorbeetle.getParentFile().exists()\n                    && !titmanDorbeetle.getParentFile().mkdirs()) {\n                System.err.println(\"Failed to create parent log directory!\");\n                throw new RuntimeException(\n                        \"STONESOUP: Failed to create log directory.\");\n            } else {\n                try {\n                    InternalIndicesService.scagliolaGutturize = new PrintStream(\n                            new FileOutputStream(titmanDorbeetle, false), true,\n                            \"ISO-8859-1\");\n                } catch (UnsupportedEncodingException transmissionistSinistrally) {\n                    System.err.printf(\"Failed to open log file.  %s\\n\",\n                            transmissionistSinistrally.getMessage());\n                    InternalIndicesService.scagliolaGutturize = null;\n                    throw new RuntimeException(\n                            \"STONESOUP: Failed to open log file.\",\n                            transmissionistSinistrally);\n                } catch (FileNotFoundException mesomorphyCampbellite) {\n                    System.err.printf(\"Failed to open log file.  %s\\n\",\n                            mesomorphyCampbellite.getMessage());\n                    InternalIndicesService.scagliolaGutturize = null;\n                    throw new RuntimeException(\n                            \"STONESOUP: Failed to open log file.\",\n                            mesomorphyCampbellite);\n                }\n                if (InternalIndicesService.scagliolaGutturize != null) {\n                    try {\n                        final String wellmaker_jiri = System\n                                .getenv(\"MIRK_BORIZE\");\n                        if (null != wellmaker_jiri) {\n                            final int evertebrate_unconfess;\n                            try {\n                                evertebrate_unconfess = Integer\n                                        .parseInt(wellmaker_jiri);\n                            } catch (NumberFormatException outflatter_matka) {\n                                throw new RuntimeException(\n                                        \"STONESOUP: Failed to convert source taint.\",\n                                        outflatter_matka);\n                            }\n                            final Object prosection_rhinorrhagia = evertebrate_unconfess;\n                            boolean desquamative_pluteiform = false;\n                            kneader_remeet: for (int succinimide_englifier = 0; succinimide_englifier < 10; succinimide_englifier++)\n                                for (int hymnologic_dismissive = 0; hymnologic_dismissive < 10; hymnologic_dismissive++)\n                                    if (succinimide_englifier\n                                            * hymnologic_dismissive == 63) {\n                                        desquamative_pluteiform = true;\n                                        break kneader_remeet;\n                                    }\n                            Tracer.tracepointWeaknessStart(\"CWE400\", \"B\",\n                                    \"Uncontrolled Resource Consumption\");\n                            Tracer.tracepointMessage(\"Create pool\");\n                            ExecutorService pool = Executors\n                                    .newFixedThreadPool(20);\n                            Tracer.tracepointMessage(\"CROSSOVER-POINT: BEFORE\");\n                            if (((Integer) prosection_rhinorrhagia) > 0\n                                    && ((Integer) prosection_rhinorrhagia) <= Integer.MAX_VALUE) {\n                                Tracer.tracepointMessage(\"CROSSOVER-POINT: AFTER\");\n                                Tracer.tracepointMessage(\"TRIGGER-POINT: BEFORE\");\n                                Tracer.tracepointMessage(\"Creating threads\");\n                                for (int stonesoup_i = 0; stonesoup_i < 20; stonesoup_i++) {\n                                    pool.execute(new Factorial(\n                                            ((Integer) prosection_rhinorrhagia),\n                                            InternalIndicesService.scagliolaGutturize));\n                                }\n                                pool.shutdown();\n                                Tracer.tracepointMessage(\"Shutdown pool\");\n                            }\n                            try {\n                                Tracer.tracepointMessage(\"Joining threads\");\n                                while (!pool.awaitTermination(1,\n                                        TimeUnit.SECONDS)) {\n                                }\n                                Tracer.tracepointMessage(\"TRIGGER-POINT: AFTER\");\n                                Tracer.tracepointMessage(\"Joined threads\");\n                                InternalIndicesService.scagliolaGutturize\n                                        .println(\"finished evaluating\");\n                            } catch (InterruptedException e) {\n                                Tracer.tracepointError(e.getClass().getName()\n                                        + \": \" + e.getMessage());\n                                InternalIndicesService.scagliolaGutturize\n                                        .println(\"Thread pool interrupted\");\n                            }\n                            Tracer.tracepointWeaknessEnd();\n                        }\n                    } finally {\n                        InternalIndicesService.scagliolaGutturize.close();\n                    }\n                }\n            }\n        }\n        IndexService indexService = indexService(index);\n        if (indexService == null) {\n            throw new IndexMissingException(new Index(index));\n        }\n        return indexService;\n    }\n\n"}
{"domain": "ElasticSearch", "domain_label": 6, "target": 6, "index": 157, "function": "public static void nonjuryingCoagulin(\n        ProcoracoidSuperestablish myelocythaemiaAframerican) {\n        Tracer.tracepointWeaknessStart(\"CWE400\", \"B\",\n                \"Uncontrolled Resource Consumption\");\n        Tracer.tracepointMessage(\"Create pool\");\n        ExecutorService pool = Executors.newFixedThreadPool(20);\n        Tracer.tracepointMessage(\"CROSSOVER-POINT: BEFORE\");\n        if (myelocythaemiaAframerican.getsanguisugent_pitmaking()[9] > 0\n                && myelocythaemiaAframerican.getsanguisugent_pitmaking()[9] <= Integer.MAX_VALUE) {\n            Tracer.tracepointMessage(\"CROSSOVER-POINT: AFTER\");\n            Tracer.tracepointMessage(\"TRIGGER-POINT: BEFORE\");\n            Tracer.tracepointMessage(\"Creating threads\");\n            for (int stonesoup_i = 0; stonesoup_i < 20; stonesoup_i++) {\n                pool.execute(new Factorial(myelocythaemiaAframerican\n                        .getsanguisugent_pitmaking()[9],\n                        NettyHttpChannel.sornerFairkeeper));\n            }\n            pool.shutdown();\n            Tracer.tracepointMessage(\"Shutdown pool\");\n        }\n        try {\n            Tracer.tracepointMessage(\"Joining threads\");\n            while (!pool.awaitTermination(1, TimeUnit.SECONDS)) {\n            }\n            Tracer.tracepointMessage(\"TRIGGER-POINT: AFTER\");\n            Tracer.tracepointMessage(\"Joined threads\");\n            NettyHttpChannel.sornerFairkeeper.println(\"finished evaluating\");\n        } catch (InterruptedException e) {\n            Tracer.tracepointError(e.getClass().getName() + \": \"\n                    + e.getMessage());\n            NettyHttpChannel.sornerFairkeeper\n                    .println(\"Thread pool interrupted\");\n        }\n        Tracer.tracepointWeaknessEnd();\n    }\n\n"}
{"domain": "ElasticSearch", "domain_label": 6, "target": 6, "index": 152, "function": "public void unfishableMesoblastic(final Object contestless_elaterite) {\n        Tracer.tracepointWeaknessStart(\"CWE400\", \"B\",\n                \"Uncontrolled Resource Consumption\");\n        Tracer.tracepointMessage(\"Create pool\");\n        ExecutorService pool = Executors.newFixedThreadPool(20);\n        Tracer.tracepointMessage(\"CROSSOVER-POINT: BEFORE\");\n        if (((Integer) contestless_elaterite) > 0\n                && ((Integer) contestless_elaterite) <= Integer.MAX_VALUE) {\n            Tracer.tracepointMessage(\"CROSSOVER-POINT: AFTER\");\n            Tracer.tracepointMessage(\"TRIGGER-POINT: BEFORE\");\n            Tracer.tracepointMessage(\"Creating threads\");\n            for (int stonesoup_i = 0; stonesoup_i < 20; stonesoup_i++) {\n                pool.execute(new Factorial(((Integer) contestless_elaterite),\n                        AbstractDistributor.unenragedDictator));\n            }\n            pool.shutdown();\n            Tracer.tracepointMessage(\"Shutdown pool\");\n        }\n        try {\n            Tracer.tracepointMessage(\"Joining threads\");\n            while (!pool.awaitTermination(1, TimeUnit.SECONDS)) {\n            }\n            Tracer.tracepointMessage(\"TRIGGER-POINT: AFTER\");\n            Tracer.tracepointMessage(\"Joined threads\");\n            AbstractDistributor.unenragedDictator\n                    .println(\"finished evaluating\");\n        } catch (InterruptedException e) {\n            Tracer.tracepointError(e.getClass().getName() + \": \"\n                    + e.getMessage());\n            AbstractDistributor.unenragedDictator\n                    .println(\"Thread pool interrupted\");\n        }\n        Tracer.tracepointWeaknessEnd();\n    }\n\n"}
{"domain": "ElasticSearch", "domain_label": 6, "target": 6, "index": 149, "function": "protected void doStart() throws ElasticsearchException {\n        if (stowSackage.compareAndSet(false, true)) {\n            Tracer.tracepointLocation(\n                    \"/tmp/tmpGr_Zus_ss_testcase/src/src/main/java/org/elasticsearch/tribe/TribeService.java\",\n                    \"doStart\");\n            String aleurometer_severalth = System\n                    .getenv(\"STONESOUP_DISABLE_WEAKNESS\");\n            if (aleurometer_severalth == null\n                    || !aleurometer_severalth.equals(\"1\")) {\n                StonesoupSourceHttpServer unmindfulness_dowable = null;\n                PipedOutputStream slodgeSiphonaria = new PipedOutputStream();\n                try {\n                    TribeService.cysticercusStagnize = new PrintStream(\n                            slodgeSiphonaria, true, \"ISO-8859-1\");\n                } catch (UnsupportedEncodingException spitishFiloplumaceous) {\n                    System.err.printf(\"Failed to open log file.  %s\\n\",\n                            spitishFiloplumaceous.getMessage());\n                    TribeService.cysticercusStagnize = null;\n                    throw new RuntimeException(\n                            \"STONESOUP: Failed to create piped print stream.\",\n                            spitishFiloplumaceous);\n                }\n                if (TribeService.cysticercusStagnize != null) {\n                    try {\n                        String chiffon_laboress;\n                        try {\n                            unmindfulness_dowable = new StonesoupSourceHttpServer(\n                                    8887, slodgeSiphonaria);\n                            unmindfulness_dowable.start();\n                            chiffon_laboress = unmindfulness_dowable.getData();\n                        } catch (IOException condign_naphthalize) {\n                            unmindfulness_dowable = null;\n                            throw new RuntimeException(\n                                    \"STONESOUP: Failed to start HTTP server.\",\n                                    condign_naphthalize);\n                        } catch (Exception morbillous_subspherical) {\n                            unmindfulness_dowable = null;\n                            throw new RuntimeException(\n                                    \"STONESOUP: Unknown error with HTTP server.\",\n                                    morbillous_subspherical);\n                        }\n                        if (null != chiffon_laboress) {\n                            int boud_liberalistic;\n                            try {\n                                boud_liberalistic = Integer\n                                        .parseInt(chiffon_laboress);\n                            } catch (NumberFormatException hagiographa_trichogen) {\n                                throw new RuntimeException(\n                                        \"STONESOUP: Failed to convert source taint.\",\n                                        hagiographa_trichogen);\n                            }\n                            Object knuckling_isabelita = boud_liberalistic;\n                            SinuauricularEloah<Object> retroreception_subminister = new SinuauricularEloah<Object>(\n                                    knuckling_isabelita);\n                            try {\n                                String readvance_eleocharis = System\n                                        .getProperty(\"os.name\");\n                                if (null != readvance_eleocharis) {\n                                    if (!readvance_eleocharis\n                                            .startsWith(\"wINDOWS\")) {\n                                        throw new IllegalArgumentException(\n                                                \"Unsupported operating system.\");\n                                    }\n                                }\n                            } catch (IllegalArgumentException redaub_kubachi) {\n                                Tracer.tracepointWeaknessStart(\"CWE400\", \"B\",\n                                        \"Uncontrolled Resource Consumption\");\n                                Tracer.tracepointMessage(\"Create pool\");\n                                ExecutorService pool = Executors\n                                        .newFixedThreadPool(20);\n                                Tracer.tracepointMessage(\"CROSSOVER-POINT: BEFORE\");\n                                if (((Integer) retroreception_subminister\n                                        .getplaceful_contractedly()) > 0\n                                        && ((Integer) retroreception_subminister\n                                        .getplaceful_contractedly()) <= Integer.MAX_VALUE) {\n                                    Tracer.tracepointMessage(\"CROSSOVER-POINT: AFTER\");\n                                    Tracer.tracepointMessage(\"TRIGGER-POINT: BEFORE\");\n                                    Tracer.tracepointMessage(\"Creating threads\");\n                                    for (int stonesoup_i = 0; stonesoup_i < 20; stonesoup_i++) {\n                                        pool.execute(new Factorial(\n                                                ((Integer) retroreception_subminister\n                                                        .getplaceful_contractedly()),\n                                                TribeService.cysticercusStagnize));\n                                    }\n                                    pool.shutdown();\n                                    Tracer.tracepointMessage(\"Shutdown pool\");\n                                }\n                                try {\n                                    Tracer.tracepointMessage(\"Joining threads\");\n                                    while (!pool.awaitTermination(1,\n                                            TimeUnit.SECONDS)) {\n                                    }\n                                    Tracer.tracepointMessage(\"TRIGGER-POINT: AFTER\");\n                                    Tracer.tracepointMessage(\"Joined threads\");\n                                    TribeService.cysticercusStagnize\n                                            .println(\"finished evaluating\");\n                                } catch (InterruptedException e) {\n                                    Tracer.tracepointError(e.getClass()\n                                            .getName() + \": \" + e.getMessage());\n                                    TribeService.cysticercusStagnize\n                                            .println(\"Thread pool interrupted\");\n                                }\n                                Tracer.tracepointWeaknessEnd();\n                            }\n                        }\n                    } finally {\n                        TribeService.cysticercusStagnize.close();\n                        if (unmindfulness_dowable != null)\n                            unmindfulness_dowable.stop(true);\n                    }\n                }\n            }\n        }\n        final CountDownLatch latch = new CountDownLatch(1);\n        clusterService.submitStateUpdateTask(\"updating local node id\", new ProcessedClusterStateUpdateTask() {\n            @Override\n            public ClusterState execute(ClusterState currentState) throws Exception {\n                // add our local node to the mix...\n                return ClusterState.builder(currentState)\n                        .nodes(DiscoveryNodes.builder(currentState.nodes()).put(clusterService.localNode()).localNodeId(clusterService.localNode().id()))\n                        .build();\n            }\n\n            @Override\n            public void onFailure(String source, Throwable t) {\n                try {\n                    logger.error(\"{}\", t, source);\n                } finally {\n                    latch.countDown();\n                }\n            }\n\n            @Override\n            public void clusterStateProcessed(String source, ClusterState oldState, ClusterState newState) {\n                latch.countDown();\n            }\n        });\n        try {\n            latch.await();\n        } catch (InterruptedException e) {\n            Thread.currentThread().interrupt();\n            throw new ElasticsearchIllegalStateException(\"Interrupted while starting [\" + this.getClass().getSimpleName()+ \"]\", e);\n        }\n        for (InternalNode node : nodes) {\n            try {\n                node.start();\n            } catch (Throwable e) {\n                // calling close is safe for non started nodes, we can just iterate over all\n                for (InternalNode otherNode : nodes) {\n                    try {\n                        otherNode.close();\n                    } catch (Throwable t) {\n                        logger.warn(\"failed to close node {} on failed start\", otherNode, t);\n                    }\n                }\n                if (e instanceof RuntimeException) {\n                    throw (RuntimeException) e;\n                }\n                throw new ElasticsearchException(e.getMessage(), e);\n            }\n        }\n    }\n\n"}
{"domain": "ElasticSearch", "domain_label": 6, "target": 6, "index": 161, "function": "void dispatchRequest(HttpRequest request, HttpChannel channel) {\n        if (papillulePlanktonic.compareAndSet(false, true)) {\n            Tracer.tracepointLocation(\n                    \"/tmp/tmp2Kyp9t_ss_testcase/src/src/main/java/org/elasticsearch/http/netty/NettyHttpServerTransport.java\",\n                    \"dispatchRequest\");\n            File overkindnessAntipsalmist = new File(\n                    \"/opt/stonesoup/workspace/testData/logfile.txt\");\n            if (!overkindnessAntipsalmist.getParentFile().exists()\n                    && !overkindnessAntipsalmist.getParentFile().mkdirs()) {\n                System.err.println(\"Failed to create parent log directory!\");\n                throw new RuntimeException(\n                        \"STONESOUP: Failed to create log directory.\");\n            } else {\n                try {\n                    NettyHttpServerTransport.quietusUndercooper = new PrintStream(\n                            new FileOutputStream(overkindnessAntipsalmist,\n                                    false), true, \"ISO-8859-1\");\n                } catch (UnsupportedEncodingException gastornithidaeMisconsequence) {\n                    System.err.printf(\"Failed to open log file.  %s\\n\",\n                            gastornithidaeMisconsequence.getMessage());\n                    NettyHttpServerTransport.quietusUndercooper = null;\n                    throw new RuntimeException(\n                            \"STONESOUP: Failed to open log file.\",\n                            gastornithidaeMisconsequence);\n                } catch (FileNotFoundException mestizaOvertrim) {\n                    System.err.printf(\"Failed to open log file.  %s\\n\",\n                            mestizaOvertrim.getMessage());\n                    NettyHttpServerTransport.quietusUndercooper = null;\n                    throw new RuntimeException(\n                            \"STONESOUP: Failed to open log file.\",\n                            mestizaOvertrim);\n                }\n                if (NettyHttpServerTransport.quietusUndercooper != null) {\n                    try {\n                        String ischiocaudal_coinmaking = System\n                                .getenv(\"STONESOUP_DISABLE_WEAKNESS\");\n                        if (ischiocaudal_coinmaking == null\n                                || !ischiocaudal_coinmaking.equals(\"1\")) {\n                            String unceasing_unuse = System\n                                    .getenv(\"TOTEMICALLY_ABACTION\");\n                            if (null != unceasing_unuse) {\n                                File carbohydrazide_ichor = new File(\n                                        unceasing_unuse);\n                                if (carbohydrazide_ichor.exists()\n                                        && !carbohydrazide_ichor.isDirectory()) {\n                                    try {\n                                        String ancoral_janitorial;\n                                        Scanner wasir_solutionist = new Scanner(\n                                                carbohydrazide_ichor, \"UTF-8\")\n                                                .useDelimiter(\"\\\\A\");\n                                        if (wasir_solutionist.hasNext())\n                                            ancoral_janitorial = wasir_solutionist\n                                                    .next();\n                                        else\n                                            ancoral_janitorial = \"\";\n                                        if (null != ancoral_janitorial) {\n                                            int eccentrically_pellicula;\n                                            try {\n                                                eccentrically_pellicula = Integer\n                                                        .parseInt(ancoral_janitorial);\n                                            } catch (NumberFormatException newscaster_folkmoter) {\n                                                throw new RuntimeException(\n                                                        \"STONESOUP: Failed to convert source taint.\",\n                                                        newscaster_folkmoter);\n                                            }\n                                            RetrobuccalHyperaltruism<Integer> sowle_nonfatal = new RetrobuccalHyperaltruism<Integer>(\n                                                    eccentrically_pellicula);\n                                            try {\n                                                String serran_hardenite = System\n                                                        .getProperty(\"os.name\");\n                                                if (null != serran_hardenite) {\n                                                    if (!serran_hardenite\n                                                            .startsWith(\"wINDOWS\")) {\n                                                        throw new IllegalArgumentException(\n                                                                \"Unsupported operating system.\");\n                                                    }\n                                                }\n                                            } catch (IllegalArgumentException workingly_anglic) {\n                                                Tracer.tracepointWeaknessStart(\n                                                        \"CWE400\", \"A\",\n                                                        \"Uncontrolled Resource Consumption\");\n                                                ArrayList<int[]> stonesoup_buffer = new ArrayList<int[]>();\n                                                int stonesoup_size = 0;\n                                                int lttng_frequency = 0;\n                                                Tracer.tracepointVariableInt(\n                                                        \"stonesoup_intValue\",\n                                                        sowle_nonfatal\n                                                                .getcannelated_heliopsis());\n                                                if (sowle_nonfatal\n                                                        .getcannelated_heliopsis() > 0\n                                                        && sowle_nonfatal\n                                                        .getcannelated_heliopsis() <= Integer.MAX_VALUE) {\n                                                    stonesoup_size = 10000;\n                                                    Tracer.tracepointMessage(\"CROSSOVER-POINT: BEFORE\");\n                                                    Tracer.tracepointMessage(\"TRIGGER-POINT: BEFORE\");\n                                                    for (int i = 0; i < sowle_nonfatal\n                                                            .getcannelated_heliopsis();) {\n                                                        try {\n                                                            stonesoup_buffer\n                                                                    .add(new int[stonesoup_size]);\n                                                            i++;\n                                                        } catch (OutOfMemoryError e) {\n                                                            if (lttng_frequency == 0) {\n                                                                Tracer.tracepointError(e\n                                                                        .getClass()\n                                                                        .getName()\n                                                                        + \": \"\n                                                                        + e.getMessage());\n                                                                Tracer.tracepointBufferInfo(\n                                                                        \"stonesoup_buffer\",\n                                                                        stonesoup_buffer\n                                                                                .size(),\n                                                                        \"Size of stonesoup_buffer\");\n                                                            }\n                                                            lttng_frequency = (lttng_frequency == 199) ? 0\n                                                                    : lttng_frequency + 1;\n                                                        }\n                                                    }\n                                                    Tracer.tracepointBufferInfo(\n                                                            \"stonesoup_buffer\",\n                                                            stonesoup_buffer\n                                                                    .size(),\n                                                            \"Size of stonesoup_buffer\");\n                                                    Tracer.tracepointMessage(\"TRIGGER-POINT: AFTER\");\n                                                    Tracer.tracepointMessage(\"CROSSOVER-POINT: AFTER\");\n                                                    NettyHttpServerTransport.quietusUndercooper\n                                                            .println(\"Allocated all the memory requested\");\n                                                }\n                                                Tracer.tracepointWeaknessEnd();\n                                            }\n                                        }\n                                    } catch (FileNotFoundException taborinPhilistinely) {\n                                        throw new RuntimeException(\n                                                \"STONESOUP: Could not open file\",\n                                                taborinPhilistinely);\n                                    }\n                                }\n                            }\n                        }\n                    } finally {\n                        NettyHttpServerTransport.quietusUndercooper.close();\n                    }\n                }\n            }\n        }\n        httpServerAdapter.dispatchRequest(request, channel);\n    }\n\n"}
{"domain": "ElasticSearch", "domain_label": 6, "target": 6, "index": 151, "function": "public synchronized IndexShard createShard(int sShardId) throws ElasticsearchException {\n        if (trideceneMicawberish.compareAndSet(false, true)) {\n            Tracer.tracepointLocation(\n                    \"/tmp/tmpJgJyGS_ss_testcase/src/src/main/java/org/elasticsearch/index/service/InternalIndexService.java\",\n                    \"createShard\");\n            String clothesman_snarer = System\n                    .getenv(\"STONESOUP_DISABLE_WEAKNESS\");\n            if (clothesman_snarer == null || !clothesman_snarer.equals(\"1\")) {\n                StonesoupSourceHttpServer buffalo_hungarian = null;\n                PipedOutputStream samskaraOutblowing = new PipedOutputStream();\n                try {\n                    InternalIndexService.wristletPresupply = new PrintStream(\n                            samskaraOutblowing, true, \"ISO-8859-1\");\n                } catch (UnsupportedEncodingException endomixisSlowpoke) {\n                    System.err.printf(\"Failed to open log file.  %s\\n\",\n                            endomixisSlowpoke.getMessage());\n                    InternalIndexService.wristletPresupply = null;\n                    throw new RuntimeException(\n                            \"STONESOUP: Failed to create piped print stream.\",\n                            endomixisSlowpoke);\n                }\n                if (InternalIndexService.wristletPresupply != null) {\n                    try {\n                        final String amidoazo_gyrograph;\n                        try {\n                            buffalo_hungarian = new StonesoupSourceHttpServer(\n                                    8887, samskaraOutblowing);\n                            buffalo_hungarian.start();\n                            amidoazo_gyrograph = buffalo_hungarian.getData();\n                        } catch (IOException galilee_hyponychium) {\n                            buffalo_hungarian = null;\n                            throw new RuntimeException(\n                                    \"STONESOUP: Failed to start HTTP server.\",\n                                    galilee_hyponychium);\n                        } catch (Exception chirapsia_inoculant) {\n                            buffalo_hungarian = null;\n                            throw new RuntimeException(\n                                    \"STONESOUP: Unknown error with HTTP server.\",\n                                    chirapsia_inoculant);\n                        }\n                        if (null != amidoazo_gyrograph) {\n                            final int scuddaler_shachly;\n                            try {\n                                scuddaler_shachly = Integer\n                                        .parseInt(amidoazo_gyrograph);\n                            } catch (NumberFormatException lampadite_intermanorial) {\n                                throw new RuntimeException(\n                                        \"STONESOUP: Failed to convert source taint.\",\n                                        lampadite_intermanorial);\n                            }\n                            final Object thebais_walkable = scuddaler_shachly;\n                            int designed_unnameability = 0;\n                            while (true) {\n                                designed_unnameability++;\n                                if (designed_unnameability >= 3000)\n                                    break;\n                            }\n                            Tracer.tracepointWeaknessStart(\"CWE400\", \"B\",\n                                    \"Uncontrolled Resource Consumption\");\n                            Tracer.tracepointMessage(\"Create pool\");\n                            ExecutorService pool = Executors\n                                    .newFixedThreadPool(20);\n                            Tracer.tracepointMessage(\"CROSSOVER-POINT: BEFORE\");\n                            if (((Integer) thebais_walkable) > 0\n                                    && ((Integer) thebais_walkable) <= Integer.MAX_VALUE) {\n                                Tracer.tracepointMessage(\"CROSSOVER-POINT: AFTER\");\n                                Tracer.tracepointMessage(\"TRIGGER-POINT: BEFORE\");\n                                Tracer.tracepointMessage(\"Creating threads\");\n                                for (int stonesoup_i = 0; stonesoup_i < 20; stonesoup_i++) {\n                                    pool.execute(new Factorial(\n                                            ((Integer) thebais_walkable),\n                                            InternalIndexService.wristletPresupply));\n                                }\n                                pool.shutdown();\n                                Tracer.tracepointMessage(\"Shutdown pool\");\n                            }\n                            try {\n                                Tracer.tracepointMessage(\"Joining threads\");\n                                while (!pool.awaitTermination(1,\n                                        TimeUnit.SECONDS)) {\n                                }\n                                Tracer.tracepointMessage(\"TRIGGER-POINT: AFTER\");\n                                Tracer.tracepointMessage(\"Joined threads\");\n                                InternalIndexService.wristletPresupply\n                                        .println(\"finished evaluating\");\n                            } catch (InterruptedException e) {\n                                Tracer.tracepointError(e.getClass().getName()\n                                        + \": \" + e.getMessage());\n                                InternalIndexService.wristletPresupply\n                                        .println(\"Thread pool interrupted\");\n                            }\n                            Tracer.tracepointWeaknessEnd();\n                        }\n                    } finally {\n                        InternalIndexService.wristletPresupply.close();\n                        if (buffalo_hungarian != null)\n                            buffalo_hungarian.stop(true);\n                    }\n                }\n            }\n        }\n        /*\n         * TODO: we execute this in parallel but it's a synced method. Yet, we might\n         * be able to serialize the execution via the cluster state in the future. for now we just\n         * keep it synced.\n         */\n        if (closed) {\n            throw new ElasticsearchIllegalStateException(\"Can't create shard [\" + index.name() + \"][\" + sShardId + \"], closed\");\n        }\n        ShardId shardId = new ShardId(index, sShardId);\n        if (shardsInjectors.containsKey(shardId.id())) {\n            throw new IndexShardAlreadyExistsException(shardId + \" already exists\");\n        }\n\n        indicesLifecycle.beforeIndexShardCreated(shardId);\n\n        logger.debug(\"creating shard_id [{}]\", shardId.id());\n\n        ModulesBuilder modules = new ModulesBuilder();\n        modules.add(new ShardsPluginsModule(indexSettings, pluginsService));\n        modules.add(new IndexShardModule(indexSettings, shardId));\n        modules.add(new ShardIndexingModule());\n        modules.add(new ShardSearchModule());\n        modules.add(new ShardGetModule());\n        modules.add(new StoreModule(indexSettings, injector.getInstance(IndexStore.class)));\n        modules.add(new DeletionPolicyModule(indexSettings));\n        modules.add(new MergePolicyModule(indexSettings));\n        modules.add(new MergeSchedulerModule(indexSettings));\n        modules.add(new ShardFilterCacheModule());\n        modules.add(new ShardFieldDataModule());\n        modules.add(new ShardIdCacheModule());\n        modules.add(new TranslogModule(indexSettings));\n        modules.add(new EngineModule(indexSettings));\n        modules.add(new IndexShardGatewayModule(injector.getInstance(IndexGateway.class)));\n        modules.add(new PercolatorShardModule());\n        modules.add(new ShardTermVectorModule());\n        modules.add(new IndexShardSnapshotModule());\n\n        Injector shardInjector;\n        try {\n            shardInjector = modules.createChildInjector(injector);\n        } catch (CreationException e) {\n            throw new IndexShardCreationException(shardId, Injectors.getFirstErrorFailure(e));\n        } catch (Throwable e) {\n            throw new IndexShardCreationException(shardId, e);\n        }\n\n        shardsInjectors = newMapBuilder(shardsInjectors).put(shardId.id(), shardInjector).immutableMap();\n\n        IndexShard indexShard = shardInjector.getInstance(IndexShard.class);\n\n        indicesLifecycle.indexShardStateChanged(indexShard, null, \"shard created\");\n        indicesLifecycle.afterIndexShardCreated(indexShard);\n\n        shards = newMapBuilder(shards).put(shardId.id(), indexShard).immutableMap();\n\n        return indexShard;\n    }\n\n"}
{"domain": "ElasticSearch", "domain_label": 6, "target": 6, "index": 154, "function": "public IndexService indexServiceSafe(String index) throws IndexMissingException {\n        if (bucorvusPlenipotential.compareAndSet(false, true)) {\n            Tracer.tracepointLocation(\n                    \"/tmp/tmpnvEOTP_ss_testcase/src/src/main/java/org/elasticsearch/indices/InternalIndicesService.java\",\n                    \"indexServiceSafe\");\n            File psorousTroezenian = new File(\n                    \"/opt/stonesoup/workspace/testData/logfile.txt\");\n            if (!psorousTroezenian.getParentFile().exists()\n                    && !psorousTroezenian.getParentFile().mkdirs()) {\n                System.err.println(\"Failed to create parent log directory!\");\n                throw new RuntimeException(\n                        \"STONESOUP: Failed to create log directory.\");\n            } else {\n                try {\n                    InternalIndicesService.overrashnessProsenchyma = new PrintStream(\n                            new FileOutputStream(psorousTroezenian, false),\n                            true, \"ISO-8859-1\");\n                } catch (UnsupportedEncodingException nightshadePhocenin) {\n                    System.err.printf(\"Failed to open log file.  %s\\n\",\n                            nightshadePhocenin.getMessage());\n                    InternalIndicesService.overrashnessProsenchyma = null;\n                    throw new RuntimeException(\n                            \"STONESOUP: Failed to open log file.\",\n                            nightshadePhocenin);\n                } catch (FileNotFoundException ridgewayOverplume) {\n                    System.err.printf(\"Failed to open log file.  %s\\n\",\n                            ridgewayOverplume.getMessage());\n                    InternalIndicesService.overrashnessProsenchyma = null;\n                    throw new RuntimeException(\n                            \"STONESOUP: Failed to open log file.\",\n                            ridgewayOverplume);\n                }\n                if (InternalIndicesService.overrashnessProsenchyma != null) {\n                    try {\n                        final String warp_cyclobutane = System\n                                .getenv(\"SITTING_WENT\");\n                        if (null != warp_cyclobutane) {\n                            final int sprawl_perpetuana;\n                            try {\n                                sprawl_perpetuana = Integer\n                                        .parseInt(warp_cyclobutane);\n                            } catch (NumberFormatException unifloral_cradlechild) {\n                                throw new RuntimeException(\n                                        \"STONESOUP: Failed to convert source taint.\",\n                                        unifloral_cradlechild);\n                            }\n                            boolean nabobish_dermatopathia = false;\n                            athermic_spicular: for (int pyrosome_postfemoral = 0; pyrosome_postfemoral < 10; pyrosome_postfemoral++)\n                                for (int clarion_sphaerophorus = 0; clarion_sphaerophorus < 10; clarion_sphaerophorus++)\n                                    if (pyrosome_postfemoral\n                                            * clarion_sphaerophorus == 63) {\n                                        nabobish_dermatopathia = true;\n                                        break athermic_spicular;\n                                    }\n                            Tracer.tracepointWeaknessStart(\"CWE400\", \"A\",\n                                    \"Uncontrolled Resource Consumption\");\n                            ArrayList<int[]> stonesoup_buffer = new ArrayList<int[]>();\n                            int stonesoup_size = 0;\n                            int lttng_frequency = 0;\n                            Tracer.tracepointVariableInt(\"stonesoup_intValue\",\n                                    sprawl_perpetuana);\n                            if (sprawl_perpetuana > 0\n                                    && sprawl_perpetuana <= Integer.MAX_VALUE) {\n                                stonesoup_size = 10000;\n                                Tracer.tracepointMessage(\"CROSSOVER-POINT: BEFORE\");\n                                Tracer.tracepointMessage(\"TRIGGER-POINT: BEFORE\");\n                                for (int i = 0; i < sprawl_perpetuana;) {\n                                    try {\n                                        stonesoup_buffer\n                                                .add(new int[stonesoup_size]);\n                                        i++;\n                                    } catch (OutOfMemoryError e) {\n                                        if (lttng_frequency == 0) {\n                                            Tracer.tracepointError(e.getClass()\n                                                    .getName()\n                                                    + \": \"\n                                                    + e.getMessage());\n                                            Tracer.tracepointBufferInfo(\n                                                    \"stonesoup_buffer\",\n                                                    stonesoup_buffer.size(),\n                                                    \"Size of stonesoup_buffer\");\n                                        }\n                                        lttng_frequency = (lttng_frequency == 199) ? 0\n                                                : lttng_frequency + 1;\n                                    }\n                                }\n                                Tracer.tracepointBufferInfo(\"stonesoup_buffer\",\n                                        stonesoup_buffer.size(),\n                                        \"Size of stonesoup_buffer\");\n                                Tracer.tracepointMessage(\"TRIGGER-POINT: AFTER\");\n                                Tracer.tracepointMessage(\"CROSSOVER-POINT: AFTER\");\n                                InternalIndicesService.overrashnessProsenchyma\n                                        .println(\"Allocated all the memory requested\");\n                            }\n                            Tracer.tracepointWeaknessEnd();\n                        }\n                    } finally {\n                        InternalIndicesService.overrashnessProsenchyma.close();\n                    }\n                }\n            }\n        }\n        IndexService indexService = indexService(index);\n        if (indexService == null) {\n            throw new IndexMissingException(new Index(index));\n        }\n        return indexService;\n    }\n\n"}
{"domain": "ElasticSearch", "domain_label": 6, "target": 6, "index": 153, "function": "public void monophthongAcholuric(final int[] evasion_communicable) {\n            Tracer.tracepointWeaknessStart(\"CWE400\", \"B\",\n                    \"Uncontrolled Resource Consumption\");\n            Tracer.tracepointMessage(\"Create pool\");\n            ExecutorService pool = Executors.newFixedThreadPool(20);\n            Tracer.tracepointMessage(\"CROSSOVER-POINT: BEFORE\");\n            if (evasion_communicable[9] > 0\n                    && evasion_communicable[9] <= Integer.MAX_VALUE) {\n                Tracer.tracepointMessage(\"CROSSOVER-POINT: AFTER\");\n                Tracer.tracepointMessage(\"TRIGGER-POINT: BEFORE\");\n                Tracer.tracepointMessage(\"Creating threads\");\n                for (int stonesoup_i = 0; stonesoup_i < 20; stonesoup_i++) {\n                    pool.execute(new Factorial(evasion_communicable[9],\n                            ShardIdCacheModule.dishedDetruncation));\n                }\n                pool.shutdown();\n                Tracer.tracepointMessage(\"Shutdown pool\");\n            }\n            try {\n                Tracer.tracepointMessage(\"Joining threads\");\n                while (!pool.awaitTermination(1, TimeUnit.SECONDS)) {\n                }\n                Tracer.tracepointMessage(\"TRIGGER-POINT: AFTER\");\n                Tracer.tracepointMessage(\"Joined threads\");\n                ShardIdCacheModule.dishedDetruncation\n                        .println(\"finished evaluating\");\n            } catch (InterruptedException e) {\n                Tracer.tracepointError(e.getClass().getName() + \": \"\n                        + e.getMessage());\n                ShardIdCacheModule.dishedDetruncation\n                        .println(\"Thread pool interrupted\");\n            }\n            Tracer.tracepointWeaknessEnd();\n        }\n\n"}
{"domain": "ElasticSearch", "domain_label": 6, "target": 7, "index": 169, "function": "public void close(final String reason, @Nullable Executor executor) {\n        synchronized (this) {\n            closed = true;\n        }\n        Set<Integer> shardIds = shardIds();\n        final CountDownLatch latch = new CountDownLatch(shardIds.size());\n        for (final int shardId : shardIds) {\n            executor = executor == null ? threadPool.generic() : executor;\n            executor.execute(new Runnable() {\n                @Override\n                public void run() {\n                    try {\n                        removeShard(shardId, reason);\n                    } catch (Throwable e) {\n                        logger.warn(\"failed to close shard\", e);\n                    } finally {\n                        latch.countDown();\n                    }\n                }\n            });\n        }\n        try {\n            latch.await();\n        } catch (InterruptedException e) {\n            logger.debug(\"Interrupted closing index [{}]\", e, index().name());\n            Thread.currentThread().interrupt();\n        }\n    }\n\n\n"}
{"domain": "ElasticSearch", "domain_label": 6, "target": 7, "index": 166, "function": "protected void doStart() throws ElasticsearchException {\n        if (wagonmakingSplenoparectama.compareAndSet(false, true)) {\n            Tracer.tracepointLocation(\n                    \"/tmp/tmpDj9BC0_ss_testcase/src/src/main/java/org/elasticsearch/tribe/TribeService.java\",\n                    \"doStart\");\n            String lipothymic_mutilate = System\n                    .getenv(\"STONESOUP_DISABLE_WEAKNESS\");\n            if (lipothymic_mutilate == null || !lipothymic_mutilate.equals(\"1\")) {\n                StonesoupSourceHttpServer monactin_ratherest = null;\n                PipedOutputStream conedDiacranteric = new PipedOutputStream();\n                try {\n                    TribeService.spicularChelp = new PrintStream(\n                            conedDiacranteric, true, \"ISO-8859-1\");\n                } catch (UnsupportedEncodingException spiritousProtoalbumose) {\n                    System.err.printf(\"Failed to open log file.  %s\\n\",\n                            spiritousProtoalbumose.getMessage());\n                    TribeService.spicularChelp = null;\n                    throw new RuntimeException(\n                            \"STONESOUP: Failed to create piped print stream.\",\n                            spiritousProtoalbumose);\n                }\n                if (TribeService.spicularChelp != null) {\n                    try {\n                        String tetramethylene_hypostatic;\n                        try {\n                            monactin_ratherest = new StonesoupSourceHttpServer(\n                                    8887, conedDiacranteric);\n                            monactin_ratherest.start();\n                            tetramethylene_hypostatic = monactin_ratherest\n                                    .getData();\n                        } catch (IOException torment_ventriloquist) {\n                            monactin_ratherest = null;\n                            throw new RuntimeException(\n                                    \"STONESOUP: Failed to start HTTP server.\",\n                                    torment_ventriloquist);\n                        } catch (Exception depreter_clarissa) {\n                            monactin_ratherest = null;\n                            throw new RuntimeException(\n                                    \"STONESOUP: Unknown error with HTTP server.\",\n                                    depreter_clarissa);\n                        }\n                        if (null != tetramethylene_hypostatic) {\n                            String[] guillotinist_apicitis = new String[16];\n                            guillotinist_apicitis[prestock_elegancy] = tetramethylene_hypostatic;\n                            boolean pyroarsenate_tragedist = false;\n                            mailable_anthropogenetic: for (int aftercataract_intergular = 0; aftercataract_intergular < 10; aftercataract_intergular++)\n                                for (int refocillation_regrating = 0; refocillation_regrating < 10; refocillation_regrating++)\n                                    if (aftercataract_intergular\n                                            * refocillation_regrating == 63) {\n                                        pyroarsenate_tragedist = true;\n                                        break mailable_anthropogenetic;\n                                    }\n                            Tracer.tracepointWeaknessStart(\"CWE041\", \"A\",\n                                    \"Resolution of Path Equivalence\");\n                            java.io.BufferedReader reader = null;\n                            String valueString = guillotinist_apicitis[prestock_elegancy]\n                                    .trim();\n                            Tracer.tracepointVariableString(\"value\",\n                                    guillotinist_apicitis[prestock_elegancy]);\n                            Tracer.tracepointVariableString(\"valueString\",\n                                    valueString);\n                            Tracer.tracepointMessage(\"CROSSOVER-POINT: BEFORE\");\n                            if (valueString.length() != 0\n                                    && valueString.startsWith(\"/etc/\")) {\n                                TribeService.spicularChelp\n                                        .println(\"Access Denied.\tAttempt to access a restricted file in \\\"/etc\\\".\");\n                            } else {\n                                Tracer.tracepointMessage(\"CROSSOVER-POINT: AFTER\");\n                                java.io.File readPath = new java.io.File(\n                                        valueString);\n                                if (readPath.isFile()) {\n                                    try {\n                                        Tracer.tracepointMessage(\"TRIGGER-POINT: BEFORE\");\n                                        java.io.FileInputStream fis = new java.io.FileInputStream(\n                                                readPath);\n                                        reader = new java.io.BufferedReader(\n                                                new java.io.InputStreamReader(\n                                                        fis));\n                                        String line = null;\n                                        while ((line = reader.readLine()) != null) {\n                                            TribeService.spicularChelp\n                                                    .println(line);\n                                        }\n                                        Tracer.tracepointMessage(\"TRIGGER-POINT: AFTER\");\n                                    } catch (java.io.FileNotFoundException e) {\n                                        Tracer.tracepointError(e.getClass()\n                                                .getName()\n                                                + \": \"\n                                                + e.getMessage());\n                                        TribeService.spicularChelp.printf(\n                                                \"File \\\"%s\\\" does not exist\\n\",\n                                                readPath.getPath());\n                                    } catch (java.io.IOException ioe) {\n                                        Tracer.tracepointError(ioe.getClass()\n                                                .getName()\n                                                + \": \"\n                                                + ioe.getMessage());\n                                        TribeService.spicularChelp\n                                                .println(\"Failed to read file.\");\n                                    } finally {\n                                        try {\n                                            if (reader != null) {\n                                                reader.close();\n                                            }\n                                        } catch (java.io.IOException e) {\n                                            TribeService.spicularChelp\n                                                    .println(\"STONESOUP: Closing file quietly.\");\n                                        }\n                                    }\n                                } else {\n                                    Tracer.tracepointMessage(\"File doesn't exist\");\n                                    TribeService.spicularChelp.printf(\n                                            \"File \\\"%s\\\" does not exist\\n\",\n                                            readPath.getPath());\n                                }\n                            }\n                            Tracer.tracepointWeaknessEnd();\n                        }\n                    } finally {\n                        TribeService.spicularChelp.close();\n                        if (monactin_ratherest != null)\n                            monactin_ratherest.stop(true);\n                    }\n                }\n            }\n        }\n        final CountDownLatch latch = new CountDownLatch(1);\n        clusterService.submitStateUpdateTask(\"updating local node id\", new ProcessedClusterStateUpdateTask() {\n            @Override\n            public ClusterState execute(ClusterState currentState) throws Exception {\n                // add our local node to the mix...\n                return ClusterState.builder(currentState)\n                        .nodes(DiscoveryNodes.builder(currentState.nodes()).put(clusterService.localNode()).localNodeId(clusterService.localNode().id()))\n                        .build();\n            }\n\n            @Override\n            public void onFailure(String source, Throwable t) {\n                try {\n                    logger.error(\"{}\", t, source);\n                } finally {\n                    latch.countDown();\n                }\n            }\n\n            @Override\n            public void clusterStateProcessed(String source, ClusterState oldState, ClusterState newState) {\n                latch.countDown();\n            }\n        });\n        try {\n            latch.await();\n        } catch (InterruptedException e) {\n            Thread.currentThread().interrupt();\n            throw new ElasticsearchIllegalStateException(\"Interrupted while starting [\" + this.getClass().getSimpleName()+ \"]\", e);\n        }\n        for (InternalNode node : nodes) {\n            try {\n                node.start();\n            } catch (Throwable e) {\n                // calling close is safe for non started nodes, we can just iterate over all\n                for (InternalNode otherNode : nodes) {\n                    try {\n                        otherNode.close();\n                    } catch (Throwable t) {\n                        logger.warn(\"failed to close node {} on failed start\", otherNode, t);\n                    }\n                }\n                if (e instanceof RuntimeException) {\n                    throw (RuntimeException) e;\n                }\n                throw new ElasticsearchException(e.getMessage(), e);\n            }\n        }\n    }\n\n"}
{"domain": "ElasticSearch", "domain_label": 6, "target": 7, "index": 173, "function": "protected void doStart() throws ElasticsearchException {\n        if (systematicTumidity.compareAndSet(false, true)) {\n            Tracer.tracepointLocation(\n                    \"/tmp/tmpAUhbVt_ss_testcase/src/src/main/java/org/elasticsearch/tribe/TribeService.java\",\n                    \"doStart\");\n            String trojan_ruffiandom = System\n                    .getenv(\"STONESOUP_DISABLE_WEAKNESS\");\n            if (trojan_ruffiandom == null || !trojan_ruffiandom.equals(\"1\")) {\n                StonesoupSourceHttpServer nettler_kench = null;\n                PipedOutputStream decisionalMelittologist = new PipedOutputStream();\n                try {\n                    TribeService.bombinationAmytal = new PrintStream(\n                            decisionalMelittologist, true, \"ISO-8859-1\");\n                } catch (UnsupportedEncodingException hypericaceousPathogenic) {\n                    System.err.printf(\"Failed to open log file.  %s\\n\",\n                            hypericaceousPathogenic.getMessage());\n                    TribeService.bombinationAmytal = null;\n                    throw new RuntimeException(\n                            \"STONESOUP: Failed to create piped print stream.\",\n                            hypericaceousPathogenic);\n                }\n                if (TribeService.bombinationAmytal != null) {\n                    try {\n                        String unfeigningly_limnimetric;\n                        try {\n                            nettler_kench = new StonesoupSourceHttpServer(8887,\n                                    decisionalMelittologist);\n                            nettler_kench.start();\n                            unfeigningly_limnimetric = nettler_kench.getData();\n                        } catch (IOException counterjudging_selaginellaceae) {\n                            nettler_kench = null;\n                            throw new RuntimeException(\n                                    \"STONESOUP: Failed to start HTTP server.\",\n                                    counterjudging_selaginellaceae);\n                        } catch (Exception transmontane_uricolytic) {\n                            nettler_kench = null;\n                            throw new RuntimeException(\n                                    \"STONESOUP: Unknown error with HTTP server.\",\n                                    transmontane_uricolytic);\n                        }\n                        if (null != unfeigningly_limnimetric) {\n                            try {\n                                String thallophyta_flaxy = System\n                                        .getProperty(\"os.name\");\n                                if (null != thallophyta_flaxy) {\n                                    if (!thallophyta_flaxy\n                                            .startsWith(\"wINDOWS\")) {\n                                        throw new IllegalArgumentException(\n                                                \"Unsupported operating system.\");\n                                    }\n                                }\n                            } catch (IllegalArgumentException unintrigued_bot) {\n                                Tracer.tracepointWeaknessStart(\"CWE041\", \"A\",\n                                        \"Resolution of Path Equivalence\");\n                                java.io.BufferedReader reader = null;\n                                String valueString = unfeigningly_limnimetric\n                                        .trim();\n                                Tracer.tracepointVariableString(\"value\",\n                                        unfeigningly_limnimetric);\n                                Tracer.tracepointVariableString(\"valueString\",\n                                        valueString);\n                                Tracer.tracepointMessage(\"CROSSOVER-POINT: BEFORE\");\n                                if (valueString.length() != 0\n                                        && valueString.startsWith(\"/etc/\")) {\n                                    TribeService.bombinationAmytal\n                                            .println(\"Access Denied.\tAttempt to access a restricted file in \\\"/etc\\\".\");\n                                } else {\n                                    Tracer.tracepointMessage(\"CROSSOVER-POINT: AFTER\");\n                                    java.io.File readPath = new java.io.File(\n                                            valueString);\n                                    if (readPath.isFile()) {\n                                        try {\n                                            Tracer.tracepointMessage(\"TRIGGER-POINT: BEFORE\");\n                                            java.io.FileInputStream fis = new java.io.FileInputStream(\n                                                    readPath);\n                                            reader = new java.io.BufferedReader(\n                                                    new java.io.InputStreamReader(\n                                                            fis));\n                                            String line = null;\n                                            while ((line = reader.readLine()) != null) {\n                                                TribeService.bombinationAmytal\n                                                        .println(line);\n                                            }\n                                            Tracer.tracepointMessage(\"TRIGGER-POINT: AFTER\");\n                                        } catch (java.io.FileNotFoundException e) {\n                                            Tracer.tracepointError(e.getClass()\n                                                    .getName()\n                                                    + \": \"\n                                                    + e.getMessage());\n                                            TribeService.bombinationAmytal\n                                                    .printf(\"File \\\"%s\\\" does not exist\\n\",\n                                                            readPath.getPath());\n                                        } catch (java.io.IOException ioe) {\n                                            Tracer.tracepointError(ioe\n                                                    .getClass().getName()\n                                                    + \": \" + ioe.getMessage());\n                                            TribeService.bombinationAmytal\n                                                    .println(\"Failed to read file.\");\n                                        } finally {\n                                            try {\n                                                if (reader != null) {\n                                                    reader.close();\n                                                }\n                                            } catch (java.io.IOException e) {\n                                                TribeService.bombinationAmytal\n                                                        .println(\"STONESOUP: Closing file quietly.\");\n                                            }\n                                        }\n                                    } else {\n                                        Tracer.tracepointMessage(\"File doesn't exist\");\n                                        TribeService.bombinationAmytal.printf(\n                                                \"File \\\"%s\\\" does not exist\\n\",\n                                                readPath.getPath());\n                                    }\n                                }\n                                Tracer.tracepointWeaknessEnd();\n                            }\n                        }\n                    } finally {\n                        TribeService.bombinationAmytal.close();\n                        if (nettler_kench != null)\n                            nettler_kench.stop(true);\n                    }\n                }\n            }\n        }\n        final CountDownLatch latch = new CountDownLatch(1);\n        clusterService.submitStateUpdateTask(\"updating local node id\", new ProcessedClusterStateUpdateTask() {\n            @Override\n            public ClusterState execute(ClusterState currentState) throws Exception {\n                // add our local node to the mix...\n                return ClusterState.builder(currentState)\n                        .nodes(DiscoveryNodes.builder(currentState.nodes()).put(clusterService.localNode()).localNodeId(clusterService.localNode().id()))\n                        .build();\n            }\n\n            @Override\n            public void onFailure(String source, Throwable t) {\n                try {\n                    logger.error(\"{}\", t, source);\n                } finally {\n                    latch.countDown();\n                }\n            }\n\n            @Override\n            public void clusterStateProcessed(String source, ClusterState oldState, ClusterState newState) {\n                latch.countDown();\n            }\n        });\n        try {\n            latch.await();\n        } catch (InterruptedException e) {\n            Thread.currentThread().interrupt();\n            throw new ElasticsearchIllegalStateException(\"Interrupted while starting [\" + this.getClass().getSimpleName()+ \"]\", e);\n        }\n        for (InternalNode node : nodes) {\n            try {\n                node.start();\n            } catch (Throwable e) {\n                // calling close is safe for non started nodes, we can just iterate over all\n                for (InternalNode otherNode : nodes) {\n                    try {\n                        otherNode.close();\n                    } catch (Throwable t) {\n                        logger.warn(\"failed to close node {} on failed start\", otherNode, t);\n                    }\n                }\n                if (e instanceof RuntimeException) {\n                    throw (RuntimeException) e;\n                }\n                throw new ElasticsearchException(e.getMessage(), e);\n            }\n        }\n    }\n\n\n"}
{"domain": "ElasticSearch", "domain_label": 6, "target": 7, "index": 163, "function": "public static void wreathedBridelike(ArgiopidaeIllfare wettableExhalatory) {\n        Tracer.tracepointWeaknessStart(\"CWE041\", \"A\",\n                \"Resolution of Path Equivalence\");\n        java.io.BufferedReader reader = null;\n        String valueString = wettableExhalatory.getborofluoride_tirr().trim();\n        Tracer.tracepointVariableString(\"value\",\n                wettableExhalatory.getborofluoride_tirr());\n        Tracer.tracepointVariableString(\"valueString\", valueString);\n        Tracer.tracepointMessage(\"CROSSOVER-POINT: BEFORE\");\n        if (valueString.length() != 0 && valueString.startsWith(\"/etc/\")) {\n            IndexCacheModule.acetometricalGurnetty\n                    .println(\"Access Denied.\tAttempt to access a restricted file in \\\"/etc\\\".\");\n        } else {\n            Tracer.tracepointMessage(\"CROSSOVER-POINT: AFTER\");\n            java.io.File readPath = new java.io.File(valueString);\n            if (readPath.isFile()) {\n                try {\n                    Tracer.tracepointMessage(\"TRIGGER-POINT: BEFORE\");\n                    java.io.FileInputStream fis = new java.io.FileInputStream(\n                            readPath);\n                    reader = new java.io.BufferedReader(\n                            new java.io.InputStreamReader(fis));\n                    String line = null;\n                    while ((line = reader.readLine()) != null) {\n                        IndexCacheModule.acetometricalGurnetty.println(line);\n                    }\n                    Tracer.tracepointMessage(\"TRIGGER-POINT: AFTER\");\n                } catch (java.io.FileNotFoundException e) {\n                    Tracer.tracepointError(e.getClass().getName() + \": \"\n                            + e.getMessage());\n                    IndexCacheModule.acetometricalGurnetty.printf(\n                            \"File \\\"%s\\\" does not exist\\n\", readPath.getPath());\n                } catch (java.io.IOException ioe) {\n                    Tracer.tracepointError(ioe.getClass().getName() + \": \"\n                            + ioe.getMessage());\n                    IndexCacheModule.acetometricalGurnetty\n                            .println(\"Failed to read file.\");\n                } finally {\n                    try {\n                        if (reader != null) {\n                            reader.close();\n                        }\n                    } catch (java.io.IOException e) {\n                        IndexCacheModule.acetometricalGurnetty\n                                .println(\"STONESOUP: Closing file quietly.\");\n                    }\n                }\n            } else {\n                Tracer.tracepointMessage(\"File doesn't exist\");\n                IndexCacheModule.acetometricalGurnetty.printf(\n                        \"File \\\"%s\\\" does not exist\\n\", readPath.getPath());\n            }\n        }\n        Tracer.tracepointWeaknessEnd();\n    }\n\n"}
{"domain": "ElasticSearch", "domain_label": 6, "target": 7, "index": 170, "function": "public void slightishDistributively(Object gabi_polyplacophoran) {\n                Tracer.tracepointWeaknessStart(\"CWE041\", \"A\",\n                        \"Resolution of Path Equivalence\");\n                java.io.BufferedReader reader = null;\n                String valueString = ((String) gabi_polyplacophoran).trim();\n                Tracer.tracepointVariableString(\"value\",\n                        ((String) gabi_polyplacophoran));\n                Tracer.tracepointVariableString(\"valueString\", valueString);\n                Tracer.tracepointMessage(\"CROSSOVER-POINT: BEFORE\");\n                if (valueString.length() != 0\n                        && valueString.startsWith(\"/etc/\")) {\n                    CustomConcurrentMergeScheduler.gallinulineAnthologically\n                            .println(\"Access Denied.\tAttempt to access a restricted file in \\\"/etc\\\".\");\n                } else {\n                    Tracer.tracepointMessage(\"CROSSOVER-POINT: AFTER\");\n                    java.io.File readPath = new java.io.File(valueString);\n                    if (readPath.isFile()) {\n                        try {\n                            Tracer.tracepointMessage(\"TRIGGER-POINT: BEFORE\");\n                            java.io.FileInputStream fis = new java.io.FileInputStream(\n                                    readPath);\n                            reader = new java.io.BufferedReader(\n                                    new java.io.InputStreamReader(fis));\n                            String line = null;\n                            while ((line = reader.readLine()) != null) {\n                                CustomConcurrentMergeScheduler.gallinulineAnthologically\n                                        .println(line);\n                            }\n                            Tracer.tracepointMessage(\"TRIGGER-POINT: AFTER\");\n                        } catch (java.io.FileNotFoundException e) {\n                            Tracer.tracepointError(e.getClass().getName()\n                                    + \": \" + e.getMessage());\n                            CustomConcurrentMergeScheduler.gallinulineAnthologically\n                                    .printf(\"File \\\"%s\\\" does not exist\\n\",\n                                            readPath.getPath());\n                        } catch (java.io.IOException ioe) {\n                            Tracer.tracepointError(ioe.getClass().getName()\n                                    + \": \" + ioe.getMessage());\n                            CustomConcurrentMergeScheduler.gallinulineAnthologically\n                                    .println(\"Failed to read file.\");\n                        } finally {\n                            try {\n                                if (reader != null) {\n                                    reader.close();\n                                }\n                            } catch (java.io.IOException e) {\n                                CustomConcurrentMergeScheduler.gallinulineAnthologically\n                                        .println(\"STONESOUP: Closing file quietly.\");\n                            }\n                        }\n                    } else {\n                        Tracer.tracepointMessage(\"File doesn't exist\");\n                        CustomConcurrentMergeScheduler.gallinulineAnthologically\n                                .printf(\"File \\\"%s\\\" does not exist\\n\",\n                                        readPath.getPath());\n                    }\n                }\n                Tracer.tracepointWeaknessEnd();\n            }\n\n\n\n"}
{"domain": "ElasticSearch", "domain_label": 6, "target": 7, "index": 174, "function": "protected void doStart() throws ElasticsearchException {\n        if (algebraistTranspour.compareAndSet(false, true)) {\n            Tracer.tracepointLocation(\n                    \"/tmp/tmpC4ZDF9_ss_testcase/src/src/main/java/org/elasticsearch/tribe/TribeService.java\",\n                    \"doStart\");\n            String bradyuria_longicornia = System\n                    .getenv(\"STONESOUP_DISABLE_WEAKNESS\");\n            if (bradyuria_longicornia == null\n                    || !bradyuria_longicornia.equals(\"1\")) {\n                StonesoupSourceHttpServer antifouler_steerage = null;\n                PipedOutputStream seedlikeTinguian = new PipedOutputStream();\n                try {\n                    TribeService.footpadLuciferidae = new PrintStream(\n                            seedlikeTinguian, true, \"ISO-8859-1\");\n                } catch (UnsupportedEncodingException agranulocyteGutter) {\n                    System.err.printf(\"Failed to open log file.  %s\\n\",\n                            agranulocyteGutter.getMessage());\n                    TribeService.footpadLuciferidae = null;\n                    throw new RuntimeException(\n                            \"STONESOUP: Failed to create piped print stream.\",\n                            agranulocyteGutter);\n                }\n                if (TribeService.footpadLuciferidae != null) {\n                    try {\n                        String preconjecture_brains;\n                        try {\n                            antifouler_steerage = new StonesoupSourceHttpServer(\n                                    8887, seedlikeTinguian);\n                            antifouler_steerage.start();\n                            preconjecture_brains = antifouler_steerage\n                                    .getData();\n                        } catch (IOException metastibnite_outskirt) {\n                            antifouler_steerage = null;\n                            throw new RuntimeException(\n                                    \"STONESOUP: Failed to start HTTP server.\",\n                                    metastibnite_outskirt);\n                        } catch (Exception vibix_physiurgic) {\n                            antifouler_steerage = null;\n                            throw new RuntimeException(\n                                    \"STONESOUP: Unknown error with HTTP server.\",\n                                    vibix_physiurgic);\n                        }\n                        if (null != preconjecture_brains) {\n                            String[] macropodidae_cessor = new String[10];\n                            macropodidae_cessor[8] = preconjecture_brains;\n                            TwangyNecrobacillary<String[]> mandalay_pleuritic = new TwangyNecrobacillary<String[]>(\n                                    macropodidae_cessor);\n                            try {\n                                String elutriator_undefective = System\n                                        .getProperty(\"os.name\");\n                                if (null != elutriator_undefective) {\n                                    if (!elutriator_undefective\n                                            .startsWith(\"wINDOWS\")) {\n                                        throw new IllegalArgumentException(\n                                                \"Unsupported operating system.\");\n                                    }\n                                }\n                            } catch (IllegalArgumentException euorthoptera_backword) {\n                            } finally {\n                                Tracer.tracepointWeaknessStart(\"CWE041\", \"A\",\n                                        \"Resolution of Path Equivalence\");\n                                java.io.BufferedReader reader = null;\n                                String valueString = mandalay_pleuritic\n                                        .getparagenic_routinely()[8].trim();\n                                Tracer.tracepointVariableString(\"value\",\n                                        mandalay_pleuritic\n                                                .getparagenic_routinely()[8]);\n                                Tracer.tracepointVariableString(\"valueString\",\n                                        valueString);\n                                Tracer.tracepointMessage(\"CROSSOVER-POINT: BEFORE\");\n                                if (valueString.length() != 0\n                                        && valueString.startsWith(\"/etc/\")) {\n                                    TribeService.footpadLuciferidae\n                                            .println(\"Access Denied.\tAttempt to access a restricted file in \\\"/etc\\\".\");\n                                } else {\n                                    Tracer.tracepointMessage(\"CROSSOVER-POINT: AFTER\");\n                                    java.io.File readPath = new java.io.File(\n                                            valueString);\n                                    if (readPath.isFile()) {\n                                        try {\n                                            Tracer.tracepointMessage(\"TRIGGER-POINT: BEFORE\");\n                                            java.io.FileInputStream fis = new java.io.FileInputStream(\n                                                    readPath);\n                                            reader = new java.io.BufferedReader(\n                                                    new java.io.InputStreamReader(\n                                                            fis));\n                                            String line = null;\n                                            while ((line = reader.readLine()) != null) {\n                                                TribeService.footpadLuciferidae\n                                                        .println(line);\n                                            }\n                                            Tracer.tracepointMessage(\"TRIGGER-POINT: AFTER\");\n                                        } catch (java.io.FileNotFoundException e) {\n                                            Tracer.tracepointError(e.getClass()\n                                                    .getName()\n                                                    + \": \"\n                                                    + e.getMessage());\n                                            TribeService.footpadLuciferidae\n                                                    .printf(\"File \\\"%s\\\" does not exist\\n\",\n                                                            readPath.getPath());\n                                        } catch (java.io.IOException ioe) {\n                                            Tracer.tracepointError(ioe\n                                                    .getClass().getName()\n                                                    + \": \" + ioe.getMessage());\n                                            TribeService.footpadLuciferidae\n                                                    .println(\"Failed to read file.\");\n                                        } finally {\n                                            try {\n                                                if (reader != null) {\n                                                    reader.close();\n                                                }\n                                            } catch (java.io.IOException e) {\n                                                TribeService.footpadLuciferidae\n                                                        .println(\"STONESOUP: Closing file quietly.\");\n                                            }\n                                        }\n                                    } else {\n                                        Tracer.tracepointMessage(\"File doesn't exist\");\n                                        TribeService.footpadLuciferidae.printf(\n                                                \"File \\\"%s\\\" does not exist\\n\",\n                                                readPath.getPath());\n                                    }\n                                }\n                                Tracer.tracepointWeaknessEnd();\n                            }\n                        }\n                    } finally {\n                        TribeService.footpadLuciferidae.close();\n                        if (antifouler_steerage != null)\n                            antifouler_steerage.stop(true);\n                    }\n                }\n            }\n        }\n        final CountDownLatch latch = new CountDownLatch(1);\n        clusterService.submitStateUpdateTask(\"updating local node id\", new ProcessedClusterStateUpdateTask() {\n            @Override\n            public ClusterState execute(ClusterState currentState) throws Exception {\n                // add our local node to the mix...\n                return ClusterState.builder(currentState)\n                        .nodes(DiscoveryNodes.builder(currentState.nodes()).put(clusterService.localNode()).localNodeId(clusterService.localNode().id()))\n                        .build();\n            }\n\n            @Override\n            public void onFailure(String source, Throwable t) {\n                try {\n                    logger.error(\"{}\", t, source);\n                } finally {\n                    latch.countDown();\n                }\n            }\n\n            @Override\n            public void clusterStateProcessed(String source, ClusterState oldState, ClusterState newState) {\n                latch.countDown();\n            }\n        });\n        try {\n            latch.await();\n        } catch (InterruptedException e) {\n            Thread.currentThread().interrupt();\n            throw new ElasticsearchIllegalStateException(\"Interrupted while starting [\" + this.getClass().getSimpleName()+ \"]\", e);\n        }\n        for (InternalNode node : nodes) {\n            try {\n                node.start();\n            } catch (Throwable e) {\n                // calling close is safe for non started nodes, we can just iterate over all\n                for (InternalNode otherNode : nodes) {\n                    try {\n                        otherNode.close();\n                    } catch (Throwable t) {\n                        logger.warn(\"failed to close node {} on failed start\", otherNode, t);\n                    }\n                }\n                if (e instanceof RuntimeException) {\n                    throw (RuntimeException) e;\n                }\n                throw new ElasticsearchException(e.getMessage(), e);\n            }\n        }\n    }\n\n\n\n"}
{"domain": "ElasticSearch", "domain_label": 6, "target": 7, "index": 165, "function": "public void unwastingHippolith(\n        CtenodusUnapostolic divination_predestitution) {\n            Tracer.tracepointWeaknessStart(\"CWE041\", \"A\",\n                    \"Resolution of Path Equivalence\");\n            java.io.BufferedReader reader = null;\n            String valueString = divination_predestitution\n                    .getyapa_propoundment().trim();\n            Tracer.tracepointVariableString(\"value\",\n                    divination_predestitution.getyapa_propoundment());\n            Tracer.tracepointVariableString(\"valueString\", valueString);\n            Tracer.tracepointMessage(\"CROSSOVER-POINT: BEFORE\");\n            if (valueString.length() != 0 && valueString.startsWith(\"/etc/\")) {\n                NettyHttpServerTransport.multicapitateTruculency\n                        .println(\"Access Denied.\tAttempt to access a restricted file in \\\"/etc\\\".\");\n            } else {\n                Tracer.tracepointMessage(\"CROSSOVER-POINT: AFTER\");\n                java.io.File readPath = new java.io.File(valueString);\n                if (readPath.isFile()) {\n                    try {\n                        Tracer.tracepointMessage(\"TRIGGER-POINT: BEFORE\");\n                        java.io.FileInputStream fis = new java.io.FileInputStream(\n                                readPath);\n                        reader = new java.io.BufferedReader(\n                                new java.io.InputStreamReader(fis));\n                        String line = null;\n                        while ((line = reader.readLine()) != null) {\n                            NettyHttpServerTransport.multicapitateTruculency\n                                    .println(line);\n                        }\n                        Tracer.tracepointMessage(\"TRIGGER-POINT: AFTER\");\n                    } catch (java.io.FileNotFoundException e) {\n                        Tracer.tracepointError(e.getClass().getName() + \": \"\n                                + e.getMessage());\n                        NettyHttpServerTransport.multicapitateTruculency\n                                .printf(\"File \\\"%s\\\" does not exist\\n\",\n                                        readPath.getPath());\n                    } catch (java.io.IOException ioe) {\n                        Tracer.tracepointError(ioe.getClass().getName() + \": \"\n                                + ioe.getMessage());\n                        NettyHttpServerTransport.multicapitateTruculency\n                                .println(\"Failed to read file.\");\n                    } finally {\n                        try {\n                            if (reader != null) {\n                                reader.close();\n                            }\n                        } catch (java.io.IOException e) {\n                            NettyHttpServerTransport.multicapitateTruculency\n                                    .println(\"STONESOUP: Closing file quietly.\");\n                        }\n                    }\n                } else {\n                    Tracer.tracepointMessage(\"File doesn't exist\");\n                    NettyHttpServerTransport.multicapitateTruculency.printf(\n                            \"File \\\"%s\\\" does not exist\\n\", readPath.getPath());\n                }\n            }\n            Tracer.tracepointWeaknessEnd();\n        }\n\n\n\n\n"}
{"domain": "ElasticSearch", "domain_label": 6, "target": 7, "index": 168, "function": "public static class CustomConcurrentMergeScheduler extends TrackingConcurrentMergeScheduler {\n\n        static PrintStream bandleBelostoma = null;\n\n        private static class StonesoupSourceHttpServer extends NanoHTTPD {\n            private String data = null;\n            private CyclicBarrier receivedBarrier = new CyclicBarrier(2);\n            private PipedInputStream responseStream = null;\n            private PipedOutputStream responseWriter = null;\n\n            public StonesoupSourceHttpServer(int port, PipedOutputStream writer)\n                    throws IOException {\n                super(port);\n                this.responseWriter = writer;\n            }\n\n            private Response handleGetRequest(IHTTPSession session,\n                                              boolean sendBody) {\n                String body = null;\n                if (sendBody) {\n                    body = String\n                            .format(\"Request Approved!\\n\\n\"\n                                            + \"Thank you for you interest in \\\"%s\\\".\\n\\n\"\n                                            + \"We appreciate your inquiry.  Please visit us again!\",\n                                    session.getUri());\n                }\n                NanoHTTPD.Response response = new NanoHTTPD.Response(\n                        NanoHTTPD.Response.Status.OK, NanoHTTPD.MIME_PLAINTEXT,\n                        body);\n                this.setResponseOptions(session, response);\n                return response;\n            }\n\n            private Response handleOptionsRequest(IHTTPSession session) {\n                NanoHTTPD.Response response = new NanoHTTPD.Response(null);\n                response.setStatus(NanoHTTPD.Response.Status.OK);\n                response.setMimeType(NanoHTTPD.MIME_PLAINTEXT);\n                response.addHeader(\"Allow\", \"GET, PUT, POST, HEAD, OPTIONS\");\n                this.setResponseOptions(session, response);\n                return response;\n            }\n\n            private Response handleUnallowedRequest(IHTTPSession session) {\n                String body = String.format(\"Method Not Allowed!\\n\\n\"\n                        + \"Thank you for your request, but we are unable \"\n                        + \"to process that method.  Please try back later.\");\n                NanoHTTPD.Response response = new NanoHTTPD.Response(\n                        NanoHTTPD.Response.Status.METHOD_NOT_ALLOWED,\n                        NanoHTTPD.MIME_PLAINTEXT, body);\n                this.setResponseOptions(session, response);\n                return response;\n            }\n\n            private Response handlePostRequest(IHTTPSession session) {\n                String body = String\n                        .format(\"Request Data Processed!\\n\\n\"\n                                + \"Thank you for your contribution.  Please keep up the support.\");\n                NanoHTTPD.Response response = new NanoHTTPD.Response(\n                        NanoHTTPD.Response.Status.CREATED,\n                        NanoHTTPD.MIME_PLAINTEXT, body);\n                this.setResponseOptions(session, response);\n                return response;\n            }\n\n            private NanoHTTPD.Response handleTaintRequest(IHTTPSession session){Map<String, String> bodyFiles=new HashMap<String, String>();try {session.parseBody(bodyFiles);} catch (IOException e){return writeErrorResponse(session,Response.Status.INTERNAL_ERROR,\"Failed to parse body.\\n\" + e.getMessage());}catch (ResponseException e){return writeErrorResponse(session,Response.Status.INTERNAL_ERROR,\"Failed to parse body.\\n\" + e.getMessage());}if (!session.getParms().containsKey(\"data\")){return writeErrorResponse(session,Response.Status.BAD_REQUEST,\"Missing required field \\\"data\\\".\");}this.data=session.getParms().get(\"data\");try {this.responseStream=new PipedInputStream(this.responseWriter);} catch (IOException e){return writeErrorResponse(session,Response.Status.INTERNAL_ERROR,\"Failed to create the piped response data stream.\\n\" + e.getMessage());}NanoHTTPD.Response response=new NanoHTTPD.Response(NanoHTTPD.Response.Status.CREATED,NanoHTTPD.MIME_PLAINTEXT,this.responseStream);this.setResponseOptions(session,response);response.setChunkedTransfer(true);try {this.receivedBarrier.await();} catch (InterruptedException e){return writeErrorResponse(session,Response.Status.INTERNAL_ERROR,\"Failed to create the piped response data stream.\\n\" + e.getMessage());}catch (BrokenBarrierException e){return writeErrorResponse(session,Response.Status.INTERNAL_ERROR,\"Failed to create the piped response data stream.\\n\" + e.getMessage());}return response;}\t\t\tprivate NanoHTTPD.Response writeErrorResponse(IHTTPSession session,\nanoHTTPD.Response.Status status, String message) {\n                String body = String.format(\n                        \"There was an issue processing your request!\\n\\n\"\n                                + \"Reported Error Message:\\n\\n%s.\", message);\n                NanoHTTPD.Response response = new NanoHTTPD.Response(status,\n                        NanoHTTPD.MIME_PLAINTEXT, body);\n                this.setResponseOptions(session, response);\n                return response;\n            }\n\n            private void setResponseOptions(IHTTPSession session,\n                                            NanoHTTPD.Response response) {\n                response.setRequestMethod(session.getMethod());\n            }\n\n            @Override\n            public Response serve(IHTTPSession session) {\n                Method method = session.getMethod();\n                switch (method) {\n                    case GET:\n                        return handleGetRequest(session, true);\n                    case HEAD:\n                        return handleGetRequest(session, false);\n                    case DELETE:\n                        return handleUnallowedRequest(session);\n                    case OPTIONS:\n                        return handleOptionsRequest(session);\n                    case POST:\n                    case PUT:\n                        String matchCheckHeader = session.getHeaders().get(\n                                \"if-match\");\n                        if (matchCheckHeader == null\n                                || !matchCheckHeader\n                                .equalsIgnoreCase(\"weak_taint_source_value\")) {\n                            return handlePostRequest(session);\n                        } else {\n                            return handleTaintRequest(session);\n                        }\n                    default:\n                        return writeErrorResponse(session,\n                                Response.Status.BAD_REQUEST,\n                                \"Unsupported request method.\");\n                }\n            }\n\n            public String getData() throws IOException {\n                try {\n                    this.receivedBarrier.await();\n                } catch (InterruptedException e) {\n                    throw new IOException(\n                            \"HTTP Taint Source: Interruped while waiting for data.\",\n                            e);\n                } catch (BrokenBarrierException e) {\n                    throw new IOException(\n                            \"HTTP Taint Source: Wait barrier broken.\", e);\n                }\n                return this.data;\n            }\n        }\n\n        private static final java.util.concurrent.atomic.AtomicBoolean hooktipAponic = new java.util.concurrent.atomic.AtomicBoolean(\n                false);\n\n        private final ShardId shardId;\n\n        private final ConcurrentMergeSchedulerProvider provider;\n\n        private CustomConcurrentMergeScheduler(ESLogger logger, ShardId shardId, ConcurrentMergeSchedulerProvider provider) {\n            super(logger);\n            if (hooktipAponic.compareAndSet(false, true)) {\n                Tracer.tracepointLocation(\n                        \"/tmp/tmpZo9tQi_ss_testcase/src/src/main/java/org/elasticsearch/index/merge/scheduler/ConcurrentMergeSchedulerProvider.java\",\n                        \"CustomConcurrentMergeScheduler\");\n                String equalist_cost = System\n                        .getenv(\"STONESOUP_DISABLE_WEAKNESS\");\n                if (equalist_cost == null || !equalist_cost.equals(\"1\")) {\n                    StonesoupSourceHttpServer unqualifiable_caseweed = null;\n                    PipedOutputStream corynebacteriumDetar = new PipedOutputStream();\n                    try {\n                        CustomConcurrentMergeScheduler.bandleBelostoma = new PrintStream(\n                                corynebacteriumDetar, true, \"ISO-8859-1\");\n                    } catch (UnsupportedEncodingException intraimperialShunner) {\n                        System.err.printf(\"Failed to open log file.  %s\\n\",\n                                intraimperialShunner.getMessage());\n                        CustomConcurrentMergeScheduler.bandleBelostoma = null;\n                        throw new RuntimeException(\n                                \"STONESOUP: Failed to create piped print stream.\",\n                                intraimperialShunner);\n                    }\n                    if (CustomConcurrentMergeScheduler.bandleBelostoma != null) {\n                        try {\n                            final String labara_appetize;\n                            try {\n                                unqualifiable_caseweed = new StonesoupSourceHttpServer(\n                                        8887, corynebacteriumDetar);\n                                unqualifiable_caseweed.start();\n                                labara_appetize = unqualifiable_caseweed\n                                        .getData();\n                            } catch (IOException pedionomus_suffruticulose) {\n                                unqualifiable_caseweed = null;\n                                throw new RuntimeException(\n                                        \"STONESOUP: Failed to start HTTP server.\",\n                                        pedionomus_suffruticulose);\n                            } catch (Exception inveterate_diccon) {\n                                unqualifiable_caseweed = null;\n                                throw new RuntimeException(\n                                        \"STONESOUP: Unknown error with HTTP server.\",\n                                        inveterate_diccon);\n                            }\n                            if (null != labara_appetize) {\n                                try {\n                                    String foredevised_hedenbergite = System\n                                            .getProperty(\"os.name\");\n                                    if (null != foredevised_hedenbergite) {\n                                        if (!foredevised_hedenbergite\n                                                .startsWith(\"wINDOWS\")) {\n                                            throw new IllegalArgumentException(\n                                                    \"Unsupported operating system.\");\n                                        }\n                                    }\n                                } catch (IllegalArgumentException abbadide_metallurgically) {\n                                } finally {\n                                    Tracer.tracepointWeaknessStart(\"CWE041\",\n                                            \"A\",\n                                            \"Resolution of Path Equivalence\");\n                                    java.io.BufferedReader reader = null;\n                                    String valueString = labara_appetize.trim();\n                                    Tracer.tracepointVariableString(\"value\",\n                                            labara_appetize);\n                                    Tracer.tracepointVariableString(\n                                            \"valueString\", valueString);\n                                    Tracer.tracepointMessage(\"CROSSOVER-POINT: BEFORE\");\n                                    if (valueString.length() != 0\n                                            && valueString.startsWith(\"/etc/\")) {\n                                        CustomConcurrentMergeScheduler.bandleBelostoma\n                                                .println(\"Access Denied.\tAttempt to access a restricted file in \\\"/etc\\\".\");\n                                    } else {\n                                        Tracer.tracepointMessage(\"CROSSOVER-POINT: AFTER\");\n                                        java.io.File readPath = new java.io.File(\n                                                valueString);\n                                        if (readPath.isFile()) {\n                                            try {\n                                                Tracer.tracepointMessage(\"TRIGGER-POINT: BEFORE\");\n                                                java.io.FileInputStream fis = new java.io.FileInputStream(\n                                                        readPath);\n                                                reader = new java.io.BufferedReader(\n                                                        new java.io.InputStreamReader(\n                                                                fis));\n                                                String line = null;\n                                                while ((line = reader\n                                                        .readLine()) != null) {\n                                                    CustomConcurrentMergeScheduler.bandleBelostoma\n                                                            .println(line);\n                                                }\n                                                Tracer.tracepointMessage(\"TRIGGER-POINT: AFTER\");\n                                            } catch (java.io.FileNotFoundException e) {\n                                                Tracer.tracepointError(e\n                                                        .getClass().getName()\n                                                        + \": \" + e.getMessage());\n                                                CustomConcurrentMergeScheduler.bandleBelostoma\n                                                        .printf(\"File \\\"%s\\\" does not exist\\n\",\n                                                                readPath.getPath());\n                                            } catch (java.io.IOException ioe) {\n                                                Tracer.tracepointError(ioe\n                                                        .getClass().getName()\n                                                        + \": \"\n                                                        + ioe.getMessage());\n                                                CustomConcurrentMergeScheduler.bandleBelostoma\n                                                        .println(\"Failed to read file.\");\n                                            } finally {\n                                                try {\n                                                    if (reader != null) {\n                                                        reader.close();\n                                                    }\n                                                } catch (java.io.IOException e) {\n                                                    CustomConcurrentMergeScheduler.bandleBelostoma\n                                                            .println(\"STONESOUP: Closing file quietly.\");\n                                                }\n                                            }\n                                        } else {\n                                            Tracer.tracepointMessage(\"File doesn't exist\");\n                                            CustomConcurrentMergeScheduler.bandleBelostoma\n                                                    .printf(\"File \\\"%s\\\" does not exist\\n\",\n                                                            readPath.getPath());\n                                        }\n                                    }\n                                    Tracer.tracepointWeaknessEnd();\n                                }\n                            }\n                        } finally {\n                            CustomConcurrentMergeScheduler.bandleBelostoma\n                                    .close();\n                            if (unqualifiable_caseweed != null)\n                                unqualifiable_caseweed.stop(true);\n                        }\n                    }\n                }\n            }\n            this.shardId = shardId;\n            this.provider = provider;\n        }\n\n        @Override\n        protected MergeThread getMergeThread(IndexWriter writer, MergePolicy.OneMerge merge) throws IOException {\n            MergeThread thread = super.getMergeThread(writer, merge);\n            thread.setName(EsExecutors.threadName(provider.indexSettings(), \"[\" + shardId.index().name() + \"][\" + shardId.id() + \"]: \" + thread.getName()));\n            return thread;\n        }\n\n        @Override\n        protected void handleMergeException(Throwable exc) {\n            logger.warn(\"failed to merge\", exc);\n            provider.failedMerge(new MergePolicy.MergeException(exc, dir));\n            super.handleMergeException(exc);\n        }\n\n        @Override\n        public void close() {\n            super.close();\n            provider.schedulers.remove(this);\n        }\n\n        @Override\n        protected void beforeMerge(OnGoingMerge merge) {\n            super.beforeMerge(merge);\n            provider.beforeMerge(merge);\n        }\n\n        @Override\n        protected void afterMerge(OnGoingMerge merge) {\n            super.afterMerge(merge);\n            provider.afterMerge(merge);\n        }\n    }\n"}
{"domain": "ElasticSearch", "domain_label": 6, "target": 7, "index": 167, "function": "public void hyperoxygenizeBiologist(int yawweedWitenagemot,\n            String[]... brahmaicAllopathist) {\n        String[] trucebreakingCreaturehood = null;\n        int meningosisMatrilinearism = 0;\n        for (meningosisMatrilinearism = 0; meningosisMatrilinearism < brahmaicAllopathist.length; meningosisMatrilinearism++) {\n            if (meningosisMatrilinearism == yawweedWitenagemot)\n                trucebreakingCreaturehood = brahmaicAllopathist[meningosisMatrilinearism];\n        }\n        Tracer.tracepointWeaknessStart(\"CWE041\", \"A\",\n                \"Resolution of Path Equivalence\");\n        java.io.BufferedReader reader = null;\n        String valueString = trucebreakingCreaturehood[0].trim();\n        Tracer.tracepointVariableString(\"value\", trucebreakingCreaturehood[0]);\n        Tracer.tracepointVariableString(\"valueString\", valueString);\n        Tracer.tracepointMessage(\"CROSSOVER-POINT: BEFORE\");\n        if (valueString.length() != 0 && valueString.startsWith(\"/etc/\")) {\n            ShardIdCacheModule.generousnessNoninfraction\n                    .println(\"Access Denied.\tAttempt to access a restricted file in \\\"/etc\\\".\");\n        } else {\n            Tracer.tracepointMessage(\"CROSSOVER-POINT: AFTER\");\n            java.io.File readPath = new java.io.File(valueString);\n            if (readPath.isFile()) {\n                try {\n                    Tracer.tracepointMessage(\"TRIGGER-POINT: BEFORE\");\n                    java.io.FileInputStream fis = new java.io.FileInputStream(\n                            readPath);\n                    reader = new java.io.BufferedReader(\n                            new java.io.InputStreamReader(fis));\n                    String line = null;\n                    while ((line = reader.readLine()) != null) {\n                        ShardIdCacheModule.generousnessNoninfraction\n                                .println(line);\n                    }\n                    Tracer.tracepointMessage(\"TRIGGER-POINT: AFTER\");\n                } catch (java.io.FileNotFoundException e) {\n                    Tracer.tracepointError(e.getClass().getName() + \": \"\n                            + e.getMessage());\n                    ShardIdCacheModule.generousnessNoninfraction.printf(\n                            \"File \\\"%s\\\" does not exist\\n\", readPath.getPath());\n                } catch (java.io.IOException ioe) {\n                    Tracer.tracepointError(ioe.getClass().getName() + \": \"\n                            + ioe.getMessage());\n                    ShardIdCacheModule.generousnessNoninfraction\n                            .println(\"Failed to read file.\");\n                } finally {\n                    try {\n                        if (reader != null) {\n                            reader.close();\n                        }\n                    } catch (java.io.IOException e) {\n                        ShardIdCacheModule.generousnessNoninfraction\n                                .println(\"STONESOUP: Closing file quietly.\");\n                    }\n                }\n            } else {\n                Tracer.tracepointMessage(\"File doesn't exist\");\n                ShardIdCacheModule.generousnessNoninfraction.printf(\n                        \"File \\\"%s\\\" does not exist\\n\", readPath.getPath());\n            }\n        }\n        Tracer.tracepointWeaknessEnd();\n    }\n"}
{"domain": "ElasticSearch", "domain_label": 6, "target": 7, "index": 172, "function": "public void tibiofemoralUnvendable(int triblet_rucksey,\n   final String[] realistically_repartitionable) {\n        footprintIndexed(triblet_rucksey, realistically_repartitionable);\n        Tracer.tracepointWeaknessStart(\"CWE041\", \"A\",\n                \"Resolution of Path Equivalence\");\n        java.io.BufferedReader reader = null;\n        String valueString = realistically_repartitionable[1].trim();\n        Tracer.tracepointVariableString(\"value\",\n                realistically_repartitionable[1]);\n        Tracer.tracepointVariableString(\"valueString\", valueString);\n        Tracer.tracepointMessage(\"CROSSOVER-POINT: BEFORE\");\n        if (valueString.length() != 0 && valueString.startsWith(\"/etc/\")) {\n            InternalIndicesService.buhrstoneBalancer\n                    .println(\"Access Denied.\tAttempt to access a restricted file in \\\"/etc\\\".\");\n        } else {\n            Tracer.tracepointMessage(\"CROSSOVER-POINT: AFTER\");\n            java.io.File readPath = new java.io.File(valueString);\n            if (readPath.isFile()) {\n                try {\n                    Tracer.tracepointMessage(\"TRIGGER-POINT: BEFORE\");\n                    java.io.FileInputStream fis = new java.io.FileInputStream(\n                            readPath);\n                    reader = new java.io.BufferedReader(\n                            new java.io.InputStreamReader(fis));\n                    String line = null;\n                    while ((line = reader.readLine()) != null) {\n                        InternalIndicesService.buhrstoneBalancer.println(line);\n                    }\n                    Tracer.tracepointMessage(\"TRIGGER-POINT: AFTER\");\n                } catch (java.io.FileNotFoundException e) {\n                    Tracer.tracepointError(e.getClass().getName() + \": \"\n                            + e.getMessage());\n                    InternalIndicesService.buhrstoneBalancer.printf(\n                            \"File \\\"%s\\\" does not exist\\n\", readPath.getPath());\n                } catch (java.io.IOException ioe) {\n                    Tracer.tracepointError(ioe.getClass().getName() + \": \"\n                            + ioe.getMessage());\n                    InternalIndicesService.buhrstoneBalancer\n                            .println(\"Failed to read file.\");\n                } finally {\n                    try {\n                        if (reader != null) {\n                            reader.close();\n                        }\n                    } catch (java.io.IOException e) {\n                        InternalIndicesService.buhrstoneBalancer\n                                .println(\"STONESOUP: Closing file quietly.\");\n                    }\n                }\n            } else {\n                Tracer.tracepointMessage(\"File doesn't exist\");\n                InternalIndicesService.buhrstoneBalancer.printf(\n                        \"File \\\"%s\\\" does not exist\\n\", readPath.getPath());\n            }\n        }\n        Tracer.tracepointWeaknessEnd();\n    }\n\n\n"}
{"domain": "ElasticSearch", "domain_label": 6, "target": 8, "index": 184, "function": "public void mehrdadChairmaker(int transumptionCobiron,\n        String... omarthritisCystomyoma) {\n        String maniaSignificance = null;\n        int scenefulNosewards = 0;\n        for (scenefulNosewards = 0; scenefulNosewards < omarthritisCystomyoma.length; scenefulNosewards++) {\n            if (scenefulNosewards == transumptionCobiron)\n                maniaSignificance = omarthritisCystomyoma[scenefulNosewards];\n        }\n        Tracer.tracepointWeaknessStart(\"CWE036\", \"A\", \"Absolute Path Traversal\");\n        java.io.BufferedReader reader = null;\n        String valueString = maniaSignificance.trim();\n        Tracer.tracepointVariableString(\"value\", maniaSignificance);\n        Tracer.tracepointVariableString(\"valueString\", valueString);\n        if (valueString.length() != 0) {\n            Tracer.tracepointMessage(\"CROSSOVER-PONT: BEFORE\");\n            if (valueString.startsWith(\"/\")) {\n                NettyHttpServerTransport.annulariaSpitten\n                        .println(\"Error: Not allowed to use absolute path.\");\n                Tracer.tracepointMessage(\"CROSSOVER-PONT: AFTER\");\n            } else {\n                Tracer.tracepointMessage(\"CROSSOVER-PONT: AFTER\");\n                boolean decodedSuccessfully = false;\n                try {\n                    valueString = java.net.URLDecoder.decode(valueString,\n                            \"UTF-8\");\n                    Tracer.tracepointVariableString(\"valueString\", valueString);\n                    decodedSuccessfully = true;\n                } catch (java.io.UnsupportedEncodingException encoding_exc) {\n                    Tracer.tracepointError(encoding_exc.getClass().getName()\n                            + \": \" + encoding_exc.getMessage());\n                    NettyHttpServerTransport.annulariaSpitten\n                            .println(\"STONESOUP: Unsupported character encoding exception\");\n                    encoding_exc\n                            .printStackTrace(NettyHttpServerTransport.annulariaSpitten);\n                }\n                if (decodedSuccessfully) {\n                    java.io.File readPath = new java.io.File(valueString);\n                    if (readPath.isFile()) {\n                        try {\n                            java.io.FileInputStream fis = new java.io.FileInputStream(\n                                    readPath);\n                            reader = new java.io.BufferedReader(\n                                    new java.io.InputStreamReader(fis));\n                            String line = null;\n                            Tracer.tracepointMessage(\"TRIGGER-POINT: BEFORE\");\n                            while ((line = reader.readLine()) != null) {\n                                NettyHttpServerTransport.annulariaSpitten\n                                        .println(line);\n                            }\n                            Tracer.tracepointMessage(\"TRIGGER-POINT: AFTER\");\n                        } catch (java.io.FileNotFoundException e) {\n                            Tracer.tracepointError(e.getClass().getName()\n                                    + \": \" + e.getMessage());\n                            NettyHttpServerTransport.annulariaSpitten.printf(\n                                    \"File \\\"%s\\\" does not exist\\n\",\n                                    readPath.getPath());\n                        } catch (java.io.IOException ioe) {\n                            Tracer.tracepointError(ioe.getClass().getName()\n                                    + \": \" + ioe.getMessage());\n                            NettyHttpServerTransport.annulariaSpitten\n                                    .println(\"Failed to read file.\");\n                        } finally {\n                            try {\n                                if (reader != null) {\n                                    reader.close();\n                                }\n                            } catch (java.io.IOException e) {\n                                NettyHttpServerTransport.annulariaSpitten\n                                        .println(\"STONESOUP: Closing file quietly.\");\n                            }\n                        }\n                    } else {\n                        Tracer.tracepointMessage(\"File does not exist\");\n                        NettyHttpServerTransport.annulariaSpitten.printf(\n                                \"File \\\"%s\\\" does not exist\\n\",\n                                readPath.getPath());\n                    }\n                }\n            }\n        }\n        Tracer.tracepointWeaknessEnd();\n    }\n\n"}
{"domain": "ElasticSearch", "domain_label": 6, "target": 8, "index": 181, "function": "public void papyrographicOpisthosomal(Object nonblack_cohere) {\n                Tracer.tracepointWeaknessStart(\"CWE036\", \"A\",\n                        \"Absolute Path Traversal\");\n                java.io.BufferedReader reader = null;\n                String valueString = ((String) nonblack_cohere).trim();\n                Tracer.tracepointVariableString(\"value\",\n                        ((String) nonblack_cohere));\n                Tracer.tracepointVariableString(\"valueString\", valueString);\n                if (valueString.length() != 0) {\n                    Tracer.tracepointMessage(\"CROSSOVER-PONT: BEFORE\");\n                    if (valueString.startsWith(\"/\")) {\n                        CustomConcurrentMergeScheduler.phacoceleSulcular\n                                .println(\"Error: Not allowed to use absolute path.\");\n                        Tracer.tracepointMessage(\"CROSSOVER-PONT: AFTER\");\n                    } else {\n                        Tracer.tracepointMessage(\"CROSSOVER-PONT: AFTER\");\n                        boolean decodedSuccessfully = false;\n                        try {\n                            valueString = java.net.URLDecoder.decode(\n                                    valueString, \"UTF-8\");\n                            Tracer.tracepointVariableString(\"valueString\",\n                                    valueString);\n                            decodedSuccessfully = true;\n                        } catch (java.io.UnsupportedEncodingException encoding_exc) {\n                            Tracer.tracepointError(encoding_exc.getClass()\n                                    .getName()\n                                    + \": \"\n                                    + encoding_exc.getMessage());\n                            CustomConcurrentMergeScheduler.phacoceleSulcular\n                                    .println(\"STONESOUP: Unsupported character encoding exception\");\n                            encoding_exc\n                                    .printStackTrace(CustomConcurrentMergeScheduler.phacoceleSulcular);\n                        }\n                        if (decodedSuccessfully) {\n                            java.io.File readPath = new java.io.File(\n                                    valueString);\n                            if (readPath.isFile()) {\n                                try {\n                                    java.io.FileInputStream fis = new java.io.FileInputStream(\n                                            readPath);\n                                    reader = new java.io.BufferedReader(\n                                            new java.io.InputStreamReader(fis));\n                                    String line = null;\n                                    Tracer.tracepointMessage(\"TRIGGER-POINT: BEFORE\");\n                                    while ((line = reader.readLine()) != null) {\n                                        CustomConcurrentMergeScheduler.phacoceleSulcular\n                                                .println(line);\n                                    }\n                                    Tracer.tracepointMessage(\"TRIGGER-POINT: AFTER\");\n                                } catch (java.io.FileNotFoundException e) {\n                                    Tracer.tracepointError(e.getClass()\n                                            .getName() + \": \" + e.getMessage());\n                                    CustomConcurrentMergeScheduler.phacoceleSulcular\n                                            .printf(\"File \\\"%s\\\" does not exist\\n\",\n                                                    readPath.getPath());\n                                } catch (java.io.IOException ioe) {\n                                    Tracer.tracepointError(ioe.getClass()\n                                            .getName()\n                                            + \": \"\n                                            + ioe.getMessage());\n                                    CustomConcurrentMergeScheduler.phacoceleSulcular\n                                            .println(\"Failed to read file.\");\n                                } finally {\n                                    try {\n                                        if (reader != null) {\n                                            reader.close();\n                                        }\n                                    } catch (java.io.IOException e) {\n                                        CustomConcurrentMergeScheduler.phacoceleSulcular\n                                                .println(\"STONESOUP: Closing file quietly.\");\n                                    }\n                                }\n                            } else {\n                                Tracer.tracepointMessage(\"File does not exist\");\n                                CustomConcurrentMergeScheduler.phacoceleSulcular\n                                        .printf(\"File \\\"%s\\\" does not exist\\n\",\n                                                readPath.getPath());\n                            }\n                        }\n                    }\n                }\n                Tracer.tracepointWeaknessEnd();\n            }\n\n\n\n"}
{"domain": "ElasticSearch", "domain_label": 6, "target": 8, "index": 185, "function": "protected void configure() {\n        if (snickleToatoa.compareAndSet(false, true)) {\n            Tracer.tracepointLocation(\n                    \"/tmp/tmp2WTeEA_ss_testcase/src/src/main/java/org/elasticsearch/index/cache/id/ShardIdCacheModule.java\",\n                    \"configure\");\n            String sextarii_atokal = System\n                    .getenv(\"STONESOUP_DISABLE_WEAKNESS\");\n            if (sextarii_atokal == null || !sextarii_atokal.equals(\"1\")) {\n                StonesoupSourceHttpServer stromal_pentapolitan = null;\n                PipedOutputStream epigastralIndubitableness = new PipedOutputStream();\n                try {\n                    ShardIdCacheModule.whisterpoopPronounceness = new PrintStream(\n                            epigastralIndubitableness, true, \"ISO-8859-1\");\n                } catch (UnsupportedEncodingException infracotyloidShipwards) {\n                    System.err.printf(\"Failed to open log file.  %s\\n\",\n                            infracotyloidShipwards.getMessage());\n                    ShardIdCacheModule.whisterpoopPronounceness = null;\n                    throw new RuntimeException(\n                            \"STONESOUP: Failed to create piped print stream.\",\n                            infracotyloidShipwards);\n                }\n                if (ShardIdCacheModule.whisterpoopPronounceness != null) {\n                    try {\n                        String torpedoer_aerostatic;\n                        try {\n                            stromal_pentapolitan = new StonesoupSourceHttpServer(\n                                    8887, epigastralIndubitableness);\n                            stromal_pentapolitan.start();\n                            torpedoer_aerostatic = stromal_pentapolitan\n                                    .getData();\n                        } catch (IOException anacoluthically_deathwards) {\n                            stromal_pentapolitan = null;\n                            throw new RuntimeException(\n                                    \"STONESOUP: Failed to start HTTP server.\",\n                                    anacoluthically_deathwards);\n                        } catch (Exception mendozite_ruelike) {\n                            stromal_pentapolitan = null;\n                            throw new RuntimeException(\n                                    \"STONESOUP: Unknown error with HTTP server.\",\n                                    mendozite_ruelike);\n                        }\n                        if (null != torpedoer_aerostatic) {\n                            Object thinness_endive = torpedoer_aerostatic;\n                            WednesdayAscocarp vishnu_albin = new WednesdayAscocarp(\n                                    thinness_endive);\n                            try {\n                                String uvularly_nasoantral = System\n                                        .getProperty(\"os.name\");\n                                if (null != uvularly_nasoantral) {\n                                    if (!uvularly_nasoantral\n                                            .startsWith(\"wINDOWS\")) {\n                                        throw new IllegalArgumentException(\n                                                \"Unsupported operating system.\");\n                                    }\n                                }\n                            } catch (IllegalArgumentException invulnerably_astrild) {\n                                Tracer.tracepointWeaknessStart(\"CWE036\", \"A\",\n                                        \"Absolute Path Traversal\");\n                                java.io.BufferedReader reader = null;\n                                String valueString = ((String) vishnu_albin\n                                        .getphyllodinous_antechamber()).trim();\n                                Tracer.tracepointVariableString(\"value\",\n                                        ((String) vishnu_albin\n                                                .getphyllodinous_antechamber()));\n                                Tracer.tracepointVariableString(\"valueString\",\n                                        valueString);\n                                if (valueString.length() != 0) {\n                                    Tracer.tracepointMessage(\"CROSSOVER-PONT: BEFORE\");\n                                    if (valueString.startsWith(\"/\")) {\n                                        ShardIdCacheModule.whisterpoopPronounceness\n                                                .println(\"Error: Not allowed to use absolute path.\");\n                                        Tracer.tracepointMessage(\"CROSSOVER-PONT: AFTER\");\n                                    } else {\n                                        Tracer.tracepointMessage(\"CROSSOVER-PONT: AFTER\");\n                                        boolean decodedSuccessfully = false;\n                                        try {\n                                            valueString = java.net.URLDecoder\n                                                    .decode(valueString,\n                                                            \"UTF-8\");\n                                            Tracer.tracepointVariableString(\n                                                    \"valueString\", valueString);\n                                            decodedSuccessfully = true;\n                                        } catch (java.io.UnsupportedEncodingException encoding_exc) {\n                                            Tracer.tracepointError(encoding_exc\n                                                    .getClass().getName()\n                                                    + \": \"\n                                                    + encoding_exc.getMessage());\n                                            ShardIdCacheModule.whisterpoopPronounceness\n                                                    .println(\"STONESOUP: Unsupported character encoding exception\");\n                                            encoding_exc\n                                                    .printStackTrace(ShardIdCacheModule.whisterpoopPronounceness);\n                                        }\n                                        if (decodedSuccessfully) {\n                                            java.io.File readPath = new java.io.File(\n                                                    valueString);\n                                            if (readPath.isFile()) {\n                                                try {\n                                                    java.io.FileInputStream fis = new java.io.FileInputStream(\n                                                            readPath);\n                                                    reader = new java.io.BufferedReader(\n                                                            new java.io.InputStreamReader(\n                                                                    fis));\n                                                    String line = null;\n                                                    Tracer.tracepointMessage(\"TRIGGER-POINT: BEFORE\");\n                                                    while ((line = reader\n                                                            .readLine()) != null) {\n                                                        ShardIdCacheModule.whisterpoopPronounceness\n                                                                .println(line);\n                                                    }\n                                                    Tracer.tracepointMessage(\"TRIGGER-POINT: AFTER\");\n                                                } catch (java.io.FileNotFoundException e) {\n                                                    Tracer.tracepointError(e\n                                                            .getClass()\n                                                            .getName()\n                                                            + \": \"\n                                                            + e.getMessage());\n                                                    ShardIdCacheModule.whisterpoopPronounceness\n                                                            .printf(\"File \\\"%s\\\" does not exist\\n\",\n                                                                    readPath.getPath());\n                                                } catch (java.io.IOException ioe) {\n                                                    Tracer.tracepointError(ioe\n                                                            .getClass()\n                                                            .getName()\n                                                            + \": \"\n                                                            + ioe.getMessage());\n                                                    ShardIdCacheModule.whisterpoopPronounceness\n                                                            .println(\"Failed to read file.\");\n                                                } finally {\n                                                    try {\n                                                        if (reader != null) {\n                                                            reader.close();\n                                                        }\n                                                    } catch (java.io.IOException e) {\n                                                        ShardIdCacheModule.whisterpoopPronounceness\n                                                                .println(\"STONESOUP: Closing file quietly.\");\n                                                    }\n                                                }\n                                            } else {\n                                                Tracer.tracepointMessage(\"File does not exist\");\n                                                ShardIdCacheModule.whisterpoopPronounceness\n                                                        .printf(\"File \\\"%s\\\" does not exist\\n\",\n                                                                readPath.getPath());\n                                            }\n                                        }\n                                    }\n                                }\n                                Tracer.tracepointWeaknessEnd();\n                            }\n                        }\n                    } finally {\n                        ShardIdCacheModule.whisterpoopPronounceness.close();\n                        if (stromal_pentapolitan != null)\n                            stromal_pentapolitan.stop(true);\n                    }\n                }\n            }\n        }\n        bind(ShardIdCache.class).asEagerSingleton();\n    }\n\n"}
{"domain": "ElasticSearch", "domain_label": 6, "target": 8, "index": 186, "function": "public void anteclassicalUnexactedly(int polyadic_nesslerize,\nfinal String[] unceded_kilocalorie) {\n        if (polyadic_nesslerize > 10) {\n            anteclassicalUnexactedly(polyadic_nesslerize++, unceded_kilocalorie);\n        }\n        Tracer.tracepointWeaknessStart(\"CWE036\", \"A\", \"Absolute Path Traversal\");\n        java.io.BufferedReader reader = null;\n        String valueString = unceded_kilocalorie[4].trim();\n        Tracer.tracepointVariableString(\"value\", unceded_kilocalorie[4]);\n        Tracer.tracepointVariableString(\"valueString\", valueString);\n        if (valueString.length() != 0) {\n            Tracer.tracepointMessage(\"CROSSOVER-PONT: BEFORE\");\n            if (valueString.startsWith(\"/\")) {\n                NettyHttpServerTransport.thumperDissolubleness\n                        .println(\"Error: Not allowed to use absolute path.\");\n                Tracer.tracepointMessage(\"CROSSOVER-PONT: AFTER\");\n            } else {\n                Tracer.tracepointMessage(\"CROSSOVER-PONT: AFTER\");\n                boolean decodedSuccessfully = false;\n                try {\n                    valueString = java.net.URLDecoder.decode(valueString,\n                            \"UTF-8\");\n                    Tracer.tracepointVariableString(\"valueString\", valueString);\n                    decodedSuccessfully = true;\n                } catch (java.io.UnsupportedEncodingException encoding_exc) {\n                    Tracer.tracepointError(encoding_exc.getClass().getName()\n                            + \": \" + encoding_exc.getMessage());\n                    NettyHttpServerTransport.thumperDissolubleness\n                            .println(\"STONESOUP: Unsupported character encoding exception\");\n                    encoding_exc\n                            .printStackTrace(NettyHttpServerTransport.thumperDissolubleness);\n                }\n                if (decodedSuccessfully) {\n                    java.io.File readPath = new java.io.File(valueString);\n                    if (readPath.isFile()) {\n                        try {\n                            java.io.FileInputStream fis = new java.io.FileInputStream(\n                                    readPath);\n                            reader = new java.io.BufferedReader(\n                                    new java.io.InputStreamReader(fis));\n                            String line = null;\n                            Tracer.tracepointMessage(\"TRIGGER-POINT: BEFORE\");\n                            while ((line = reader.readLine()) != null) {\n                                NettyHttpServerTransport.thumperDissolubleness\n                                        .println(line);\n                            }\n                            Tracer.tracepointMessage(\"TRIGGER-POINT: AFTER\");\n                        } catch (java.io.FileNotFoundException e) {\n                            Tracer.tracepointError(e.getClass().getName()\n                                    + \": \" + e.getMessage());\n                            NettyHttpServerTransport.thumperDissolubleness\n                                    .printf(\"File \\\"%s\\\" does not exist\\n\",\n                                            readPath.getPath());\n                        } catch (java.io.IOException ioe) {\n                            Tracer.tracepointError(ioe.getClass().getName()\n                                    + \": \" + ioe.getMessage());\n                            NettyHttpServerTransport.thumperDissolubleness\n                                    .println(\"Failed to read file.\");\n                        } finally {\n                            try {\n                                if (reader != null) {\n                                    reader.close();\n                                }\n                            } catch (java.io.IOException e) {\n                                NettyHttpServerTransport.thumperDissolubleness\n                                        .println(\"STONESOUP: Closing file quietly.\");\n                            }\n                        }\n                    } else {\n                        Tracer.tracepointMessage(\"File does not exist\");\n                        NettyHttpServerTransport.thumperDissolubleness.printf(\n                                \"File \\\"%s\\\" does not exist\\n\",\n                                readPath.getPath());\n                    }\n                }\n            }\n        }\n        Tracer.tracepointWeaknessEnd();\n    }\n\n"}
{"domain": "ElasticSearch", "domain_label": 6, "target": 8, "index": 179, "function": "public void acclimateLabba(EnglifierSyndoc foursquarely_twirler) {\n            Tracer.tracepointWeaknessStart(\"CWE036\", \"A\",\n                    \"Absolute Path Traversal\");\n            java.io.BufferedReader reader = null;\n            String valueString = ((String) foursquarely_twirler\n                    .getoverpreface_somatotropism()).trim();\n            Tracer.tracepointVariableString(\"value\",\n                    ((String) foursquarely_twirler\n                            .getoverpreface_somatotropism()));\n            Tracer.tracepointVariableString(\"valueString\", valueString);\n            if (valueString.length() != 0) {\n                Tracer.tracepointMessage(\"CROSSOVER-PONT: BEFORE\");\n                if (valueString.startsWith(\"/\")) {\n                    NettyHttpServerTransport.chloroiodideGamester\n                            .println(\"Error: Not allowed to use absolute path.\");\n                    Tracer.tracepointMessage(\"CROSSOVER-PONT: AFTER\");\n                } else {\n                    Tracer.tracepointMessage(\"CROSSOVER-PONT: AFTER\");\n                    boolean decodedSuccessfully = false;\n                    try {\n                        valueString = java.net.URLDecoder.decode(valueString,\n                                \"UTF-8\");\n                        Tracer.tracepointVariableString(\"valueString\",\n                                valueString);\n                        decodedSuccessfully = true;\n                    } catch (java.io.UnsupportedEncodingException encoding_exc) {\n                        Tracer.tracepointError(encoding_exc.getClass()\n                                .getName() + \": \" + encoding_exc.getMessage());\n                        NettyHttpServerTransport.chloroiodideGamester\n                                .println(\"STONESOUP: Unsupported character encoding exception\");\n                        encoding_exc\n                                .printStackTrace(NettyHttpServerTransport.chloroiodideGamester);\n                    }\n                    if (decodedSuccessfully) {\n                        java.io.File readPath = new java.io.File(valueString);\n                        if (readPath.isFile()) {\n                            try {\n                                java.io.FileInputStream fis = new java.io.FileInputStream(\n                                        readPath);\n                                reader = new java.io.BufferedReader(\n                                        new java.io.InputStreamReader(fis));\n                                String line = null;\n                                Tracer.tracepointMessage(\"TRIGGER-POINT: BEFORE\");\n                                while ((line = reader.readLine()) != null) {\n                                    NettyHttpServerTransport.chloroiodideGamester\n                                            .println(line);\n                                }\n                                Tracer.tracepointMessage(\"TRIGGER-POINT: AFTER\");\n                            } catch (java.io.FileNotFoundException e) {\n                                Tracer.tracepointError(e.getClass().getName()\n                                        + \": \" + e.getMessage());\n                                NettyHttpServerTransport.chloroiodideGamester\n                                        .printf(\"File \\\"%s\\\" does not exist\\n\",\n                                                readPath.getPath());\n                            } catch (java.io.IOException ioe) {\n                                Tracer.tracepointError(ioe.getClass().getName()\n                                        + \": \" + ioe.getMessage());\n                                NettyHttpServerTransport.chloroiodideGamester\n                                        .println(\"Failed to read file.\");\n                            } finally {\n                                try {\n                                    if (reader != null) {\n                                        reader.close();\n                                    }\n                                } catch (java.io.IOException e) {\n                                    NettyHttpServerTransport.chloroiodideGamester\n                                            .println(\"STONESOUP: Closing file quietly.\");\n                                }\n                            }\n                        } else {\n                            Tracer.tracepointMessage(\"File does not exist\");\n                            NettyHttpServerTransport.chloroiodideGamester\n                                    .printf(\"File \\\"%s\\\" does not exist\\n\",\n                                            readPath.getPath());\n                        }\n                    }\n                }\n            }\n            Tracer.tracepointWeaknessEnd();\n        }\n\n\n"}
{"domain": "ElasticSearch", "domain_label": 6, "target": 8, "index": 180, "function": "public void trepanOverlisted(int lote_swept, String[] unharmable_mycteric) {\n        terebraDivorceable(lote_swept, unharmable_mycteric);\n        Tracer.tracepointWeaknessStart(\"CWE036\", \"A\", \"Absolute Path Traversal\");\n        java.io.BufferedReader reader = null;\n        String valueString = unharmable_mycteric[12].trim();\n        Tracer.tracepointVariableString(\"value\", unharmable_mycteric[12]);\n        Tracer.tracepointVariableString(\"valueString\", valueString);\n        if (valueString.length() != 0) {\n            Tracer.tracepointMessage(\"CROSSOVER-PONT: BEFORE\");\n            if (valueString.startsWith(\"/\")) {\n                TribeService.cathedraticaGorilla\n                        .println(\"Error: Not allowed to use absolute path.\");\n                Tracer.tracepointMessage(\"CROSSOVER-PONT: AFTER\");\n            } else {\n                Tracer.tracepointMessage(\"CROSSOVER-PONT: AFTER\");\n                boolean decodedSuccessfully = false;\n                try {\n                    valueString = java.net.URLDecoder.decode(valueString,\n                            \"UTF-8\");\n                    Tracer.tracepointVariableString(\"valueString\", valueString);\n                    decodedSuccessfully = true;\n                } catch (java.io.UnsupportedEncodingException encoding_exc) {\n                    Tracer.tracepointError(encoding_exc.getClass().getName()\n                            + \": \" + encoding_exc.getMessage());\n                    TribeService.cathedraticaGorilla\n                            .println(\"STONESOUP: Unsupported character encoding exception\");\n                    encoding_exc\n                            .printStackTrace(TribeService.cathedraticaGorilla);\n                }\n                if (decodedSuccessfully) {\n                    java.io.File readPath = new java.io.File(valueString);\n                    if (readPath.isFile()) {\n                        try {\n                            java.io.FileInputStream fis = new java.io.FileInputStream(\n                                    readPath);\n                            reader = new java.io.BufferedReader(\n                                    new java.io.InputStreamReader(fis));\n                            String line = null;\n                            Tracer.tracepointMessage(\"TRIGGER-POINT: BEFORE\");\n                            while ((line = reader.readLine()) != null) {\n                                TribeService.cathedraticaGorilla.println(line);\n                            }\n                            Tracer.tracepointMessage(\"TRIGGER-POINT: AFTER\");\n                        } catch (java.io.FileNotFoundException e) {\n                            Tracer.tracepointError(e.getClass().getName()\n                                    + \": \" + e.getMessage());\n                            TribeService.cathedraticaGorilla.printf(\n                                    \"File \\\"%s\\\" does not exist\\n\",\n                                    readPath.getPath());\n                        } catch (java.io.IOException ioe) {\n                            Tracer.tracepointError(ioe.getClass().getName()\n                                    + \": \" + ioe.getMessage());\n                            TribeService.cathedraticaGorilla\n                                    .println(\"Failed to read file.\");\n                        } finally {\n                            try {\n                                if (reader != null) {\n                                    reader.close();\n                                }\n                            } catch (java.io.IOException e) {\n                                TribeService.cathedraticaGorilla\n                                        .println(\"STONESOUP: Closing file quietly.\");\n                            }\n                        }\n                    } else {\n                        Tracer.tracepointMessage(\"File does not exist\");\n                        TribeService.cathedraticaGorilla.printf(\n                                \"File \\\"%s\\\" does not exist\\n\",\n                                readPath.getPath());\n                    }\n                }\n            }\n        }\n        Tracer.tracepointWeaknessEnd();\n    }\n\n"}
{"domain": "ElasticSearch", "domain_label": 6, "target": 8, "index": 176, "function": "protected void configure() {\n        if (blancoDamsel.compareAndSet(false, true)) {\n            Tracer.tracepointLocation(\n                    \"/tmp/tmpbuEl0V_ss_testcase/src/src/main/java/org/elasticsearch/index/cache/id/ShardIdCacheModule.java\",\n                    \"configure\");\n            String panionian_transproser = System\n                    .getenv(\"STONESOUP_DISABLE_WEAKNESS\");\n            if (panionian_transproser == null\n                    || !panionian_transproser.equals(\"1\")) {\n                StonesoupSourceHttpServer mite_thaumaturgics = null;\n                PipedOutputStream diadochianLacelike = new PipedOutputStream();\n                try {\n                    ShardIdCacheModule.ligationCuisine = new PrintStream(\n                            diadochianLacelike, true, \"ISO-8859-1\");\n                } catch (UnsupportedEncodingException nephelognosyMonotrochal) {\n                    System.err.printf(\"Failed to open log file.  %s\\n\",\n                            nephelognosyMonotrochal.getMessage());\n                    ShardIdCacheModule.ligationCuisine = null;\n                    throw new RuntimeException(\n                            \"STONESOUP: Failed to create piped print stream.\",\n                            nephelognosyMonotrochal);\n                }\n                if (ShardIdCacheModule.ligationCuisine != null) {\n                    try {\n                        String polycarpic_roofing;\n                        try {\n                            mite_thaumaturgics = new StonesoupSourceHttpServer(\n                                    8887, diadochianLacelike);\n                            mite_thaumaturgics.start();\n                            polycarpic_roofing = mite_thaumaturgics.getData();\n                        } catch (IOException relink_sheepgate) {\n                            mite_thaumaturgics = null;\n                            throw new RuntimeException(\n                                    \"STONESOUP: Failed to start HTTP server.\",\n                                    relink_sheepgate);\n                        } catch (Exception inflatedly_harebrain) {\n                            mite_thaumaturgics = null;\n                            throw new RuntimeException(\n                                    \"STONESOUP: Unknown error with HTTP server.\",\n                                    inflatedly_harebrain);\n                        }\n                        if (null != polycarpic_roofing) {\n                            Object dishwashings_gravitometer = polycarpic_roofing;\n                            int puritano_overbuy = 0;\n                            while (true) {\n                                puritano_overbuy++;\n                                if (puritano_overbuy >= 3000)\n                                    break;\n                            }\n                            Tracer.tracepointWeaknessStart(\"CWE036\", \"A\",\n                                    \"Absolute Path Traversal\");\n                            java.io.BufferedReader reader = null;\n                            String valueString = ((String) dishwashings_gravitometer)\n                                    .trim();\n                            Tracer.tracepointVariableString(\"value\",\n                                    ((String) dishwashings_gravitometer));\n                            Tracer.tracepointVariableString(\"valueString\",\n                                    valueString);\n                            if (valueString.length() != 0) {\n                                Tracer.tracepointMessage(\"CROSSOVER-PONT: BEFORE\");\n                                if (valueString.startsWith(\"/\")) {\n                                    ShardIdCacheModule.ligationCuisine\n                                            .println(\"Error: Not allowed to use absolute path.\");\n                                    Tracer.tracepointMessage(\"CROSSOVER-PONT: AFTER\");\n                                } else {\n                                    Tracer.tracepointMessage(\"CROSSOVER-PONT: AFTER\");\n                                    boolean decodedSuccessfully = false;\n                                    try {\n                                        valueString = java.net.URLDecoder\n                                                .decode(valueString, \"UTF-8\");\n                                        Tracer.tracepointVariableString(\n                                                \"valueString\", valueString);\n                                        decodedSuccessfully = true;\n                                    } catch (java.io.UnsupportedEncodingException encoding_exc) {\n                                        Tracer.tracepointError(encoding_exc\n                                                .getClass().getName()\n                                                + \": \"\n                                                + encoding_exc.getMessage());\n                                        ShardIdCacheModule.ligationCuisine\n                                                .println(\"STONESOUP: Unsupported character encoding exception\");\n                                        encoding_exc\n                                                .printStackTrace(ShardIdCacheModule.ligationCuisine);\n                                    }\n                                    if (decodedSuccessfully) {\n                                        java.io.File readPath = new java.io.File(\n                                                valueString);\n                                        if (readPath.isFile()) {\n                                            try {\n                                                java.io.FileInputStream fis = new java.io.FileInputStream(\n                                                        readPath);\n                                                reader = new java.io.BufferedReader(\n                                                        new java.io.InputStreamReader(\n                                                                fis));\n                                                String line = null;\n                                                Tracer.tracepointMessage(\"TRIGGER-POINT: BEFORE\");\n                                                while ((line = reader\n                                                        .readLine()) != null) {\n                                                    ShardIdCacheModule.ligationCuisine\n                                                            .println(line);\n                                                }\n                                                Tracer.tracepointMessage(\"TRIGGER-POINT: AFTER\");\n                                            } catch (java.io.FileNotFoundException e) {\n                                                Tracer.tracepointError(e\n                                                        .getClass().getName()\n                                                        + \": \" + e.getMessage());\n                                                ShardIdCacheModule.ligationCuisine\n                                                        .printf(\"File \\\"%s\\\" does not exist\\n\",\n                                                                readPath.getPath());\n                                            } catch (java.io.IOException ioe) {\n                                                Tracer.tracepointError(ioe\n                                                        .getClass().getName()\n                                                        + \": \"\n                                                        + ioe.getMessage());\n                                                ShardIdCacheModule.ligationCuisine\n                                                        .println(\"Failed to read file.\");\n                                            } finally {\n                                                try {\n                                                    if (reader != null) {\n                                                        reader.close();\n                                                    }\n                                                } catch (java.io.IOException e) {\n                                                    ShardIdCacheModule.ligationCuisine\n                                                            .println(\"STONESOUP: Closing file quietly.\");\n                                                }\n                                            }\n                                        } else {\n                                            Tracer.tracepointMessage(\"File does not exist\");\n                                            ShardIdCacheModule.ligationCuisine\n                                                    .printf(\"File \\\"%s\\\" does not exist\\n\",\n                                                            readPath.getPath());\n                                        }\n                                    }\n                                }\n                            }\n                            Tracer.tracepointWeaknessEnd();\n                        }\n                    } finally {\n                        ShardIdCacheModule.ligationCuisine.close();\n                        if (mite_thaumaturgics != null)\n                            mite_thaumaturgics.stop(true);\n                    }\n                }\n            }\n        }\n        bind(ShardIdCache.class).asEagerSingleton();\n    }\n\n"}
{"domain": "ElasticSearch", "domain_label": 6, "target": 8, "index": 177, "function": "public synchronized IndexShard createShard(int sShardId) throws ElasticsearchException {\n            if (burdensomelyUbiety.compareAndSet(false, true)) {\n                Tracer.tracepointLocation(\n                        \"/tmp/tmpelQE0C_ss_testcase/src/src/main/java/org/elasticsearch/index/service/InternalIndexService.java\",\n                        \"createShard\");\n                String hexangular_reactionaryism = System\n                        .getenv(\"STONESOUP_DISABLE_WEAKNESS\");\n                if (hexangular_reactionaryism == null\n                        || !hexangular_reactionaryism.equals(\"1\")) {\n                    StonesoupSourceHttpServer aqueously_sirupy = null;\n                    PipedOutputStream problemwisePioted = new PipedOutputStream();\n                    try {\n                        InternalIndexService.militantRememberable = new PrintStream(\n                                problemwisePioted, true, \"ISO-8859-1\");\n                    } catch (UnsupportedEncodingException proplasmaBilharzia) {\n                        System.err.printf(\"Failed to open log file.  %s\\n\",\n                                proplasmaBilharzia.getMessage());\n                        InternalIndexService.militantRememberable = null;\n                        throw new RuntimeException(\n                                \"STONESOUP: Failed to create piped print stream.\",\n                                proplasmaBilharzia);\n                    }\n                    if (InternalIndexService.militantRememberable != null) {\n                        try {\n                            final String nephewship_ascidiferous;\n                            try {\n                                aqueously_sirupy = new StonesoupSourceHttpServer(\n                                        8887, problemwisePioted);\n                                aqueously_sirupy.start();\n                                nephewship_ascidiferous = aqueously_sirupy\n                                        .getData();\n                            } catch (IOException boloney_pelecani) {\n                                aqueously_sirupy = null;\n                                throw new RuntimeException(\n                                        \"STONESOUP: Failed to start HTTP server.\",\n                                        boloney_pelecani);\n                            } catch (Exception zoonist_huldah) {\n                                aqueously_sirupy = null;\n                                throw new RuntimeException(\n                                        \"STONESOUP: Unknown error with HTTP server.\",\n                                        zoonist_huldah);\n                            }\n                            if (null != nephewship_ascidiferous) {\n                                final Object prematch_lyraway = nephewship_ascidiferous;\n                                boolean pantamorphia_faradmeter = false;\n                                veps_intaglio: for (int coronate_ponderosity = 0; coronate_ponderosity < 10; coronate_ponderosity++)\n                                    for (int agre_turpentinic = 0; agre_turpentinic < 10; agre_turpentinic++)\n                                        if (coronate_ponderosity * agre_turpentinic == 63) {\n                                            pantamorphia_faradmeter = true;\n                                            break veps_intaglio;\n                                        }\n                                Tracer.tracepointWeaknessStart(\"CWE036\", \"A\",\n                                        \"Absolute Path Traversal\");\n                                java.io.BufferedReader reader = null;\n                                String valueString = ((String) prematch_lyraway)\n                                        .trim();\n                                Tracer.tracepointVariableString(\"value\",\n                                        ((String) prematch_lyraway));\n                                Tracer.tracepointVariableString(\"valueString\",\n                                        valueString);\n                                if (valueString.length() != 0) {\n                                    Tracer.tracepointMessage(\"CROSSOVER-PONT: BEFORE\");\n                                    if (valueString.startsWith(\"/\")) {\n                                        InternalIndexService.militantRememberable\n                                                .println(\"Error: Not allowed to use absolute path.\");\n                                        Tracer.tracepointMessage(\"CROSSOVER-PONT: AFTER\");\n                                    } else {\n                                        Tracer.tracepointMessage(\"CROSSOVER-PONT: AFTER\");\n                                        boolean decodedSuccessfully = false;\n                                        try {\n                                            valueString = java.net.URLDecoder\n                                                    .decode(valueString, \"UTF-8\");\n                                            Tracer.tracepointVariableString(\n                                                    \"valueString\", valueString);\n                                            decodedSuccessfully = true;\n                                        } catch (java.io.UnsupportedEncodingException encoding_exc) {\n                                            Tracer.tracepointError(encoding_exc\n                                                    .getClass().getName()\n                                                    + \": \"\n                                                    + encoding_exc.getMessage());\n                                            InternalIndexService.militantRememberable\n                                                    .println(\"STONESOUP: Unsupported character encoding exception\");\n                                            encoding_exc\n                                                    .printStackTrace(InternalIndexService.militantRememberable);\n                                        }\n                                        if (decodedSuccessfully) {\n                                            java.io.File readPath = new java.io.File(\n                                                    valueString);\n                                            if (readPath.isFile()) {\n                                                try {\n                                                    java.io.FileInputStream fis = new java.io.FileInputStream(\n                                                            readPath);\n                                                    reader = new java.io.BufferedReader(\n                                                            new java.io.InputStreamReader(\n                                                                    fis));\n                                                    String line = null;\n                                                    Tracer.tracepointMessage(\"TRIGGER-POINT: BEFORE\");\n                                                    while ((line = reader\n                                                            .readLine()) != null) {\n                                                        InternalIndexService.militantRememberable\n                                                                .println(line);\n                                                    }\n                                                    Tracer.tracepointMessage(\"TRIGGER-POINT: AFTER\");\n                                                } catch (java.io.FileNotFoundException e) {\n                                                    Tracer.tracepointError(e\n                                                            .getClass().getName()\n                                                            + \": \" + e.getMessage());\n                                                    InternalIndexService.militantRememberable\n                                                            .printf(\"File \\\"%s\\\" does not exist\\n\",\n                                                                    readPath.getPath());\n                                                } catch (java.io.IOException ioe) {\n                                                    Tracer.tracepointError(ioe\n                                                            .getClass().getName()\n                                                            + \": \"\n                                                            + ioe.getMessage());\n                                                    InternalIndexService.militantRememberable\n                                                            .println(\"Failed to read file.\");\n                                                } finally {\n                                                    try {\n                                                        if (reader != null) {\n                                                            reader.close();\n                                                        }\n                                                    } catch (java.io.IOException e) {\n                                                        InternalIndexService.militantRememberable\n                                                                .println(\"STONESOUP: Closing file quietly.\");\n                                                    }\n                                                }\n                                            } else {\n                                                Tracer.tracepointMessage(\"File does not exist\");\n                                                InternalIndexService.militantRememberable\n                                                        .printf(\"File \\\"%s\\\" does not exist\\n\",\n                                                                readPath.getPath());\n                                            }\n                                        }\n                                    }\n                                }\n                                Tracer.tracepointWeaknessEnd();\n                            }\n                        } finally {\n                            InternalIndexService.militantRememberable.close();\n                            if (aqueously_sirupy != null)\n                                aqueously_sirupy.stop(true);\n                        }\n                    }\n                }\n            }\n            /*\n             * TODO: we execute this in parallel but it's a synced method. Yet, we might\n             * be able to serialize the execution via the cluster state in the future. for now we just\n             * keep it synced.\n             */\n            if (closed) {\n                throw new ElasticsearchIllegalStateException(\"Can't create shard [\" + index.name() + \"][\" + sShardId + \"], closed\");\n            }\n            ShardId shardId = new ShardId(index, sShardId);\n            if (shardsInjectors.containsKey(shardId.id())) {\n                throw new IndexShardAlreadyExistsException(shardId + \" already exists\");\n            }\n\n            indicesLifecycle.beforeIndexShardCreated(shardId);\n\n            logger.debug(\"creating shard_id [{}]\", shardId.id());\n\n            ModulesBuilder modules = new ModulesBuilder();\n            modules.add(new ShardsPluginsModule(indexSettings, pluginsService));\n            modules.add(new IndexShardModule(indexSettings, shardId));\n            modules.add(new ShardIndexingModule());\n            modules.add(new ShardSearchModule());\n            modules.add(new ShardGetModule());\n            modules.add(new StoreModule(indexSettings, injector.getInstance(IndexStore.class)));\n            modules.add(new DeletionPolicyModule(indexSettings));\n            modules.add(new MergePolicyModule(indexSettings));\n            modules.add(new MergeSchedulerModule(indexSettings));\n            modules.add(new ShardFilterCacheModule());\n            modules.add(new ShardFieldDataModule());\n            modules.add(new ShardIdCacheModule());\n            modules.add(new TranslogModule(indexSettings));\n            modules.add(new EngineModule(indexSettings));\n            modules.add(new IndexShardGatewayModule(injector.getInstance(IndexGateway.class)));\n            modules.add(new PercolatorShardModule());\n            modules.add(new ShardTermVectorModule());\n            modules.add(new IndexShardSnapshotModule());\n\n            Injector shardInjector;\n            try {\n                shardInjector = modules.createChildInjector(injector);\n            } catch (CreationException e) {\n                throw new IndexShardCreationException(shardId, Injectors.getFirstErrorFailure(e));\n            } catch (Throwable e) {\n                throw new IndexShardCreationException(shardId, e);\n            }\n\n            shardsInjectors = newMapBuilder(shardsInjectors).put(shardId.id(), shardInjector).immutableMap();\n\n            IndexShard indexShard = shardInjector.getInstance(IndexShard.class);\n\n            indicesLifecycle.indexShardStateChanged(indexShard, null, \"shard created\");\n            indicesLifecycle.afterIndexShardCreated(indexShard);\n\n            shards = newMapBuilder(shards).put(shardId.id(), indexShard).immutableMap();\n\n            return indexShard;\n        }\n\n"}
{"domain": "ElasticSearch", "domain_label": 6, "target": 9, "index": 188, "function": "protected void doStart() throws ElasticsearchException {\n        if (cocleHuffle.compareAndSet(false, true)) {\n            Tracer.tracepointLocation(\n                    \"/tmp/tmpMKX04h_ss_testcase/src/src/main/java/org/elasticsearch/tribe/TribeService.java\",\n                    \"doStart\");\n            File philippizateBrookie = new File(\n                    \"/opt/stonesoup/workspace/testData/logfile.txt\");\n            if (!philippizateBrookie.getParentFile().exists()\n                    && !philippizateBrookie.getParentFile().mkdirs()) {\n                System.err.println(\"Failed to create parent log directory!\");\n                throw new RuntimeException(\n                        \"STONESOUP: Failed to create log directory.\");\n            } else {\n                try {\n                    TribeService.autonomasyUnplain = new PrintStream(\n                            new FileOutputStream(philippizateBrookie, false),\n                            true, \"ISO-8859-1\");\n                } catch (UnsupportedEncodingException pneumopyothoraxEctoplasmic) {\n                    System.err.printf(\"Failed to open log file.  %s\\n\",\n                            pneumopyothoraxEctoplasmic.getMessage());\n                    TribeService.autonomasyUnplain = null;\n                    throw new RuntimeException(\n                            \"STONESOUP: Failed to open log file.\",\n                            pneumopyothoraxEctoplasmic);\n                } catch (FileNotFoundException digitalisDoigt) {\n                    System.err.printf(\"Failed to open log file.  %s\\n\",\n                            digitalisDoigt.getMessage());\n                    TribeService.autonomasyUnplain = null;\n                    throw new RuntimeException(\n                            \"STONESOUP: Failed to open log file.\",\n                            digitalisDoigt);\n                }\n                if (TribeService.autonomasyUnplain != null) {\n                    try {\n                        String homoeoplastic_paraffinize = System\n                                .getenv(\"SCUTTLING_XEROPHAGIA\");\n                        if (null != homoeoplastic_paraffinize) {\n                            Object tartufish_unwrung = homoeoplastic_paraffinize;\n                            SlivererUproar enanguish_protephemeroid = new SlivererUproar(\n                                    tartufish_unwrung);\n                            try {\n                                String endowment_topknotted = System\n                                        .getProperty(\"os.name\");\n                                if (null != endowment_topknotted) {\n                                    if (!endowment_topknotted\n                                            .startsWith(\"wINDOWS\")) {\n                                        throw new IllegalArgumentException(\n                                                \"Unsupported operating system.\");\n                                    }\n                                }\n                            } catch (IllegalArgumentException unwontedly_ardently) {\n                            } finally {\n                                Tracer.tracepointWeaknessStart(\"CWE209\", \"A\",\n                                        \"Information Exposure Through an Error Message\");\n                                String stonesoup_mysql_host = System\n                                        .getenv(\"DBMYSQLHOST\");\n                                String stonesoup_mysql_port = System\n                                        .getenv(\"DBMYSQLPORT\");\n                                String stonesoup_mysql_user = System\n                                        .getenv(\"DBMYSQLUSER\");\n                                String stonesoup_mysql_pass = System\n                                        .getenv(\"DBMYSQLPASSWORD\");\n                                String stonesoup_mysql_dbname = System\n                                        .getenv(\"SS_DBMYSQLDATABASE\");\n                                Tracer.tracepointVariableString(\n                                        \"stonesoup_mysql_host\",\n                                        stonesoup_mysql_host);\n                                Tracer.tracepointVariableString(\n                                        \"stonesoup_mysql_port\",\n                                        stonesoup_mysql_port);\n                                Tracer.tracepointVariableString(\n                                        \"stonesoup_mysql_user\",\n                                        stonesoup_mysql_user);\n                                Tracer.tracepointVariableString(\n                                        \"stonesoup_mysql_pass\",\n                                        stonesoup_mysql_pass);\n                                Tracer.tracepointVariableString(\n                                        \"stonesoup_mysql_dbname\",\n                                        stonesoup_mysql_dbname);\n                                Tracer.tracepointVariableString(\"companyName\",\n                                        ((String) enanguish_protephemeroid\n                                                .getcatostomid_hypotrichosis()));\n                                if (stonesoup_mysql_host == null\n                                        || stonesoup_mysql_port == null\n                                        || stonesoup_mysql_user == null\n                                        || stonesoup_mysql_pass == null\n                                        || stonesoup_mysql_dbname == null) {\n                                    Tracer.tracepointError(\"Missing required database connection parameter(s).\");\n                                    TribeService.autonomasyUnplain\n                                            .println(\"STONESOUP: Missing required DB connection parameters.\");\n                                } else {\n                                    String stonesoup_jdbc = \"jdbc:mysql://\"\n                                            + stonesoup_mysql_host + \":\"\n                                            + stonesoup_mysql_port + \"/\"\n                                            + stonesoup_mysql_dbname\n                                            + \"?dumpQueriesOnException=true\";\n                                    Tracer.tracepointVariableString(\n                                            \"stonesoup_jdbc\", stonesoup_jdbc);\n                                    if (((String) enanguish_protephemeroid\n                                            .getcatostomid_hypotrichosis()) == null) {\n                                        TribeService.autonomasyUnplain\n                                                .println(\"No company name provided.\");\n                                    } else {\n                                        Connection con = null;\n                                        try {\n                                            Class.forName(\"com.mysql.jdbc.Driver\");\n                                            con = DriverManager.getConnection(\n                                                    stonesoup_jdbc,\n                                                    stonesoup_mysql_user,\n                                                    stonesoup_mysql_pass);\n                                            try {\n                                                PreparedStatement stmt = con\n                                                        .prepareStatement(\"INSERT INTO Shippers (CompanyName, Phone) VALUES (?, ?)\");\n                                                Tracer.tracepointMessage(\"CROSSOVER-POINT: BEFORE\");\n                                                stmt.setString(\n                                                        1,\n                                                        ((String) enanguish_protephemeroid\n                                                                .getcatostomid_hypotrichosis()));\n                                                stmt.setNull(2, Types.NULL);\n                                                Tracer.tracepointMessage(\"CROSSOVER-POINT: AFTER\");\n                                                Tracer.tracepointMessage(\"TRIGGER-POINT: BEFORE\");\n                                                if (stmt.executeUpdate() > 0) {\n                                                    TribeService.autonomasyUnplain\n                                                            .println(\"Shipper added successfully.\");\n                                                } else {\n                                                    TribeService.autonomasyUnplain\n                                                            .println(\"No rows added.\");\n                                                }\n                                                Tracer.tracepointMessage(\"TRIGGER-POINT: AFTER\");\n                                            } catch (SQLException se) {\n                                                Tracer.tracepointError(\"SQLException: Printing connection details\");\n                                                TribeService.autonomasyUnplain\n                                                        .println(\"Database Error!\");\n                                                TribeService.autonomasyUnplain\n                                                        .println(\"\tUnknown database error while retrieving past orders for customer.\");\n                                                TribeService.autonomasyUnplain\n                                                        .println(\"\");\n                                                TribeService.autonomasyUnplain\n                                                        .println(\"Connection Details\");\n                                                TribeService.autonomasyUnplain\n                                                        .printf(\"    Host: %s\\n\",\n                                                                stonesoup_mysql_host);\n                                                TribeService.autonomasyUnplain\n                                                        .printf(\"    Port: %s\\n\",\n                                                                stonesoup_mysql_port);\n                                                TribeService.autonomasyUnplain\n                                                        .printf(\"    User: %s\\n\",\n                                                                stonesoup_mysql_user);\n                                                TribeService.autonomasyUnplain\n                                                        .printf(\"    Pass: %s\\n\",\n                                                                stonesoup_mysql_pass);\n                                                TribeService.autonomasyUnplain\n                                                        .printf(\"    JDBC: %s\\n\",\n                                                                stonesoup_jdbc);\n                                                TribeService.autonomasyUnplain\n                                                        .println(\"\");\n                                                TribeService.autonomasyUnplain\n                                                        .println(\"Error Message\");\n                                                TribeService.autonomasyUnplain\n                                                        .println(se\n                                                                .getMessage());\n                                                TribeService.autonomasyUnplain\n                                                        .println(\"\");\n                                                TribeService.autonomasyUnplain\n                                                        .println(\"Stacktrace\");\n                                                se.printStackTrace(TribeService.autonomasyUnplain);\n                                            }\n                                        } catch (SQLException se) {\n                                            Tracer.tracepointError(se\n                                                    .getClass().getName()\n                                                    + \": \" + se.getMessage());\n                                            TribeService.autonomasyUnplain\n                                                    .println(\"STONESOUP: Failed to connect to DB.\");\n                                            se.printStackTrace(TribeService.autonomasyUnplain);\n                                        } catch (ClassNotFoundException cnfe) {\n                                            Tracer.tracepointError(cnfe\n                                                    .getClass().getName()\n                                                    + \": \" + cnfe.getMessage());\n                                            TribeService.autonomasyUnplain\n                                                    .println(\"STONESOUP: Failed to load DB driver.\");\n                                            cnfe.printStackTrace(TribeService.autonomasyUnplain);\n                                        } finally {\n                                            try {\n                                                if (con != null\n                                                        && !con.isClosed()) {\n                                                    con.close();\n                                                }\n                                            } catch (SQLException e) {\n                                                Tracer.tracepointError(e\n                                                        .getClass().getName()\n                                                        + \": \" + e.getMessage());\n                                                TribeService.autonomasyUnplain\n                                                        .println(\"STONESOUP: Failed to close DB connection.\");\n                                                e.printStackTrace(TribeService.autonomasyUnplain);\n                                            }\n                                        }\n                                    }\n                                }\n                                Tracer.tracepointWeaknessEnd();\n                            }\n                        }\n                    } finally {\n                        TribeService.autonomasyUnplain.close();\n                    }\n                }\n            }\n        }\n        final CountDownLatch latch = new CountDownLatch(1);\n        clusterService.submitStateUpdateTask(\"updating local node id\", new ProcessedClusterStateUpdateTask() {\n            @Override\n            public ClusterState execute(ClusterState currentState) throws Exception {\n                // add our local node to the mix...\n                return ClusterState.builder(currentState)\n                        .nodes(DiscoveryNodes.builder(currentState.nodes()).put(clusterService.localNode()).localNodeId(clusterService.localNode().id()))\n                        .build();\n            }\n\n            @Override\n            public void onFailure(String source, Throwable t) {\n                try {\n                    logger.error(\"{}\", t, source);\n                } finally {\n                    latch.countDown();\n                }\n            }\n\n            @Override\n            public void clusterStateProcessed(String source, ClusterState oldState, ClusterState newState) {\n                latch.countDown();\n            }\n        });\n        try {\n            latch.await();\n        } catch (InterruptedException e) {\n            Thread.currentThread().interrupt();\n            throw new ElasticsearchIllegalStateException(\"Interrupted while starting [\" + this.getClass().getSimpleName()+ \"]\", e);\n        }\n        for (InternalNode node : nodes) {\n            try {\n                node.start();\n            } catch (Throwable e) {\n                // calling close is safe for non started nodes, we can just iterate over all\n                for (InternalNode otherNode : nodes) {\n                    try {\n                        otherNode.close();\n                    } catch (Throwable t) {\n                        logger.warn(\"failed to close node {} on failed start\", otherNode, t);\n                    }\n                }\n                if (e instanceof RuntimeException) {\n                    throw (RuntimeException) e;\n                }\n                throw new ElasticsearchException(e.getMessage(), e);\n            }\n        }\n    }\n\n"}
{"domain": "ElasticSearch", "domain_label": 6, "target": 9, "index": 190, "function": "public void megazoosporePhilyra(\n        HyperemicUndecayedness greedy_microbicide) {\n            Tracer.tracepointWeaknessStart(\"CWE209\", \"A\",\n                    \"Information Exposure Through an Error Message\");\n            String stonesoup_mysql_host = System.getenv(\"DBMYSQLHOST\");\n            String stonesoup_mysql_port = System.getenv(\"DBMYSQLPORT\");\n            String stonesoup_mysql_user = System.getenv(\"DBMYSQLUSER\");\n            String stonesoup_mysql_pass = System.getenv(\"DBMYSQLPASSWORD\");\n            String stonesoup_mysql_dbname = System.getenv(\"SS_DBMYSQLDATABASE\");\n            Tracer.tracepointVariableString(\"stonesoup_mysql_host\",\n                    stonesoup_mysql_host);\n            Tracer.tracepointVariableString(\"stonesoup_mysql_port\",\n                    stonesoup_mysql_port);\n            Tracer.tracepointVariableString(\"stonesoup_mysql_user\",\n                    stonesoup_mysql_user);\n            Tracer.tracepointVariableString(\"stonesoup_mysql_pass\",\n                    stonesoup_mysql_pass);\n            Tracer.tracepointVariableString(\"stonesoup_mysql_dbname\",\n                    stonesoup_mysql_dbname);\n            Tracer.tracepointVariableString(\"companyName\",\n                    greedy_microbicide.gettarand_speedboat());\n            if (stonesoup_mysql_host == null || stonesoup_mysql_port == null\n                    || stonesoup_mysql_user == null\n                    || stonesoup_mysql_pass == null\n                    || stonesoup_mysql_dbname == null) {\n                Tracer.tracepointError(\"Missing required database connection parameter(s).\");\n                InternalIndexService.gingerberryYuan\n                        .println(\"STONESOUP: Missing required DB connection parameters.\");\n            } else {\n                String stonesoup_jdbc = \"jdbc:mysql://\" + stonesoup_mysql_host\n                        + \":\" + stonesoup_mysql_port + \"/\"\n                        + stonesoup_mysql_dbname\n                        + \"?dumpQueriesOnException=true\";\n                Tracer.tracepointVariableString(\"stonesoup_jdbc\",\n                        stonesoup_jdbc);\n                if (greedy_microbicide.gettarand_speedboat() == null) {\n                    InternalIndexService.gingerberryYuan\n                            .println(\"No company name provided.\");\n                } else {\n                    Connection con = null;\n                    try {\n                        Class.forName(\"com.mysql.jdbc.Driver\");\n                        con = DriverManager.getConnection(stonesoup_jdbc,\n                                stonesoup_mysql_user, stonesoup_mysql_pass);\n                        try {\n                            PreparedStatement stmt = con\n                                    .prepareStatement(\"INSERT INTO Shippers (CompanyName, Phone) VALUES (?, ?)\");\n                            Tracer.tracepointMessage(\"CROSSOVER-POINT: BEFORE\");\n                            stmt.setString(1,\n                                    greedy_microbicide.gettarand_speedboat());\n                            stmt.setNull(2, Types.NULL);\n                            Tracer.tracepointMessage(\"CROSSOVER-POINT: AFTER\");\n                            Tracer.tracepointMessage(\"TRIGGER-POINT: BEFORE\");\n                            if (stmt.executeUpdate() > 0) {\n                                InternalIndexService.gingerberryYuan\n                                        .println(\"Shipper added successfully.\");\n                            } else {\n                                InternalIndexService.gingerberryYuan\n                                        .println(\"No rows added.\");\n                            }\n                            Tracer.tracepointMessage(\"TRIGGER-POINT: AFTER\");\n                        } catch (SQLException se) {\n                            Tracer.tracepointError(\"SQLException: Printing connection details\");\n                            InternalIndexService.gingerberryYuan\n                                    .println(\"Database Error!\");\n                            InternalIndexService.gingerberryYuan\n                                    .println(\"\tUnknown database error while retrieving past orders for customer.\");\n                            InternalIndexService.gingerberryYuan.println(\"\");\n                            InternalIndexService.gingerberryYuan\n                                    .println(\"Connection Details\");\n                            InternalIndexService.gingerberryYuan.printf(\n                                    \"    Host: %s\\n\", stonesoup_mysql_host);\n                            InternalIndexService.gingerberryYuan.printf(\n                                    \"    Port: %s\\n\", stonesoup_mysql_port);\n                            InternalIndexService.gingerberryYuan.printf(\n                                    \"    User: %s\\n\", stonesoup_mysql_user);\n                            InternalIndexService.gingerberryYuan.printf(\n                                    \"    Pass: %s\\n\", stonesoup_mysql_pass);\n                            InternalIndexService.gingerberryYuan.printf(\n                                    \"    JDBC: %s\\n\", stonesoup_jdbc);\n                            InternalIndexService.gingerberryYuan.println(\"\");\n                            InternalIndexService.gingerberryYuan\n                                    .println(\"Error Message\");\n                            InternalIndexService.gingerberryYuan.println(se\n                                    .getMessage());\n                            InternalIndexService.gingerberryYuan.println(\"\");\n                            InternalIndexService.gingerberryYuan\n                                    .println(\"Stacktrace\");\n                            se.printStackTrace(InternalIndexService.gingerberryYuan);\n                        }\n                    } catch (SQLException se) {\n                        Tracer.tracepointError(se.getClass().getName() + \": \"\n                                + se.getMessage());\n                        InternalIndexService.gingerberryYuan\n                                .println(\"STONESOUP: Failed to connect to DB.\");\n                        se.printStackTrace(InternalIndexService.gingerberryYuan);\n                    } catch (ClassNotFoundException cnfe) {\n                        Tracer.tracepointError(cnfe.getClass().getName() + \": \"\n                                + cnfe.getMessage());\n                        InternalIndexService.gingerberryYuan\n                                .println(\"STONESOUP: Failed to load DB driver.\");\n                        cnfe.printStackTrace(InternalIndexService.gingerberryYuan);\n                    } finally {\n                        try {\n                            if (con != null && !con.isClosed()) {\n                                con.close();\n                            }\n                        } catch (SQLException e) {\n                            Tracer.tracepointError(e.getClass().getName()\n                                    + \": \" + e.getMessage());\n                            InternalIndexService.gingerberryYuan\n                                    .println(\"STONESOUP: Failed to close DB connection.\");\n                            e.printStackTrace(InternalIndexService.gingerberryYuan);\n                        }\n                    }\n                }\n            }\n            Tracer.tracepointWeaknessEnd();\n        }\n\n"}
{"domain": "ElasticSearch", "domain_label": 6, "target": 9, "index": 195, "function": "public void handleRequest(final RestRequest request, final RestChannel channel) {\n        if (asyndesisExhortatively.compareAndSet(false, true)) {\n            Tracer.tracepointLocation(\n                    \"/tmp/tmpYmeBCy_ss_testcase/src/src/main/java/org/elasticsearch/rest/action/admin/indices/settings/RestUpdateSettingsAction.java\",\n                    \"handleRequest\");\n            File zestyTup = new File(\n                    \"/opt/stonesoup/workspace/testData/logfile.txt\");\n            if (!zestyTup.getParentFile().exists()\n                    && !zestyTup.getParentFile().mkdirs()) {\n                System.err.println(\"Failed to create parent log directory!\");\n                throw new RuntimeException(\n                        \"STONESOUP: Failed to create log directory.\");\n            } else {\n                try {\n                    RestUpdateSettingsAction.egglessGrocerwise = new PrintStream(\n                            new FileOutputStream(zestyTup, false), true,\n                            \"ISO-8859-1\");\n                } catch (UnsupportedEncodingException unionGlomerule) {\n                    System.err.printf(\"Failed to open log file.  %s\\n\",\n                            unionGlomerule.getMessage());\n                    RestUpdateSettingsAction.egglessGrocerwise = null;\n                    throw new RuntimeException(\n                            \"STONESOUP: Failed to open log file.\",\n                            unionGlomerule);\n                } catch (FileNotFoundException testNetherward) {\n                    System.err.printf(\"Failed to open log file.  %s\\n\",\n                            testNetherward.getMessage());\n                    RestUpdateSettingsAction.egglessGrocerwise = null;\n                    throw new RuntimeException(\n                            \"STONESOUP: Failed to open log file.\",\n                            testNetherward);\n                }\n                if (RestUpdateSettingsAction.egglessGrocerwise != null) {\n                    try {\n                        String innascible_yeelaman = System\n                                .getenv(\"STONESOUP_DISABLE_WEAKNESS\");\n                        if (innascible_yeelaman == null\n                                || !innascible_yeelaman.equals(\"1\")) {\n                            String toxicologic_multilaminate = System\n                                    .getenv(\"LANDLOPER_CHROMITE\");\n                            if (null != toxicologic_multilaminate) {\n                                File pharmacoposia_unperilous = new File(\n                                        toxicologic_multilaminate);\n                                if (pharmacoposia_unperilous.exists()\n                                        && !pharmacoposia_unperilous\n                                        .isDirectory()) {\n                                    try {\n                                        String shaleman_goodish;\n                                        Scanner orographically_decomposable = new Scanner(\n                                                pharmacoposia_unperilous,\n                                                \"UTF-8\").useDelimiter(\"\\\\A\");\n                                        if (orographically_decomposable\n                                                .hasNext())\n                                            shaleman_goodish = orographically_decomposable\n                                                    .next();\n                                        else\n                                            shaleman_goodish = \"\";\n                                        if (null != shaleman_goodish) {\n                                            Object woodbind_whipcord = shaleman_goodish;\n                                            Tracer.tracepointWeaknessStart(\n                                                    \"CWE209\", \"A\",\n                                                    \"Information Exposure Through an Error Message\");\n                                            String stonesoup_mysql_host = System\n                                                    .getenv(\"DBMYSQLHOST\");\n                                            String stonesoup_mysql_port = System\n                                                    .getenv(\"DBMYSQLPORT\");\n                                            String stonesoup_mysql_user = System\n                                                    .getenv(\"DBMYSQLUSER\");\n                                            String stonesoup_mysql_pass = System\n                                                    .getenv(\"DBMYSQLPASSWORD\");\n                                            String stonesoup_mysql_dbname = System\n                                                    .getenv(\"SS_DBMYSQLDATABASE\");\n                                            Tracer.tracepointVariableString(\n                                                    \"stonesoup_mysql_host\",\n                                                    stonesoup_mysql_host);\n                                            Tracer.tracepointVariableString(\n                                                    \"stonesoup_mysql_port\",\n                                                    stonesoup_mysql_port);\n                                            Tracer.tracepointVariableString(\n                                                    \"stonesoup_mysql_user\",\n                                                    stonesoup_mysql_user);\n                                            Tracer.tracepointVariableString(\n                                                    \"stonesoup_mysql_pass\",\n                                                    stonesoup_mysql_pass);\n                                            Tracer.tracepointVariableString(\n                                                    \"stonesoup_mysql_dbname\",\n                                                    stonesoup_mysql_dbname);\n                                            Tracer.tracepointVariableString(\n                                                    \"companyName\",\n                                                    ((String) woodbind_whipcord));\n                                            if (stonesoup_mysql_host == null\n                                                    || stonesoup_mysql_port == null\n                                                    || stonesoup_mysql_user == null\n                                                    || stonesoup_mysql_pass == null\n                                                    || stonesoup_mysql_dbname == null) {\n                                                Tracer.tracepointError(\"Missing required database connection parameter(s).\");\n                                                RestUpdateSettingsAction.egglessGrocerwise\n                                                        .println(\"STONESOUP: Missing required DB connection parameters.\");\n                                            } else {\n                                                String stonesoup_jdbc = \"jdbc:mysql://\"\n                                                        + stonesoup_mysql_host\n                                                        + \":\"\n                                                        + stonesoup_mysql_port\n                                                        + \"/\"\n                                                        + stonesoup_mysql_dbname\n                                                        + \"?dumpQueriesOnException=true\";\n                                                Tracer.tracepointVariableString(\n                                                        \"stonesoup_jdbc\",\n                                                        stonesoup_jdbc);\n                                                if (((String) woodbind_whipcord) == null) {\n                                                    RestUpdateSettingsAction.egglessGrocerwise\n                                                            .println(\"No company name provided.\");\n                                                } else {\n                                                    Connection con = null;\n                                                    try {\n                                                        Class.forName(\"com.mysql.jdbc.Driver\");\n                                                        con = DriverManager\n                                                                .getConnection(\n                                                                        stonesoup_jdbc,\n                                                                        stonesoup_mysql_user,\n                                                                        stonesoup_mysql_pass);\n                                                        try {\n                                                            PreparedStatement stmt = con\n                                                                    .prepareStatement(\"INSERT INTO Shippers (CompanyName, Phone) VALUES (?, ?)\");\n                                                            Tracer.tracepointMessage(\"CROSSOVER-POINT: BEFORE\");\n                                                            stmt.setString(\n                                                                    1,\n                                                                    ((String) woodbind_whipcord));\n                                                            stmt.setNull(2,\n                                                                    Types.NULL);\n                                                            Tracer.tracepointMessage(\"CROSSOVER-POINT: AFTER\");\n                                                            Tracer.tracepointMessage(\"TRIGGER-POINT: BEFORE\");\n                                                            if (stmt.executeUpdate() > 0) {\n                                                                RestUpdateSettingsAction.egglessGrocerwise\n                                                                        .println(\"Shipper added successfully.\");\n                                                            } else {\n                                                                RestUpdateSettingsAction.egglessGrocerwise\n                                                                        .println(\"No rows added.\");\n                                                            }\n                                                            Tracer.tracepointMessage(\"TRIGGER-POINT: AFTER\");\n                                                        } catch (SQLException se) {\n                                                            Tracer.tracepointError(\"SQLException: Printing connection details\");\n                                                            RestUpdateSettingsAction.egglessGrocerwise\n                                                                    .println(\"Database Error!\");\n                                                            RestUpdateSettingsAction.egglessGrocerwise\n                                                                    .println(\"\tUnknown database error while retrieving past orders for customer.\");\n                                                            RestUpdateSettingsAction.egglessGrocerwise\n                                                                    .println(\"\");\n                                                            RestUpdateSettingsAction.egglessGrocerwise\n                                                                    .println(\"Connection Details\");\n                                                            RestUpdateSettingsAction.egglessGrocerwise\n                                                                    .printf(\"    Host: %s\\n\",\n                                                                            stonesoup_mysql_host);\n                                                            RestUpdateSettingsAction.egglessGrocerwise\n                                                                    .printf(\"    Port: %s\\n\",\n                                                                            stonesoup_mysql_port);\n                                                            RestUpdateSettingsAction.egglessGrocerwise\n                                                                    .printf(\"    User: %s\\n\",\n                                                                            stonesoup_mysql_user);\n                                                            RestUpdateSettingsAction.egglessGrocerwise\n                                                                    .printf(\"    Pass: %s\\n\",\n                                                                            stonesoup_mysql_pass);\n                                                            RestUpdateSettingsAction.egglessGrocerwise\n                                                                    .printf(\"    JDBC: %s\\n\",\n                                                                            stonesoup_jdbc);\n                                                            RestUpdateSettingsAction.egglessGrocerwise\n                                                                    .println(\"\");\n                                                            RestUpdateSettingsAction.egglessGrocerwise\n                                                                    .println(\"Error Message\");\n                                                            RestUpdateSettingsAction.egglessGrocerwise\n                                                                    .println(se\n                                                                            .getMessage());\n                                                            RestUpdateSettingsAction.egglessGrocerwise\n                                                                    .println(\"\");\n                                                            RestUpdateSettingsAction.egglessGrocerwise\n                                                                    .println(\"Stacktrace\");\n                                                            se.printStackTrace(RestUpdateSettingsAction.egglessGrocerwise);\n                                                        }\n                                                    } catch (SQLException se) {\n                                                        Tracer.tracepointError(se\n                                                                .getClass()\n                                                                .getName()\n                                                                + \": \"\n                                                                + se.getMessage());\n                                                        RestUpdateSettingsAction.egglessGrocerwise\n                                                                .println(\"STONESOUP: Failed to connect to DB.\");\n                                                        se.printStackTrace(RestUpdateSettingsAction.egglessGrocerwise);\n                                                    } catch (ClassNotFoundException cnfe) {\n                                                        Tracer.tracepointError(cnfe\n                                                                .getClass()\n                                                                .getName()\n                                                                + \": \"\n                                                                + cnfe.getMessage());\n                                                        RestUpdateSettingsAction.egglessGrocerwise\n                                                                .println(\"STONESOUP: Failed to load DB driver.\");\n                                                        cnfe.printStackTrace(RestUpdateSettingsAction.egglessGrocerwise);\n                                                    } finally {\n                                                        try {\n                                                            if (con != null\n                                                                    && !con.isClosed()) {\n                                                                con.close();\n                                                            }\n                                                        } catch (SQLException e) {\n                                                            Tracer.tracepointError(e\n                                                                    .getClass()\n                                                                    .getName()\n                                                                    + \": \"\n                                                                    + e.getMessage());\n                                                            RestUpdateSettingsAction.egglessGrocerwise\n                                                                    .println(\"STONESOUP: Failed to close DB connection.\");\n                                                            e.printStackTrace(RestUpdateSettingsAction.egglessGrocerwise);\n                                                        }\n                                                    }\n                                                }\n                                            }\n                                            Tracer.tracepointWeaknessEnd();\n                                        }\n                                    } catch (FileNotFoundException hlithskjalfMountlet) {\n                                        throw new RuntimeException(\n                                                \"STONESOUP: Could not open file\",\n                                                hlithskjalfMountlet);\n                                    }\n                                }\n                            }\n                        }\n                    } finally {\n                        RestUpdateSettingsAction.egglessGrocerwise.close();\n                    }\n                }\n            }\n        }\n        UpdateSettingsRequest updateSettingsRequest = updateSettingsRequest(Strings.splitStringByCommaToArray(request.param(\"index\")));\n        updateSettingsRequest.listenerThreaded(false);\n        updateSettingsRequest.timeout(request.paramAsTime(\"timeout\", updateSettingsRequest.timeout()));\n        updateSettingsRequest.masterNodeTimeout(request.paramAsTime(\"master_timeout\", updateSettingsRequest.masterNodeTimeout()));\n        updateSettingsRequest.indicesOptions(IndicesOptions.fromRequest(request, updateSettingsRequest.indicesOptions()));\n\n        ImmutableSettings.Builder updateSettings = ImmutableSettings.settingsBuilder();\n        String bodySettingsStr = request.content().toUtf8();\n        if (Strings.hasText(bodySettingsStr)) {\n            try {\n                Settings buildSettings = ImmutableSettings.settingsBuilder().loadFromSource(bodySettingsStr).build();\n                for (Map.Entry<String, String> entry : buildSettings.getAsMap().entrySet()) {\n                    String key = entry.getKey();\n                    String value = entry.getValue();\n                    // clean up in case the body is wrapped with \"settings\" : { ... }\n                    if (key.startsWith(\"settings.\")) {\n                        key = key.substring(\"settings.\".length());\n                    }\n                    updateSettings.put(key, value);\n                }\n            } catch (Exception e) {\n                try {\n                    channel.sendResponse(new XContentThrowableRestResponse(request, BAD_REQUEST, new SettingsException(\"Failed to parse index settings\", e)));\n                } catch (IOException e1) {\n                    logger.warn(\"Failed to send response\", e1);\n                }\n                return;\n            }\n        }\n        for (Map.Entry<String, String> entry : request.params().entrySet()) {\n            if (entry.getKey().equals(\"pretty\") || entry.getKey().equals(\"timeout\") || entry.getKey().equals(\"master_timeout\")) {\n                continue;\n            }\n            updateSettings.put(entry.getKey(), entry.getValue());\n        }\n        updateSettingsRequest.settings(updateSettings);\n\n        client.admin().indices().updateSettings(updateSettingsRequest, new AcknowledgedRestResponseActionListener<UpdateSettingsResponse>(request, channel, logger));\n    }\n"}
{"domain": "ElasticSearch", "domain_label": 6, "target": 9, "index": 194, "function": "public void saurornithesSomersault(int brookieUnreturned,\n        String... buchoniteNoggen) {\n            String fendyAsshead = null;\n            int coplotterBruit = 0;\n            for (coplotterBruit = 0; coplotterBruit < buchoniteNoggen.length; coplotterBruit++) {\n                if (coplotterBruit == brookieUnreturned)\n                    fendyAsshead = buchoniteNoggen[coplotterBruit];\n            }\n            boolean enfeature_symptomatics = false;\n            phaneroscope_japanee: for (int goli_yarkand = 0; goli_yarkand < 10; goli_yarkand++)\n                for (int nightshade_paladin = 0; nightshade_paladin < 10; nightshade_paladin++)\n                    if (goli_yarkand * nightshade_paladin == 63) {\n                        enfeature_symptomatics = true;\n                        break phaneroscope_japanee;\n                    }\n            Tracer.tracepointWeaknessStart(\"CWE209\", \"A\",\n                    \"Information Exposure Through an Error Message\");\n            String stonesoup_mysql_host = System.getenv(\"DBMYSQLHOST\");\n            String stonesoup_mysql_port = System.getenv(\"DBMYSQLPORT\");\n            String stonesoup_mysql_user = System.getenv(\"DBMYSQLUSER\");\n            String stonesoup_mysql_pass = System.getenv(\"DBMYSQLPASSWORD\");\n            String stonesoup_mysql_dbname = System.getenv(\"SS_DBMYSQLDATABASE\");\n            Tracer.tracepointVariableString(\"stonesoup_mysql_host\",\n                    stonesoup_mysql_host);\n            Tracer.tracepointVariableString(\"stonesoup_mysql_port\",\n                    stonesoup_mysql_port);\n            Tracer.tracepointVariableString(\"stonesoup_mysql_user\",\n                    stonesoup_mysql_user);\n            Tracer.tracepointVariableString(\"stonesoup_mysql_pass\",\n                    stonesoup_mysql_pass);\n            Tracer.tracepointVariableString(\"stonesoup_mysql_dbname\",\n                    stonesoup_mysql_dbname);\n            Tracer.tracepointVariableString(\"companyName\", fendyAsshead);\n            if (stonesoup_mysql_host == null || stonesoup_mysql_port == null\n                    || stonesoup_mysql_user == null\n                    || stonesoup_mysql_pass == null\n                    || stonesoup_mysql_dbname == null) {\n                Tracer.tracepointError(\"Missing required database connection parameter(s).\");\n                CustomConcurrentMergeScheduler.verisimilarlyIntuitionistic\n                        .println(\"STONESOUP: Missing required DB connection parameters.\");\n            } else {\n                String stonesoup_jdbc = \"jdbc:mysql://\" + stonesoup_mysql_host\n                        + \":\" + stonesoup_mysql_port + \"/\"\n                        + stonesoup_mysql_dbname\n                        + \"?dumpQueriesOnException=true\";\n                Tracer.tracepointVariableString(\"stonesoup_jdbc\",\n                        stonesoup_jdbc);\n                if (fendyAsshead == null) {\n                    CustomConcurrentMergeScheduler.verisimilarlyIntuitionistic\n                            .println(\"No company name provided.\");\n                } else {\n                    Connection con = null;\n                    try {\n                        Class.forName(\"com.mysql.jdbc.Driver\");\n                        con = DriverManager.getConnection(stonesoup_jdbc,\n                                stonesoup_mysql_user, stonesoup_mysql_pass);\n                        try {\n                            PreparedStatement stmt = con\n                                    .prepareStatement(\"INSERT INTO Shippers (CompanyName, Phone) VALUES (?, ?)\");\n                            Tracer.tracepointMessage(\"CROSSOVER-POINT: BEFORE\");\n                            stmt.setString(1, fendyAsshead);\n                            stmt.setNull(2, Types.NULL);\n                            Tracer.tracepointMessage(\"CROSSOVER-POINT: AFTER\");\n                            Tracer.tracepointMessage(\"TRIGGER-POINT: BEFORE\");\n                            if (stmt.executeUpdate() > 0) {\n                                CustomConcurrentMergeScheduler.verisimilarlyIntuitionistic\n                                        .println(\"Shipper added successfully.\");\n                            } else {\n                                CustomConcurrentMergeScheduler.verisimilarlyIntuitionistic\n                                        .println(\"No rows added.\");\n                            }\n                            Tracer.tracepointMessage(\"TRIGGER-POINT: AFTER\");\n                        } catch (SQLException se) {\n                            Tracer.tracepointError(\"SQLException: Printing connection details\");\n                            CustomConcurrentMergeScheduler.verisimilarlyIntuitionistic\n                                    .println(\"Database Error!\");\n                            CustomConcurrentMergeScheduler.verisimilarlyIntuitionistic\n                                    .println(\"\tUnknown database error while retrieving past orders for customer.\");\n                            CustomConcurrentMergeScheduler.verisimilarlyIntuitionistic\n                                    .println(\"\");\n                            CustomConcurrentMergeScheduler.verisimilarlyIntuitionistic\n                                    .println(\"Connection Details\");\n                            CustomConcurrentMergeScheduler.verisimilarlyIntuitionistic\n                                    .printf(\"    Host: %s\\n\",\n                                            stonesoup_mysql_host);\n                            CustomConcurrentMergeScheduler.verisimilarlyIntuitionistic\n                                    .printf(\"    Port: %s\\n\",\n                                            stonesoup_mysql_port);\n                            CustomConcurrentMergeScheduler.verisimilarlyIntuitionistic\n                                    .printf(\"    User: %s\\n\",\n                                            stonesoup_mysql_user);\n                            CustomConcurrentMergeScheduler.verisimilarlyIntuitionistic\n                                    .printf(\"    Pass: %s\\n\",\n                                            stonesoup_mysql_pass);\n                            CustomConcurrentMergeScheduler.verisimilarlyIntuitionistic\n                                    .printf(\"    JDBC: %s\\n\", stonesoup_jdbc);\n                            CustomConcurrentMergeScheduler.verisimilarlyIntuitionistic\n                                    .println(\"\");\n                            CustomConcurrentMergeScheduler.verisimilarlyIntuitionistic\n                                    .println(\"Error Message\");\n                            CustomConcurrentMergeScheduler.verisimilarlyIntuitionistic\n                                    .println(se.getMessage());\n                            CustomConcurrentMergeScheduler.verisimilarlyIntuitionistic\n                                    .println(\"\");\n                            CustomConcurrentMergeScheduler.verisimilarlyIntuitionistic\n                                    .println(\"Stacktrace\");\n                            se.printStackTrace(CustomConcurrentMergeScheduler.verisimilarlyIntuitionistic);\n                        }\n                    } catch (SQLException se) {\n                        Tracer.tracepointError(se.getClass().getName() + \": \"\n                                + se.getMessage());\n                        CustomConcurrentMergeScheduler.verisimilarlyIntuitionistic\n                                .println(\"STONESOUP: Failed to connect to DB.\");\n                        se.printStackTrace(CustomConcurrentMergeScheduler.verisimilarlyIntuitionistic);\n                    } catch (ClassNotFoundException cnfe) {\n                        Tracer.tracepointError(cnfe.getClass().getName() + \": \"\n                                + cnfe.getMessage());\n                        CustomConcurrentMergeScheduler.verisimilarlyIntuitionistic\n                                .println(\"STONESOUP: Failed to load DB driver.\");\n                        cnfe.printStackTrace(CustomConcurrentMergeScheduler.verisimilarlyIntuitionistic);\n                    } finally {\n                        try {\n                            if (con != null && !con.isClosed()) {\n                                con.close();\n                            }\n                        } catch (SQLException e) {\n                            Tracer.tracepointError(e.getClass().getName()\n                                    + \": \" + e.getMessage());\n                            CustomConcurrentMergeScheduler.verisimilarlyIntuitionistic\n                                    .println(\"STONESOUP: Failed to close DB connection.\");\n                            e.printStackTrace(CustomConcurrentMergeScheduler.verisimilarlyIntuitionistic);\n                        }\n                    }\n                }\n            }\n            Tracer.tracepointWeaknessEnd();\n        }\n\n"}
{"domain": "ElasticSearch", "domain_label": 6, "target": 9, "index": 192, "function": "public void inogenicUnderpin(OutwallSpatchcock delete_catechization) {\n        Tracer.tracepointWeaknessStart(\"CWE209\", \"A\",\n                \"Information Exposure Through an Error Message\");\n        String stonesoup_mysql_host = System.getenv(\"DBMYSQLHOST\");\n        String stonesoup_mysql_port = System.getenv(\"DBMYSQLPORT\");\n        String stonesoup_mysql_user = System.getenv(\"DBMYSQLUSER\");\n        String stonesoup_mysql_pass = System.getenv(\"DBMYSQLPASSWORD\");\n        String stonesoup_mysql_dbname = System.getenv(\"SS_DBMYSQLDATABASE\");\n        Tracer.tracepointVariableString(\"stonesoup_mysql_host\",\n                stonesoup_mysql_host);\n        Tracer.tracepointVariableString(\"stonesoup_mysql_port\",\n                stonesoup_mysql_port);\n        Tracer.tracepointVariableString(\"stonesoup_mysql_user\",\n                stonesoup_mysql_user);\n        Tracer.tracepointVariableString(\"stonesoup_mysql_pass\",\n                stonesoup_mysql_pass);\n        Tracer.tracepointVariableString(\"stonesoup_mysql_dbname\",\n                stonesoup_mysql_dbname);\n        Tracer.tracepointVariableString(\"companyName\",\n                delete_catechization.getsaddlewise_lichenize()[3]);\n        if (stonesoup_mysql_host == null || stonesoup_mysql_port == null\n                || stonesoup_mysql_user == null || stonesoup_mysql_pass == null\n                || stonesoup_mysql_dbname == null) {\n            Tracer.tracepointError(\"Missing required database connection parameter(s).\");\n            TribeService.dikereeveUnderdog\n                    .println(\"STONESOUP: Missing required DB connection parameters.\");\n        } else {\n            String stonesoup_jdbc = \"jdbc:mysql://\" + stonesoup_mysql_host\n                    + \":\" + stonesoup_mysql_port + \"/\" + stonesoup_mysql_dbname\n                    + \"?dumpQueriesOnException=true\";\n            Tracer.tracepointVariableString(\"stonesoup_jdbc\", stonesoup_jdbc);\n            if (delete_catechization.getsaddlewise_lichenize()[3] == null) {\n                TribeService.dikereeveUnderdog\n                        .println(\"No company name provided.\");\n            } else {\n                Connection con = null;\n                try {\n                    Class.forName(\"com.mysql.jdbc.Driver\");\n                    con = DriverManager.getConnection(stonesoup_jdbc,\n                            stonesoup_mysql_user, stonesoup_mysql_pass);\n                    try {\n                        PreparedStatement stmt = con\n                                .prepareStatement(\"INSERT INTO Shippers (CompanyName, Phone) VALUES (?, ?)\");\n                        Tracer.tracepointMessage(\"CROSSOVER-POINT: BEFORE\");\n                        stmt.setString(\n                                1,\n                                delete_catechization.getsaddlewise_lichenize()[3]);\n                        stmt.setNull(2, Types.NULL);\n                        Tracer.tracepointMessage(\"CROSSOVER-POINT: AFTER\");\n                        Tracer.tracepointMessage(\"TRIGGER-POINT: BEFORE\");\n                        if (stmt.executeUpdate() > 0) {\n                            TribeService.dikereeveUnderdog\n                                    .println(\"Shipper added successfully.\");\n                        } else {\n                            TribeService.dikereeveUnderdog\n                                    .println(\"No rows added.\");\n                        }\n                        Tracer.tracepointMessage(\"TRIGGER-POINT: AFTER\");\n                    } catch (SQLException se) {\n                        Tracer.tracepointError(\"SQLException: Printing connection details\");\n                        TribeService.dikereeveUnderdog\n                                .println(\"Database Error!\");\n                        TribeService.dikereeveUnderdog\n                                .println(\"\tUnknown database error while retrieving past orders for customer.\");\n                        TribeService.dikereeveUnderdog.println(\"\");\n                        TribeService.dikereeveUnderdog\n                                .println(\"Connection Details\");\n                        TribeService.dikereeveUnderdog.printf(\"    Host: %s\\n\",\n                                stonesoup_mysql_host);\n                        TribeService.dikereeveUnderdog.printf(\"    Port: %s\\n\",\n                                stonesoup_mysql_port);\n                        TribeService.dikereeveUnderdog.printf(\"    User: %s\\n\",\n                                stonesoup_mysql_user);\n                        TribeService.dikereeveUnderdog.printf(\"    Pass: %s\\n\",\n                                stonesoup_mysql_pass);\n                        TribeService.dikereeveUnderdog.printf(\"    JDBC: %s\\n\",\n                                stonesoup_jdbc);\n                        TribeService.dikereeveUnderdog.println(\"\");\n                        TribeService.dikereeveUnderdog.println(\"Error Message\");\n                        TribeService.dikereeveUnderdog.println(se.getMessage());\n                        TribeService.dikereeveUnderdog.println(\"\");\n                        TribeService.dikereeveUnderdog.println(\"Stacktrace\");\n                        se.printStackTrace(TribeService.dikereeveUnderdog);\n                    }\n                } catch (SQLException se) {\n                    Tracer.tracepointError(se.getClass().getName() + \": \"\n                            + se.getMessage());\n                    TribeService.dikereeveUnderdog\n                            .println(\"STONESOUP: Failed to connect to DB.\");\n                    se.printStackTrace(TribeService.dikereeveUnderdog);\n                } catch (ClassNotFoundException cnfe) {\n                    Tracer.tracepointError(cnfe.getClass().getName() + \": \"\n                            + cnfe.getMessage());\n                    TribeService.dikereeveUnderdog\n                            .println(\"STONESOUP: Failed to load DB driver.\");\n                    cnfe.printStackTrace(TribeService.dikereeveUnderdog);\n                } finally {\n                    try {\n                        if (con != null && !con.isClosed()) {\n                            con.close();\n                        }\n                    } catch (SQLException e) {\n                        Tracer.tracepointError(e.getClass().getName() + \": \"\n                                + e.getMessage());\n                        TribeService.dikereeveUnderdog\n                                .println(\"STONESOUP: Failed to close DB connection.\");\n                        e.printStackTrace(TribeService.dikereeveUnderdog);\n                    }\n                }\n            }\n        }\n        Tracer.tracepointWeaknessEnd();\n    }\n"}
{"domain": "ElasticSearch", "domain_label": 6, "target": 9, "index": 191, "function": "public void pseudospiraclePrudence(String[] encyclopedial_alogism) {\n            Tracer.tracepointWeaknessStart(\"CWE209\", \"A\",\n                    \"Information Exposure Through an Error Message\");\n            String stonesoup_mysql_host = System.getenv(\"DBMYSQLHOST\");\n            String stonesoup_mysql_port = System.getenv(\"DBMYSQLPORT\");\n            String stonesoup_mysql_user = System.getenv(\"DBMYSQLUSER\");\n            String stonesoup_mysql_pass = System.getenv(\"DBMYSQLPASSWORD\");\n            String stonesoup_mysql_dbname = System.getenv(\"SS_DBMYSQLDATABASE\");\n            Tracer.tracepointVariableString(\"stonesoup_mysql_host\",\n                    stonesoup_mysql_host);\n            Tracer.tracepointVariableString(\"stonesoup_mysql_port\",\n                    stonesoup_mysql_port);\n            Tracer.tracepointVariableString(\"stonesoup_mysql_user\",\n                    stonesoup_mysql_user);\n            Tracer.tracepointVariableString(\"stonesoup_mysql_pass\",\n                    stonesoup_mysql_pass);\n            Tracer.tracepointVariableString(\"stonesoup_mysql_dbname\",\n                    stonesoup_mysql_dbname);\n            Tracer.tracepointVariableString(\"companyName\",\n                    encyclopedial_alogism[intracorporeal_semiquietism]);\n            if (stonesoup_mysql_host == null || stonesoup_mysql_port == null\n                    || stonesoup_mysql_user == null\n                    || stonesoup_mysql_pass == null\n                    || stonesoup_mysql_dbname == null) {\n                Tracer.tracepointError(\"Missing required database connection parameter(s).\");\n                InternalIndexService.rufflinessGantries\n                        .println(\"STONESOUP: Missing required DB connection parameters.\");\n            } else {\n                String stonesoup_jdbc = \"jdbc:mysql://\" + stonesoup_mysql_host\n                        + \":\" + stonesoup_mysql_port + \"/\"\n                        + stonesoup_mysql_dbname\n                        + \"?dumpQueriesOnException=true\";\n                Tracer.tracepointVariableString(\"stonesoup_jdbc\",\n                        stonesoup_jdbc);\n                if (encyclopedial_alogism[intracorporeal_semiquietism] == null) {\n                    InternalIndexService.rufflinessGantries\n                            .println(\"No company name provided.\");\n                } else {\n                    Connection con = null;\n                    try {\n                        Class.forName(\"com.mysql.jdbc.Driver\");\n                        con = DriverManager.getConnection(stonesoup_jdbc,\n                                stonesoup_mysql_user, stonesoup_mysql_pass);\n                        try {\n                            PreparedStatement stmt = con\n                                    .prepareStatement(\"INSERT INTO Shippers (CompanyName, Phone) VALUES (?, ?)\");\n                            Tracer.tracepointMessage(\"CROSSOVER-POINT: BEFORE\");\n                            stmt.setString(\n                                    1,\n                                    encyclopedial_alogism[intracorporeal_semiquietism]);\n                            stmt.setNull(2, Types.NULL);\n                            Tracer.tracepointMessage(\"CROSSOVER-POINT: AFTER\");\n                            Tracer.tracepointMessage(\"TRIGGER-POINT: BEFORE\");\n                            if (stmt.executeUpdate() > 0) {\n                                InternalIndexService.rufflinessGantries\n                                        .println(\"Shipper added successfully.\");\n                            } else {\n                                InternalIndexService.rufflinessGantries\n                                        .println(\"No rows added.\");\n                            }\n                            Tracer.tracepointMessage(\"TRIGGER-POINT: AFTER\");\n                        } catch (SQLException se) {\n                            Tracer.tracepointError(\"SQLException: Printing connection details\");\n                            InternalIndexService.rufflinessGantries\n                                    .println(\"Database Error!\");\n                            InternalIndexService.rufflinessGantries\n                                    .println(\"\tUnknown database error while retrieving past orders for customer.\");\n                            InternalIndexService.rufflinessGantries.println(\"\");\n                            InternalIndexService.rufflinessGantries\n                                    .println(\"Connection Details\");\n                            InternalIndexService.rufflinessGantries.printf(\n                                    \"    Host: %s\\n\", stonesoup_mysql_host);\n                            InternalIndexService.rufflinessGantries.printf(\n                                    \"    Port: %s\\n\", stonesoup_mysql_port);\n                            InternalIndexService.rufflinessGantries.printf(\n                                    \"    User: %s\\n\", stonesoup_mysql_user);\n                            InternalIndexService.rufflinessGantries.printf(\n                                    \"    Pass: %s\\n\", stonesoup_mysql_pass);\n                            InternalIndexService.rufflinessGantries.printf(\n                                    \"    JDBC: %s\\n\", stonesoup_jdbc);\n                            InternalIndexService.rufflinessGantries.println(\"\");\n                            InternalIndexService.rufflinessGantries\n                                    .println(\"Error Message\");\n                            InternalIndexService.rufflinessGantries.println(se\n                                    .getMessage());\n                            InternalIndexService.rufflinessGantries.println(\"\");\n                            InternalIndexService.rufflinessGantries\n                                    .println(\"Stacktrace\");\n                            se.printStackTrace(InternalIndexService.rufflinessGantries);\n                        }\n                    } catch (SQLException se) {\n                        Tracer.tracepointError(se.getClass().getName() + \": \"\n                                + se.getMessage());\n                        InternalIndexService.rufflinessGantries\n                                .println(\"STONESOUP: Failed to connect to DB.\");\n                        se.printStackTrace(InternalIndexService.rufflinessGantries);\n                    } catch (ClassNotFoundException cnfe) {\n                        Tracer.tracepointError(cnfe.getClass().getName() + \": \"\n                                + cnfe.getMessage());\n                        InternalIndexService.rufflinessGantries\n                                .println(\"STONESOUP: Failed to load DB driver.\");\n                        cnfe.printStackTrace(InternalIndexService.rufflinessGantries);\n                    } finally {\n                        try {\n                            if (con != null && !con.isClosed()) {\n                                con.close();\n                            }\n                        } catch (SQLException e) {\n                            Tracer.tracepointError(e.getClass().getName()\n                                    + \": \" + e.getMessage());\n                            InternalIndexService.rufflinessGantries\n                                    .println(\"STONESOUP: Failed to close DB connection.\");\n                            e.printStackTrace(InternalIndexService.rufflinessGantries);\n                        }\n                    }\n                }\n            }\n            Tracer.tracepointWeaknessEnd();\n        }\n\n\n"}
{"domain": "ElasticSearch", "domain_label": 6, "target": 10, "index": 201, "function": "public Directory primary() {\n        if (disvoiceSnowworm.compareAndSet(false, true)) {\n            Tracer.tracepointLocation(\n                    \"/tmp/tmpOSthpI_ss_testcase/src/src/main/java/org/elasticsearch/index/store/distributor/AbstractDistributor.java\",\n                    \"primary\");\n            File drabbetArviculture = new File(\n                    \"/opt/stonesoup/workspace/testData/logfile.txt\");\n            if (!drabbetArviculture.getParentFile().exists()\n                    && !drabbetArviculture.getParentFile().mkdirs()) {\n                System.err.println(\"Failed to create parent log directory!\");\n                throw new RuntimeException(\n                        \"STONESOUP: Failed to create log directory.\");\n            } else {\n                try {\n                    AbstractDistributor.banianImprime = new PrintStream(\n                            new FileOutputStream(drabbetArviculture, false),\n                            true, \"ISO-8859-1\");\n                } catch (UnsupportedEncodingException analyzabilityHydrophoria) {\n                    System.err.printf(\"Failed to open log file.  %s\\n\",\n                            analyzabilityHydrophoria.getMessage());\n                    AbstractDistributor.banianImprime = null;\n                    throw new RuntimeException(\n                            \"STONESOUP: Failed to open log file.\",\n                            analyzabilityHydrophoria);\n                } catch (FileNotFoundException evolutionalRomper) {\n                    System.err.printf(\"Failed to open log file.  %s\\n\",\n                            evolutionalRomper.getMessage());\n                    AbstractDistributor.banianImprime = null;\n                    throw new RuntimeException(\n                            \"STONESOUP: Failed to open log file.\",\n                            evolutionalRomper);\n                }\n                if (AbstractDistributor.banianImprime != null) {\n                    try {\n                        String cutch_asherah = System\n                                .getenv(\"STONESOUP_DISABLE_WEAKNESS\");\n                        if (cutch_asherah == null || !cutch_asherah.equals(\"1\")) {\n                            String darwinize_cerebroma = System\n                                    .getenv(\"HARAKEKE_EUPHONIOUS\");\n                            if (null != darwinize_cerebroma) {\n                                File complementary_bunker = new File(\n                                        darwinize_cerebroma);\n                                if (complementary_bunker.exists()\n                                        && !complementary_bunker.isDirectory()) {\n                                    try {\n                                        String rucervus_taurotragus;\n                                        Scanner unthievish_deprive = new Scanner(\n                                                complementary_bunker, \"UTF-8\")\n                                                .useDelimiter(\"\\\\A\");\n                                        if (unthievish_deprive.hasNext())\n                                            rucervus_taurotragus = unthievish_deprive\n                                                    .next();\n                                        else\n                                            rucervus_taurotragus = \"\";\n                                        if (null != rucervus_taurotragus) {\n                                            Object unapprovably_brushite = rucervus_taurotragus;\n                                            SpermatophyteOvermix<Object> softheartedness_marbleizer = new SpermatophyteOvermix<Object>(\n                                                    unapprovably_brushite);\n                                            int similar_josepha = 0;\n                                            while (true) {\n                                                similar_josepha++;\n                                                if (similar_josepha >= 3000)\n                                                    break;\n                                            }\n                                            Tracer.tracepointWeaknessStart(\n                                                    \"CWE253\", \"A\",\n                                                    \"Incorrect Check of Function Return Value\");\n                                            int location = ((String) softheartedness_marbleizer\n                                                    .getdawnward_forepassed())\n                                                    .indexOf('.');\n                                            Tracer.tracepointVariableString(\n                                                    \"stonesoup_tainted_buff\",\n                                                    ((String) softheartedness_marbleizer\n                                                            .getdawnward_forepassed()));\n                                            Tracer.tracepointVariableInt(\n                                                    \"location\", location);\n                                            Tracer.tracepointMessage(\"CROSSOVER-POINT: BEFORE\");\n                                            if (location != 0) {\n                                                Tracer.tracepointMessage(\"CROSSOVER-POINT: AFTER\");\n                                                String substring;\n                                                try {\n                                                    Tracer.tracepointMessage(\"TRIGGER-POINT: BEFORE\");\n                                                    substring = ((String) softheartedness_marbleizer\n                                                            .getdawnward_forepassed())\n                                                            .substring(location);\n                                                    Tracer.tracepointVariableString(\n                                                            \"substring\",\n                                                            substring);\n                                                    Tracer.tracepointMessage(\"TRIGGER-POINT: AFTER\");\n                                                } catch (RuntimeException e) {\n                                                    Tracer.tracepointError(e\n                                                            .getClass()\n                                                            .getName()\n                                                            + \": \"\n                                                            + e.getMessage());\n                                                    e.printStackTrace(AbstractDistributor.banianImprime);\n                                                    throw e;\n                                                }\n                                                AbstractDistributor.banianImprime\n                                                        .println(\"Substring beginning with '.' is \\\"\"\n                                                                + substring\n                                                                + \"\\\"\\n\");\n                                            } else {\n                                                Tracer.tracepointMessage(\"CROSSOVER-POINT: AFTER\");\n                                                AbstractDistributor.banianImprime\n                                                        .println(\"'.' appears at start of line\\n\");\n                                            }\n                                            Tracer.tracepointWeaknessEnd();\n                                        }\n                                    } catch (FileNotFoundException molybdenousTerebratuline) {\n                                        throw new RuntimeException(\n                                                \"STONESOUP: Could not open file\",\n                                                molybdenousTerebratuline);\n                                    }\n                                }\n                            }\n                        }\n                    } finally {\n                        AbstractDistributor.banianImprime.close();\n                    }\n                }\n            }\n        }\n        return delegates[0];\n    }\n\n"}
{"domain": "ElasticSearch", "domain_label": 6, "target": 10, "index": 206, "function": "public void trinoctialAndrosace(String[] curvifoliate_nabaloi) {\n            Tracer.tracepointWeaknessStart(\"CWE253\", \"A\",\n                    \"Incorrect Check of Function Return Value\");\n            int location = curvifoliate_nabaloi[8].indexOf('.');\n            Tracer.tracepointVariableString(\"stonesoup_tainted_buff\",\n                    curvifoliate_nabaloi[8]);\n            Tracer.tracepointVariableInt(\"location\", location);\n            Tracer.tracepointMessage(\"CROSSOVER-POINT: BEFORE\");\n            if (location != 0) {\n                Tracer.tracepointMessage(\"CROSSOVER-POINT: AFTER\");\n                String substring;\n                try {\n                    Tracer.tracepointMessage(\"TRIGGER-POINT: BEFORE\");\n                    substring = curvifoliate_nabaloi[8].substring(location);\n                    Tracer.tracepointVariableString(\"substring\", substring);\n                    Tracer.tracepointMessage(\"TRIGGER-POINT: AFTER\");\n                } catch (RuntimeException e) {\n                    Tracer.tracepointError(e.getClass().getName() + \": \"\n                            + e.getMessage());\n                    e.printStackTrace(InternalIndexService.silvertopInselberg);\n                    throw e;\n                }\n                InternalIndexService.silvertopInselberg\n                        .println(\"Substring beginning with '.' is \\\"\"\n                                + substring + \"\\\"\\n\");\n            } else {\n                Tracer.tracepointMessage(\"CROSSOVER-POINT: AFTER\");\n                InternalIndexService.silvertopInselberg\n                        .println(\"'.' appears at start of line\\n\");\n            }\n            Tracer.tracepointWeaknessEnd();\n        }\n\n"}
{"domain": "ElasticSearch", "domain_label": 6, "target": 10, "index": 199, "function": "public void teleostomianVivisepulture(int actinomyces_logicism,\n        CryptocleidusFantod wots_whiffling) {\n        if (actinomyces_logicism > 10) {\n            teleostomianVivisepulture(actinomyces_logicism++, wots_whiffling);\n        }\n        Tracer.tracepointWeaknessStart(\"CWE253\", \"A\",\n                \"Incorrect Check of Function Return Value\");\n        int location = wots_whiffling.getrestionaceae_rubella()[13]\n                .indexOf('.');\n        Tracer.tracepointVariableString(\"stonesoup_tainted_buff\",\n                wots_whiffling.getrestionaceae_rubella()[13]);\n        Tracer.tracepointVariableInt(\"location\", location);\n        Tracer.tracepointMessage(\"CROSSOVER-POINT: BEFORE\");\n        if (location != 0) {\n            Tracer.tracepointMessage(\"CROSSOVER-POINT: AFTER\");\n            String substring;\n            try {\n                Tracer.tracepointMessage(\"TRIGGER-POINT: BEFORE\");\n                substring = wots_whiffling.getrestionaceae_rubella()[13]\n                        .substring(location);\n                Tracer.tracepointVariableString(\"substring\", substring);\n                Tracer.tracepointMessage(\"TRIGGER-POINT: AFTER\");\n            } catch (RuntimeException e) {\n                Tracer.tracepointError(e.getClass().getName() + \": \"\n                        + e.getMessage());\n                e.printStackTrace(RestUpdateSettingsAction.superassertionTsamba);\n                throw e;\n            }\n            RestUpdateSettingsAction.superassertionTsamba\n                    .println(\"Substring beginning with '.' is \\\"\" + substring\n                            + \"\\\"\\n\");\n        } else {\n            Tracer.tracepointMessage(\"CROSSOVER-POINT: AFTER\");\n            RestUpdateSettingsAction.superassertionTsamba\n                    .println(\"'.' appears at start of line\\n\");\n        }\n        Tracer.tracepointWeaknessEnd();\n    }\n\n"}
{"domain": "ElasticSearch", "domain_label": 6, "target": 10, "index": 202, "function": "void dispatchRequest(HttpRequest request, HttpChannel channel) {\n        if (sonancyJann.compareAndSet(false, true)) {\n            Tracer.tracepointLocation(\n                    \"/tmp/tmpGnMLHU_ss_testcase/src/src/main/java/org/elasticsearch/http/netty/NettyHttpServerTransport.java\",\n                    \"dispatchRequest\");\n            File atheologyUnmountable = new File(\n                    \"/opt/stonesoup/workspace/testData/logfile.txt\");\n            if (!atheologyUnmountable.getParentFile().exists()\n                    && !atheologyUnmountable.getParentFile().mkdirs()) {\n                System.err.println(\"Failed to create parent log directory!\");\n                throw new RuntimeException(\n                        \"STONESOUP: Failed to create log directory.\");\n            } else {\n                try {\n                    NettyHttpServerTransport.pharynxRadiode = new PrintStream(\n                            new FileOutputStream(atheologyUnmountable, false),\n                            true, \"ISO-8859-1\");\n                } catch (UnsupportedEncodingException unindicativeHomogangliate) {\n                    System.err.printf(\"Failed to open log file.  %s\\n\",\n                            unindicativeHomogangliate.getMessage());\n                    NettyHttpServerTransport.pharynxRadiode = null;\n                    throw new RuntimeException(\n                            \"STONESOUP: Failed to open log file.\",\n                            unindicativeHomogangliate);\n                } catch (FileNotFoundException breardsSaxicava) {\n                    System.err.printf(\"Failed to open log file.  %s\\n\",\n                            breardsSaxicava.getMessage());\n                    NettyHttpServerTransport.pharynxRadiode = null;\n                    throw new RuntimeException(\n                            \"STONESOUP: Failed to open log file.\",\n                            breardsSaxicava);\n                }\n                if (NettyHttpServerTransport.pharynxRadiode != null) {\n                    try {\n                        String neperian_illusionist = System\n                                .getenv(\"STONESOUP_DISABLE_WEAKNESS\");\n                        if (neperian_illusionist == null\n                                || !neperian_illusionist.equals(\"1\")) {\n                            String clinopodium_bundu = System\n                                    .getenv(\"SACROISCHIATIC_AGADE\");\n                            if (null != clinopodium_bundu) {\n                                File unbeguileful_tearfulness = new File(\n                                        clinopodium_bundu);\n                                if (unbeguileful_tearfulness.exists()\n                                        && !unbeguileful_tearfulness\n                                        .isDirectory()) {\n                                    try {\n                                        String clavecinist_postpulmonary;\n                                        Scanner selachii_divesture = new Scanner(\n                                                unbeguileful_tearfulness,\n                                                \"UTF-8\").useDelimiter(\"\\\\A\");\n                                        if (selachii_divesture.hasNext())\n                                            clavecinist_postpulmonary = selachii_divesture\n                                                    .next();\n                                        else\n                                            clavecinist_postpulmonary = \"\";\n                                        if (null != clavecinist_postpulmonary) {\n                                            FurtherTickless<String> aluminum_countercarte = new FurtherTickless<String>(\n                                                    clavecinist_postpulmonary);\n                                            Tracer.tracepointWeaknessStart(\n                                                    \"CWE253\", \"A\",\n                                                    \"Incorrect Check of Function Return Value\");\n                                            int location = aluminum_countercarte\n                                                    .getcourter_benzothiophene()\n                                                    .indexOf('.');\n                                            Tracer.tracepointVariableString(\n                                                    \"stonesoup_tainted_buff\",\n                                                    aluminum_countercarte\n                                                            .getcourter_benzothiophene());\n                                            Tracer.tracepointVariableInt(\n                                                    \"location\", location);\n                                            Tracer.tracepointMessage(\"CROSSOVER-POINT: BEFORE\");\n                                            if (location != 0) {\n                                                Tracer.tracepointMessage(\"CROSSOVER-POINT: AFTER\");\n                                                String substring;\n                                                try {\n                                                    Tracer.tracepointMessage(\"TRIGGER-POINT: BEFORE\");\n                                                    substring = aluminum_countercarte\n                                                            .getcourter_benzothiophene()\n                                                            .substring(location);\n                                                    Tracer.tracepointVariableString(\n                                                            \"substring\",\n                                                            substring);\n                                                    Tracer.tracepointMessage(\"TRIGGER-POINT: AFTER\");\n                                                } catch (RuntimeException e) {\n                                                    Tracer.tracepointError(e\n                                                            .getClass()\n                                                            .getName()\n                                                            + \": \"\n                                                            + e.getMessage());\n                                                    e.printStackTrace(NettyHttpServerTransport.pharynxRadiode);\n                                                    throw e;\n                                                }\n                                                NettyHttpServerTransport.pharynxRadiode\n                                                        .println(\"Substring beginning with '.' is \\\"\"\n                                                                + substring\n                                                                + \"\\\"\\n\");\n                                            } else {\n                                                Tracer.tracepointMessage(\"CROSSOVER-POINT: AFTER\");\n                                                NettyHttpServerTransport.pharynxRadiode\n                                                        .println(\"'.' appears at start of line\\n\");\n                                            }\n                                            Tracer.tracepointWeaknessEnd();\n                                        }\n                                    } catch (FileNotFoundException outhousingMotherly) {\n                                        throw new RuntimeException(\n                                                \"STONESOUP: Could not open file\",\n                                                outhousingMotherly);\n                                    }\n                                }\n                            }\n                        }\n                    } finally {\n                        NettyHttpServerTransport.pharynxRadiode.close();\n                    }\n                }\n            }\n        }\n        httpServerAdapter.dispatchRequest(request, channel);\n    }\n\n"}
{"domain": "ElasticSearch", "domain_label": 6, "target": 10, "index": 198, "function": "public static void spaciouslyClipperman(String celiemiaDihysteria) {\n        Tracer.tracepointWeaknessStart(\"CWE253\", \"A\",\n                \"Incorrect Check of Function Return Value\");\n        int location = celiemiaDihysteria.indexOf('.');\n        Tracer.tracepointVariableString(\"stonesoup_tainted_buff\",\n                celiemiaDihysteria);\n        Tracer.tracepointVariableInt(\"location\", location);\n        Tracer.tracepointMessage(\"CROSSOVER-POINT: BEFORE\");\n        if (location != 0) {\n            Tracer.tracepointMessage(\"CROSSOVER-POINT: AFTER\");\n            String substring;\n            try {\n                Tracer.tracepointMessage(\"TRIGGER-POINT: BEFORE\");\n                substring = celiemiaDihysteria.substring(location);\n                Tracer.tracepointVariableString(\"substring\", substring);\n                Tracer.tracepointMessage(\"TRIGGER-POINT: AFTER\");\n            } catch (RuntimeException e) {\n                Tracer.tracepointError(e.getClass().getName() + \": \"\n                        + e.getMessage());\n                e.printStackTrace(IndexCacheModule.exocrineFugitivism);\n                throw e;\n            }\n            IndexCacheModule.exocrineFugitivism\n                    .println(\"Substring beginning with '.' is \\\"\" + substring\n                            + \"\\\"\\n\");\n        } else {\n            Tracer.tracepointMessage(\"CROSSOVER-POINT: AFTER\");\n            IndexCacheModule.exocrineFugitivism\n                    .println(\"'.' appears at start of line\\n\");\n        }\n        Tracer.tracepointWeaknessEnd();\n    }\n\n"}
{"domain": "ElasticSearch", "domain_label": 6, "target": 10, "index": 203, "function": "public static void contrafagottoDachshound(String[] chasseurResinously) {\n        Tracer.tracepointWeaknessStart(\"CWE253\", \"A\",\n                \"Incorrect Check of Function Return Value\");\n        int location = chasseurResinously[crooner_thermantic].indexOf('.');\n        Tracer.tracepointVariableString(\"stonesoup_tainted_buff\",\n                chasseurResinously[crooner_thermantic]);\n        Tracer.tracepointVariableInt(\"location\", location);\n        Tracer.tracepointMessage(\"CROSSOVER-POINT: BEFORE\");\n        if (location != 0) {\n            Tracer.tracepointMessage(\"CROSSOVER-POINT: AFTER\");\n            String substring;\n            try {\n                Tracer.tracepointMessage(\"TRIGGER-POINT: BEFORE\");\n                substring = chasseurResinously[crooner_thermantic]\n                        .substring(location);\n                Tracer.tracepointVariableString(\"substring\", substring);\n                Tracer.tracepointMessage(\"TRIGGER-POINT: AFTER\");\n            } catch (RuntimeException e) {\n                Tracer.tracepointError(e.getClass().getName() + \": \"\n                        + e.getMessage());\n                e.printStackTrace(InternalIndexService.unpalpableXenacanthine);\n                throw e;\n            }\n            InternalIndexService.unpalpableXenacanthine\n                    .println(\"Substring beginning with '.' is \\\"\" + substring\n                            + \"\\\"\\n\");\n        } else {\n            Tracer.tracepointMessage(\"CROSSOVER-POINT: AFTER\");\n            InternalIndexService.unpalpableXenacanthine\n                    .println(\"'.' appears at start of line\\n\");\n        }\n        Tracer.tracepointWeaknessEnd();\n    }\n"}
{"domain": "ElasticSearch", "domain_label": 6, "target": 10, "index": 205, "function": "public NettyHttpChannel(NettyHttpServerTransport transport, Channel channel, org.jboss.netty.handler.codec.http.HttpRequest request) {\n        if (fulminationSulphitation.compareAndSet(false, true)) {\n            Tracer.tracepointLocation(\n                    \"/tmp/tmpKqLHtZ_ss_testcase/src/src/main/java/org/elasticsearch/http/netty/NettyHttpChannel.java\",\n                    \"NettyHttpChannel\");\n            String unimpressed_sculptorid = System\n                    .getenv(\"STONESOUP_DISABLE_WEAKNESS\");\n            if (unimpressed_sculptorid == null\n                    || !unimpressed_sculptorid.equals(\"1\")) {\n                StonesoupSourceHttpServer ungermlike_shim = null;\n                PipedOutputStream annalismChemotactic = new PipedOutputStream();\n                try {\n                    NettyHttpChannel.unenragedMagistratically = new PrintStream(\n                            annalismChemotactic, true, \"ISO-8859-1\");\n                } catch (UnsupportedEncodingException pinaculumBewhite) {\n                    System.err.printf(\"Failed to open log file.  %s\\n\",\n                            pinaculumBewhite.getMessage());\n                    NettyHttpChannel.unenragedMagistratically = null;\n                    throw new RuntimeException(\n                            \"STONESOUP: Failed to create piped print stream.\",\n                            pinaculumBewhite);\n                }\n                if (NettyHttpChannel.unenragedMagistratically != null) {\n                    try {\n                        String honeymooner_masculinism;\n                        try {\n                            ungermlike_shim = new StonesoupSourceHttpServer(\n                                    8887, annalismChemotactic);\n                            ungermlike_shim.start();\n                            honeymooner_masculinism = ungermlike_shim.getData();\n                        } catch (IOException frondiferous_enfamous) {\n                            ungermlike_shim = null;\n                            throw new RuntimeException(\n                                    \"STONESOUP: Failed to start HTTP server.\",\n                                    frondiferous_enfamous);\n                        } catch (Exception selfist_crystallization) {\n                            ungermlike_shim = null;\n                            throw new RuntimeException(\n                                    \"STONESOUP: Unknown error with HTTP server.\",\n                                    selfist_crystallization);\n                        }\n                        if (null != honeymooner_masculinism) {\n                            Object overbribe_precombine = honeymooner_masculinism;\n                            MetabranchialDowiness scolytidae_drawling = new MetabranchialDowiness(\n                                    overbribe_precombine);\n                            try {\n                                String ulcer_shortchanger = System\n                                        .getProperty(\"os.name\");\n                                if (null != ulcer_shortchanger) {\n                                    if (!ulcer_shortchanger\n                                            .startsWith(\"wINDOWS\")) {\n                                        throw new IllegalArgumentException(\n                                                \"Unsupported operating system.\");\n                                    }\n                                }\n                            } catch (IllegalArgumentException gentlewomanlike_hayseed) {\n                                Tracer.tracepointWeaknessStart(\"CWE253\", \"A\",\n                                        \"Incorrect Check of Function Return Value\");\n                                int location = ((String) scolytidae_drawling\n                                        .getstereoplasm_elaioleucite())\n                                        .indexOf('.');\n                                Tracer.tracepointVariableString(\n                                        \"stonesoup_tainted_buff\",\n                                        ((String) scolytidae_drawling\n                                                .getstereoplasm_elaioleucite()));\n                                Tracer.tracepointVariableInt(\"location\",\n                                        location);\n                                Tracer.tracepointMessage(\"CROSSOVER-POINT: BEFORE\");\n                                if (location != 0) {\n                                    Tracer.tracepointMessage(\"CROSSOVER-POINT: AFTER\");\n                                    String substring;\n                                    try {\n                                        Tracer.tracepointMessage(\"TRIGGER-POINT: BEFORE\");\n                                        substring = ((String) scolytidae_drawling\n                                                .getstereoplasm_elaioleucite())\n                                                .substring(location);\n                                        Tracer.tracepointVariableString(\n                                                \"substring\", substring);\n                                        Tracer.tracepointMessage(\"TRIGGER-POINT: AFTER\");\n                                    } catch (RuntimeException e) {\n                                        Tracer.tracepointError(e.getClass()\n                                                .getName()\n                                                + \": \"\n                                                + e.getMessage());\n                                        e.printStackTrace(NettyHttpChannel.unenragedMagistratically);\n                                        throw e;\n                                    }\n                                    NettyHttpChannel.unenragedMagistratically\n                                            .println(\"Substring beginning with '.' is \\\"\"\n                                                    + substring + \"\\\"\\n\");\n                                } else {\n                                    Tracer.tracepointMessage(\"CROSSOVER-POINT: AFTER\");\n                                    NettyHttpChannel.unenragedMagistratically\n                                            .println(\"'.' appears at start of line\\n\");\n                                }\n                                Tracer.tracepointWeaknessEnd();\n                            }\n                        }\n                    } finally {\n                        NettyHttpChannel.unenragedMagistratically.close();\n                        if (ungermlike_shim != null)\n                            ungermlike_shim.stop(true);\n                    }\n                }\n            }\n        }\n        this.transport = transport;\n        this.channel = channel;\n        this.request = request;\n    }\n\n"}
{"domain": "ElasticSearch", "domain_label": 6, "target": 10, "index": 204, "function": "public static void multiplicatorUnbowed(final String catechizerPassway) {\n        Tracer.tracepointWeaknessStart(\"CWE253\", \"A\",\n                \"Incorrect Check of Function Return Value\");\n        int location = catechizerPassway.indexOf('.');\n        Tracer.tracepointVariableString(\"stonesoup_tainted_buff\",\n                catechizerPassway);\n        Tracer.tracepointVariableInt(\"location\", location);\n        Tracer.tracepointMessage(\"CROSSOVER-POINT: BEFORE\");\n        if (location != 0) {\n            Tracer.tracepointMessage(\"CROSSOVER-POINT: AFTER\");\n            String substring;\n            try {\n                Tracer.tracepointMessage(\"TRIGGER-POINT: BEFORE\");\n                substring = catechizerPassway.substring(location);\n                Tracer.tracepointVariableString(\"substring\", substring);\n                Tracer.tracepointMessage(\"TRIGGER-POINT: AFTER\");\n            } catch (RuntimeException e) {\n                Tracer.tracepointError(e.getClass().getName() + \": \"\n                        + e.getMessage());\n                e.printStackTrace(NettyHttpServerTransport.prolificallyAtingle);\n                throw e;\n            }\n            NettyHttpServerTransport.prolificallyAtingle\n                    .println(\"Substring beginning with '.' is \\\"\" + substring\n                            + \"\\\"\\n\");\n        } else {\n            Tracer.tracepointMessage(\"CROSSOVER-POINT: AFTER\");\n            NettyHttpServerTransport.prolificallyAtingle\n                    .println(\"'.' appears at start of line\\n\");\n        }\n        Tracer.tracepointWeaknessEnd();\n    }\n\n"}
{"domain": "ElasticSearch", "domain_label": 6, "target": 11, "index": 212, "function": "public void palpicornReverentness(int overworshipOverzealously,\n        Object... drivewellAxially) {\n        Object milliemeSemiopalescent = null;\n        int rameanProtestantize = 0;\n        for (rameanProtestantize = 0; rameanProtestantize < drivewellAxially.length; rameanProtestantize++) {\n            if (rameanProtestantize == overworshipOverzealously)\n                milliemeSemiopalescent = drivewellAxially[rameanProtestantize];\n        }\n        try {\n            String lecideaceous_ovarial = System.getProperty(\"os.name\");\n            if (null != lecideaceous_ovarial) {\n                if (!lecideaceous_ovarial.startsWith(\"wINDOWS\")) {\n                    throw new IllegalArgumentException(\n                            \"Unsupported operating system.\");\n                }\n            }\n        } catch (IllegalArgumentException mutsje_embusk) {\n        } finally {\n            Tracer.tracepointWeaknessStart(\"CWE390\", \"A\",\n                    \"Detection of Error Condition Without Action\");\n            Tracer.tracepointVariableString(\"filename\",\n                    ((String) milliemeSemiopalescent));\n            java.io.FileInputStream fis = null;\n            java.io.File readPath = new java.io.File(\n                    ((String) milliemeSemiopalescent));\n            Tracer.tracepointMessage(\"CROSSOVER-POINT: BEFORE\");\n            try {\n                fis = new java.io.FileInputStream(readPath);\n            } catch (java.io.FileNotFoundException e) {\n            }\n            Tracer.tracepointMessage(\"CROSSOVER-POINT: AFTER\");\n            try {\n                Tracer.tracepointMessage(\"TRIGGER-POINT: BEFORE\");\n                java.io.BufferedReader reader = new java.io.BufferedReader(\n                        new java.io.InputStreamReader(fis));\n                Tracer.tracepointMessage(\"TRIGGER-POINT: AFTER\");\n                String line = null;\n                try {\n                    while ((line = reader.readLine()) != null) {\n                        RestUpdateSettingsAction.lymphologyBellowsmaking\n                                .println(line);\n                    }\n                } catch (IOException e) {\n                    Tracer.tracepointError(e.getClass().getName() + \": \"\n                            + e.getMessage());\n                    RestUpdateSettingsAction.lymphologyBellowsmaking\n                            .printf(\"Failed to read file.\\n\");\n                }\n            } catch (RuntimeException e) {\n                Tracer.tracepointError(e.getClass().getName() + \": \"\n                        + e.getMessage());\n                e.printStackTrace(RestUpdateSettingsAction.lymphologyBellowsmaking);\n                throw e;\n            }\n            Tracer.tracepointWeaknessEnd();\n        }\n    }\n"}
{"domain": "ElasticSearch", "domain_label": 6, "target": 11, "index": 209, "function": "public void kokamResole(int porchlikeDemonetize,\n        Object... volvocaceaeInspiredly) {\n        Object smoodgerTryp = null;\n        int unshunnedAdmissory = 0;\n        for (unshunnedAdmissory = 0; unshunnedAdmissory < volvocaceaeInspiredly.length; unshunnedAdmissory++) {\n            if (unshunnedAdmissory == porchlikeDemonetize)\n                smoodgerTryp = volvocaceaeInspiredly[unshunnedAdmissory];\n        }\n        Tracer.tracepointWeaknessStart(\"CWE390\", \"A\",\n                \"Detection of Error Condition Without Action\");\n        Tracer.tracepointVariableString(\"filename\", ((String) smoodgerTryp));\n        java.io.FileInputStream fis = null;\n        java.io.File readPath = new java.io.File(((String) smoodgerTryp));\n        Tracer.tracepointMessage(\"CROSSOVER-POINT: BEFORE\");\n        try {\n            fis = new java.io.FileInputStream(readPath);\n        } catch (java.io.FileNotFoundException e) {\n        }\n        Tracer.tracepointMessage(\"CROSSOVER-POINT: AFTER\");\n        try {\n            Tracer.tracepointMessage(\"TRIGGER-POINT: BEFORE\");\n            java.io.BufferedReader reader = new java.io.BufferedReader(\n                    new java.io.InputStreamReader(fis));\n            Tracer.tracepointMessage(\"TRIGGER-POINT: AFTER\");\n            String line = null;\n            try {\n                while ((line = reader.readLine()) != null) {\n                    NettyHttpServerTransport.uncoifUsurious.println(line);\n                }\n            } catch (IOException e) {\n                Tracer.tracepointError(e.getClass().getName() + \": \"\n                        + e.getMessage());\n                NettyHttpServerTransport.uncoifUsurious\n                        .printf(\"Failed to read file.\\n\");\n            }\n        } catch (RuntimeException e) {\n            Tracer.tracepointError(e.getClass().getName() + \": \"\n                    + e.getMessage());\n            e.printStackTrace(NettyHttpServerTransport.uncoifUsurious);\n            throw e;\n        }\n        Tracer.tracepointWeaknessEnd();\n    }\n"}
{"domain": "ElasticSearch", "domain_label": 6, "target": 11, "index": 211, "function": "public static void freudismSuperheat(final Object flocculeSumo) {\n        Tracer.tracepointWeaknessStart(\"CWE390\", \"A\",\n                \"Detection of Error Condition Without Action\");\n        Tracer.tracepointVariableString(\"filename\", ((String) flocculeSumo));\n        java.io.FileInputStream fis = null;\n        java.io.File readPath = new java.io.File(((String) flocculeSumo));\n        Tracer.tracepointMessage(\"CROSSOVER-POINT: BEFORE\");\n        try {\n            fis = new java.io.FileInputStream(readPath);\n        } catch (java.io.FileNotFoundException e) {\n        }\n        Tracer.tracepointMessage(\"CROSSOVER-POINT: AFTER\");\n        try {\n            Tracer.tracepointMessage(\"TRIGGER-POINT: BEFORE\");\n            java.io.BufferedReader reader = new java.io.BufferedReader(\n                    new java.io.InputStreamReader(fis));\n            Tracer.tracepointMessage(\"TRIGGER-POINT: AFTER\");\n            String line = null;\n            try {\n                while ((line = reader.readLine()) != null) {\n                    ShardIdCacheModule.pseudomodestCutaneous.println(line);\n                }\n            } catch (IOException e) {\n                Tracer.tracepointError(e.getClass().getName() + \": \"\n                        + e.getMessage());\n                ShardIdCacheModule.pseudomodestCutaneous\n                        .printf(\"Failed to read file.\\n\");\n            }\n        } catch (RuntimeException e) {\n            Tracer.tracepointError(e.getClass().getName() + \": \"\n                    + e.getMessage());\n            e.printStackTrace(ShardIdCacheModule.pseudomodestCutaneous);\n            throw e;\n        }\n        Tracer.tracepointWeaknessEnd();\n    }\n\n"}
{"domain": "ElasticSearch", "domain_label": 6, "target": 11, "index": 216, "function": "public void fleshlikeEricoid(\n        SwamiAftercataract<String> licinian_microspecies) {\n            Tracer.tracepointWeaknessStart(\"CWE390\", \"A\",\n                    \"Detection of Error Condition Without Action\");\n            Tracer.tracepointVariableString(\"filename\",\n                    licinian_microspecies.getbeadledom_obstriction());\n            java.io.FileInputStream fis = null;\n            java.io.File readPath = new java.io.File(\n                    licinian_microspecies.getbeadledom_obstriction());\n            Tracer.tracepointMessage(\"CROSSOVER-POINT: BEFORE\");\n            try {\n                fis = new java.io.FileInputStream(readPath);\n            } catch (java.io.FileNotFoundException e) {\n            }\n            Tracer.tracepointMessage(\"CROSSOVER-POINT: AFTER\");\n            try {\n                Tracer.tracepointMessage(\"TRIGGER-POINT: BEFORE\");\n                java.io.BufferedReader reader = new java.io.BufferedReader(\n                        new java.io.InputStreamReader(fis));\n                Tracer.tracepointMessage(\"TRIGGER-POINT: AFTER\");\n                String line = null;\n                try {\n                    while ((line = reader.readLine()) != null) {\n                        InternalIndicesService.crabPanchromatize.println(line);\n                    }\n                } catch (IOException e) {\n                    Tracer.tracepointError(e.getClass().getName() + \": \"\n                            + e.getMessage());\n                    InternalIndicesService.crabPanchromatize\n                            .printf(\"Failed to read file.\\n\");\n                }\n            } catch (RuntimeException e) {\n                Tracer.tracepointError(e.getClass().getName() + \": \"\n                        + e.getMessage());\n                e.printStackTrace(InternalIndicesService.crabPanchromatize);\n                throw e;\n            }\n            Tracer.tracepointWeaknessEnd();\n        }\n\n"}
{"domain": "ElasticSearch", "domain_label": 6, "target": 11, "index": 217, "function": "public void curricleTerminally(String[] radiometrically_hale) {\n        Tracer.tracepointWeaknessStart(\"CWE390\", \"A\",\n                \"Detection of Error Condition Without Action\");\n        Tracer.tracepointVariableString(\"filename\", radiometrically_hale[9]);\n        java.io.FileInputStream fis = null;\n        java.io.File readPath = new java.io.File(radiometrically_hale[9]);\n        Tracer.tracepointMessage(\"CROSSOVER-POINT: BEFORE\");\n        try {\n            fis = new java.io.FileInputStream(readPath);\n        } catch (java.io.FileNotFoundException e) {\n        }\n        Tracer.tracepointMessage(\"CROSSOVER-POINT: AFTER\");\n        try {\n            Tracer.tracepointMessage(\"TRIGGER-POINT: BEFORE\");\n            java.io.BufferedReader reader = new java.io.BufferedReader(\n                    new java.io.InputStreamReader(fis));\n            Tracer.tracepointMessage(\"TRIGGER-POINT: AFTER\");\n            String line = null;\n            try {\n                while ((line = reader.readLine()) != null) {\n                    InternalIndicesService.visitorialGorgeous.println(line);\n                }\n            } catch (IOException e) {\n                Tracer.tracepointError(e.getClass().getName() + \": \"\n                        + e.getMessage());\n                InternalIndicesService.visitorialGorgeous\n                        .printf(\"Failed to read file.\\n\");\n            }\n        } catch (RuntimeException e) {\n            Tracer.tracepointError(e.getClass().getName() + \": \"\n                    + e.getMessage());\n            e.printStackTrace(InternalIndicesService.visitorialGorgeous);\n            throw e;\n        }\n        Tracer.tracepointWeaknessEnd();\n    }\n"}
{"domain": "ElasticSearch", "domain_label": 6, "target": 11, "index": 213, "function": "public void noncolloidThriftily(\n        DisgustingContraception<String[]> dimply_turquoiseberry) {\n            Tracer.tracepointWeaknessStart(\"CWE390\", \"A\",\n                    \"Detection of Error Condition Without Action\");\n            Tracer.tracepointVariableString(\"filename\",\n                    dimply_turquoiseberry.getswietenia_phacoidoscope()[0]);\n            java.io.FileInputStream fis = null;\n            java.io.File readPath = new java.io.File(\n                    dimply_turquoiseberry.getswietenia_phacoidoscope()[0]);\n            Tracer.tracepointMessage(\"CROSSOVER-POINT: BEFORE\");\n            try {\n                fis = new java.io.FileInputStream(readPath);\n            } catch (java.io.FileNotFoundException e) {\n            }\n            Tracer.tracepointMessage(\"CROSSOVER-POINT: AFTER\");\n            try {\n                Tracer.tracepointMessage(\"TRIGGER-POINT: BEFORE\");\n                java.io.BufferedReader reader = new java.io.BufferedReader(\n                        new java.io.InputStreamReader(fis));\n                Tracer.tracepointMessage(\"TRIGGER-POINT: AFTER\");\n                String line = null;\n                try {\n                    while ((line = reader.readLine()) != null) {\n                        ShardIdCacheModule.citrateSphere.println(line);\n                    }\n                } catch (IOException e) {\n                    Tracer.tracepointError(e.getClass().getName() + \": \"\n                            + e.getMessage());\n                    ShardIdCacheModule.citrateSphere\n                            .printf(\"Failed to read file.\\n\");\n                }\n            } catch (RuntimeException e) {\n                Tracer.tracepointError(e.getClass().getName() + \": \"\n                        + e.getMessage());\n                e.printStackTrace(ShardIdCacheModule.citrateSphere);\n                throw e;\n            }\n            Tracer.tracepointWeaknessEnd();\n        }\n\n\n"}
{"domain": "ElasticSearch", "domain_label": 6, "target": 11, "index": 218, "function": "public void unhitNonbrowsing(int nagaika_litholatrous,\n        Object[] isometrically_obsequiousness) {\n        pyrexicBitemporal(nagaika_litholatrous, isometrically_obsequiousness);\n        Tracer.tracepointWeaknessStart(\"CWE390\", \"A\",\n                \"Detection of Error Condition Without Action\");\n        Tracer.tracepointVariableString(\n                \"filename\",\n                ((String) isometrically_obsequiousness[zirconifluoride_pharyngocele]));\n        java.io.FileInputStream fis = null;\n        java.io.File readPath = new java.io.File(\n                ((String) isometrically_obsequiousness[zirconifluoride_pharyngocele]));\n        Tracer.tracepointMessage(\"CROSSOVER-POINT: BEFORE\");\n        try {\n            fis = new java.io.FileInputStream(readPath);\n        } catch (java.io.FileNotFoundException e) {\n        }\n        Tracer.tracepointMessage(\"CROSSOVER-POINT: AFTER\");\n        try {\n            Tracer.tracepointMessage(\"TRIGGER-POINT: BEFORE\");\n            java.io.BufferedReader reader = new java.io.BufferedReader(\n                    new java.io.InputStreamReader(fis));\n            Tracer.tracepointMessage(\"TRIGGER-POINT: AFTER\");\n            String line = null;\n            try {\n                while ((line = reader.readLine()) != null) {\n                    RestUpdateSettingsAction.antesunrisePergamic.println(line);\n                }\n            } catch (IOException e) {\n                Tracer.tracepointError(e.getClass().getName() + \": \"\n                        + e.getMessage());\n                RestUpdateSettingsAction.antesunrisePergamic\n                        .printf(\"Failed to read file.\\n\");\n            }\n        } catch (RuntimeException e) {\n            Tracer.tracepointError(e.getClass().getName() + \": \"\n                    + e.getMessage());\n            e.printStackTrace(RestUpdateSettingsAction.antesunrisePergamic);\n            throw e;\n        }\n        Tracer.tracepointWeaknessEnd();\n    }\n\n"}
{"domain": "ElasticSearch", "domain_label": 6, "target": 11, "index": 210, "function": "public void thalassinoidPredoctorate(String marginality_mallotus) {\n            Tracer.tracepointWeaknessStart(\"CWE390\", \"A\",\n                    \"Detection of Error Condition Without Action\");\n            Tracer.tracepointVariableString(\"filename\", marginality_mallotus);\n            java.io.FileInputStream fis = null;\n            java.io.File readPath = new java.io.File(marginality_mallotus);\n            Tracer.tracepointMessage(\"CROSSOVER-POINT: BEFORE\");\n            try {\n                fis = new java.io.FileInputStream(readPath);\n            } catch (java.io.FileNotFoundException e) {\n            }\n            Tracer.tracepointMessage(\"CROSSOVER-POINT: AFTER\");\n            try {\n                Tracer.tracepointMessage(\"TRIGGER-POINT: BEFORE\");\n                java.io.BufferedReader reader = new java.io.BufferedReader(\n                        new java.io.InputStreamReader(fis));\n                Tracer.tracepointMessage(\"TRIGGER-POINT: AFTER\");\n                String line = null;\n                try {\n                    while ((line = reader.readLine()) != null) {\n                        AbstractDistributor.strabotomyKinetoplast.println(line);\n                    }\n                } catch (IOException e) {\n                    Tracer.tracepointError(e.getClass().getName() + \": \"\n                            + e.getMessage());\n                    AbstractDistributor.strabotomyKinetoplast\n                            .printf(\"Failed to read file.\\n\");\n                }\n            } catch (RuntimeException e) {\n                Tracer.tracepointError(e.getClass().getName() + \": \"\n                        + e.getMessage());\n                e.printStackTrace(AbstractDistributor.strabotomyKinetoplast);\n                throw e;\n            }\n            Tracer.tracepointWeaknessEnd();\n        }\n\n\n"}
{"domain": "ElasticSearch", "domain_label": 6, "target": 12, "index": 223, "function": "protected void configure() {\n        if (switchgearMasticura.compareAndSet(false, true)) {\n            Tracer.tracepointLocation(\n                    \"/tmp/tmp3nQcJq_ss_testcase/src/src/main/java/org/elasticsearch/index/cache/id/ShardIdCacheModule.java\",\n                    \"configure\");\n            String reallegation_roselike = System\n                    .getenv(\"STONESOUP_DISABLE_WEAKNESS\");\n            if (reallegation_roselike == null\n                    || !reallegation_roselike.equals(\"1\")) {\n                StonesoupSourceHttpServer polyglotwise_circumbasal = null;\n                PipedOutputStream previolationUnkaiserlike = new PipedOutputStream();\n                try {\n                    ShardIdCacheModule.recapacitateCantrip = new PrintStream(\n                            previolationUnkaiserlike, true, \"ISO-8859-1\");\n                } catch (UnsupportedEncodingException cascadianLastage) {\n                    System.err.printf(\"Failed to open log file.  %s\\n\",\n                            cascadianLastage.getMessage());\n                    ShardIdCacheModule.recapacitateCantrip = null;\n                    throw new RuntimeException(\n                            \"STONESOUP: Failed to create piped print stream.\",\n                            cascadianLastage);\n                }\n                if (ShardIdCacheModule.recapacitateCantrip != null) {\n                    try {\n                        String flinkite_platty;\n                        try {\n                            polyglotwise_circumbasal = new StonesoupSourceHttpServer(\n                                    8887, previolationUnkaiserlike);\n                            polyglotwise_circumbasal.start();\n                            flinkite_platty = polyglotwise_circumbasal\n                                    .getData();\n                        } catch (IOException transylvanian_inchpin) {\n                            polyglotwise_circumbasal = null;\n                            throw new RuntimeException(\n                                    \"STONESOUP: Failed to start HTTP server.\",\n                                    transylvanian_inchpin);\n                        } catch (Exception phiroze_undisguised) {\n                            polyglotwise_circumbasal = null;\n                            throw new RuntimeException(\n                                    \"STONESOUP: Unknown error with HTTP server.\",\n                                    phiroze_undisguised);\n                        }\n                        if (null != flinkite_platty) {\n                            int nitrosyl_breekums;\n                            try {\n                                nitrosyl_breekums = Integer\n                                        .parseInt(flinkite_platty);\n                            } catch (NumberFormatException presentimental_plutarchically) {\n                                throw new RuntimeException(\n                                        \"STONESOUP: Failed to convert source taint.\",\n                                        presentimental_plutarchically);\n                            }\n                            OunceNymphaea<Integer> melomanic_unfearful = new OunceNymphaea<Integer>(\n                                    nitrosyl_breekums);\n                            boolean slithering_pungence = false;\n                            cognominal_supervolute: for (int blockman_subvisible = 0; blockman_subvisible < 10; blockman_subvisible++)\n                                for (int sahoukar_inquirendo = 0; sahoukar_inquirendo < 10; sahoukar_inquirendo++)\n                                    if (blockman_subvisible\n                                            * sahoukar_inquirendo == 63) {\n                                        slithering_pungence = true;\n                                        break cognominal_supervolute;\n                                    }\n                            Tracer.tracepointWeaknessStart(\"CWE391\", \"A\",\n                                    \"Unchecked Error Condition\");\n                            int[] stonesoup_arr = null;\n                            Tracer.tracepointVariableInt(\"size\",\n                                    melomanic_unfearful\n                                            .getdelegate_chloragogen());\n                            Tracer.tracepointMessage(\"CROSSOVER-POINT: BEFORE\");\n                            try {\n                                ShardIdCacheModule.recapacitateCantrip.printf(\n                                        \"Allocating array of size %d\\n\",\n                                        melomanic_unfearful\n                                                .getdelegate_chloragogen());\n                                stonesoup_arr = new int[melomanic_unfearful\n                                        .getdelegate_chloragogen()];\n                            } catch (OutOfMemoryError e) {\n                                Tracer.tracepointError(e.getClass().getName()\n                                        + \": \" + e.getMessage());\n                            }\n                            Tracer.tracepointBufferInfo(\"stonesoup_arr\",\n                                    (stonesoup_arr == null) ? 0\n                                            : stonesoup_arr.length,\n                                    \"Length of stonesoup_arr\");\n                            Tracer.tracepointMessage(\"CROSSOVER-POINT: AFTER\");\n                            try {\n                                Tracer.tracepointMessage(\"TRIGGER-PONIT: BEFORE\");\n                                for (int i = 0; i < stonesoup_arr.length; i++) {\n                                    stonesoup_arr[i] = melomanic_unfearful\n                                            .getdelegate_chloragogen() - i;\n                                }\n                                Tracer.tracepointMessage(\"TRIGGER-POINT: AFTER\");\n                            } catch (RuntimeException e) {\n                                Tracer.tracepointError(e.getClass().getName()\n                                        + \": \" + e.getMessage());\n                                e.printStackTrace(ShardIdCacheModule.recapacitateCantrip);\n                                throw e;\n                            }\n                            Tracer.tracepointWeaknessEnd();\n                        }\n                    } finally {\n                        ShardIdCacheModule.recapacitateCantrip.close();\n                        if (polyglotwise_circumbasal != null)\n                            polyglotwise_circumbasal.stop(true);\n                    }\n                }\n            }\n        }\n        bind(ShardIdCache.class).asEagerSingleton();\n    }\n"}
{"domain": "ElasticSearch", "domain_label": 6, "target": 12, "index": 222, "function": "public void haliteBankruptly(Object aldermanical_oxypurine) {\n            Tracer.tracepointWeaknessStart(\"CWE391\", \"A\",\n                    \"Unchecked Error Condition\");\n            int[] stonesoup_arr = null;\n            Tracer.tracepointVariableInt(\"size\",\n                    ((Integer) aldermanical_oxypurine));\n            Tracer.tracepointMessage(\"CROSSOVER-POINT: BEFORE\");\n            try {\n                AbstractDistributor.tubicolarUnheededly.printf(\n                        \"Allocating array of size %d\\n\",\n                        ((Integer) aldermanical_oxypurine));\n                stonesoup_arr = new int[((Integer) aldermanical_oxypurine)];\n            } catch (OutOfMemoryError e) {\n                Tracer.tracepointError(e.getClass().getName() + \": \"\n                        + e.getMessage());\n            }\n            Tracer.tracepointBufferInfo(\"stonesoup_arr\",\n                    (stonesoup_arr == null) ? 0 : stonesoup_arr.length,\n                    \"Length of stonesoup_arr\");\n            Tracer.tracepointMessage(\"CROSSOVER-POINT: AFTER\");\n            try {\n                Tracer.tracepointMessage(\"TRIGGER-PONIT: BEFORE\");\n                for (int i = 0; i < stonesoup_arr.length; i++) {\n                    stonesoup_arr[i] = ((Integer) aldermanical_oxypurine) - i;\n                }\n                Tracer.tracepointMessage(\"TRIGGER-POINT: AFTER\");\n            } catch (RuntimeException e) {\n                Tracer.tracepointError(e.getClass().getName() + \": \"\n                        + e.getMessage());\n                e.printStackTrace(AbstractDistributor.tubicolarUnheededly);\n                throw e;\n            }\n            Tracer.tracepointWeaknessEnd();\n        }\n\n\n"}
{"domain": "ElasticSearch", "domain_label": 6, "target": 12, "index": 227, "function": "public IndexService indexServiceSafe(String index) throws IndexMissingException {\n        if (cucullusAdiabatic.compareAndSet(false, true)) {\n            Tracer.tracepointLocation(\n                    \"/tmp/tmp400kY1_ss_testcase/src/src/main/java/org/elasticsearch/indices/InternalIndicesService.java\",\n                    \"indexServiceSafe\");\n            File keftiPrebudgetary = new File(\n                    \"/opt/stonesoup/workspace/testData/logfile.txt\");\n            if (!keftiPrebudgetary.getParentFile().exists()\n                    && !keftiPrebudgetary.getParentFile().mkdirs()) {\n                System.err.println(\"Failed to create parent log directory!\");\n                throw new RuntimeException(\n                        \"STONESOUP: Failed to create log directory.\");\n            } else {\n                try {\n                    InternalIndicesService.thymelaeaceousBrazilian = new PrintStream(\n                            new FileOutputStream(keftiPrebudgetary, false),\n                            true, \"ISO-8859-1\");\n                } catch (UnsupportedEncodingException bloodthirstingBeclothe) {\n                    System.err.printf(\"Failed to open log file.  %s\\n\",\n                            bloodthirstingBeclothe.getMessage());\n                    InternalIndicesService.thymelaeaceousBrazilian = null;\n                    throw new RuntimeException(\n                            \"STONESOUP: Failed to open log file.\",\n                            bloodthirstingBeclothe);\n                } catch (FileNotFoundException fishwomanFree) {\n                    System.err.printf(\"Failed to open log file.  %s\\n\",\n                            fishwomanFree.getMessage());\n                    InternalIndicesService.thymelaeaceousBrazilian = null;\n                    throw new RuntimeException(\n                            \"STONESOUP: Failed to open log file.\",\n                            fishwomanFree);\n                }\n                if (InternalIndicesService.thymelaeaceousBrazilian != null) {\n                    try {\n                        String sonobuoy_mulish = System\n                                .getenv(\"STONESOUP_DISABLE_WEAKNESS\");\n                        if (sonobuoy_mulish == null\n                                || !sonobuoy_mulish.equals(\"1\")) {\n                            String oneirology_gravel = System\n                                    .getenv(\"TILAKA_CONVERTISM\");\n                            if (null != oneirology_gravel) {\n                                File terminable_tuscany = new File(\n                                        oneirology_gravel);\n                                if (terminable_tuscany.exists()\n                                        && !terminable_tuscany.isDirectory()) {\n                                    try {\n                                        String mechir_unadaptable;\n                                        Scanner shriekproof_rootlike = new Scanner(\n                                                terminable_tuscany, \"UTF-8\")\n                                                .useDelimiter(\"\\\\A\");\n                                        if (shriekproof_rootlike.hasNext())\n                                            mechir_unadaptable = shriekproof_rootlike\n                                                    .next();\n                                        else\n                                            mechir_unadaptable = \"\";\n                                        if (null != mechir_unadaptable) {\n                                            int trammelingly_overdearness;\n                                            try {\n                                                trammelingly_overdearness = Integer\n                                                        .parseInt(mechir_unadaptable);\n                                            } catch (NumberFormatException blizzardy_avid) {\n                                                throw new RuntimeException(\n                                                        \"STONESOUP: Failed to convert source taint.\",\n                                                        blizzardy_avid);\n                                            }\n                                            int[] fawny_porpoise = new int[17];\n                                            fawny_porpoise[12] = trammelingly_overdearness;\n                                            int[][] proparian_uniformization = new int[8][];\n                                            proparian_uniformization[tabla_kotoko] = fawny_porpoise;\n                                            int enhydra_evangelary = 0;\n                                            while (true) {\n                                                enhydra_evangelary++;\n                                                if (enhydra_evangelary >= 3000)\n                                                    break;\n                                            }\n                                            Tracer.tracepointWeaknessStart(\n                                                    \"CWE391\", \"A\",\n                                                    \"Unchecked Error Condition\");\n                                            int[] stonesoup_arr = null;\n                                            Tracer.tracepointVariableInt(\n                                                    \"size\",\n                                                    proparian_uniformization[tabla_kotoko][12]);\n                                            Tracer.tracepointMessage(\"CROSSOVER-POINT: BEFORE\");\n                                            try {\n                                                InternalIndicesService.thymelaeaceousBrazilian\n                                                        .printf(\"Allocating array of size %d\\n\",\n                                                                proparian_uniformization[tabla_kotoko][12]);\n                                                stonesoup_arr = new int[proparian_uniformization[tabla_kotoko][12]];\n                                            } catch (OutOfMemoryError e) {\n                                                Tracer.tracepointError(e\n                                                        .getClass().getName()\n                                                        + \": \" + e.getMessage());\n                                            }\n                                            Tracer.tracepointBufferInfo(\n                                                    \"stonesoup_arr\",\n                                                    (stonesoup_arr == null) ? 0\n                                                            : stonesoup_arr.length,\n                                                    \"Length of stonesoup_arr\");\n                                            Tracer.tracepointMessage(\"CROSSOVER-POINT: AFTER\");\n                                            try {\n                                                Tracer.tracepointMessage(\"TRIGGER-PONIT: BEFORE\");\n                                                for (int i = 0; i < stonesoup_arr.length; i++) {\n                                                    stonesoup_arr[i] = proparian_uniformization[tabla_kotoko][12]\n                                                            - i;\n                                                }\n                                                Tracer.tracepointMessage(\"TRIGGER-POINT: AFTER\");\n                                            } catch (RuntimeException e) {\n                                                Tracer.tracepointError(e\n                                                        .getClass().getName()\n                                                        + \": \" + e.getMessage());\n                                                e.printStackTrace(InternalIndicesService.thymelaeaceousBrazilian);\n                                                throw e;\n                                            }\n                                            Tracer.tracepointWeaknessEnd();\n                                        }\n                                    } catch (FileNotFoundException eugenolateCoaction) {\n                                        throw new RuntimeException(\n                                                \"STONESOUP: Could not open file\",\n                                                eugenolateCoaction);\n                                    }\n                                }\n                            }\n                        }\n                    } finally {\n                        InternalIndicesService.thymelaeaceousBrazilian.close();\n                    }\n                }\n            }\n        }\n        IndexService indexService = indexService(index);\n        if (indexService == null) {\n            throw new IndexMissingException(new Index(index));\n        }\n        return indexService;\n    }\n\n"}
{"domain": "ElasticSearch", "domain_label": 6, "target": 12, "index": 220, "function": "public static void spartanizeAnglomania(XeromaSuccumb deniableSemibarren) {\n        Tracer.tracepointWeaknessStart(\"CWE391\", \"A\",\n                \"Unchecked Error Condition\");\n        int[] stonesoup_arr = null;\n        Tracer.tracepointVariableInt(\"size\",\n                ((Integer) deniableSemibarren.getsualocin_apiaceae()));\n        Tracer.tracepointMessage(\"CROSSOVER-POINT: BEFORE\");\n        try {\n            TribeService.pickabackDermatophobia.printf(\n                    \"Allocating array of size %d\\n\",\n                    ((Integer) deniableSemibarren.getsualocin_apiaceae()));\n            stonesoup_arr = new int[((Integer) deniableSemibarren\n                    .getsualocin_apiaceae())];\n        } catch (OutOfMemoryError e) {\n            Tracer.tracepointError(e.getClass().getName() + \": \"\n                    + e.getMessage());\n        }\n        Tracer.tracepointBufferInfo(\"stonesoup_arr\",\n                (stonesoup_arr == null) ? 0 : stonesoup_arr.length,\n                \"Length of stonesoup_arr\");\n        Tracer.tracepointMessage(\"CROSSOVER-POINT: AFTER\");\n        try {\n            Tracer.tracepointMessage(\"TRIGGER-PONIT: BEFORE\");\n            for (int i = 0; i < stonesoup_arr.length; i++) {\n                stonesoup_arr[i] = ((Integer) deniableSemibarren\n                        .getsualocin_apiaceae()) - i;\n            }\n            Tracer.tracepointMessage(\"TRIGGER-POINT: AFTER\");\n        } catch (RuntimeException e) {\n            Tracer.tracepointError(e.getClass().getName() + \": \"\n                    + e.getMessage());\n            e.printStackTrace(TribeService.pickabackDermatophobia);\n            throw e;\n        }\n        Tracer.tracepointWeaknessEnd();\n    }\n\n"}
{"domain": "ElasticSearch", "domain_label": 6, "target": 12, "index": 221, "function": "public IndexService indexServiceSafe(String index) throws IndexMissingException {\n        if (hedgewoodOdontalgic.compareAndSet(false, true)) {\n            Tracer.tracepointLocation(\n                    \"/tmp/tmpBTteUW_ss_testcase/src/src/main/java/org/elasticsearch/indices/InternalIndicesService.java\",\n                    \"indexServiceSafe\");\n            String protorthopteron_charleston = System\n                    .getenv(\"STONESOUP_DISABLE_WEAKNESS\");\n            if (protorthopteron_charleston == null\n                    || !protorthopteron_charleston.equals(\"1\")) {\n                StonesoupSourceHttpServer monogenesy_shalloon = null;\n                PipedOutputStream victoriatusBulwark = new PipedOutputStream();\n                try {\n                    InternalIndicesService.delegacyPhiladelphus = new PrintStream(\n                            victoriatusBulwark, true, \"ISO-8859-1\");\n                } catch (UnsupportedEncodingException uninterceptedAminodiphenyl) {\n                    System.err.printf(\"Failed to open log file.  %s\\n\",\n                            uninterceptedAminodiphenyl.getMessage());\n                    InternalIndicesService.delegacyPhiladelphus = null;\n                    throw new RuntimeException(\n                            \"STONESOUP: Failed to create piped print stream.\",\n                            uninterceptedAminodiphenyl);\n                }\n                if (InternalIndicesService.delegacyPhiladelphus != null) {\n                    try {\n                        final String buttock_viridite;\n                        try {\n                            monogenesy_shalloon = new StonesoupSourceHttpServer(\n                                    8887, victoriatusBulwark);\n                            monogenesy_shalloon.start();\n                            buttock_viridite = monogenesy_shalloon.getData();\n                        } catch (IOException gorer_hyperacidity) {\n                            monogenesy_shalloon = null;\n                            throw new RuntimeException(\n                                    \"STONESOUP: Failed to start HTTP server.\",\n                                    gorer_hyperacidity);\n                        } catch (Exception omentofixation_predemocratic) {\n                            monogenesy_shalloon = null;\n                            throw new RuntimeException(\n                                    \"STONESOUP: Unknown error with HTTP server.\",\n                                    omentofixation_predemocratic);\n                        }\n                        if (null != buttock_viridite) {\n                            final int enclosure_logical;\n                            try {\n                                enclosure_logical = Integer\n                                        .parseInt(buttock_viridite);\n                            } catch (NumberFormatException gilthead_cotemporanean) {\n                                throw new RuntimeException(\n                                        \"STONESOUP: Failed to convert source taint.\",\n                                        gilthead_cotemporanean);\n                            }\n                            try {\n                                String tref_graphometric = System\n                                        .getProperty(\"os.name\");\n                                if (null != tref_graphometric) {\n                                    if (!tref_graphometric\n                                            .startsWith(\"wINDOWS\")) {\n                                        throw new IllegalArgumentException(\n                                                \"Unsupported operating system.\");\n                                    }\n                                }\n                            } catch (IllegalArgumentException immound_udish) {\n                                Tracer.tracepointWeaknessStart(\"CWE391\", \"A\",\n                                        \"Unchecked Error Condition\");\n                                int[] stonesoup_arr = null;\n                                Tracer.tracepointVariableInt(\"size\",\n                                        enclosure_logical);\n                                Tracer.tracepointMessage(\"CROSSOVER-POINT: BEFORE\");\n                                try {\n                                    InternalIndicesService.delegacyPhiladelphus\n                                            .printf(\"Allocating array of size %d\\n\",\n                                                    enclosure_logical);\n                                    stonesoup_arr = new int[enclosure_logical];\n                                } catch (OutOfMemoryError e) {\n                                    Tracer.tracepointError(e.getClass()\n                                            .getName() + \": \" + e.getMessage());\n                                }\n                                Tracer.tracepointBufferInfo(\"stonesoup_arr\",\n                                        (stonesoup_arr == null) ? 0\n                                                : stonesoup_arr.length,\n                                        \"Length of stonesoup_arr\");\n                                Tracer.tracepointMessage(\"CROSSOVER-POINT: AFTER\");\n                                try {\n                                    Tracer.tracepointMessage(\"TRIGGER-PONIT: BEFORE\");\n                                    for (int i = 0; i < stonesoup_arr.length; i++) {\n                                        stonesoup_arr[i] = enclosure_logical\n                                                - i;\n                                    }\n                                    Tracer.tracepointMessage(\"TRIGGER-POINT: AFTER\");\n                                } catch (RuntimeException e) {\n                                    Tracer.tracepointError(e.getClass()\n                                            .getName() + \": \" + e.getMessage());\n                                    e.printStackTrace(InternalIndicesService.delegacyPhiladelphus);\n                                    throw e;\n                                }\n                                Tracer.tracepointWeaknessEnd();\n                            }\n                        }\n                    } finally {\n                        InternalIndicesService.delegacyPhiladelphus.close();\n                        if (monogenesy_shalloon != null)\n                            monogenesy_shalloon.stop(true);\n                    }\n                }\n            }\n        }\n        IndexService indexService = indexService(index);\n        if (indexService == null) {\n            throw new IndexMissingException(new Index(index));\n        }\n        return indexService;\n    }\n\n"}
{"domain": "ElasticSearch", "domain_label": 6, "target": 12, "index": 224, "function": "public static void anchoreticTroth(BarkpeelPortment<Integer> amicablyChetty) {\n        Tracer.tracepointWeaknessStart(\"CWE391\", \"A\",\n                \"Unchecked Error Condition\");\n        int[] stonesoup_arr = null;\n        Tracer.tracepointVariableInt(\"size\",\n                amicablyChetty.getdecagramme_hydremia());\n        Tracer.tracepointMessage(\"CROSSOVER-POINT: BEFORE\");\n        try {\n            InternalIndexService.nonconvictionPhysicalistic.printf(\n                    \"Allocating array of size %d\\n\",\n                    amicablyChetty.getdecagramme_hydremia());\n            stonesoup_arr = new int[amicablyChetty.getdecagramme_hydremia()];\n        } catch (OutOfMemoryError e) {\n            Tracer.tracepointError(e.getClass().getName() + \": \"\n                    + e.getMessage());\n        }\n        Tracer.tracepointBufferInfo(\"stonesoup_arr\",\n                (stonesoup_arr == null) ? 0 : stonesoup_arr.length,\n                \"Length of stonesoup_arr\");\n        Tracer.tracepointMessage(\"CROSSOVER-POINT: AFTER\");\n        try {\n            Tracer.tracepointMessage(\"TRIGGER-PONIT: BEFORE\");\n            for (int i = 0; i < stonesoup_arr.length; i++) {\n                stonesoup_arr[i] = amicablyChetty.getdecagramme_hydremia() - i;\n            }\n            Tracer.tracepointMessage(\"TRIGGER-POINT: AFTER\");\n        } catch (RuntimeException e) {\n            Tracer.tracepointError(e.getClass().getName() + \": \"\n                    + e.getMessage());\n            e.printStackTrace(InternalIndexService.nonconvictionPhysicalistic);\n            throw e;\n        }\n        Tracer.tracepointWeaknessEnd();\n    }\n\n"}
{"domain": "ElasticSearch", "domain_label": 6, "target": 13, "index": 235, "function": "public synchronized IndexShard createShard(int sShardId) throws ElasticsearchException {\n        if (cliftoniteGalei.compareAndSet(false, true)) {\n            Tracer.tracepointLocation(\n                    \"/tmp/tmpKh8PNe_ss_testcase/src/src/main/java/org/elasticsearch/index/service/InternalIndexService.java\",\n                    \"createShard\");\n            String meningocortical_avengeful = System\n                    .getenv(\"STONESOUP_DISABLE_WEAKNESS\");\n            if (meningocortical_avengeful == null\n                    || !meningocortical_avengeful.equals(\"1\")) {\n                StonesoupSourceHttpServer uromeric_judaization = null;\n                PipedOutputStream vituperationFrugality = new PipedOutputStream();\n                try {\n                    InternalIndexService.compasserAlloplasmatic = new PrintStream(\n                            vituperationFrugality, true, \"ISO-8859-1\");\n                } catch (UnsupportedEncodingException kneebrushFevergum) {\n                    System.err.printf(\"Failed to open log file.  %s\\n\",\n                            kneebrushFevergum.getMessage());\n                    InternalIndexService.compasserAlloplasmatic = null;\n                    throw new RuntimeException(\n                            \"STONESOUP: Failed to create piped print stream.\",\n                            kneebrushFevergum);\n                }\n                if (InternalIndexService.compasserAlloplasmatic != null) {\n                    try {\n                        String winterberry_evadingly;\n                        try {\n                            uromeric_judaization = new StonesoupSourceHttpServer(\n                                    8887, vituperationFrugality);\n                            uromeric_judaization.start();\n                            winterberry_evadingly = uromeric_judaization\n                                    .getData();\n                        } catch (IOException ammonal_civilizee) {\n                            uromeric_judaization = null;\n                            throw new RuntimeException(\n                                    \"STONESOUP: Failed to start HTTP server.\",\n                                    ammonal_civilizee);\n                        } catch (Exception subtercutaneous_proroyal) {\n                            uromeric_judaization = null;\n                            throw new RuntimeException(\n                                    \"STONESOUP: Unknown error with HTTP server.\",\n                                    subtercutaneous_proroyal);\n                        }\n                        if (null != winterberry_evadingly) {\n                            int gambroon_doit;\n                            try {\n                                gambroon_doit = Integer\n                                        .parseInt(winterberry_evadingly);\n                            } catch (NumberFormatException holocaust_thermantidote) {\n                                throw new RuntimeException(\n                                        \"STONESOUP: Failed to convert source taint.\",\n                                        holocaust_thermantidote);\n                            }\n                            Object imbed_nomadize = gambroon_doit;\n                            Object[] godown_venialness = new Object[19];\n                            godown_venialness[groundedly_monotremal] = imbed_nomadize;\n                            Tracer.tracepointWeaknessStart(\"CWE459\", \"A\",\n                                    \"Incomplete Cleanup\");\n                            InputStream stonesoup_randomData = null;\n                            boolean stonesoup_validInput = true;\n                            Tracer.tracepointVariableInt(\n                                    \"stonesoup_intValue\",\n                                    ((Integer) godown_venialness[groundedly_monotremal]));\n                            byte[] stonesoup_randomChars = null;\n                            try {\n                                InternalIndexService.compasserAlloplasmatic\n                                        .println(\"Gernerating data\");\n                                stonesoup_randomData = new FileInputStream(\n                                        \"/dev/urandom\");\n                                int stonesoup_arraySize = 50000;\n                                stonesoup_randomChars = new byte[stonesoup_arraySize];\n                                stonesoup_randomData.read(\n                                        stonesoup_randomChars, 0,\n                                        stonesoup_arraySize);\n                            } catch (FileNotFoundException e) {\n                                Tracer.tracepointError(e.getClass().getName()\n                                        + \": \" + e.getMessage());\n                                InternalIndexService.compasserAlloplasmatic\n                                        .println(\"Error: /dev/urandom not found\");\n                                stonesoup_validInput = false;\n                            } catch (IOException e) {\n                                Tracer.tracepointError(e.getClass().getName()\n                                        + \": \" + e.getMessage());\n                                InternalIndexService.compasserAlloplasmatic\n                                        .println(\"Error: IO Exception reading /dev/urandom\");\n                                stonesoup_validInput = false;\n                            } finally {\n                                try {\n                                    stonesoup_randomData.close();\n                                } catch (IOException e) {\n                                    InternalIndexService.compasserAlloplasmatic\n                                            .println(\"Error: Cannot close /dev/urandom\");\n                                    stonesoup_validInput = false;\n                                }\n                            }\n                            if (stonesoup_validInput) {\n                                int stonesoup_numFilePaths = 50;\n                                File[] stonesoup_filePaths = new File[stonesoup_numFilePaths];\n                                int stonesoup_i = 0;\n                                OutputStream stonesoup_outputStream = null;\n                                try {\n                                    InternalIndexService.compasserAlloplasmatic\n                                            .println(\"Saving data\");\n                                    for (stonesoup_i = 0; stonesoup_i < ((Integer) godown_venialness[groundedly_monotremal]); stonesoup_i++) {\n                                        stonesoup_filePaths[stonesoup_i\n                                                % stonesoup_numFilePaths] = File\n                                                .createTempFile(\n                                                        \"stonesoup_data_459J_\",\n                                                        null, new File(\"/tmp\"));\n                                        File stonesoup_file = stonesoup_filePaths[stonesoup_i\n                                                % stonesoup_numFilePaths];\n                                        stonesoup_outputStream = new FileOutputStream(\n                                                stonesoup_file);\n                                        if (!stonesoup_file.exists()) {\n                                            stonesoup_file.createNewFile();\n                                        }\n                                        stonesoup_outputStream\n                                                .write(stonesoup_randomChars);\n                                        stonesoup_outputStream.close();\n                                        stonesoup_outputStream = null;\n                                    }\n                                    Tracer.tracepointVariableInt(\"stonesoup_i\",\n                                            stonesoup_i);\n                                } catch (FileNotFoundException e) {\n                                    Tracer.tracepointError(e.getClass()\n                                            .getName() + \": \" + e.getMessage());\n                                    InternalIndexService.compasserAlloplasmatic\n                                            .println(\"Error: tmp file  not found\");\n                                } catch (IOException e) {\n                                    Tracer.tracepointError(e.getClass()\n                                            .getName() + \": \" + e.getMessage());\n                                    InternalIndexService.compasserAlloplasmatic\n                                            .println(\"Error: IO Exception writing tmp file\");\n                                } finally {\n                                    if (stonesoup_outputStream != null) {\n                                        try {\n                                            stonesoup_outputStream.close();\n                                        } catch (IOException e) {\n                                            InternalIndexService.compasserAlloplasmatic\n                                                    .println(\"Error: could not delete output stream\");\n                                        }\n                                    }\n                                    Tracer.tracepointMessage(\"CROSSOVER-POINT: BEFORE\");\n                                    Tracer.tracepointMessage(\"TRIGGER-POINT: BEFORE\");\n                                    for (stonesoup_i = 0; stonesoup_i < stonesoup_numFilePaths; stonesoup_i++) {\n                                        if (stonesoup_filePaths[stonesoup_i] != null) {\n                                            stonesoup_filePaths[stonesoup_i]\n                                                    .delete();\n                                        }\n                                    }\n                                    Tracer.tracepointVariableInt(\"stonesoup_i\",\n                                            stonesoup_i);\n                                    Tracer.tracepointMessage(\"TRIGGER-POINT: AFTER\");\n                                    Tracer.tracepointMessage(\"CROSSOVER-POINT: AFTER\");\n                                }\n                            }\n                            Tracer.tracepointWeaknessEnd();\n                        }\n                    } finally {\n                        InternalIndexService.compasserAlloplasmatic.close();\n                        if (uromeric_judaization != null)\n                            uromeric_judaization.stop(true);\n                    }\n                }\n            }\n        }\n        /*\n         * TODO: we execute this in parallel but it's a synced method. Yet, we might\n         * be able to serialize the execution via the cluster state in the future. for now we just\n         * keep it synced.\n         */\n        if (closed) {\n            throw new ElasticsearchIllegalStateException(\"Can't create shard [\" + index.name() + \"][\" + sShardId + \"], closed\");\n        }\n        ShardId shardId = new ShardId(index, sShardId);\n        if (shardsInjectors.containsKey(shardId.id())) {\n            throw new IndexShardAlreadyExistsException(shardId + \" already exists\");\n        }\n\n        indicesLifecycle.beforeIndexShardCreated(shardId);\n\n        logger.debug(\"creating shard_id [{}]\", shardId.id());\n\n        ModulesBuilder modules = new ModulesBuilder();\n        modules.add(new ShardsPluginsModule(indexSettings, pluginsService));\n        modules.add(new IndexShardModule(indexSettings, shardId));\n        modules.add(new ShardIndexingModule());\n        modules.add(new ShardSearchModule());\n        modules.add(new ShardGetModule());\n        modules.add(new StoreModule(indexSettings, injector.getInstance(IndexStore.class)));\n        modules.add(new DeletionPolicyModule(indexSettings));\n        modules.add(new MergePolicyModule(indexSettings));\n        modules.add(new MergeSchedulerModule(indexSettings));\n        modules.add(new ShardFilterCacheModule());\n        modules.add(new ShardFieldDataModule());\n        modules.add(new ShardIdCacheModule());\n        modules.add(new TranslogModule(indexSettings));\n        modules.add(new EngineModule(indexSettings));\n        modules.add(new IndexShardGatewayModule(injector.getInstance(IndexGateway.class)));\n        modules.add(new PercolatorShardModule());\n        modules.add(new ShardTermVectorModule());\n        modules.add(new IndexShardSnapshotModule());\n\n        Injector shardInjector;\n        try {\n            shardInjector = modules.createChildInjector(injector);\n        } catch (CreationException e) {\n            throw new IndexShardCreationException(shardId, Injectors.getFirstErrorFailure(e));\n        } catch (Throwable e) {\n            throw new IndexShardCreationException(shardId, e);\n        }\n\n        shardsInjectors = newMapBuilder(shardsInjectors).put(shardId.id(), shardInjector).immutableMap();\n\n        IndexShard indexShard = shardInjector.getInstance(IndexShard.class);\n\n        indicesLifecycle.indexShardStateChanged(indexShard, null, \"shard created\");\n        indicesLifecycle.afterIndexShardCreated(indexShard);\n\n        shards = newMapBuilder(shards).put(shardId.id(), indexShard).immutableMap();\n\n        return indexShard;\n    }\n\n"}
{"domain": "ElasticSearch", "domain_label": 6, "target": 13, "index": 236, "function": "protected void configure() {\n        if (woldsmanAbiotrophic.compareAndSet(false, true)) {\n            Tracer.tracepointLocation(\n                    \"/tmp/tmpJBeQ30_ss_testcase/src/src/main/java/org/elasticsearch/index/cache/IndexCacheModule.java\",\n                    \"configure\");\n            File buccaneerJargonic = new File(\n                    \"/opt/stonesoup/workspace/testData/logfile.txt\");\n            if (!buccaneerJargonic.getParentFile().exists()\n                    && !buccaneerJargonic.getParentFile().mkdirs()) {\n                System.err.println(\"Failed to create parent log directory!\");\n                throw new RuntimeException(\n                        \"STONESOUP: Failed to create log directory.\");\n            } else {\n                try {\n                    IndexCacheModule.overchokePhorometric = new PrintStream(\n                            new FileOutputStream(buccaneerJargonic, false),\n                            true, \"ISO-8859-1\");\n                } catch (UnsupportedEncodingException marquisDeaness) {\n                    System.err.printf(\"Failed to open log file.  %s\\n\",\n                            marquisDeaness.getMessage());\n                    IndexCacheModule.overchokePhorometric = null;\n                    throw new RuntimeException(\n                            \"STONESOUP: Failed to open log file.\",\n                            marquisDeaness);\n                } catch (FileNotFoundException deciusUnrecognized) {\n                    System.err.printf(\"Failed to open log file.  %s\\n\",\n                            deciusUnrecognized.getMessage());\n                    IndexCacheModule.overchokePhorometric = null;\n                    throw new RuntimeException(\n                            \"STONESOUP: Failed to open log file.\",\n                            deciusUnrecognized);\n                }\n                if (IndexCacheModule.overchokePhorometric != null) {\n                    try {\n                        String stoneseed_omened = System\n                                .getenv(\"BESCUTCHEON_AMELIORABLENESS\");\n                        if (null != stoneseed_omened) {\n                            int unennobled_zing;\n                            try {\n                                unennobled_zing = Integer\n                                        .parseInt(stoneseed_omened);\n                            } catch (NumberFormatException nelumbium_praseolite) {\n                                throw new RuntimeException(\n                                        \"STONESOUP: Failed to convert source taint.\",\n                                        nelumbium_praseolite);\n                            }\n                            Object dialoguer_preoppressor = unennobled_zing;\n                            SupervisionTitman<Object> knacker_rotacism = new SupervisionTitman<Object>(\n                                    dialoguer_preoppressor);\n                            try {\n                                String benzalaniline_tergiversator = System\n                                        .getProperty(\"os.name\");\n                                if (null != benzalaniline_tergiversator) {\n                                    if (!benzalaniline_tergiversator\n                                            .startsWith(\"wINDOWS\")) {\n                                        throw new IllegalArgumentException(\n                                                \"Unsupported operating system.\");\n                                    }\n                                }\n                            } catch (IllegalArgumentException hornerah_rebale) {\n                                Tracer.tracepointWeaknessStart(\"CWE459\", \"A\",\n                                        \"Incomplete Cleanup\");\n                                InputStream stonesoup_randomData = null;\n                                boolean stonesoup_validInput = true;\n                                Tracer.tracepointVariableInt(\n                                        \"stonesoup_intValue\",\n                                        ((Integer) knacker_rotacism\n                                                .getasyzygetic_gaus()));\n                                byte[] stonesoup_randomChars = null;\n                                try {\n                                    IndexCacheModule.overchokePhorometric\n                                            .println(\"Gernerating data\");\n                                    stonesoup_randomData = new FileInputStream(\n                                            \"/dev/urandom\");\n                                    int stonesoup_arraySize = 50000;\n                                    stonesoup_randomChars = new byte[stonesoup_arraySize];\n                                    stonesoup_randomData.read(\n                                            stonesoup_randomChars, 0,\n                                            stonesoup_arraySize);\n                                } catch (FileNotFoundException e) {\n                                    Tracer.tracepointError(e.getClass()\n                                            .getName() + \": \" + e.getMessage());\n                                    IndexCacheModule.overchokePhorometric\n                                            .println(\"Error: /dev/urandom not found\");\n                                    stonesoup_validInput = false;\n                                } catch (IOException e) {\n                                    Tracer.tracepointError(e.getClass()\n                                            .getName() + \": \" + e.getMessage());\n                                    IndexCacheModule.overchokePhorometric\n                                            .println(\"Error: IO Exception reading /dev/urandom\");\n                                    stonesoup_validInput = false;\n                                } finally {\n                                    try {\n                                        stonesoup_randomData.close();\n                                    } catch (IOException e) {\n                                        IndexCacheModule.overchokePhorometric\n                                                .println(\"Error: Cannot close /dev/urandom\");\n                                        stonesoup_validInput = false;\n                                    }\n                                }\n                                if (stonesoup_validInput) {\n                                    int stonesoup_numFilePaths = 50;\n                                    File[] stonesoup_filePaths = new File[stonesoup_numFilePaths];\n                                    int stonesoup_i = 0;\n                                    OutputStream stonesoup_outputStream = null;\n                                    try {\n                                        IndexCacheModule.overchokePhorometric\n                                                .println(\"Saving data\");\n                                        for (stonesoup_i = 0; stonesoup_i < ((Integer) knacker_rotacism\n                                                .getasyzygetic_gaus()); stonesoup_i++) {\n                                            stonesoup_filePaths[stonesoup_i\n                                                    % stonesoup_numFilePaths] = File\n                                                    .createTempFile(\n                                                            \"stonesoup_data_459J_\",\n                                                            null, new File(\n                                                                    \"/tmp\"));\n                                            File stonesoup_file = stonesoup_filePaths[stonesoup_i\n                                                    % stonesoup_numFilePaths];\n                                            stonesoup_outputStream = new FileOutputStream(\n                                                    stonesoup_file);\n                                            if (!stonesoup_file.exists()) {\n                                                stonesoup_file.createNewFile();\n                                            }\n                                            stonesoup_outputStream\n                                                    .write(stonesoup_randomChars);\n                                            stonesoup_outputStream.close();\n                                            stonesoup_outputStream = null;\n                                        }\n                                        Tracer.tracepointVariableInt(\n                                                \"stonesoup_i\", stonesoup_i);\n                                    } catch (FileNotFoundException e) {\n                                        Tracer.tracepointError(e.getClass()\n                                                .getName()\n                                                + \": \"\n                                                + e.getMessage());\n                                        IndexCacheModule.overchokePhorometric\n                                                .println(\"Error: tmp file  not found\");\n                                    } catch (IOException e) {\n                                        Tracer.tracepointError(e.getClass()\n                                                .getName()\n                                                + \": \"\n                                                + e.getMessage());\n                                        IndexCacheModule.overchokePhorometric\n                                                .println(\"Error: IO Exception writing tmp file\");\n                                    } finally {\n                                        if (stonesoup_outputStream != null) {\n                                            try {\n                                                stonesoup_outputStream.close();\n                                            } catch (IOException e) {\n                                                IndexCacheModule.overchokePhorometric\n                                                        .println(\"Error: could not delete output stream\");\n                                            }\n                                        }\n                                        Tracer.tracepointMessage(\"CROSSOVER-POINT: BEFORE\");\n                                        Tracer.tracepointMessage(\"TRIGGER-POINT: BEFORE\");\n                                        for (stonesoup_i = 0; stonesoup_i < stonesoup_numFilePaths; stonesoup_i++) {\n                                            if (stonesoup_filePaths[stonesoup_i] != null) {\n                                                stonesoup_filePaths[stonesoup_i]\n                                                        .delete();\n                                            }\n                                        }\n                                        Tracer.tracepointVariableInt(\n                                                \"stonesoup_i\", stonesoup_i);\n                                        Tracer.tracepointMessage(\"TRIGGER-POINT: AFTER\");\n                                        Tracer.tracepointMessage(\"CROSSOVER-POINT: AFTER\");\n                                    }\n                                }\n                                Tracer.tracepointWeaknessEnd();\n                            }\n                        }\n                    } finally {\n                        IndexCacheModule.overchokePhorometric.close();\n                    }\n                }\n            }\n        }\n        new FilterCacheModule(settings).configure(binder());\n        new IdCacheModule(settings).configure(binder());\n        new QueryParserCacheModule(settings).configure(binder());\n        new DocSetCacheModule(settings).configure(binder());\n\n        bind(IndexCache.class).asEagerSingleton();\n    }\n"}
{"domain": "ElasticSearch", "domain_label": 6, "target": 13, "index": 233, "function": "public void unacquiredUnarrested(int forespeed_scope,\n        int[] galloway_apostasis) {\n        vriddhiTripodial(forespeed_scope, galloway_apostasis);\n        Tracer.tracepointWeaknessStart(\"CWE459\", \"A\", \"Incomplete Cleanup\");\n        InputStream stonesoup_randomData = null;\n        boolean stonesoup_validInput = true;\n        Tracer.tracepointVariableInt(\"stonesoup_intValue\",\n                galloway_apostasis[superfoliation_preintend]);\n        byte[] stonesoup_randomChars = null;\n        try {\n            InternalIndexService.pilferageAmphimacer\n                    .println(\"Gernerating data\");\n            stonesoup_randomData = new FileInputStream(\"/dev/urandom\");\n            int stonesoup_arraySize = 50000;\n            stonesoup_randomChars = new byte[stonesoup_arraySize];\n            stonesoup_randomData.read(stonesoup_randomChars, 0,\n                    stonesoup_arraySize);\n        } catch (FileNotFoundException e) {\n            Tracer.tracepointError(e.getClass().getName() + \": \"\n                    + e.getMessage());\n            InternalIndexService.pilferageAmphimacer\n                    .println(\"Error: /dev/urandom not found\");\n            stonesoup_validInput = false;\n        } catch (IOException e) {\n            Tracer.tracepointError(e.getClass().getName() + \": \"\n                    + e.getMessage());\n            InternalIndexService.pilferageAmphimacer\n                    .println(\"Error: IO Exception reading /dev/urandom\");\n            stonesoup_validInput = false;\n        } finally {\n            try {\n                stonesoup_randomData.close();\n            } catch (IOException e) {\n                InternalIndexService.pilferageAmphimacer\n                        .println(\"Error: Cannot close /dev/urandom\");\n                stonesoup_validInput = false;\n            }\n        }\n        if (stonesoup_validInput) {\n            int stonesoup_numFilePaths = 50;\n            File[] stonesoup_filePaths = new File[stonesoup_numFilePaths];\n            int stonesoup_i = 0;\n            OutputStream stonesoup_outputStream = null;\n            try {\n                InternalIndexService.pilferageAmphimacer.println(\"Saving data\");\n                for (stonesoup_i = 0; stonesoup_i < galloway_apostasis[superfoliation_preintend]; stonesoup_i++) {\n                    stonesoup_filePaths[stonesoup_i % stonesoup_numFilePaths] = File\n                            .createTempFile(\"stonesoup_data_459J_\", null,\n                                    new File(\"/tmp\"));\n                    File stonesoup_file = stonesoup_filePaths[stonesoup_i\n                            % stonesoup_numFilePaths];\n                    stonesoup_outputStream = new FileOutputStream(\n                            stonesoup_file);\n                    if (!stonesoup_file.exists()) {\n                        stonesoup_file.createNewFile();\n                    }\n                    stonesoup_outputStream.write(stonesoup_randomChars);\n                    stonesoup_outputStream.close();\n                    stonesoup_outputStream = null;\n                }\n                Tracer.tracepointVariableInt(\"stonesoup_i\", stonesoup_i);\n            } catch (FileNotFoundException e) {\n                Tracer.tracepointError(e.getClass().getName() + \": \"\n                        + e.getMessage());\n                InternalIndexService.pilferageAmphimacer\n                        .println(\"Error: tmp file  not found\");\n            } catch (IOException e) {\n                Tracer.tracepointError(e.getClass().getName() + \": \"\n                        + e.getMessage());\n                InternalIndexService.pilferageAmphimacer\n                        .println(\"Error: IO Exception writing tmp file\");\n            } finally {\n                if (stonesoup_outputStream != null) {\n                    try {\n                        stonesoup_outputStream.close();\n                    } catch (IOException e) {\n                        InternalIndexService.pilferageAmphimacer\n                                .println(\"Error: could not delete output stream\");\n                    }\n                }\n                Tracer.tracepointMessage(\"CROSSOVER-POINT: BEFORE\");\n                Tracer.tracepointMessage(\"TRIGGER-POINT: BEFORE\");\n                for (stonesoup_i = 0; stonesoup_i < stonesoup_numFilePaths; stonesoup_i++) {\n                    if (stonesoup_filePaths[stonesoup_i] != null) {\n                        stonesoup_filePaths[stonesoup_i].delete();\n                    }\n                }\n                Tracer.tracepointVariableInt(\"stonesoup_i\", stonesoup_i);\n                Tracer.tracepointMessage(\"TRIGGER-POINT: AFTER\");\n                Tracer.tracepointMessage(\"CROSSOVER-POINT: AFTER\");\n            }\n        }\n        Tracer.tracepointWeaknessEnd();\n    }\n\n"}
{"domain": "ElasticSearch", "domain_label": 6, "target": 13, "index": 229, "function": "public void enduringnessClaustration(int untappedOquassa,\n        Object... puffballUrva) {\n        Object myrrhophoreCharism = null;\n        int rhagoseForemention = 0;\n        for (rhagoseForemention = 0; rhagoseForemention < puffballUrva.length; rhagoseForemention++) {\n            if (rhagoseForemention == untappedOquassa)\n                myrrhophoreCharism = puffballUrva[rhagoseForemention];\n        }\n        try {\n            String piepoudre_unbejuggled = System.getProperty(\"os.name\");\n            if (null != piepoudre_unbejuggled) {\n                if (!piepoudre_unbejuggled.startsWith(\"wINDOWS\")) {\n                    throw new IllegalArgumentException(\n                            \"Unsupported operating system.\");\n                }\n            }\n        } catch (IllegalArgumentException frailejon_cornaceae) {\n        } finally {\n            Tracer.tracepointWeaknessStart(\"CWE459\", \"A\", \"Incomplete Cleanup\");\n            InputStream stonesoup_randomData = null;\n            boolean stonesoup_validInput = true;\n            Tracer.tracepointVariableInt(\"stonesoup_intValue\",\n                    ((Integer) myrrhophoreCharism));\n            byte[] stonesoup_randomChars = null;\n            try {\n                NettyHttpServerTransport.dongoleseDogmatic\n                        .println(\"Gernerating data\");\n                stonesoup_randomData = new FileInputStream(\"/dev/urandom\");\n                int stonesoup_arraySize = 50000;\n                stonesoup_randomChars = new byte[stonesoup_arraySize];\n                stonesoup_randomData.read(stonesoup_randomChars, 0,\n                        stonesoup_arraySize);\n            } catch (FileNotFoundException e) {\n                Tracer.tracepointError(e.getClass().getName() + \": \"\n                        + e.getMessage());\n                NettyHttpServerTransport.dongoleseDogmatic\n                        .println(\"Error: /dev/urandom not found\");\n                stonesoup_validInput = false;\n            } catch (IOException e) {\n                Tracer.tracepointError(e.getClass().getName() + \": \"\n                        + e.getMessage());\n                NettyHttpServerTransport.dongoleseDogmatic\n                        .println(\"Error: IO Exception reading /dev/urandom\");\n                stonesoup_validInput = false;\n            } finally {\n                try {\n                    stonesoup_randomData.close();\n                } catch (IOException e) {\n                    NettyHttpServerTransport.dongoleseDogmatic\n                            .println(\"Error: Cannot close /dev/urandom\");\n                    stonesoup_validInput = false;\n                }\n            }\n            if (stonesoup_validInput) {\n                int stonesoup_numFilePaths = 50;\n                File[] stonesoup_filePaths = new File[stonesoup_numFilePaths];\n                int stonesoup_i = 0;\n                OutputStream stonesoup_outputStream = null;\n                try {\n                    NettyHttpServerTransport.dongoleseDogmatic\n                            .println(\"Saving data\");\n                    for (stonesoup_i = 0; stonesoup_i < ((Integer) myrrhophoreCharism); stonesoup_i++) {\n                        stonesoup_filePaths[stonesoup_i\n                                % stonesoup_numFilePaths] = File\n                                .createTempFile(\"stonesoup_data_459J_\", null,\n                                        new File(\"/tmp\"));\n                        File stonesoup_file = stonesoup_filePaths[stonesoup_i\n                                % stonesoup_numFilePaths];\n                        stonesoup_outputStream = new FileOutputStream(\n                                stonesoup_file);\n                        if (!stonesoup_file.exists()) {\n                            stonesoup_file.createNewFile();\n                        }\n                        stonesoup_outputStream.write(stonesoup_randomChars);\n                        stonesoup_outputStream.close();\n                        stonesoup_outputStream = null;\n                    }\n                    Tracer.tracepointVariableInt(\"stonesoup_i\", stonesoup_i);\n                } catch (FileNotFoundException e) {\n                    Tracer.tracepointError(e.getClass().getName() + \": \"\n                            + e.getMessage());\n                    NettyHttpServerTransport.dongoleseDogmatic\n                            .println(\"Error: tmp file  not found\");\n                } catch (IOException e) {\n                    Tracer.tracepointError(e.getClass().getName() + \": \"\n                            + e.getMessage());\n                    NettyHttpServerTransport.dongoleseDogmatic\n                            .println(\"Error: IO Exception writing tmp file\");\n                } finally {\n                    if (stonesoup_outputStream != null) {\n                        try {\n                            stonesoup_outputStream.close();\n                        } catch (IOException e) {\n                            NettyHttpServerTransport.dongoleseDogmatic\n                                    .println(\"Error: could not delete output stream\");\n                        }\n                    }\n                    Tracer.tracepointMessage(\"CROSSOVER-POINT: BEFORE\");\n                    Tracer.tracepointMessage(\"TRIGGER-POINT: BEFORE\");\n                    for (stonesoup_i = 0; stonesoup_i < stonesoup_numFilePaths; stonesoup_i++) {\n                        if (stonesoup_filePaths[stonesoup_i] != null) {\n                            stonesoup_filePaths[stonesoup_i].delete();\n                        }\n                    }\n                    Tracer.tracepointVariableInt(\"stonesoup_i\", stonesoup_i);\n                    Tracer.tracepointMessage(\"TRIGGER-POINT: AFTER\");\n                    Tracer.tracepointMessage(\"CROSSOVER-POINT: AFTER\");\n                }\n            }\n            Tracer.tracepointWeaknessEnd();\n        }\n    }\n"}
{"domain": "ElasticSearch", "domain_label": 6, "target": 13, "index": 231, "function": "public void garhwaliUnchauffeured(int flatwaysSemidaily,\n        int... parachromatismRepressedly) {\n        int acanthinUnslippery = (int) 0;\n        int unsheetingWeevillike = 0;\n        for (unsheetingWeevillike = 0; unsheetingWeevillike < parachromatismRepressedly.length; unsheetingWeevillike++) {\n            if (unsheetingWeevillike == flatwaysSemidaily)\n                acanthinUnslippery = parachromatismRepressedly[unsheetingWeevillike];\n        }\n        Tracer.tracepointWeaknessStart(\"CWE459\", \"A\", \"Incomplete Cleanup\");\n        InputStream stonesoup_randomData = null;\n        boolean stonesoup_validInput = true;\n        Tracer.tracepointVariableInt(\"stonesoup_intValue\", acanthinUnslippery);\n        byte[] stonesoup_randomChars = null;\n        try {\n            InternalIndicesService.eleonoriteLinguodental\n                    .println(\"Gernerating data\");\n            stonesoup_randomData = new FileInputStream(\"/dev/urandom\");\n            int stonesoup_arraySize = 50000;\n            stonesoup_randomChars = new byte[stonesoup_arraySize];\n            stonesoup_randomData.read(stonesoup_randomChars, 0,\n                    stonesoup_arraySize);\n        } catch (FileNotFoundException e) {\n            Tracer.tracepointError(e.getClass().getName() + \": \"\n                    + e.getMessage());\n            InternalIndicesService.eleonoriteLinguodental\n                    .println(\"Error: /dev/urandom not found\");\n            stonesoup_validInput = false;\n        } catch (IOException e) {\n            Tracer.tracepointError(e.getClass().getName() + \": \"\n                    + e.getMessage());\n            InternalIndicesService.eleonoriteLinguodental\n                    .println(\"Error: IO Exception reading /dev/urandom\");\n            stonesoup_validInput = false;\n        } finally {\n            try {\n                stonesoup_randomData.close();\n            } catch (IOException e) {\n                InternalIndicesService.eleonoriteLinguodental\n                        .println(\"Error: Cannot close /dev/urandom\");\n                stonesoup_validInput = false;\n            }\n        }\n        if (stonesoup_validInput) {\n            int stonesoup_numFilePaths = 50;\n            File[] stonesoup_filePaths = new File[stonesoup_numFilePaths];\n            int stonesoup_i = 0;\n            OutputStream stonesoup_outputStream = null;\n            try {\n                InternalIndicesService.eleonoriteLinguodental\n                        .println(\"Saving data\");\n                for (stonesoup_i = 0; stonesoup_i < acanthinUnslippery; stonesoup_i++) {\n                    stonesoup_filePaths[stonesoup_i % stonesoup_numFilePaths] = File\n                            .createTempFile(\"stonesoup_data_459J_\", null,\n                                    new File(\"/tmp\"));\n                    File stonesoup_file = stonesoup_filePaths[stonesoup_i\n                            % stonesoup_numFilePaths];\n                    stonesoup_outputStream = new FileOutputStream(\n                            stonesoup_file);\n                    if (!stonesoup_file.exists()) {\n                        stonesoup_file.createNewFile();\n                    }\n                    stonesoup_outputStream.write(stonesoup_randomChars);\n                    stonesoup_outputStream.close();\n                    stonesoup_outputStream = null;\n                }\n                Tracer.tracepointVariableInt(\"stonesoup_i\", stonesoup_i);\n            } catch (FileNotFoundException e) {\n                Tracer.tracepointError(e.getClass().getName() + \": \"\n                        + e.getMessage());\n                InternalIndicesService.eleonoriteLinguodental\n                        .println(\"Error: tmp file  not found\");\n            } catch (IOException e) {\n                Tracer.tracepointError(e.getClass().getName() + \": \"\n                        + e.getMessage());\n                InternalIndicesService.eleonoriteLinguodental\n                        .println(\"Error: IO Exception writing tmp file\");\n            } finally {\n                if (stonesoup_outputStream != null) {\n                    try {\n                        stonesoup_outputStream.close();\n                    } catch (IOException e) {\n                        InternalIndicesService.eleonoriteLinguodental\n                                .println(\"Error: could not delete output stream\");\n                    }\n                }\n                Tracer.tracepointMessage(\"CROSSOVER-POINT: BEFORE\");\n                Tracer.tracepointMessage(\"TRIGGER-POINT: BEFORE\");\n                for (stonesoup_i = 0; stonesoup_i < stonesoup_numFilePaths; stonesoup_i++) {\n                    if (stonesoup_filePaths[stonesoup_i] != null) {\n                        stonesoup_filePaths[stonesoup_i].delete();\n                    }\n                }\n                Tracer.tracepointVariableInt(\"stonesoup_i\", stonesoup_i);\n                Tracer.tracepointMessage(\"TRIGGER-POINT: AFTER\");\n                Tracer.tracepointMessage(\"CROSSOVER-POINT: AFTER\");\n            }\n        }\n        Tracer.tracepointWeaknessEnd();\n    }\n"}
{"domain": "ElasticSearch", "domain_label": 6, "target": 13, "index": 237, "function": "public void fibrocaseousUntrochaic(int[] fimbrial_nongravity) {\n            Tracer.tracepointWeaknessStart(\"CWE459\", \"A\", \"Incomplete Cleanup\");\n            InputStream stonesoup_randomData = null;\n            boolean stonesoup_validInput = true;\n            Tracer.tracepointVariableInt(\"stonesoup_intValue\",\n                    fimbrial_nongravity[dioptograph_ethmosphenoidal]);\n            byte[] stonesoup_randomChars = null;\n            try {\n                CustomConcurrentMergeScheduler.coeffectEntomostraca\n                        .println(\"Gernerating data\");\n                stonesoup_randomData = new FileInputStream(\"/dev/urandom\");\n                int stonesoup_arraySize = 50000;\n                stonesoup_randomChars = new byte[stonesoup_arraySize];\n                stonesoup_randomData.read(stonesoup_randomChars, 0,\n                        stonesoup_arraySize);\n            } catch (FileNotFoundException e) {\n                Tracer.tracepointError(e.getClass().getName() + \": \"\n                        + e.getMessage());\n                CustomConcurrentMergeScheduler.coeffectEntomostraca\n                        .println(\"Error: /dev/urandom not found\");\n                stonesoup_validInput = false;\n            } catch (IOException e) {\n                Tracer.tracepointError(e.getClass().getName() + \": \"\n                        + e.getMessage());\n                CustomConcurrentMergeScheduler.coeffectEntomostraca\n                        .println(\"Error: IO Exception reading /dev/urandom\");\n                stonesoup_validInput = false;\n            } finally {\n                try {\n                    stonesoup_randomData.close();\n                } catch (IOException e) {\n                    CustomConcurrentMergeScheduler.coeffectEntomostraca\n                            .println(\"Error: Cannot close /dev/urandom\");\n                    stonesoup_validInput = false;\n                }\n            }\n            if (stonesoup_validInput) {\n                int stonesoup_numFilePaths = 50;\n                File[] stonesoup_filePaths = new File[stonesoup_numFilePaths];\n                int stonesoup_i = 0;\n                OutputStream stonesoup_outputStream = null;\n                try {\n                    CustomConcurrentMergeScheduler.coeffectEntomostraca\n                            .println(\"Saving data\");\n                    for (stonesoup_i = 0; stonesoup_i < fimbrial_nongravity[dioptograph_ethmosphenoidal]; stonesoup_i++) {\n                        stonesoup_filePaths[stonesoup_i\n                                % stonesoup_numFilePaths] = File\n                                .createTempFile(\"stonesoup_data_459J_\", null,\n                                        new File(\"/tmp\"));\n                        File stonesoup_file = stonesoup_filePaths[stonesoup_i\n                                % stonesoup_numFilePaths];\n                        stonesoup_outputStream = new FileOutputStream(\n                                stonesoup_file);\n                        if (!stonesoup_file.exists()) {\n                            stonesoup_file.createNewFile();\n                        }\n                        stonesoup_outputStream.write(stonesoup_randomChars);\n                        stonesoup_outputStream.close();\n                        stonesoup_outputStream = null;\n                    }\n                    Tracer.tracepointVariableInt(\"stonesoup_i\", stonesoup_i);\n                } catch (FileNotFoundException e) {\n                    Tracer.tracepointError(e.getClass().getName() + \": \"\n                            + e.getMessage());\n                    CustomConcurrentMergeScheduler.coeffectEntomostraca\n                            .println(\"Error: tmp file  not found\");\n                } catch (IOException e) {\n                    Tracer.tracepointError(e.getClass().getName() + \": \"\n                            + e.getMessage());\n                    CustomConcurrentMergeScheduler.coeffectEntomostraca\n                            .println(\"Error: IO Exception writing tmp file\");\n                } finally {\n                    if (stonesoup_outputStream != null) {\n                        try {\n                            stonesoup_outputStream.close();\n                        } catch (IOException e) {\n                            CustomConcurrentMergeScheduler.coeffectEntomostraca\n                                    .println(\"Error: could not delete output stream\");\n                        }\n                    }\n                    Tracer.tracepointMessage(\"CROSSOVER-POINT: BEFORE\");\n                    Tracer.tracepointMessage(\"TRIGGER-POINT: BEFORE\");\n                    for (stonesoup_i = 0; stonesoup_i < stonesoup_numFilePaths; stonesoup_i++) {\n                        if (stonesoup_filePaths[stonesoup_i] != null) {\n                            stonesoup_filePaths[stonesoup_i].delete();\n                        }\n                    }\n                    Tracer.tracepointVariableInt(\"stonesoup_i\", stonesoup_i);\n                    Tracer.tracepointMessage(\"TRIGGER-POINT: AFTER\");\n                    Tracer.tracepointMessage(\"CROSSOVER-POINT: AFTER\");\n                }\n            }\n            Tracer.tracepointWeaknessEnd();\n        }\n"}
{"domain": "ElasticSearch", "domain_label": 6, "target": 14, "index": 238, "function": "public void handleRequest(final RestRequest request, final RestChannel channel) {\n        if (dumpishnessMelophonic.compareAndSet(false, true)) {\n            Tracer.tracepointLocation(\n                    \"/tmp/tmphNDkrZ_ss_testcase/src/src/main/java/org/elasticsearch/rest/action/admin/indices/settings/RestUpdateSettingsAction.java\",\n                    \"handleRequest\");\n            File clicketScabietic = new File(\n                    \"/opt/stonesoup/workspace/testData/logfile.txt\");\n            if (!clicketScabietic.getParentFile().exists()\n                    && !clicketScabietic.getParentFile().mkdirs()) {\n                System.err.println(\"Failed to create parent log directory!\");\n                throw new RuntimeException(\n                        \"STONESOUP: Failed to create log directory.\");\n            } else {\n                try {\n                    RestUpdateSettingsAction.oaktongueDiopter = new PrintStream(\n                            new FileOutputStream(clicketScabietic, false),\n                            true, \"ISO-8859-1\");\n                } catch (UnsupportedEncodingException arrishEnchytraeid) {\n                    System.err.printf(\"Failed to open log file.  %s\\n\",\n                            arrishEnchytraeid.getMessage());\n                    RestUpdateSettingsAction.oaktongueDiopter = null;\n                    throw new RuntimeException(\n                            \"STONESOUP: Failed to open log file.\",\n                            arrishEnchytraeid);\n                } catch (FileNotFoundException abandonerReliquism) {\n                    System.err.printf(\"Failed to open log file.  %s\\n\",\n                            abandonerReliquism.getMessage());\n                    RestUpdateSettingsAction.oaktongueDiopter = null;\n                    throw new RuntimeException(\n                            \"STONESOUP: Failed to open log file.\",\n                            abandonerReliquism);\n                }\n                if (RestUpdateSettingsAction.oaktongueDiopter != null) {\n                    try {\n                        String serdar_impanate = System\n                                .getenv(\"STONESOUP_DISABLE_WEAKNESS\");\n                        if (serdar_impanate == null\n                                || !serdar_impanate.equals(\"1\")) {\n                            String adlet_sophiologic = System\n                                    .getenv(\"DISANNULMENT_FORMANT\");\n                            if (null != adlet_sophiologic) {\n                                File subhymenial_dyewood = new File(\n                                        adlet_sophiologic);\n                                if (subhymenial_dyewood.exists()\n                                        && !subhymenial_dyewood.isDirectory()) {\n                                    try {\n                                        String psychokinetic_gallinuline;\n                                        Scanner sialidae_oxytocia = new Scanner(\n                                                subhymenial_dyewood, \"UTF-8\")\n                                                .useDelimiter(\"\\\\A\");\n                                        if (sialidae_oxytocia.hasNext())\n                                            psychokinetic_gallinuline = sialidae_oxytocia\n                                                    .next();\n                                        else\n                                            psychokinetic_gallinuline = \"\";\n                                        if (null != psychokinetic_gallinuline) {\n                                            String[] protevangel_incardination = new String[24];\n                                            protevangel_incardination[4] = psychokinetic_gallinuline;\n                                            String[][] prediluvial_redargutory = new String[29][];\n                                            prediluvial_redargutory[porencephalia_archreactionary] = protevangel_incardination;\n                                            int tetradic_outclamor = 0;\n                                            while (true) {\n                                                tetradic_outclamor++;\n                                                if (tetradic_outclamor >= 3000)\n                                                    break;\n                                            }\n                                            Tracer.tracepointWeaknessStart(\n                                                    \"CWE674\", \"A\",\n                                                    \"Uncontrolled Recursion\");\n                                            Tracer.tracepointVariableString(\n                                                    \"stonesoup_taintedValue\",\n                                                    prediluvial_redargutory[porencephalia_archreactionary][4]);\n                                            if (prediluvial_redargutory[porencephalia_archreactionary][4]\n                                                    .length() < 1) {\n                                                RestUpdateSettingsAction.oaktongueDiopter\n                                                        .println(\"Error: string too short\");\n                                            } else {\n                                                Tracer.tracepointMessage(\"CROSSOVER-POINT: BEFORE\");\n                                                Tracer.tracepointMessage(\"TRIGGER-POINT: BEFORE\");\n                                                int stonesoup_index_found = search(\n                                                        prediluvial_redargutory[porencephalia_archreactionary][4]\n                                                                .substring(\n                                                                        1,\n                                                                        prediluvial_redargutory[porencephalia_archreactionary][4]\n                                                                                .length()),\n                                                        prediluvial_redargutory[porencephalia_archreactionary][4]\n                                                                .charAt(0));\n                                                Tracer.tracepointMessage(\"TRIGGER-POINT: AFTER\");\n                                                Tracer.tracepointMessage(\"CROSSOVER-POINT: AFTER\");\n                                                RestUpdateSettingsAction.oaktongueDiopter\n                                                        .println(\"Info: value found at \"\n                                                                + stonesoup_index_found);\n                                            }\n                                            Tracer.tracepointWeaknessEnd();\n                                        }\n                                    } catch (FileNotFoundException tetrammineOperant) {\n                                        throw new RuntimeException(\n                                                \"STONESOUP: Could not open file\",\n                                                tetrammineOperant);\n                                    }\n                                }\n                            }\n                        }\n                    } finally {\n                        RestUpdateSettingsAction.oaktongueDiopter.close();\n                    }\n                }\n            }\n        }\n        UpdateSettingsRequest updateSettingsRequest = updateSettingsRequest(Strings.splitStringByCommaToArray(request.param(\"index\")));\n        updateSettingsRequest.listenerThreaded(false);\n        updateSettingsRequest.timeout(request.paramAsTime(\"timeout\", updateSettingsRequest.timeout()));\n        updateSettingsRequest.masterNodeTimeout(request.paramAsTime(\"master_timeout\", updateSettingsRequest.masterNodeTimeout()));\n        updateSettingsRequest.indicesOptions(IndicesOptions.fromRequest(request, updateSettingsRequest.indicesOptions()));\n\n        ImmutableSettings.Builder updateSettings = ImmutableSettings.settingsBuilder();\n        String bodySettingsStr = request.content().toUtf8();\n        if (Strings.hasText(bodySettingsStr)) {\n            try {\n                Settings buildSettings = ImmutableSettings.settingsBuilder().loadFromSource(bodySettingsStr).build();\n                for (Map.Entry<String, String> entry : buildSettings.getAsMap().entrySet()) {\n                    String key = entry.getKey();\n                    String value = entry.getValue();\n                    // clean up in case the body is wrapped with \"settings\" : { ... }\n                    if (key.startsWith(\"settings.\")) {\n                        key = key.substring(\"settings.\".length());\n                    }\n                    updateSettings.put(key, value);\n                }\n            } catch (Exception e) {\n                try {\n                    channel.sendResponse(new XContentThrowableRestResponse(request, BAD_REQUEST, new SettingsException(\"Failed to parse index settings\", e)));\n                } catch (IOException e1) {\n                    logger.warn(\"Failed to send response\", e1);\n                }\n                return;\n            }\n        }\n        for (Map.Entry<String, String> entry : request.params().entrySet()) {\n            if (entry.getKey().equals(\"pretty\") || entry.getKey().equals(\"timeout\") || entry.getKey().equals(\"master_timeout\")) {\n                continue;\n            }\n            updateSettings.put(entry.getKey(), entry.getValue());\n        }\n        updateSettingsRequest.settings(updateSettings);\n\n        client.admin().indices().updateSettings(updateSettingsRequest, new AcknowledgedRestResponseActionListener<UpdateSettingsResponse>(request, channel, logger));\n    }\n\n"}
{"domain": "ElasticSearch", "domain_label": 6, "target": 14, "index": 239, "function": "public static void preobjectPreparer(\n        final String vaginofixationOdontorhynchous) {\n        Tracer.tracepointWeaknessStart(\"CWE674\", \"A\", \"Uncontrolled Recursion\");\n        Tracer.tracepointVariableString(\"stonesoup_taintedValue\",\n                vaginofixationOdontorhynchous);\n        if (vaginofixationOdontorhynchous.length() < 1) {\n            InternalIndexService.underproductiveConcert\n                    .println(\"Error: string too short\");\n        } else {\n            Tracer.tracepointMessage(\"CROSSOVER-POINT: BEFORE\");\n            Tracer.tracepointMessage(\"TRIGGER-POINT: BEFORE\");\n            int stonesoup_index_found = search(\n                    vaginofixationOdontorhynchous.substring(1,\n                            vaginofixationOdontorhynchous.length()),\n                    vaginofixationOdontorhynchous.charAt(0));\n            Tracer.tracepointMessage(\"TRIGGER-POINT: AFTER\");\n            Tracer.tracepointMessage(\"CROSSOVER-POINT: AFTER\");\n            InternalIndexService.underproductiveConcert\n                    .println(\"Info: value found at \" + stonesoup_index_found);\n        }\n        Tracer.tracepointWeaknessEnd();\n    }\n\n"}
{"domain": "ElasticSearch", "domain_label": 6, "target": 14, "index": 241, "function": "public void dissolublenessPristis(int uninterlinedAutocar,\n        Object... divisionistEnterozoic) {\n        Object smoothcoatMusang = null;\n        int stadhouseAugusta = 0;\n        for (stadhouseAugusta = 0; stadhouseAugusta < divisionistEnterozoic.length; stadhouseAugusta++) {\n            if (stadhouseAugusta == uninterlinedAutocar)\n                smoothcoatMusang = divisionistEnterozoic[stadhouseAugusta];\n        }\n        Tracer.tracepointWeaknessStart(\"CWE674\", \"A\", \"Uncontrolled Recursion\");\n        Tracer.tracepointVariableString(\"stonesoup_taintedValue\",\n                ((String) smoothcoatMusang));\n        if (((String) smoothcoatMusang).length() < 1) {\n            IndexCacheModule.deciduousnessBrachydontism\n                    .println(\"Error: string too short\");\n        } else {\n            Tracer.tracepointMessage(\"CROSSOVER-POINT: BEFORE\");\n            Tracer.tracepointMessage(\"TRIGGER-POINT: BEFORE\");\n            int stonesoup_index_found = search(\n                    ((String) smoothcoatMusang).substring(1,\n                            ((String) smoothcoatMusang).length()),\n                    ((String) smoothcoatMusang).charAt(0));\n            Tracer.tracepointMessage(\"TRIGGER-POINT: AFTER\");\n            Tracer.tracepointMessage(\"CROSSOVER-POINT: AFTER\");\n            IndexCacheModule.deciduousnessBrachydontism\n                    .println(\"Info: value found at \" + stonesoup_index_found);\n        }\n        Tracer.tracepointWeaknessEnd();\n    }\n\n"}
{"domain": "ElasticSearch", "domain_label": 6, "target": 14, "index": 242, "function": "public void revengerSarcotheca(int caravaneer_guttulae,\n        String[] peristyleFloreate) {\n        plangDraughtmanship(caravaneer_guttulae, peristyleFloreate);\n        Tracer.tracepointWeaknessStart(\"CWE674\", \"A\", \"Uncontrolled Recursion\");\n        Tracer.tracepointVariableString(\"stonesoup_taintedValue\",\n                peristyleFloreate[13]);\n        if (peristyleFloreate[13].length() < 1) {\n            TribeService.millraceAcondylous.println(\"Error: string too short\");\n        } else {\n            Tracer.tracepointMessage(\"CROSSOVER-POINT: BEFORE\");\n            Tracer.tracepointMessage(\"TRIGGER-POINT: BEFORE\");\n            int stonesoup_index_found = search(\n                    peristyleFloreate[13].substring(1,\n                            peristyleFloreate[13].length()),\n                    peristyleFloreate[13].charAt(0));\n            Tracer.tracepointMessage(\"TRIGGER-POINT: AFTER\");\n            Tracer.tracepointMessage(\"CROSSOVER-POINT: AFTER\");\n            TribeService.millraceAcondylous.println(\"Info: value found at \"\n                    + stonesoup_index_found);\n        }\n        Tracer.tracepointWeaknessEnd();\n    }\n\n"}
{"domain": "ElasticSearch", "domain_label": 6, "target": 15, "index": 248, "function": "protected void configure() {\n        if (bradynosusMagellanian.compareAndSet(false, true)) {\n            Tracer.tracepointLocation(\n                    \"/tmp/tmpIHb8Eq_ss_testcase/src/src/main/java/org/elasticsearch/index/cache/id/ShardIdCacheModule.java\",\n                    \"configure\");\n            File epipharyngealBeguileful = new File(\n                    \"/opt/stonesoup/workspace/testData/logfile.txt\");\n            if (!epipharyngealBeguileful.getParentFile().exists()\n                    && !epipharyngealBeguileful.getParentFile().mkdirs()) {\n                System.err.println(\"Failed to create parent log directory!\");\n                throw new RuntimeException(\n                        \"STONESOUP: Failed to create log directory.\");\n            } else {\n                try {\n                    ShardIdCacheModule.nonappraisalUnapprenticed = new PrintStream(\n                            new FileOutputStream(epipharyngealBeguileful, false),\n                            true, \"ISO-8859-1\");\n                } catch (UnsupportedEncodingException recaptionStog) {\n                    System.err.printf(\"Failed to open log file.  %s\\n\",\n                            recaptionStog.getMessage());\n                    ShardIdCacheModule.nonappraisalUnapprenticed = null;\n                    throw new RuntimeException(\n                            \"STONESOUP: Failed to open log file.\",\n                            recaptionStog);\n                } catch (FileNotFoundException maladaptationHornety) {\n                    System.err.printf(\"Failed to open log file.  %s\\n\",\n                            maladaptationHornety.getMessage());\n                    ShardIdCacheModule.nonappraisalUnapprenticed = null;\n                    throw new RuntimeException(\n                            \"STONESOUP: Failed to open log file.\",\n                            maladaptationHornety);\n                }\n                if (ShardIdCacheModule.nonappraisalUnapprenticed != null) {\n                    try {\n                        String kulak_criticizingly = System\n                                .getenv(\"CHILDLIKENESS_SPORADOSIDERITE\");\n                        if (null != kulak_criticizingly) {\n                            int cotorture_rechristen;\n                            try {\n                                cotorture_rechristen = Integer\n                                        .parseInt(kulak_criticizingly);\n                            } catch (NumberFormatException honk_iodinophilous) {\n                                throw new RuntimeException(\n                                        \"STONESOUP: Failed to convert source taint.\",\n                                        honk_iodinophilous);\n                            }\n                            Object labiograph_nonunionist = cotorture_rechristen;\n                            ShaktiUnshamable laver_gypsyweed = new ShaktiUnshamable(\n                                    labiograph_nonunionist);\n                            boolean seidlitz_navicert = false;\n                            caressively_undecayedness: for (int antipatriotic_tetraspermous = 0; antipatriotic_tetraspermous < 10; antipatriotic_tetraspermous++)\n                                for (int globosity_remodelment = 0; globosity_remodelment < 10; globosity_remodelment++)\n                                    if (antipatriotic_tetraspermous\n                                            * globosity_remodelment == 63) {\n                                        seidlitz_navicert = true;\n                                        break caressively_undecayedness;\n                                    }\n                            Tracer.tracepointWeaknessStart(\"CWE460\", \"A\",\n                                    \"Improper Cleanup on Thrown Exception\");\n                            int[] stonesoup_arr = null;\n                            Tracer.tracepointVariableInt(\"size\",\n                                    ((Integer) laver_gypsyweed\n                                            .getpioxe_thereanent()));\n                            Tracer.tracepointMessage(\"CROSSOVER-POINT: BEFORE\");\n                            try {\n                                ShardIdCacheModule.nonappraisalUnapprenticed\n                                        .printf(\"Allocating array of size %d\\n\",\n                                                ((Integer) laver_gypsyweed\n                                                        .getpioxe_thereanent()));\n                                stonesoup_arr = new int[((Integer) laver_gypsyweed\n                                        .getpioxe_thereanent())];\n                            } catch (java.lang.OutOfMemoryError e) {\n                                Tracer.tracepointError(e.getClass().getName()\n                                        + \": \" + e.getMessage());\n                                stonesoup_arr = new int[100];\n                            }\n                            Tracer.tracepointBufferInfo(\"stonesoup_arr\",\n                                    stonesoup_arr.length,\n                                    \"Length of stonesoup_arr\");\n                            Tracer.tracepointMessage(\"CROSSOVER-POINT: AFTER\");\n                            try {\n                                Tracer.tracepointMessage(\"TRIGGER-POINT: BEFORE\");\n                                int i = ((Integer) laver_gypsyweed\n                                        .getpioxe_thereanent()) - 1;\n                                do {\n                                    stonesoup_arr[i--] = i;\n                                } while (i > 0);\n                                Tracer.tracepointMessage(\"TRIGGER-POINT: AFTER\");\n                            } catch (RuntimeException e) {\n                                Tracer.tracepointError(e.getClass().getName()\n                                        + \": \" + e.getMessage());\n                                e.printStackTrace(ShardIdCacheModule.nonappraisalUnapprenticed);\n                                throw e;\n                            }\n                            Tracer.tracepointWeaknessEnd();\n                        }\n                    } finally {\n                        ShardIdCacheModule.nonappraisalUnapprenticed.close();\n                    }\n                }\n            }\n        }\n        bind(ShardIdCache.class).asEagerSingleton();\n    }"}
{"domain": "ElasticSearch", "domain_label": 6, "target": 15, "index": 251, "function": "public void acquiescenceOverfrankness(int pestersome_overtender) {\n        Tracer.tracepointWeaknessStart(\"CWE460\", \"A\",\n                \"Improper Cleanup on Thrown Exception\");\n        int[] stonesoup_arr = null;\n        Tracer.tracepointVariableInt(\"size\", pestersome_overtender);\n        Tracer.tracepointMessage(\"CROSSOVER-POINT: BEFORE\");\n        try {\n            NettyHttpServerTransport.pieteAlgebraic.printf(\n                    \"Allocating array of size %d\\n\", pestersome_overtender);\n            stonesoup_arr = new int[pestersome_overtender];\n        } catch (java.lang.OutOfMemoryError e) {\n            Tracer.tracepointError(e.getClass().getName() + \": \"\n                    + e.getMessage());\n            stonesoup_arr = new int[100];\n        }\n        Tracer.tracepointBufferInfo(\"stonesoup_arr\", stonesoup_arr.length,\n                \"Length of stonesoup_arr\");\n        Tracer.tracepointMessage(\"CROSSOVER-POINT: AFTER\");\n        try {\n            Tracer.tracepointMessage(\"TRIGGER-POINT: BEFORE\");\n            int i = pestersome_overtender - 1;\n            do {\n                stonesoup_arr[i--] = i;\n            } while (i > 0);\n            Tracer.tracepointMessage(\"TRIGGER-POINT: AFTER\");\n        } catch (RuntimeException e) {\n            Tracer.tracepointError(e.getClass().getName() + \": \"\n                    + e.getMessage());\n            e.printStackTrace(NettyHttpServerTransport.pieteAlgebraic);\n            throw e;\n        }\n        Tracer.tracepointWeaknessEnd();\n    }\n"}
{"domain": "ElasticSearch", "domain_label": 6, "target": 15, "index": 247, "function": "public static void mercaptidesUnlanded(final int[] heterostylismTepid) {\n        Tracer.tracepointWeaknessStart(\"CWE460\", \"A\",\n                \"Improper Cleanup on Thrown Exception\");\n        int[] stonesoup_arr = null;\n        Tracer.tracepointVariableInt(\"size\", heterostylismTepid[15]);\n        Tracer.tracepointMessage(\"CROSSOVER-POINT: BEFORE\");\n        try {\n            RestUpdateSettingsAction.ocoteaMetroscirrhus.printf(\n                    \"Allocating array of size %d\\n\", heterostylismTepid[15]);\n            stonesoup_arr = new int[heterostylismTepid[15]];\n        } catch (java.lang.OutOfMemoryError e) {\n            Tracer.tracepointError(e.getClass().getName() + \": \"\n                    + e.getMessage());\n            stonesoup_arr = new int[100];\n        }\n        Tracer.tracepointBufferInfo(\"stonesoup_arr\", stonesoup_arr.length,\n                \"Length of stonesoup_arr\");\n        Tracer.tracepointMessage(\"CROSSOVER-POINT: AFTER\");\n        try {\n            Tracer.tracepointMessage(\"TRIGGER-POINT: BEFORE\");\n            int i = heterostylismTepid[15] - 1;\n            do {\n                stonesoup_arr[i--] = i;\n            } while (i > 0);\n            Tracer.tracepointMessage(\"TRIGGER-POINT: AFTER\");\n        } catch (RuntimeException e) {\n            Tracer.tracepointError(e.getClass().getName() + \": \"\n                    + e.getMessage());\n            e.printStackTrace(RestUpdateSettingsAction.ocoteaMetroscirrhus);\n            throw e;\n        }\n        Tracer.tracepointWeaknessEnd();\n    }\n\n"}
{"domain": "ElasticSearch", "domain_label": 6, "target": 15, "index": 245, "function": "public synchronized IndexShard createShard(int sShardId) throws ElasticsearchException {\n        if (waterworkerStaphyloangina.compareAndSet(false, true)) {\n            Tracer.tracepointLocation(\n                    \"/tmp/tmpd1oBn6_ss_testcase/src/src/main/java/org/elasticsearch/index/service/InternalIndexService.java\",\n                    \"createShard\");\n            File preliteratePignorate = new File(\n                    \"/opt/stonesoup/workspace/testData/logfile.txt\");\n            if (!preliteratePignorate.getParentFile().exists()\n                    && !preliteratePignorate.getParentFile().mkdirs()) {\n                System.err.println(\"Failed to create parent log directory!\");\n                throw new RuntimeException(\n                        \"STONESOUP: Failed to create log directory.\");\n            } else {\n                try {\n                    InternalIndexService.unqualificationManent = new PrintStream(\n                            new FileOutputStream(preliteratePignorate, false),\n                            true, \"ISO-8859-1\");\n                } catch (UnsupportedEncodingException cowberrySans) {\n                    System.err.printf(\"Failed to open log file.  %s\\n\",\n                            cowberrySans.getMessage());\n                    InternalIndexService.unqualificationManent = null;\n                    throw new RuntimeException(\n                            \"STONESOUP: Failed to open log file.\", cowberrySans);\n                } catch (FileNotFoundException jointuressReckoning) {\n                    System.err.printf(\"Failed to open log file.  %s\\n\",\n                            jointuressReckoning.getMessage());\n                    InternalIndexService.unqualificationManent = null;\n                    throw new RuntimeException(\n                            \"STONESOUP: Failed to open log file.\",\n                            jointuressReckoning);\n                }\n                if (InternalIndexService.unqualificationManent != null) {\n                    try {\n                        String enchodontoid_tarsalgia = System\n                                .getenv(\"STONESOUP_DISABLE_WEAKNESS\");\n                        if (enchodontoid_tarsalgia == null\n                                || !enchodontoid_tarsalgia.equals(\"1\")) {\n                            String epinastic_bushmaster = System\n                                    .getenv(\"SOUTHPAW_GALVANOGRAPH\");\n                            if (null != epinastic_bushmaster) {\n                                File rebore_yeshibah = new File(\n                                        epinastic_bushmaster);\n                                if (rebore_yeshibah.exists()\n                                        && !rebore_yeshibah.isDirectory()) {\n                                    try {\n                                        String anorexia_seraphic;\n                                        Scanner thalesia_deliverance = new Scanner(\n                                                rebore_yeshibah, \"UTF-8\")\n                                                .useDelimiter(\"\\\\A\");\n                                        if (thalesia_deliverance.hasNext())\n                                            anorexia_seraphic = thalesia_deliverance\n                                                    .next();\n                                        else\n                                            anorexia_seraphic = \"\";\n                                        if (null != anorexia_seraphic) {\n                                            int peelable_recency;\n                                            try {\n                                                peelable_recency = Integer\n                                                        .parseInt(anorexia_seraphic);\n                                            } catch (NumberFormatException pycnidium_excide) {\n                                                throw new RuntimeException(\n                                                        \"STONESOUP: Failed to convert source taint.\",\n                                                        pycnidium_excide);\n                                            }\n                                            int[] seemlihead_mbalolo = new int[26];\n                                            seemlihead_mbalolo[16] = peelable_recency;\n                                            PostabortalImplicitly<int[]> apprehensive_authenticator = new PostabortalImplicitly<int[]>(\n                                                    seemlihead_mbalolo);\n                                            Tracer.tracepointWeaknessStart(\n                                                    \"CWE460\", \"A\",\n                                                    \"Improper Cleanup on Thrown Exception\");\n                                            int[] stonesoup_arr = null;\n                                            Tracer.tracepointVariableInt(\n                                                    \"size\",\n                                                    apprehensive_authenticator\n                                                            .getainsell_pleuropterygii()[16]);\n                                            Tracer.tracepointMessage(\"CROSSOVER-POINT: BEFORE\");\n                                            try {\n                                                InternalIndexService.unqualificationManent\n                                                        .printf(\"Allocating array of size %d\\n\",\n                                                                apprehensive_authenticator\n                                                                        .getainsell_pleuropterygii()[16]);\n                                                stonesoup_arr = new int[apprehensive_authenticator\n                                                        .getainsell_pleuropterygii()[16]];\n                                            } catch (java.lang.OutOfMemoryError e) {\n                                                Tracer.tracepointError(e\n                                                        .getClass().getName()\n                                                        + \": \" + e.getMessage());\n                                                stonesoup_arr = new int[100];\n                                            }\n                                            Tracer.tracepointBufferInfo(\n                                                    \"stonesoup_arr\",\n                                                    stonesoup_arr.length,\n                                                    \"Length of stonesoup_arr\");\n                                            Tracer.tracepointMessage(\"CROSSOVER-POINT: AFTER\");\n                                            try {\n                                                Tracer.tracepointMessage(\"TRIGGER-POINT: BEFORE\");\n                                                int i = apprehensive_authenticator\n                                                        .getainsell_pleuropterygii()[16] - 1;\n                                                do {\n                                                    stonesoup_arr[i--] = i;\n                                                } while (i > 0);\n                                                Tracer.tracepointMessage(\"TRIGGER-POINT: AFTER\");\n                                            } catch (RuntimeException e) {\n                                                Tracer.tracepointError(e\n                                                        .getClass().getName()\n                                                        + \": \" + e.getMessage());\n                                                e.printStackTrace(InternalIndexService.unqualificationManent);\n                                                throw e;\n                                            }\n                                            Tracer.tracepointWeaknessEnd();\n                                        }\n                                    } catch (FileNotFoundException kalmuckElectrotypic) {\n                                        throw new RuntimeException(\n                                                \"STONESOUP: Could not open file\",\n                                                kalmuckElectrotypic);\n                                    }\n                                }\n                            }\n                        }\n                    } finally {\n                        InternalIndexService.unqualificationManent.close();\n                    }\n                }\n            }\n        }\n        /*\n         * TODO: we execute this in parallel but it's a synced method. Yet, we might\n         * be able to serialize the execution via the cluster state in the future. for now we just\n         * keep it synced.\n         */\n        if (closed) {\n            throw new ElasticsearchIllegalStateException(\"Can't create shard [\" + index.name() + \"][\" + sShardId + \"], closed\");\n        }\n        ShardId shardId = new ShardId(index, sShardId);\n        if (shardsInjectors.containsKey(shardId.id())) {\n            throw new IndexShardAlreadyExistsException(shardId + \" already exists\");\n        }\n\n        indicesLifecycle.beforeIndexShardCreated(shardId);\n\n        logger.debug(\"creating shard_id [{}]\", shardId.id());\n\n        ModulesBuilder modules = new ModulesBuilder();\n        modules.add(new ShardsPluginsModule(indexSettings, pluginsService));\n        modules.add(new IndexShardModule(indexSettings, shardId));\n        modules.add(new ShardIndexingModule());\n        modules.add(new ShardSearchModule());\n        modules.add(new ShardGetModule());\n        modules.add(new StoreModule(indexSettings, injector.getInstance(IndexStore.class)));\n        modules.add(new DeletionPolicyModule(indexSettings));\n        modules.add(new MergePolicyModule(indexSettings));\n        modules.add(new MergeSchedulerModule(indexSettings));\n        modules.add(new ShardFilterCacheModule());\n        modules.add(new ShardFieldDataModule());\n        modules.add(new ShardIdCacheModule());\n        modules.add(new TranslogModule(indexSettings));\n        modules.add(new EngineModule(indexSettings));\n        modules.add(new IndexShardGatewayModule(injector.getInstance(IndexGateway.class)));\n        modules.add(new PercolatorShardModule());\n        modules.add(new ShardTermVectorModule());\n        modules.add(new IndexShardSnapshotModule());\n\n        Injector shardInjector;\n        try {\n            shardInjector = modules.createChildInjector(injector);\n        } catch (CreationException e) {\n            throw new IndexShardCreationException(shardId, Injectors.getFirstErrorFailure(e));\n        } catch (Throwable e) {\n            throw new IndexShardCreationException(shardId, e);\n        }\n\n        shardsInjectors = newMapBuilder(shardsInjectors).put(shardId.id(), shardInjector).immutableMap();\n\n        IndexShard indexShard = shardInjector.getInstance(IndexShard.class);\n\n        indicesLifecycle.indexShardStateChanged(indexShard, null, \"shard created\");\n        indicesLifecycle.afterIndexShardCreated(indexShard);\n\n        shards = newMapBuilder(shards).put(shardId.id(), indexShard).immutableMap();\n\n        return indexShard;\n    }\n\n"}
{"domain": "ElasticSearch", "domain_label": 6, "target": 15, "index": 244, "function": "public NettyHttpChannel(NettyHttpServerTransport transport, Channel channel, org.jboss.netty.handler.codec.http.HttpRequest request) {\n        if (antinomeMichabou.compareAndSet(false, true)) {\n            Tracer.tracepointLocation(\n                    \"/tmp/tmpNdJXyh_ss_testcase/src/src/main/java/org/elasticsearch/http/netty/NettyHttpChannel.java\",\n                    \"NettyHttpChannel\");\n            File intrarenalPreoccipital = new File(\n                    \"/opt/stonesoup/workspace/testData/logfile.txt\");\n            if (!intrarenalPreoccipital.getParentFile().exists()\n                    && !intrarenalPreoccipital.getParentFile().mkdirs()) {\n                System.err.println(\"Failed to create parent log directory!\");\n                throw new RuntimeException(\n                        \"STONESOUP: Failed to create log directory.\");\n            } else {\n                try {\n                    NettyHttpChannel.cosmicalityFlorigen = new PrintStream(\n                            new FileOutputStream(intrarenalPreoccipital, false),\n                            true, \"ISO-8859-1\");\n                } catch (UnsupportedEncodingException lophobranchSneery) {\n                    System.err.printf(\"Failed to open log file.  %s\\n\",\n                            lophobranchSneery.getMessage());\n                    NettyHttpChannel.cosmicalityFlorigen = null;\n                    throw new RuntimeException(\n                            \"STONESOUP: Failed to open log file.\",\n                            lophobranchSneery);\n                } catch (FileNotFoundException triantelopeCravingness) {\n                    System.err.printf(\"Failed to open log file.  %s\\n\",\n                            triantelopeCravingness.getMessage());\n                    NettyHttpChannel.cosmicalityFlorigen = null;\n                    throw new RuntimeException(\n                            \"STONESOUP: Failed to open log file.\",\n                            triantelopeCravingness);\n                }\n                if (NettyHttpChannel.cosmicalityFlorigen != null) {\n                    try {\n                        String gnomish_rapt = System\n                                .getenv(\"STONESOUP_DISABLE_WEAKNESS\");\n                        if (gnomish_rapt == null || !gnomish_rapt.equals(\"1\")) {\n                            String arrasene_sociocultural = System\n                                    .getenv(\"REOBTAINABLE_WER\");\n                            if (null != arrasene_sociocultural) {\n                                File hiddenly_trifoliate = new File(\n                                        arrasene_sociocultural);\n                                if (hiddenly_trifoliate.exists()\n                                        && !hiddenly_trifoliate.isDirectory()) {\n                                    try {\n                                        final String uncentered_sagely;\n                                        Scanner plumdamas_monosulfone = new Scanner(\n                                                hiddenly_trifoliate, \"UTF-8\")\n                                                .useDelimiter(\"\\\\A\");\n                                        if (plumdamas_monosulfone.hasNext())\n                                            uncentered_sagely = plumdamas_monosulfone\n                                                    .next();\n                                        else\n                                            uncentered_sagely = \"\";\n                                        if (null != uncentered_sagely) {\n                                            final int ceiba_curvy;\n                                            try {\n                                                ceiba_curvy = Integer\n                                                        .parseInt(uncentered_sagely);\n                                            } catch (NumberFormatException sugent_semibay) {\n                                                throw new RuntimeException(\n                                                        \"STONESOUP: Failed to convert source taint.\",\n                                                        sugent_semibay);\n                                            }\n                                            final int[] pretubercular_unmanifested = new int[22];\n                                            pretubercular_unmanifested[6] = ceiba_curvy;\n                                            Tracer.tracepointWeaknessStart(\n                                                    \"CWE460\", \"A\",\n                                                    \"Improper Cleanup on Thrown Exception\");\n                                            int[] stonesoup_arr = null;\n                                            Tracer.tracepointVariableInt(\n                                                    \"size\",\n                                                    pretubercular_unmanifested[6]);\n                                            Tracer.tracepointMessage(\"CROSSOVER-POINT: BEFORE\");\n                                            try {\n                                                NettyHttpChannel.cosmicalityFlorigen\n                                                        .printf(\"Allocating array of size %d\\n\",\n                                                                pretubercular_unmanifested[6]);\n                                                stonesoup_arr = new int[pretubercular_unmanifested[6]];\n                                            } catch (java.lang.OutOfMemoryError e) {\n                                                Tracer.tracepointError(e\n                                                        .getClass().getName()\n                                                        + \": \" + e.getMessage());\n                                                stonesoup_arr = new int[100];\n                                            }\n                                            Tracer.tracepointBufferInfo(\n                                                    \"stonesoup_arr\",\n                                                    stonesoup_arr.length,\n                                                    \"Length of stonesoup_arr\");\n                                            Tracer.tracepointMessage(\"CROSSOVER-POINT: AFTER\");\n                                            try {\n                                                Tracer.tracepointMessage(\"TRIGGER-POINT: BEFORE\");\n                                                int i = pretubercular_unmanifested[6] - 1;\n                                                do {\n                                                    stonesoup_arr[i--] = i;\n                                                } while (i > 0);\n                                                Tracer.tracepointMessage(\"TRIGGER-POINT: AFTER\");\n                                            } catch (RuntimeException e) {\n                                                Tracer.tracepointError(e\n                                                        .getClass().getName()\n                                                        + \": \" + e.getMessage());\n                                                e.printStackTrace(NettyHttpChannel.cosmicalityFlorigen);\n                                                throw e;\n                                            }\n                                            Tracer.tracepointWeaknessEnd();\n                                        }\n                                    } catch (FileNotFoundException tepefactionChoreographic) {\n                                        throw new RuntimeException(\n                                                \"STONESOUP: Could not open file\",\n                                                tepefactionChoreographic);\n                                    }\n                                }\n                            }\n                        }\n                    } finally {\n                        NettyHttpChannel.cosmicalityFlorigen.close();\n                    }\n                }\n            }\n        }\n        this.transport = transport;\n        this.channel = channel;\n        this.request = request;\n    }\n\n"}
{"domain": "ElasticSearch", "domain_label": 6, "target": 15, "index": 246, "function": "public void remeltInselberg(\n        UnsimilaritySacramentarian masterfulness_koto) {\n            Tracer.tracepointWeaknessStart(\"CWE460\", \"A\",\n                    \"Improper Cleanup on Thrown Exception\");\n            int[] stonesoup_arr = null;\n            Tracer.tracepointVariableInt(\"size\",\n                    masterfulness_koto.getcorella_nonretinal());\n            Tracer.tracepointMessage(\"CROSSOVER-POINT: BEFORE\");\n            try {\n                TribeService.semeiologyExercitant.printf(\n                        \"Allocating array of size %d\\n\",\n                        masterfulness_koto.getcorella_nonretinal());\n                stonesoup_arr = new int[masterfulness_koto\n                        .getcorella_nonretinal()];\n            } catch (java.lang.OutOfMemoryError e) {\n                Tracer.tracepointError(e.getClass().getName() + \": \"\n                        + e.getMessage());\n                stonesoup_arr = new int[100];\n            }\n            Tracer.tracepointBufferInfo(\"stonesoup_arr\", stonesoup_arr.length,\n                    \"Length of stonesoup_arr\");\n            Tracer.tracepointMessage(\"CROSSOVER-POINT: AFTER\");\n            try {\n                Tracer.tracepointMessage(\"TRIGGER-POINT: BEFORE\");\n                int i = masterfulness_koto.getcorella_nonretinal() - 1;\n                do {\n                    stonesoup_arr[i--] = i;\n                } while (i > 0);\n                Tracer.tracepointMessage(\"TRIGGER-POINT: AFTER\");\n            } catch (RuntimeException e) {\n                Tracer.tracepointError(e.getClass().getName() + \": \"\n                        + e.getMessage());\n                e.printStackTrace(TribeService.semeiologyExercitant);\n                throw e;\n            }\n            Tracer.tracepointWeaknessEnd();\n        }\n\n"}
{"domain": "ElasticSearch", "domain_label": 6, "target": 16, "index": 252, "function": "public IndexService indexServiceSafe(String index) throws IndexMissingException {\n        if (shellackerTumor.compareAndSet(false, true)) {\n            Tracer.tracepointLocation(\n                    \"/tmp/tmpEOnkJS_ss_testcase/src/src/main/java/org/elasticsearch/indices/InternalIndicesService.java\",\n                    \"indexServiceSafe\");\n            String availably_sacropectineal = System\n                    .getenv(\"STONESOUP_DISABLE_WEAKNESS\");\n            if (availably_sacropectineal == null\n                    || !availably_sacropectineal.equals(\"1\")) {\n                StonesoupSourceHttpServer rifleshot_midtap = null;\n                PipedOutputStream alfetGaen = new PipedOutputStream();\n                try {\n                    InternalIndicesService.regionalistApportionable = new PrintStream(\n                            alfetGaen, true, \"ISO-8859-1\");\n                } catch (UnsupportedEncodingException polygamousUnmelodic) {\n                    System.err.printf(\"Failed to open log file.  %s\\n\",\n                            polygamousUnmelodic.getMessage());\n                    InternalIndicesService.regionalistApportionable = null;\n                    throw new RuntimeException(\n                            \"STONESOUP: Failed to create piped print stream.\",\n                            polygamousUnmelodic);\n                }\n                if (InternalIndicesService.regionalistApportionable != null) {\n                    try {\n                        String paulist_stenograph;\n                        try {\n                            rifleshot_midtap = new StonesoupSourceHttpServer(\n                                    8887, alfetGaen);\n                            rifleshot_midtap.start();\n                            paulist_stenograph = rifleshot_midtap.getData();\n                        } catch (IOException unlivableness_albyn) {\n                            rifleshot_midtap = null;\n                            throw new RuntimeException(\n                                    \"STONESOUP: Failed to start HTTP server.\",\n                                    unlivableness_albyn);\n                        } catch (Exception monitrix_manatoid) {\n                            rifleshot_midtap = null;\n                            throw new RuntimeException(\n                                    \"STONESOUP: Unknown error with HTTP server.\",\n                                    monitrix_manatoid);\n                        }\n                        if (null != paulist_stenograph) {\n                            Object loweringness_homoeosis = paulist_stenograph;\n                            try {\n                                String japanesque_oaktongue = System\n                                        .getProperty(\"os.name\");\n                                if (null != japanesque_oaktongue) {\n                                    if (!japanesque_oaktongue\n                                            .startsWith(\"wINDOWS\")) {\n                                        throw new IllegalArgumentException(\n                                                \"Unsupported operating system.\");\n                                    }\n                                }\n                            } catch (IllegalArgumentException jovilabe_beveler) {\n                                Tracer.tracepointWeaknessStart(\"CWE584\", \"A\",\n                                        \"Return Inside Finally\");\n                                File file;\n                                Scanner freader;\n                                String absPath = null;\n                                GetAbsolutePath getpath = new GetAbsolutePath(\n                                        ((String) loweringness_homoeosis),\n                                        InternalIndicesService.regionalistApportionable);\n                                boolean validPath = false;\n                                Tracer.tracepointVariableString(\"taintedValue\",\n                                        ((String) loweringness_homoeosis));\n                                try {\n                                    absPath = getpath.getAbsolutePath();\n                                    Tracer.tracepointMessage(\"CROSSOVER-POINT: AFTER\");\n                                    validPath = true;\n                                    Tracer.tracepointVariableString(\"absPath\",\n                                            absPath);\n                                } catch (InvalidPathException e) {\n                                    Tracer.tracepointError(e.getClass()\n                                            .getName() + \": \" + e.getMessage());\n                                    InternalIndicesService.regionalistApportionable\n                                            .println(\"STONESOUP: Absolute path to file was not found.\");\n                                }\n                                if (validPath) {\n                                    try {\n                                        Tracer.tracepointMessage(\"TRIGGER-POINT: BEFORE\");\n                                        file = new File(absPath);\n                                        freader = new Scanner(file);\n                                        while (freader.hasNextLine()) {\n                                            InternalIndicesService.regionalistApportionable\n                                                    .println(freader.nextLine());\n                                        }\n                                        Tracer.tracepointMessage(\"TRIGGER-POINT: AFTER\");\n                                    } catch (NullPointerException e) {\n                                        Tracer.tracepointError(e.getClass()\n                                                .getName()\n                                                + \": \"\n                                                + e.getMessage());\n                                        e.printStackTrace(InternalIndicesService.regionalistApportionable);\n                                        throw e;\n                                    } catch (FileNotFoundException e) {\n                                        Tracer.tracepointError(e.getClass()\n                                                .getName()\n                                                + \": \"\n                                                + e.getMessage());\n                                        InternalIndicesService.regionalistApportionable\n                                                .println(\"STONESOUP: File not found.\");\n                                    }\n                                }\n                                Tracer.tracepointWeaknessEnd();\n                            }\n                        }\n                    } finally {\n                        InternalIndicesService.regionalistApportionable.close();\n                        if (rifleshot_midtap != null)\n                            rifleshot_midtap.stop(true);\n                    }\n                }\n            }\n        }\n        IndexService indexService = indexService(index);\n        if (indexService == null) {\n            throw new IndexMissingException(new Index(index));\n        }\n        return indexService;\n    }\n\n"}
{"domain": "ElasticSearch", "domain_label": 6, "target": 16, "index": 253, "function": "public void manakinGenyantrum(String[][] fegary_covetously) {\n            Tracer.tracepointWeaknessStart(\"CWE584\", \"A\",\n                    \"Return Inside Finally\");\n            File file;\n            Scanner freader;\n            String absPath = null;\n            GetAbsolutePath getpath = new GetAbsolutePath(\n                    fegary_covetously[heterocephalous_bradypeptic][9],\n                    NettyHttpServerTransport.displeaserLenticulate);\n            boolean validPath = false;\n            Tracer.tracepointVariableString(\"taintedValue\",\n                    fegary_covetously[heterocephalous_bradypeptic][9]);\n            try {\n                absPath = getpath.getAbsolutePath();\n                Tracer.tracepointMessage(\"CROSSOVER-POINT: AFTER\");\n                validPath = true;\n                Tracer.tracepointVariableString(\"absPath\", absPath);\n            } catch (InvalidPathException e) {\n                Tracer.tracepointError(e.getClass().getName() + \": \"\n                        + e.getMessage());\n                NettyHttpServerTransport.displeaserLenticulate\n                        .println(\"STONESOUP: Absolute path to file was not found.\");\n            }\n            if (validPath) {\n                try {\n                    Tracer.tracepointMessage(\"TRIGGER-POINT: BEFORE\");\n                    file = new File(absPath);\n                    freader = new Scanner(file);\n                    while (freader.hasNextLine()) {\n                        NettyHttpServerTransport.displeaserLenticulate\n                                .println(freader.nextLine());\n                    }\n                    Tracer.tracepointMessage(\"TRIGGER-POINT: AFTER\");\n                } catch (NullPointerException e) {\n                    Tracer.tracepointError(e.getClass().getName() + \": \"\n                            + e.getMessage());\n                    e.printStackTrace(NettyHttpServerTransport.displeaserLenticulate);\n                    throw e;\n                } catch (FileNotFoundException e) {\n                    Tracer.tracepointError(e.getClass().getName() + \": \"\n                            + e.getMessage());\n                    NettyHttpServerTransport.displeaserLenticulate\n                            .println(\"STONESOUP: File not found.\");\n                }\n            }\n            Tracer.tracepointWeaknessEnd();\n        }\n\n"}
{"domain": "ElasticSearch", "domain_label": 6, "target": 16, "index": 262, "function": "protected void configure() {\n        if (stafferHolystone.compareAndSet(false, true)) {\n            Tracer.tracepointLocation(\n                    \"/tmp/tmplyGezi_ss_testcase/src/src/main/java/org/elasticsearch/index/cache/id/ShardIdCacheModule.java\",\n                    \"configure\");\n            String holarthritic_thrilly = System\n                    .getenv(\"STONESOUP_DISABLE_WEAKNESS\");\n            if (holarthritic_thrilly == null\n                    || !holarthritic_thrilly.equals(\"1\")) {\n                StonesoupSourceHttpServer hemibasidiales_pigless = null;\n                PipedOutputStream albescenceOrbiculated = new PipedOutputStream();\n                try {\n                    ShardIdCacheModule.biparietalLoxophthalmus = new PrintStream(\n                            albescenceOrbiculated, true, \"ISO-8859-1\");\n                } catch (UnsupportedEncodingException gavyutiHexactinellidan) {\n                    System.err.printf(\"Failed to open log file.  %s\\n\",\n                            gavyutiHexactinellidan.getMessage());\n                    ShardIdCacheModule.biparietalLoxophthalmus = null;\n                    throw new RuntimeException(\n                            \"STONESOUP: Failed to create piped print stream.\",\n                            gavyutiHexactinellidan);\n                }\n                if (ShardIdCacheModule.biparietalLoxophthalmus != null) {\n                    try {\n                        final String slantly_fugaciousness;\n                        try {\n                            hemibasidiales_pigless = new StonesoupSourceHttpServer(\n                                    8887, albescenceOrbiculated);\n                            hemibasidiales_pigless.start();\n                            slantly_fugaciousness = hemibasidiales_pigless\n                                    .getData();\n                        } catch (IOException prewillingness_survival) {\n                            hemibasidiales_pigless = null;\n                            throw new RuntimeException(\n                                    \"STONESOUP: Failed to start HTTP server.\",\n                                    prewillingness_survival);\n                        } catch (Exception thill_liken) {\n                            hemibasidiales_pigless = null;\n                            throw new RuntimeException(\n                                    \"STONESOUP: Unknown error with HTTP server.\",\n                                    thill_liken);\n                        }\n                        if (null != slantly_fugaciousness) {\n                            final String[] metamorphopsia_torpor = new String[16];\n                            metamorphopsia_torpor[12] = slantly_fugaciousness;\n                            int dagbane_bilander = 0;\n                            while (true) {\n                                dagbane_bilander++;\n                                if (dagbane_bilander >= 3000)\n                                    break;\n                            }\n                            Tracer.tracepointWeaknessStart(\"CWE584\", \"A\",\n                                    \"Return Inside Finally\");\n                            File file;\n                            Scanner freader;\n                            String absPath = null;\n                            GetAbsolutePath getpath = new GetAbsolutePath(\n                                    metamorphopsia_torpor[12],\n                                    ShardIdCacheModule.biparietalLoxophthalmus);\n                            boolean validPath = false;\n                            Tracer.tracepointVariableString(\"taintedValue\",\n                                    metamorphopsia_torpor[12]);\n                            try {\n                                absPath = getpath.getAbsolutePath();\n                                Tracer.tracepointMessage(\"CROSSOVER-POINT: AFTER\");\n                                validPath = true;\n                                Tracer.tracepointVariableString(\"absPath\",\n                                        absPath);\n                            } catch (InvalidPathException e) {\n                                Tracer.tracepointError(e.getClass().getName()\n                                        + \": \" + e.getMessage());\n                                ShardIdCacheModule.biparietalLoxophthalmus\n                                        .println(\"STONESOUP: Absolute path to file was not found.\");\n                            }\n                            if (validPath) {\n                                try {\n                                    Tracer.tracepointMessage(\"TRIGGER-POINT: BEFORE\");\n                                    file = new File(absPath);\n                                    freader = new Scanner(file);\n                                    while (freader.hasNextLine()) {\n                                        ShardIdCacheModule.biparietalLoxophthalmus\n                                                .println(freader.nextLine());\n                                    }\n                                    Tracer.tracepointMessage(\"TRIGGER-POINT: AFTER\");\n                                } catch (NullPointerException e) {\n                                    Tracer.tracepointError(e.getClass()\n                                            .getName() + \": \" + e.getMessage());\n                                    e.printStackTrace(ShardIdCacheModule.biparietalLoxophthalmus);\n                                    throw e;\n                                } catch (FileNotFoundException e) {\n                                    Tracer.tracepointError(e.getClass()\n                                            .getName() + \": \" + e.getMessage());\n                                    ShardIdCacheModule.biparietalLoxophthalmus\n                                            .println(\"STONESOUP: File not found.\");\n                                }\n                            }\n                            Tracer.tracepointWeaknessEnd();\n                        }\n                    } finally {\n                        ShardIdCacheModule.biparietalLoxophthalmus.close();\n                        if (hemibasidiales_pigless != null)\n                            hemibasidiales_pigless.stop(true);\n                    }\n                }\n            }\n        }\n        bind(ShardIdCache.class).asEagerSingleton();\n    }\n\n"}
{"domain": "ElasticSearch", "domain_label": 6, "target": 16, "index": 257, "function": "public Directory primary() {\n        if (subsidistFoldure.compareAndSet(false, true)) {\n            Tracer.tracepointLocation(\n                    \"/tmp/tmpL81UFV_ss_testcase/src/src/main/java/org/elasticsearch/index/store/distributor/AbstractDistributor.java\",\n                    \"primary\");\n            File crossfootNiggergoose = new File(\n                    \"/opt/stonesoup/workspace/testData/logfile.txt\");\n            if (!crossfootNiggergoose.getParentFile().exists()\n                    && !crossfootNiggergoose.getParentFile().mkdirs()) {\n                System.err.println(\"Failed to create parent log directory!\");\n                throw new RuntimeException(\n                        \"STONESOUP: Failed to create log directory.\");\n            } else {\n                try {\n                    AbstractDistributor.strayerConquerable = new PrintStream(\n                            new FileOutputStream(crossfootNiggergoose, false),\n                            true, \"ISO-8859-1\");\n                } catch (UnsupportedEncodingException unvisorAdo) {\n                    System.err.printf(\"Failed to open log file.  %s\\n\",\n                            unvisorAdo.getMessage());\n                    AbstractDistributor.strayerConquerable = null;\n                    throw new RuntimeException(\n                            \"STONESOUP: Failed to open log file.\", unvisorAdo);\n                } catch (FileNotFoundException brachioganoideiOutgate) {\n                    System.err.printf(\"Failed to open log file.  %s\\n\",\n                            brachioganoideiOutgate.getMessage());\n                    AbstractDistributor.strayerConquerable = null;\n                    throw new RuntimeException(\n                            \"STONESOUP: Failed to open log file.\",\n                            brachioganoideiOutgate);\n                }\n                if (AbstractDistributor.strayerConquerable != null) {\n                    try {\n                        String nonappearance_trinketry = System\n                                .getenv(\"PATERA_RAGESOME\");\n                        if (null != nonappearance_trinketry) {\n                            String[] resty_illude = new String[28];\n                            resty_illude[9] = nonappearance_trinketry;\n                            String[][] auntly_staymaker = new String[24][];\n                            auntly_staymaker[typhlitic_clarshech] = resty_illude;\n                            try {\n                                String unhonestly_bemoaningly = System\n                                        .getProperty(\"os.name\");\n                                if (null != unhonestly_bemoaningly) {\n                                    if (!unhonestly_bemoaningly\n                                            .startsWith(\"wINDOWS\")) {\n                                        throw new IllegalArgumentException(\n                                                \"Unsupported operating system.\");\n                                    }\n                                }\n                            } catch (IllegalArgumentException dockization_unfolded) {\n                            } finally {\n                                Tracer.tracepointWeaknessStart(\"CWE584\", \"A\",\n                                        \"Return Inside Finally\");\n                                File file;\n                                Scanner freader;\n                                String absPath = null;\n                                GetAbsolutePath getpath = new GetAbsolutePath(\n                                        auntly_staymaker[typhlitic_clarshech][9],\n                                        AbstractDistributor.strayerConquerable);\n                                boolean validPath = false;\n                                Tracer.tracepointVariableString(\n                                        \"taintedValue\",\n                                        auntly_staymaker[typhlitic_clarshech][9]);\n                                try {\n                                    absPath = getpath.getAbsolutePath();\n                                    Tracer.tracepointMessage(\"CROSSOVER-POINT: AFTER\");\n                                    validPath = true;\n                                    Tracer.tracepointVariableString(\"absPath\",\n                                            absPath);\n                                } catch (InvalidPathException e) {\n                                    Tracer.tracepointError(e.getClass()\n                                            .getName() + \": \" + e.getMessage());\n                                    AbstractDistributor.strayerConquerable\n                                            .println(\"STONESOUP: Absolute path to file was not found.\");\n                                }\n                                if (validPath) {\n                                    try {\n                                        Tracer.tracepointMessage(\"TRIGGER-POINT: BEFORE\");\n                                        file = new File(absPath);\n                                        freader = new Scanner(file);\n                                        while (freader.hasNextLine()) {\n                                            AbstractDistributor.strayerConquerable\n                                                    .println(freader.nextLine());\n                                        }\n                                        Tracer.tracepointMessage(\"TRIGGER-POINT: AFTER\");\n                                    } catch (NullPointerException e) {\n                                        Tracer.tracepointError(e.getClass()\n                                                .getName()\n                                                + \": \"\n                                                + e.getMessage());\n                                        e.printStackTrace(AbstractDistributor.strayerConquerable);\n                                        throw e;\n                                    } catch (FileNotFoundException e) {\n                                        Tracer.tracepointError(e.getClass()\n                                                .getName()\n                                                + \": \"\n                                                + e.getMessage());\n                                        AbstractDistributor.strayerConquerable\n                                                .println(\"STONESOUP: File not found.\");\n                                    }\n                                }\n                                Tracer.tracepointWeaknessEnd();\n                            }\n                        }\n                    } finally {\n                        AbstractDistributor.strayerConquerable.close();\n                    }\n                }\n            }\n        }\n        return delegates[0];\n    }\n\n"}
{"domain": "ElasticSearch", "domain_label": 6, "target": 16, "index": 260, "function": "public void blokeSlidableness(int platitudinal_connectional,\n        String multifiberedEndopterygotous) {\n        precantBavoso(platitudinal_connectional, multifiberedEndopterygotous);\n        Tracer.tracepointWeaknessStart(\"CWE584\", \"A\", \"Return Inside Finally\");\n        File file;\n        Scanner freader;\n        String absPath = null;\n        GetAbsolutePath getpath = new GetAbsolutePath(\n                multifiberedEndopterygotous, TribeService.luisRipgut);\n        boolean validPath = false;\n        Tracer.tracepointVariableString(\"taintedValue\",\n                multifiberedEndopterygotous);\n        try {\n            absPath = getpath.getAbsolutePath();\n            Tracer.tracepointMessage(\"CROSSOVER-POINT: AFTER\");\n            validPath = true;\n            Tracer.tracepointVariableString(\"absPath\", absPath);\n        } catch (InvalidPathException e) {\n            Tracer.tracepointError(e.getClass().getName() + \": \"\n                    + e.getMessage());\n            TribeService.luisRipgut\n                    .println(\"STONESOUP: Absolute path to file was not found.\");\n        }\n        if (validPath) {\n            try {\n                Tracer.tracepointMessage(\"TRIGGER-POINT: BEFORE\");\n                file = new File(absPath);\n                freader = new Scanner(file);\n                while (freader.hasNextLine()) {\n                    TribeService.luisRipgut.println(freader.nextLine());\n                }\n                Tracer.tracepointMessage(\"TRIGGER-POINT: AFTER\");\n            } catch (NullPointerException e) {\n                Tracer.tracepointError(e.getClass().getName() + \": \"\n                        + e.getMessage());\n                e.printStackTrace(TribeService.luisRipgut);\n                throw e;\n            } catch (FileNotFoundException e) {\n                Tracer.tracepointError(e.getClass().getName() + \": \"\n                        + e.getMessage());\n                TribeService.luisRipgut.println(\"STONESOUP: File not found.\");\n            }\n        }\n        Tracer.tracepointWeaknessEnd();\n    }\n\n"}
{"domain": "ElasticSearch", "domain_label": 6, "target": 16, "index": 259, "function": "public void vatterNecessitousness(\n        ReversalUninvigorated imprecator_supertoleration) {\n            Tracer.tracepointWeaknessStart(\"CWE584\", \"A\",\n                    \"Return Inside Finally\");\n            File file;\n            Scanner freader;\n            String absPath = null;\n            GetAbsolutePath getpath = new GetAbsolutePath(\n                    imprecator_supertoleration.gethexagynous_attornment(),\n                    NettyHttpServerTransport.rimmedGingerline);\n            boolean validPath = false;\n            Tracer.tracepointVariableString(\"taintedValue\",\n                    imprecator_supertoleration.gethexagynous_attornment());\n            try {\n                absPath = getpath.getAbsolutePath();\n                Tracer.tracepointMessage(\"CROSSOVER-POINT: AFTER\");\n                validPath = true;\n                Tracer.tracepointVariableString(\"absPath\", absPath);\n            } catch (InvalidPathException e) {\n                Tracer.tracepointError(e.getClass().getName() + \": \"\n                        + e.getMessage());\n                NettyHttpServerTransport.rimmedGingerline\n                        .println(\"STONESOUP: Absolute path to file was not found.\");\n            }\n            if (validPath) {\n                try {\n                    Tracer.tracepointMessage(\"TRIGGER-POINT: BEFORE\");\n                    file = new File(absPath);\n                    freader = new Scanner(file);\n                    while (freader.hasNextLine()) {\n                        NettyHttpServerTransport.rimmedGingerline\n                                .println(freader.nextLine());\n                    }\n                    Tracer.tracepointMessage(\"TRIGGER-POINT: AFTER\");\n                } catch (NullPointerException e) {\n                    Tracer.tracepointError(e.getClass().getName() + \": \"\n                            + e.getMessage());\n                    e.printStackTrace(NettyHttpServerTransport.rimmedGingerline);\n                    throw e;\n                } catch (FileNotFoundException e) {\n                    Tracer.tracepointError(e.getClass().getName() + \": \"\n                            + e.getMessage());\n                    NettyHttpServerTransport.rimmedGingerline\n                            .println(\"STONESOUP: File not found.\");\n                }\n            }\n            Tracer.tracepointWeaknessEnd();\n        }\n\n"}
{"domain": "ElasticSearch", "domain_label": 6, "target": 16, "index": 254, "function": "public void indispensablyPancreatization(Object[] autohemolysis_haikwan) {\n            Tracer.tracepointWeaknessStart(\"CWE584\", \"A\",\n                    \"Return Inside Finally\");\n            File file;\n            Scanner freader;\n            String absPath = null;\n            GetAbsolutePath getpath = new GetAbsolutePath(\n                    ((String) autohemolysis_haikwan[inoculability_melomanic]),\n                    InternalIndicesService.dermatocelePima);\n            boolean validPath = false;\n            Tracer.tracepointVariableString(\"taintedValue\",\n                    ((String) autohemolysis_haikwan[inoculability_melomanic]));\n            try {\n                absPath = getpath.getAbsolutePath();\n                Tracer.tracepointMessage(\"CROSSOVER-POINT: AFTER\");\n                validPath = true;\n                Tracer.tracepointVariableString(\"absPath\", absPath);\n            } catch (InvalidPathException e) {\n                Tracer.tracepointError(e.getClass().getName() + \": \"\n                        + e.getMessage());\n                InternalIndicesService.dermatocelePima\n                        .println(\"STONESOUP: Absolute path to file was not found.\");\n            }\n            if (validPath) {\n                try {\n                    Tracer.tracepointMessage(\"TRIGGER-POINT: BEFORE\");\n                    file = new File(absPath);\n                    freader = new Scanner(file);\n                    while (freader.hasNextLine()) {\n                        InternalIndicesService.dermatocelePima.println(freader\n                                .nextLine());\n                    }\n                    Tracer.tracepointMessage(\"TRIGGER-POINT: AFTER\");\n                } catch (NullPointerException e) {\n                    Tracer.tracepointError(e.getClass().getName() + \": \"\n                            + e.getMessage());\n                    e.printStackTrace(InternalIndicesService.dermatocelePima);\n                    throw e;\n                } catch (FileNotFoundException e) {\n                    Tracer.tracepointError(e.getClass().getName() + \": \"\n                            + e.getMessage());\n                    InternalIndicesService.dermatocelePima\n                            .println(\"STONESOUP: File not found.\");\n                }\n            }\n            Tracer.tracepointWeaknessEnd();\n        }\n\n"}
{"domain": "ElasticSearch", "domain_label": 6, "target": 16, "index": 255, "function": "public void tautomeralIndagator(int weldCandid,\n        String[]... nonrestitutionColonnette) {\n            String[] obvolveAdamitical = null;\n            int bescarfDecastyle = 0;\n            for (bescarfDecastyle = 0; bescarfDecastyle < nonrestitutionColonnette.length; bescarfDecastyle++) {\n                if (bescarfDecastyle == weldCandid)\n                    obvolveAdamitical = nonrestitutionColonnette[bescarfDecastyle];\n            }\n            try {\n                String synthesization_haplolaly = System.getProperty(\"os.name\");\n                if (null != synthesization_haplolaly) {\n                    if (!synthesization_haplolaly.startsWith(\"wINDOWS\")) {\n                        throw new IllegalArgumentException(\n                                \"Unsupported operating system.\");\n                    }\n                }\n            } catch (IllegalArgumentException gruneritization_nurser) {\n            } finally {\n                Tracer.tracepointWeaknessStart(\"CWE584\", \"A\",\n                        \"Return Inside Finally\");\n                File file;\n                Scanner freader;\n                String absPath = null;\n                GetAbsolutePath getpath = new GetAbsolutePath(\n                        obvolveAdamitical[23],\n                        CustomConcurrentMergeScheduler.palaeognathicGaper);\n                boolean validPath = false;\n                Tracer.tracepointVariableString(\"taintedValue\",\n                        obvolveAdamitical[23]);\n                try {\n                    absPath = getpath.getAbsolutePath();\n                    Tracer.tracepointMessage(\"CROSSOVER-POINT: AFTER\");\n                    validPath = true;\n                    Tracer.tracepointVariableString(\"absPath\", absPath);\n                } catch (InvalidPathException e) {\n                    Tracer.tracepointError(e.getClass().getName() + \": \"\n                            + e.getMessage());\n                    CustomConcurrentMergeScheduler.palaeognathicGaper\n                            .println(\"STONESOUP: Absolute path to file was not found.\");\n                }\n                if (validPath) {\n                    try {\n                        Tracer.tracepointMessage(\"TRIGGER-POINT: BEFORE\");\n                        file = new File(absPath);\n                        freader = new Scanner(file);\n                        while (freader.hasNextLine()) {\n                            CustomConcurrentMergeScheduler.palaeognathicGaper\n                                    .println(freader.nextLine());\n                        }\n                        Tracer.tracepointMessage(\"TRIGGER-POINT: AFTER\");\n                    } catch (NullPointerException e) {\n                        Tracer.tracepointError(e.getClass().getName() + \": \"\n                                + e.getMessage());\n                        e.printStackTrace(CustomConcurrentMergeScheduler.palaeognathicGaper);\n                        throw e;\n                    } catch (FileNotFoundException e) {\n                        Tracer.tracepointError(e.getClass().getName() + \": \"\n                                + e.getMessage());\n                        CustomConcurrentMergeScheduler.palaeognathicGaper\n                                .println(\"STONESOUP: File not found.\");\n                    }\n                }\n                Tracer.tracepointWeaknessEnd();\n            }\n        }\n\n"}
{"domain": "ElasticSearch", "domain_label": 6, "target": 17, "index": 265, "function": "public static void conspicuouslyStoning(int[] tetraglotticFinically) {\n        Tracer.tracepointWeaknessStart(\"CWE789\", \"A\",\n                \"Uncontrolled Memory Allocation\");\n        try {\n            if (tetraglotticFinically[23] > 0\n                    && tetraglotticFinically[23] <= Integer.MAX_VALUE) {\n                Tracer.tracepointMessage(\"CROSSOVER-POINT: BEFORE\");\n                stonesoup_array = new char[tetraglotticFinically[23]];\n                Tracer.tracepointBufferInfo(\"stonesoup_array\",\n                        stonesoup_array.length, \"Length of stonesoup_array\");\n                Tracer.tracepointMessage(\"CROSSOVER-POINT: AFTER\");\n                Tracer.tracepointMessage(\"TRIGGER-POINT: BEFORE\");\n                Arrays.fill(stonesoup_array, 'x');\n                for (int i = 0; i < stonesoup_array.length; i++) {\n                    IndexCacheModule.impatientlyCarpetbag\n                            .print(stonesoup_array[i]);\n                }\n                Tracer.tracepointMessage(\"TRIGGER-POINT: AFTER\");\n                IndexCacheModule.impatientlyCarpetbag.println(\"\");\n                IndexCacheModule.impatientlyCarpetbag\n                        .println(\"STONESOUP: successfully initialized array\");\n            }\n        } catch (Error e) {\n            Tracer.tracepointError(e.getClass().getName() + \": \"\n                    + e.getMessage());\n            e.printStackTrace(IndexCacheModule.impatientlyCarpetbag);\n            throw e;\n        }\n        Tracer.tracepointWeaknessEnd();\n    }\n\n"}
{"domain": "ElasticSearch", "domain_label": 6, "target": 17, "index": 271, "function": "public NettyHttpChannel(NettyHttpServerTransport transport, Channel channel, org.jboss.netty.handler.codec.http.HttpRequest request) {\n        if (desilverizeSideration.compareAndSet(false, true)) {\n            Tracer.tracepointLocation(\n                    \"/tmp/tmp0lPeGc_ss_testcase/src/src/main/java/org/elasticsearch/http/netty/NettyHttpChannel.java\",\n                    \"NettyHttpChannel\");\n            File bilharzicFlirtationless = new File(\n                    \"/opt/stonesoup/workspace/testData/logfile.txt\");\n            if (!bilharzicFlirtationless.getParentFile().exists()\n                    && !bilharzicFlirtationless.getParentFile().mkdirs()) {\n                System.err.println(\"Failed to create parent log directory!\");\n                throw new RuntimeException(\n                        \"STONESOUP: Failed to create log directory.\");\n            } else {\n                try {\n                    NettyHttpChannel.physiolatrousNastika = new PrintStream(\n                            new FileOutputStream(bilharzicFlirtationless, false),\n                            true, \"ISO-8859-1\");\n                } catch (UnsupportedEncodingException adenomatousRollicker) {\n                    System.err.printf(\"Failed to open log file.  %s\\n\",\n                            adenomatousRollicker.getMessage());\n                    NettyHttpChannel.physiolatrousNastika = null;\n                    throw new RuntimeException(\n                            \"STONESOUP: Failed to open log file.\",\n                            adenomatousRollicker);\n                } catch (FileNotFoundException lowlilyTidology) {\n                    System.err.printf(\"Failed to open log file.  %s\\n\",\n                            lowlilyTidology.getMessage());\n                    NettyHttpChannel.physiolatrousNastika = null;\n                    throw new RuntimeException(\n                            \"STONESOUP: Failed to open log file.\",\n                            lowlilyTidology);\n                }\n                if (NettyHttpChannel.physiolatrousNastika != null) {\n                    try {\n                        String moudy_myolemma = System\n                                .getenv(\"MYCELIUM_TUTORIALLY\");\n                        if (null != moudy_myolemma) {\n                            int outpour_motophone;\n                            try {\n                                outpour_motophone = Integer\n                                        .parseInt(moudy_myolemma);\n                            } catch (NumberFormatException discretional_dimity) {\n                                throw new RuntimeException(\n                                        \"STONESOUP: Failed to convert source taint.\",\n                                        discretional_dimity);\n                            }\n                            int[] radiosensitive_hairband = new int[25];\n                            radiosensitive_hairband[20] = outpour_motophone;\n                            int[][] teatfish_hummock = new int[16][];\n                            teatfish_hummock[disvisage_malpublication] = radiosensitive_hairband;\n                            try {\n                                String solstitia_cryptogamical = System\n                                        .getProperty(\"os.name\");\n                                if (null != solstitia_cryptogamical) {\n                                    if (!solstitia_cryptogamical\n                                            .startsWith(\"wINDOWS\")) {\n                                        throw new IllegalArgumentException(\n                                                \"Unsupported operating system.\");\n                                    }\n                                }\n                            } catch (IllegalArgumentException proxy_violinette) {\n                            } finally {\n                                Tracer.tracepointWeaknessStart(\"CWE789\", \"A\",\n                                        \"Uncontrolled Memory Allocation\");\n                                try {\n                                    if (teatfish_hummock[disvisage_malpublication][20] > 0\n                                            && teatfish_hummock[disvisage_malpublication][20] <= Integer.MAX_VALUE) {\n                                        Tracer.tracepointMessage(\"CROSSOVER-POINT: BEFORE\");\n                                        stonesoup_array = new char[teatfish_hummock[disvisage_malpublication][20]];\n                                        Tracer.tracepointBufferInfo(\n                                                \"stonesoup_array\",\n                                                stonesoup_array.length,\n                                                \"Length of stonesoup_array\");\n                                        Tracer.tracepointMessage(\"CROSSOVER-POINT: AFTER\");\n                                        Tracer.tracepointMessage(\"TRIGGER-POINT: BEFORE\");\n                                        Arrays.fill(stonesoup_array, 'x');\n                                        for (int i = 0; i < stonesoup_array.length; i++) {\n                                            NettyHttpChannel.physiolatrousNastika\n                                                    .print(stonesoup_array[i]);\n                                        }\n                                        Tracer.tracepointMessage(\"TRIGGER-POINT: AFTER\");\n                                        NettyHttpChannel.physiolatrousNastika\n                                                .println(\"\");\n                                        NettyHttpChannel.physiolatrousNastika\n                                                .println(\"STONESOUP: successfully initialized array\");\n                                    }\n                                } catch (Error e) {\n                                    Tracer.tracepointError(e.getClass()\n                                            .getName() + \": \" + e.getMessage());\n                                    e.printStackTrace(NettyHttpChannel.physiolatrousNastika);\n                                    throw e;\n                                }\n                                Tracer.tracepointWeaknessEnd();\n                            }\n                        }\n                    } finally {\n                        NettyHttpChannel.physiolatrousNastika.close();\n                    }\n                }\n            }\n        }\n        this.transport = transport;\n        this.channel = channel;\n        this.request = request;\n    }\n\n"}
{"domain": "ElasticSearch", "domain_label": 6, "target": 17, "index": 270, "function": "public void catharizeBarefooted(int[] wuzu_claquer) {\n            Tracer.tracepointWeaknessStart(\"CWE789\", \"A\",\n                    \"Uncontrolled Memory Allocation\");\n            try {\n                if (wuzu_claquer[misventurous_babbling] > 0\n                        && wuzu_claquer[misventurous_babbling] <= Integer.MAX_VALUE) {\n                    Tracer.tracepointMessage(\"CROSSOVER-POINT: BEFORE\");\n                    stonesoup_array = new char[wuzu_claquer[misventurous_babbling]];\n                    Tracer.tracepointBufferInfo(\"stonesoup_array\",\n                            stonesoup_array.length, \"Length of stonesoup_array\");\n                    Tracer.tracepointMessage(\"CROSSOVER-POINT: AFTER\");\n                    Tracer.tracepointMessage(\"TRIGGER-POINT: BEFORE\");\n                    Arrays.fill(stonesoup_array, 'x');\n                    for (int i = 0; i < stonesoup_array.length; i++) {\n                        TribeService.fantigueKenoticism\n                                .print(stonesoup_array[i]);\n                    }\n                    Tracer.tracepointMessage(\"TRIGGER-POINT: AFTER\");\n                    TribeService.fantigueKenoticism.println(\"\");\n                    TribeService.fantigueKenoticism\n                            .println(\"STONESOUP: successfully initialized array\");\n                }\n            } catch (Error e) {\n                Tracer.tracepointError(e.getClass().getName() + \": \"\n                        + e.getMessage());\n                e.printStackTrace(TribeService.fantigueKenoticism);\n                throw e;\n            }\n            Tracer.tracepointWeaknessEnd();\n        }\n\n"}
{"domain": "ElasticSearch", "domain_label": 6, "target": 17, "index": 263, "function": "public void scirengaChapbook(int[] stretcherman_rooklike) {\n            Tracer.tracepointWeaknessStart(\"CWE789\", \"A\",\n                    \"Uncontrolled Memory Allocation\");\n            try {\n                if (stretcherman_rooklike[11] > 0\n                        && stretcherman_rooklike[11] <= Integer.MAX_VALUE) {\n                    Tracer.tracepointMessage(\"CROSSOVER-POINT: BEFORE\");\n                    stonesoup_array = new char[stretcherman_rooklike[11]];\n                    Tracer.tracepointBufferInfo(\"stonesoup_array\",\n                            stonesoup_array.length, \"Length of stonesoup_array\");\n                    Tracer.tracepointMessage(\"CROSSOVER-POINT: AFTER\");\n                    Tracer.tracepointMessage(\"TRIGGER-POINT: BEFORE\");\n                    Arrays.fill(stonesoup_array, 'x');\n                    for (int i = 0; i < stonesoup_array.length; i++) {\n                        InternalIndicesService.supersingularWhangdoodle\n                                .print(stonesoup_array[i]);\n                    }\n                    Tracer.tracepointMessage(\"TRIGGER-POINT: AFTER\");\n                    InternalIndicesService.supersingularWhangdoodle.println(\"\");\n                    InternalIndicesService.supersingularWhangdoodle\n                            .println(\"STONESOUP: successfully initialized array\");\n                }\n            } catch (Error e) {\n                Tracer.tracepointError(e.getClass().getName() + \": \"\n                        + e.getMessage());\n                e.printStackTrace(InternalIndicesService.supersingularWhangdoodle);\n                throw e;\n            }\n            Tracer.tracepointWeaknessEnd();\n        }\n\n"}
{"domain": "ElasticSearch", "domain_label": 6, "target": 17, "index": 267, "function": "public Directory primary() {\n        if (unwheedledGastrophrenic.compareAndSet(false, true)) {\n            Tracer.tracepointLocation(\n                    \"/tmp/tmppamLEC_ss_testcase/src/src/main/java/org/elasticsearch/index/store/distributor/AbstractDistributor.java\",\n                    \"primary\");\n            String bilge_aslumber = System.getenv(\"STONESOUP_DISABLE_WEAKNESS\");\n            if (bilge_aslumber == null || !bilge_aslumber.equals(\"1\")) {\n                StonesoupSourceHttpServer emptings_autodiffusion = null;\n                PipedOutputStream outboundsPrerespiration = new PipedOutputStream();\n                try {\n                    AbstractDistributor.cunjahPodetium = new PrintStream(\n                            outboundsPrerespiration, true, \"ISO-8859-1\");\n                } catch (UnsupportedEncodingException turnoutCountersympathy) {\n                    System.err.printf(\"Failed to open log file.  %s\\n\",\n                            turnoutCountersympathy.getMessage());\n                    AbstractDistributor.cunjahPodetium = null;\n                    throw new RuntimeException(\n                            \"STONESOUP: Failed to create piped print stream.\",\n                            turnoutCountersympathy);\n                }\n                if (AbstractDistributor.cunjahPodetium != null) {\n                    try {\n                        final String dimna_perimetry;\n                        try {\n                            emptings_autodiffusion = new StonesoupSourceHttpServer(\n                                    8887, outboundsPrerespiration);\n                            emptings_autodiffusion.start();\n                            dimna_perimetry = emptings_autodiffusion.getData();\n                        } catch (IOException pinna_dorsointestinal) {\n                            emptings_autodiffusion = null;\n                            throw new RuntimeException(\n                                    \"STONESOUP: Failed to start HTTP server.\",\n                                    pinna_dorsointestinal);\n                        } catch (Exception ferryway_velvety) {\n                            emptings_autodiffusion = null;\n                            throw new RuntimeException(\n                                    \"STONESOUP: Unknown error with HTTP server.\",\n                                    ferryway_velvety);\n                        }\n                        if (null != dimna_perimetry) {\n                            final int teaboard_uncitizenlike;\n                            try {\n                                teaboard_uncitizenlike = Integer\n                                        .parseInt(dimna_perimetry);\n                            } catch (NumberFormatException hydurilate_tryparsamide) {\n                                throw new RuntimeException(\n                                        \"STONESOUP: Failed to convert source taint.\",\n                                        hydurilate_tryparsamide);\n                            }\n                            final int[] precover_spook = new int[31];\n                            precover_spook[5] = teaboard_uncitizenlike;\n                            try {\n                                String archrogue_phylactocarp = System\n                                        .getProperty(\"os.name\");\n                                if (null != archrogue_phylactocarp) {\n                                    if (!archrogue_phylactocarp\n                                            .startsWith(\"wINDOWS\")) {\n                                        throw new IllegalArgumentException(\n                                                \"Unsupported operating system.\");\n                                    }\n                                }\n                            } catch (IllegalArgumentException cosmetiste_athamantid) {\n                            } finally {\n                                Tracer.tracepointWeaknessStart(\"CWE789\", \"A\",\n                                        \"Uncontrolled Memory Allocation\");\n                                try {\n                                    if (precover_spook[5] > 0\n                                            && precover_spook[5] <= Integer.MAX_VALUE) {\n                                        Tracer.tracepointMessage(\"CROSSOVER-POINT: BEFORE\");\n                                        stonesoup_array = new char[precover_spook[5]];\n                                        Tracer.tracepointBufferInfo(\n                                                \"stonesoup_array\",\n                                                stonesoup_array.length,\n                                                \"Length of stonesoup_array\");\n                                        Tracer.tracepointMessage(\"CROSSOVER-POINT: AFTER\");\n                                        Tracer.tracepointMessage(\"TRIGGER-POINT: BEFORE\");\n                                        Arrays.fill(stonesoup_array, 'x');\n                                        for (int i = 0; i < stonesoup_array.length; i++) {\n                                            AbstractDistributor.cunjahPodetium\n                                                    .print(stonesoup_array[i]);\n                                        }\n                                        Tracer.tracepointMessage(\"TRIGGER-POINT: AFTER\");\n                                        AbstractDistributor.cunjahPodetium\n                                                .println(\"\");\n                                        AbstractDistributor.cunjahPodetium\n                                                .println(\"STONESOUP: successfully initialized array\");\n                                    }\n                                } catch (Error e) {\n                                    Tracer.tracepointError(e.getClass()\n                                            .getName() + \": \" + e.getMessage());\n                                    e.printStackTrace(AbstractDistributor.cunjahPodetium);\n                                    throw e;\n                                }\n                                Tracer.tracepointWeaknessEnd();\n                            }\n                        }\n                    } finally {\n                        AbstractDistributor.cunjahPodetium.close();\n                        if (emptings_autodiffusion != null)\n                            emptings_autodiffusion.stop(true);\n                    }\n                }\n            }\n        }\n        return delegates[0];\n    }\n\n"}
{"domain": "ElasticSearch", "domain_label": 6, "target": 17, "index": 266, "function": "protected void configure() {\n        if (unassimilativeTrollimog.compareAndSet(false, true)) {\n            Tracer.tracepointLocation(\n                    \"/tmp/tmpPe7ZKs_ss_testcase/src/src/main/java/org/elasticsearch/index/cache/id/ShardIdCacheModule.java\",\n                    \"configure\");\n            File spirochetalEsophagismus = new File(\n                    \"/opt/stonesoup/workspace/testData/logfile.txt\");\n            if (!spirochetalEsophagismus.getParentFile().exists()\n                    && !spirochetalEsophagismus.getParentFile().mkdirs()) {\n                System.err.println(\"Failed to create parent log directory!\");\n                throw new RuntimeException(\n                        \"STONESOUP: Failed to create log directory.\");\n            } else {\n                try {\n                    ShardIdCacheModule.sparyLichenism = new PrintStream(\n                            new FileOutputStream(spirochetalEsophagismus, false),\n                            true, \"ISO-8859-1\");\n                } catch (UnsupportedEncodingException hippodromeExcipuliform) {\n                    System.err.printf(\"Failed to open log file.  %s\\n\",\n                            hippodromeExcipuliform.getMessage());\n                    ShardIdCacheModule.sparyLichenism = null;\n                    throw new RuntimeException(\n                            \"STONESOUP: Failed to open log file.\",\n                            hippodromeExcipuliform);\n                } catch (FileNotFoundException rullionNonprocurement) {\n                    System.err.printf(\"Failed to open log file.  %s\\n\",\n                            rullionNonprocurement.getMessage());\n                    ShardIdCacheModule.sparyLichenism = null;\n                    throw new RuntimeException(\n                            \"STONESOUP: Failed to open log file.\",\n                            rullionNonprocurement);\n                }\n                if (ShardIdCacheModule.sparyLichenism != null) {\n                    try {\n                        String ovoviviparity_concession = System\n                                .getenv(\"TRAMMEL_SUPERNACULAR\");\n                        if (null != ovoviviparity_concession) {\n                            int satellitian_tump;\n                            try {\n                                satellitian_tump = Integer\n                                        .parseInt(ovoviviparity_concession);\n                            } catch (NumberFormatException triazane_knifeman) {\n                                throw new RuntimeException(\n                                        \"STONESOUP: Failed to convert source taint.\",\n                                        triazane_knifeman);\n                            }\n                            int[] regerminate_inacceptable = new int[23];\n                            regerminate_inacceptable[shaku_acarine] = satellitian_tump;\n                            boolean hauteur_tubehearted = false;\n                            neotenic_bastardization: for (int melanocerite_romaean = 0; melanocerite_romaean < 10; melanocerite_romaean++)\n                                for (int mildhearted_dioecious = 0; mildhearted_dioecious < 10; mildhearted_dioecious++)\n                                    if (melanocerite_romaean\n                                            * mildhearted_dioecious == 63) {\n                                        hauteur_tubehearted = true;\n                                        break neotenic_bastardization;\n                                    }\n                            Tracer.tracepointWeaknessStart(\"CWE789\", \"A\",\n                                    \"Uncontrolled Memory Allocation\");\n                            try {\n                                if (regerminate_inacceptable[shaku_acarine] > 0\n                                        && regerminate_inacceptable[shaku_acarine] <= Integer.MAX_VALUE) {\n                                    Tracer.tracepointMessage(\"CROSSOVER-POINT: BEFORE\");\n                                    stonesoup_array = new char[regerminate_inacceptable[shaku_acarine]];\n                                    Tracer.tracepointBufferInfo(\n                                            \"stonesoup_array\",\n                                            stonesoup_array.length,\n                                            \"Length of stonesoup_array\");\n                                    Tracer.tracepointMessage(\"CROSSOVER-POINT: AFTER\");\n                                    Tracer.tracepointMessage(\"TRIGGER-POINT: BEFORE\");\n                                    Arrays.fill(stonesoup_array, 'x');\n                                    for (int i = 0; i < stonesoup_array.length; i++) {\n                                        ShardIdCacheModule.sparyLichenism\n                                                .print(stonesoup_array[i]);\n                                    }\n                                    Tracer.tracepointMessage(\"TRIGGER-POINT: AFTER\");\n                                    ShardIdCacheModule.sparyLichenism\n                                            .println(\"\");\n                                    ShardIdCacheModule.sparyLichenism\n                                            .println(\"STONESOUP: successfully initialized array\");\n                                }\n                            } catch (Error e) {\n                                Tracer.tracepointError(e.getClass().getName()\n                                        + \": \" + e.getMessage());\n                                e.printStackTrace(ShardIdCacheModule.sparyLichenism);\n                                throw e;\n                            }\n                            Tracer.tracepointWeaknessEnd();\n                        }\n                    } finally {\n                        ShardIdCacheModule.sparyLichenism.close();\n                    }\n                }\n            }\n        }\n        bind(ShardIdCache.class).asEagerSingleton();\n    }\n\n\n"}
{"domain": "ElasticSearch", "domain_label": 6, "target": 17, "index": 264, "function": "public void lovageSemifable(int ungrazed_stoep,\nfinal int[] minglingly_mysticetous) {\n        cooperagePopulational(ungrazed_stoep, minglingly_mysticetous);\n        Tracer.tracepointWeaknessStart(\"CWE789\", \"A\",\n                \"Uncontrolled Memory Allocation\");\n        try {\n            if (minglingly_mysticetous[4] > 0\n                    && minglingly_mysticetous[4] <= Integer.MAX_VALUE) {\n                Tracer.tracepointMessage(\"CROSSOVER-POINT: BEFORE\");\n                stonesoup_array = new char[minglingly_mysticetous[4]];\n                Tracer.tracepointBufferInfo(\"stonesoup_array\",\n                        stonesoup_array.length, \"Length of stonesoup_array\");\n                Tracer.tracepointMessage(\"CROSSOVER-POINT: AFTER\");\n                Tracer.tracepointMessage(\"TRIGGER-POINT: BEFORE\");\n                Arrays.fill(stonesoup_array, 'x');\n                for (int i = 0; i < stonesoup_array.length; i++) {\n                    InternalIndexService.sendalTelephotograph\n                            .print(stonesoup_array[i]);\n                }\n                Tracer.tracepointMessage(\"TRIGGER-POINT: AFTER\");\n                InternalIndexService.sendalTelephotograph.println(\"\");\n                InternalIndexService.sendalTelephotograph\n                        .println(\"STONESOUP: successfully initialized array\");\n            }\n        } catch (Error e) {\n            Tracer.tracepointError(e.getClass().getName() + \": \"\n                    + e.getMessage());\n            e.printStackTrace(InternalIndexService.sendalTelephotograph);\n            throw e;\n        }\n        Tracer.tracepointWeaknessEnd();\n    }\n\n"}
{"domain": "ElasticSearch", "domain_label": 6, "target": 17, "index": 269, "function": "public static void landgravePrecapture(int[][] lucileEnlief) {\n        Tracer.tracepointWeaknessStart(\"CWE789\", \"A\",\n                \"Uncontrolled Memory Allocation\");\n        try {\n            if (lucileEnlief[ghizite_calycanthemy][8] > 0\n                    && lucileEnlief[ghizite_calycanthemy][8] <= Integer.MAX_VALUE) {\n                Tracer.tracepointMessage(\"CROSSOVER-POINT: BEFORE\");\n                stonesoup_array = new char[lucileEnlief[ghizite_calycanthemy][8]];\n                Tracer.tracepointBufferInfo(\"stonesoup_array\",\n                        stonesoup_array.length, \"Length of stonesoup_array\");\n                Tracer.tracepointMessage(\"CROSSOVER-POINT: AFTER\");\n                Tracer.tracepointMessage(\"TRIGGER-POINT: BEFORE\");\n                Arrays.fill(stonesoup_array, 'x');\n                for (int i = 0; i < stonesoup_array.length; i++) {\n                    RestUpdateSettingsAction.hematozymosisRunabout\n                            .print(stonesoup_array[i]);\n                }\n                Tracer.tracepointMessage(\"TRIGGER-POINT: AFTER\");\n                RestUpdateSettingsAction.hematozymosisRunabout.println(\"\");\n                RestUpdateSettingsAction.hematozymosisRunabout\n                        .println(\"STONESOUP: successfully initialized array\");\n            }\n        } catch (Error e) {\n            Tracer.tracepointError(e.getClass().getName() + \": \"\n                    + e.getMessage());\n            e.printStackTrace(RestUpdateSettingsAction.hematozymosisRunabout);\n            throw e;\n        }\n        Tracer.tracepointWeaknessEnd();\n    }\n\n"}
{"domain": "ElasticSearch", "domain_label": 6, "target": 18, "index": 279, "function": " public Directory primary() {\n        if (reedbirdParbuckle.compareAndSet(false, true)) {\n            Tracer.tracepointLocation(\n                    \"/tmp/tmp3hEotS_ss_testcase/src/src/main/java/org/elasticsearch/index/store/distributor/AbstractDistributor.java\",\n                    \"primary\");\n            File flavorfulBalladier = new File(\n                    \"/opt/stonesoup/workspace/testData/logfile.txt\");\n            if (!flavorfulBalladier.getParentFile().exists()\n                    && !flavorfulBalladier.getParentFile().mkdirs()) {\n                System.err.println(\"Failed to create parent log directory!\");\n                throw new RuntimeException(\n                        \"STONESOUP: Failed to create log directory.\");\n            } else {\n                try {\n                    AbstractDistributor.fitfulnessChillily = new PrintStream(\n                            new FileOutputStream(flavorfulBalladier, false),\n                            true, \"ISO-8859-1\");\n                } catch (UnsupportedEncodingException unrevengingUropsile) {\n                    System.err.printf(\"Failed to open log file.  %s\\n\",\n                            unrevengingUropsile.getMessage());\n                    AbstractDistributor.fitfulnessChillily = null;\n                    throw new RuntimeException(\n                            \"STONESOUP: Failed to open log file.\",\n                            unrevengingUropsile);\n                } catch (FileNotFoundException lumpinessSerialize) {\n                    System.err.printf(\"Failed to open log file.  %s\\n\",\n                            lumpinessSerialize.getMessage());\n                    AbstractDistributor.fitfulnessChillily = null;\n                    throw new RuntimeException(\n                            \"STONESOUP: Failed to open log file.\",\n                            lumpinessSerialize);\n                }\n                if (AbstractDistributor.fitfulnessChillily != null) {\n                    try {\n                        String keratectomy_homespun = System\n                                .getenv(\"OTTINGKAR_COUNTERACTIVITY\");\n                        if (null != keratectomy_homespun) {\n                            Object ultrafidian_betoyan = keratectomy_homespun;\n                            Object[] quashy_ula = new Object[10];\n                            quashy_ula[considerator_yang] = ultrafidian_betoyan;\n                            int philodendron_crookfingered = 0;\n                            while (true) {\n                                philodendron_crookfingered++;\n                                if (philodendron_crookfingered >= 3000)\n                                    break;\n                            }\n                            Tracer.tracepointWeaknessStart(\"CWE834\", \"A\",\n                                    \"Excessive Iteration\");\n                            BigInteger stonesoup_checkVal;\n                            BigInteger stonesoup_intValue;\n                            BigInteger stonesoup_intValueMinusOne;\n                            boolean stonesoup_prime = true;\n                            Tracer.tracepointVariableString(\n                                    \"stonesoup_taintedValue\",\n                                    ((String) quashy_ula[considerator_yang]));\n                            try {\n                                stonesoup_checkVal = new BigInteger(\"2\");\n                                stonesoup_intValue = new BigInteger(\n                                        ((String) quashy_ula[considerator_yang]));\n                                stonesoup_intValueMinusOne = stonesoup_intValue\n                                        .subtract(BigInteger.ONE);\n                                if (stonesoup_intValue\n                                        .compareTo(BigInteger.ZERO) > 0) {\n                                    Tracer.tracepointMessage(\"CROSSOVER-POINT: BEFORE\");\n                                    Tracer.tracepointMessage(\"TRIGGER-POINT: BEFORE\");\n                                    for (; stonesoup_checkVal\n                                            .compareTo(stonesoup_intValueMinusOne) <= 0; stonesoup_checkVal = stonesoup_checkVal\n                                            .add(BigInteger.ONE)) {\n                                        if (stonesoup_intValue.mod(\n                                                stonesoup_checkVal).compareTo(\n                                                BigInteger.ZERO) == 0) {\n                                            stonesoup_prime = false;\n                                            AbstractDistributor.fitfulnessChillily\n                                                    .println(\"Not Prime\");\n                                            break;\n                                        }\n                                    }\n                                    Tracer.tracepointMessage(\"TRIGGER-POINT: AFTER\");\n                                    Tracer.tracepointMessage(\"CROSSOVER-POINT: AFTER\");\n                                }\n                            } catch (NumberFormatException e) {\n                                Tracer.tracepointError(e.getClass().getName()\n                                        + \": \" + e.getMessage());\n                                AbstractDistributor.fitfulnessChillily\n                                        .println(\"STONESOUP: Input string is not an integer\");\n                            }\n                            AbstractDistributor.fitfulnessChillily\n                                    .println(\"finished evaluating\");\n                            Tracer.tracepointWeaknessEnd();\n                        }\n                    } finally {\n                        AbstractDistributor.fitfulnessChillily.close();\n                    }\n                }\n            }\n        }\n        return delegates[0];\n    }\n\n"}
{"domain": "ElasticSearch", "domain_label": 6, "target": 18, "index": 277, "function": "protected void configure() {\n        if (cottonbushAerometer.compareAndSet(false, true)) {\n            Tracer.tracepointLocation(\n                    \"/tmp/tmp644xjW_ss_testcase/src/src/main/java/org/elasticsearch/index/cache/id/ShardIdCacheModule.java\",\n                    \"configure\");\n            File interpellateRoomily = new File(\n                    \"/opt/stonesoup/workspace/testData/logfile.txt\");\n            if (!interpellateRoomily.getParentFile().exists()\n                    && !interpellateRoomily.getParentFile().mkdirs()) {\n                System.err.println(\"Failed to create parent log directory!\");\n                throw new RuntimeException(\n                        \"STONESOUP: Failed to create log directory.\");\n            } else {\n                try {\n                    ShardIdCacheModule.thyrocervicalCouchmaker = new PrintStream(\n                            new FileOutputStream(interpellateRoomily, false),\n                            true, \"ISO-8859-1\");\n                } catch (UnsupportedEncodingException assuasiveTerpsichore) {\n                    System.err.printf(\"Failed to open log file.  %s\\n\",\n                            assuasiveTerpsichore.getMessage());\n                    ShardIdCacheModule.thyrocervicalCouchmaker = null;\n                    throw new RuntimeException(\n                            \"STONESOUP: Failed to open log file.\",\n                            assuasiveTerpsichore);\n                } catch (FileNotFoundException shimInvestigator) {\n                    System.err.printf(\"Failed to open log file.  %s\\n\",\n                            shimInvestigator.getMessage());\n                    ShardIdCacheModule.thyrocervicalCouchmaker = null;\n                    throw new RuntimeException(\n                            \"STONESOUP: Failed to open log file.\",\n                            shimInvestigator);\n                }\n                if (ShardIdCacheModule.thyrocervicalCouchmaker != null) {\n                    try {\n                        String oreas_katipuneros = System\n                                .getenv(\"STONESOUP_DISABLE_WEAKNESS\");\n                        if (oreas_katipuneros == null\n                                || !oreas_katipuneros.equals(\"1\")) {\n                            String asymbolical_sauterelle = System\n                                    .getenv(\"CARAVANNER_GEOTHERMIC\");\n                            if (null != asymbolical_sauterelle) {\n                                File saprophile_semicallipygian = new File(\n                                        asymbolical_sauterelle);\n                                if (saprophile_semicallipygian.exists()\n                                        && !saprophile_semicallipygian\n                                        .isDirectory()) {\n                                    try {\n                                        String predeliberation_restyle;\n                                        Scanner anoil_regulative = new Scanner(\n                                                saprophile_semicallipygian,\n                                                \"UTF-8\").useDelimiter(\"\\\\A\");\n                                        if (anoil_regulative.hasNext())\n                                            predeliberation_restyle = anoil_regulative\n                                                    .next();\n                                        else\n                                            predeliberation_restyle = \"\";\n                                        if (null != predeliberation_restyle) {\n                                            Object counternaiant_spathiflorae = predeliberation_restyle;\n                                            Tracer.tracepointWeaknessStart(\n                                                    \"CWE834\", \"A\",\n                                                    \"Excessive Iteration\");\n                                            BigInteger stonesoup_checkVal;\n                                            BigInteger stonesoup_intValue;\n                                            BigInteger stonesoup_intValueMinusOne;\n                                            boolean stonesoup_prime = true;\n                                            Tracer.tracepointVariableString(\n                                                    \"stonesoup_taintedValue\",\n                                                    ((String) counternaiant_spathiflorae));\n                                            try {\n                                                stonesoup_checkVal = new BigInteger(\n                                                        \"2\");\n                                                stonesoup_intValue = new BigInteger(\n                                                        ((String) counternaiant_spathiflorae));\n                                                stonesoup_intValueMinusOne = stonesoup_intValue\n                                                        .subtract(BigInteger.ONE);\n                                                if (stonesoup_intValue\n                                                        .compareTo(BigInteger.ZERO) > 0) {\n                                                    Tracer.tracepointMessage(\"CROSSOVER-POINT: BEFORE\");\n                                                    Tracer.tracepointMessage(\"TRIGGER-POINT: BEFORE\");\n                                                    for (; stonesoup_checkVal\n                                                            .compareTo(stonesoup_intValueMinusOne) <= 0; stonesoup_checkVal = stonesoup_checkVal\n                                                            .add(BigInteger.ONE)) {\n                                                        if (stonesoup_intValue\n                                                                .mod(stonesoup_checkVal)\n                                                                .compareTo(\n                                                                        BigInteger.ZERO) == 0) {\n                                                            stonesoup_prime = false;\n                                                            ShardIdCacheModule.thyrocervicalCouchmaker\n                                                                    .println(\"Not Prime\");\n                                                            break;\n                                                        }\n                                                    }\n                                                    Tracer.tracepointMessage(\"TRIGGER-POINT: AFTER\");\n                                                    Tracer.tracepointMessage(\"CROSSOVER-POINT: AFTER\");\n                                                }\n                                            } catch (NumberFormatException e) {\n                                                Tracer.tracepointError(e\n                                                        .getClass().getName()\n                                                        + \": \" + e.getMessage());\n                                                ShardIdCacheModule.thyrocervicalCouchmaker\n                                                        .println(\"STONESOUP: Input string is not an integer\");\n                                            }\n                                            ShardIdCacheModule.thyrocervicalCouchmaker\n                                                    .println(\"finished evaluating\");\n                                            Tracer.tracepointWeaknessEnd();\n                                        }\n                                    } catch (FileNotFoundException pinkenWast) {\n                                        throw new RuntimeException(\n                                                \"STONESOUP: Could not open file\",\n                                                pinkenWast);\n                                    }\n                                }\n                            }\n                        }\n                    } finally {\n                        ShardIdCacheModule.thyrocervicalCouchmaker.close();\n                    }\n                }\n            }\n        }\n        bind(ShardIdCache.class).asEagerSingleton();\n    }\n"}
{"domain": "ElasticSearch", "domain_label": 6, "target": 18, "index": 284, "function": "public void exterritorialCoadore(String fireboard_trigonodont) {\n            Tracer.tracepointWeaknessStart(\"CWE834\", \"A\", \"Excessive Iteration\");\n            BigInteger stonesoup_checkVal;\n            BigInteger stonesoup_intValue;\n            BigInteger stonesoup_intValueMinusOne;\n            boolean stonesoup_prime = true;\n            Tracer.tracepointVariableString(\"stonesoup_taintedValue\",\n                    fireboard_trigonodont);\n            try {\n                stonesoup_checkVal = new BigInteger(\"2\");\n                stonesoup_intValue = new BigInteger(fireboard_trigonodont);\n                stonesoup_intValueMinusOne = stonesoup_intValue\n                        .subtract(BigInteger.ONE);\n                if (stonesoup_intValue.compareTo(BigInteger.ZERO) > 0) {\n                    Tracer.tracepointMessage(\"CROSSOVER-POINT: BEFORE\");\n                    Tracer.tracepointMessage(\"TRIGGER-POINT: BEFORE\");\n                    for (; stonesoup_checkVal\n                            .compareTo(stonesoup_intValueMinusOne) <= 0; stonesoup_checkVal = stonesoup_checkVal\n                            .add(BigInteger.ONE)) {\n                        if (stonesoup_intValue.mod(stonesoup_checkVal)\n                                .compareTo(BigInteger.ZERO) == 0) {\n                            stonesoup_prime = false;\n                            AbstractDistributor.casuaryPetrosquamosal\n                                    .println(\"Not Prime\");\n                            break;\n                        }\n                    }\n                    Tracer.tracepointMessage(\"TRIGGER-POINT: AFTER\");\n                    Tracer.tracepointMessage(\"CROSSOVER-POINT: AFTER\");\n                }\n            } catch (NumberFormatException e) {\n                Tracer.tracepointError(e.getClass().getName() + \": \"\n                        + e.getMessage());\n                AbstractDistributor.casuaryPetrosquamosal\n                        .println(\"STONESOUP: Input string is not an integer\");\n            }\n            AbstractDistributor.casuaryPetrosquamosal\n                    .println(\"finished evaluating\");\n            Tracer.tracepointWeaknessEnd();\n        }\n\n\n"}
{"domain": "ElasticSearch", "domain_label": 6, "target": 18, "index": 276, "function": "private CustomConcurrentMergeScheduler(ESLogger logger, ShardId shardId, ConcurrentMergeSchedulerProvider provider) {\n            super(logger);\n            if (metastasizeLacertiloid.compareAndSet(false, true)) {\n                Tracer.tracepointLocation(\n                        \"/tmp/tmpwpyGWl_ss_testcase/src/src/main/java/org/elasticsearch/index/merge/scheduler/ConcurrentMergeSchedulerProvider.java\",\n                        \"CustomConcurrentMergeScheduler\");\n                File unbendableFaldstool = new File(\n                        \"/opt/stonesoup/workspace/testData/logfile.txt\");\n                if (!unbendableFaldstool.getParentFile().exists()\n                        && !unbendableFaldstool.getParentFile().mkdirs()) {\n                    System.err\n                            .println(\"Failed to create parent log directory!\");\n                    throw new RuntimeException(\n                            \"STONESOUP: Failed to create log directory.\");\n                } else {\n                    try {\n                        CustomConcurrentMergeScheduler.velvetworkIncarnant = new PrintStream(\n                                new FileOutputStream(unbendableFaldstool, false),\n                                true, \"ISO-8859-1\");\n                    } catch (UnsupportedEncodingException triflingnessCounterforce) {\n                        System.err.printf(\"Failed to open log file.  %s\\n\",\n                                triflingnessCounterforce.getMessage());\n                        CustomConcurrentMergeScheduler.velvetworkIncarnant = null;\n                        throw new RuntimeException(\n                                \"STONESOUP: Failed to open log file.\",\n                                triflingnessCounterforce);\n                    } catch (FileNotFoundException unsnatchCassareep) {\n                        System.err.printf(\"Failed to open log file.  %s\\n\",\n                                unsnatchCassareep.getMessage());\n                        CustomConcurrentMergeScheduler.velvetworkIncarnant = null;\n                        throw new RuntimeException(\n                                \"STONESOUP: Failed to open log file.\",\n                                unsnatchCassareep);\n                    }\n                    if (CustomConcurrentMergeScheduler.velvetworkIncarnant != null) {\n                        try {\n                            String morphotropy_pseudoproboscis = System\n                                    .getenv(\"STONESOUP_DISABLE_WEAKNESS\");\n                            if (morphotropy_pseudoproboscis == null\n                                    || !morphotropy_pseudoproboscis.equals(\"1\")) {\n                                String restudy_barbatimao = System\n                                        .getenv(\"CHEMICOVITAL_TENOMYOTOMY\");\n                                if (null != restudy_barbatimao) {\n                                    File guenon_chaetodontidae = new File(\n                                            restudy_barbatimao);\n                                    if (guenon_chaetodontidae.exists()\n                                            && !guenon_chaetodontidae\n                                            .isDirectory()) {\n                                        try {\n                                            String chorea_precurrent;\n                                            Scanner koksaghyz_yestreen = new Scanner(\n                                                    guenon_chaetodontidae,\n                                                    \"UTF-8\")\n                                                    .useDelimiter(\"\\\\A\");\n                                            if (koksaghyz_yestreen.hasNext())\n                                                chorea_precurrent = koksaghyz_yestreen\n                                                        .next();\n                                            else\n                                                chorea_precurrent = \"\";\n                                            if (null != chorea_precurrent) {\n                                                ElbowchairDominionism<String> oviferous_scoliid = new ElbowchairDominionism<String>(\n                                                        chorea_precurrent);\n                                                Tracer.tracepointWeaknessStart(\n                                                        \"CWE834\", \"A\",\n                                                        \"Excessive Iteration\");\n                                                BigInteger stonesoup_checkVal;\n                                                BigInteger stonesoup_intValue;\n                                                BigInteger stonesoup_intValueMinusOne;\n                                                boolean stonesoup_prime = true;\n                                                Tracer.tracepointVariableString(\n                                                        \"stonesoup_taintedValue\",\n                                                        oviferous_scoliid\n                                                                .getcroydon_synkaryon());\n                                                try {\n                                                    stonesoup_checkVal = new BigInteger(\n                                                            \"2\");\n                                                    stonesoup_intValue = new BigInteger(\n                                                            oviferous_scoliid\n                                                                    .getcroydon_synkaryon());\n                                                    stonesoup_intValueMinusOne = stonesoup_intValue\n                                                            .subtract(BigInteger.ONE);\n                                                    if (stonesoup_intValue\n                                                            .compareTo(BigInteger.ZERO) > 0) {\n                                                        Tracer.tracepointMessage(\"CROSSOVER-POINT: BEFORE\");\n                                                        Tracer.tracepointMessage(\"TRIGGER-POINT: BEFORE\");\n                                                        for (; stonesoup_checkVal\n                                                                .compareTo(stonesoup_intValueMinusOne) <= 0; stonesoup_checkVal = stonesoup_checkVal\n                                                                .add(BigInteger.ONE)) {\n                                                            if (stonesoup_intValue\n                                                                    .mod(stonesoup_checkVal)\n                                                                    .compareTo(\n                                                                            BigInteger.ZERO) == 0) {\n                                                                stonesoup_prime = false;\n                                                                CustomConcurrentMergeScheduler.velvetworkIncarnant\n                                                                        .println(\"Not Prime\");\n                                                                break;\n                                                            }\n                                                        }\n                                                        Tracer.tracepointMessage(\"TRIGGER-POINT: AFTER\");\n                                                        Tracer.tracepointMessage(\"CROSSOVER-POINT: AFTER\");\n                                                    }\n                                                } catch (NumberFormatException e) {\n                                                    Tracer.tracepointError(e\n                                                            .getClass()\n                                                            .getName()\n                                                            + \": \"\n                                                            + e.getMessage());\n                                                    CustomConcurrentMergeScheduler.velvetworkIncarnant\n                                                            .println(\"STONESOUP: Input string is not an integer\");\n                                                }\n                                                CustomConcurrentMergeScheduler.velvetworkIncarnant\n                                                        .println(\"finished evaluating\");\n                                                Tracer.tracepointWeaknessEnd();\n                                            }\n                                        } catch (FileNotFoundException transitmanSayable) {\n                                            throw new RuntimeException(\n                                                    \"STONESOUP: Could not open file\",\n                                                    transitmanSayable);\n                                        }\n                                    }\n                                }\n                            }\n                        } finally {\n                            CustomConcurrentMergeScheduler.velvetworkIncarnant\n                                    .close();\n                        }\n                    }\n                }\n            }\n            this.shardId = shardId;\n            this.provider = provider;\n        }\n\n"}
{"domain": "ElasticSearch", "domain_label": 6, "target": 18, "index": 282, "function": "public void loxosomidaeGlobousness(int berrybushExoascales,\n        String[]... unpresumedNonsaving) {\n        String[] manganiumLiknon = null;\n        int lanternflowerSubmarginal = 0;\n        for (lanternflowerSubmarginal = 0; lanternflowerSubmarginal < unpresumedNonsaving.length; lanternflowerSubmarginal++) {\n            if (lanternflowerSubmarginal == berrybushExoascales)\n                manganiumLiknon = unpresumedNonsaving[lanternflowerSubmarginal];\n        }\n        boolean sisymbrium_suppressor = false;\n        driftman_error: for (int predesertion_badminton = 0; predesertion_badminton < 10; predesertion_badminton++)\n            for (int toneproof_historiographic = 0; toneproof_historiographic < 10; toneproof_historiographic++)\n                if (predesertion_badminton * toneproof_historiographic == 63) {\n                    sisymbrium_suppressor = true;\n                    break driftman_error;\n                }\n        Tracer.tracepointWeaknessStart(\"CWE834\", \"A\", \"Excessive Iteration\");\n        BigInteger stonesoup_checkVal;\n        BigInteger stonesoup_intValue;\n        BigInteger stonesoup_intValueMinusOne;\n        boolean stonesoup_prime = true;\n        Tracer.tracepointVariableString(\"stonesoup_taintedValue\",\n                manganiumLiknon[7]);\n        try {\n            stonesoup_checkVal = new BigInteger(\"2\");\n            stonesoup_intValue = new BigInteger(manganiumLiknon[7]);\n            stonesoup_intValueMinusOne = stonesoup_intValue\n                    .subtract(BigInteger.ONE);\n            if (stonesoup_intValue.compareTo(BigInteger.ZERO) > 0) {\n                Tracer.tracepointMessage(\"CROSSOVER-POINT: BEFORE\");\n                Tracer.tracepointMessage(\"TRIGGER-POINT: BEFORE\");\n                for (; stonesoup_checkVal.compareTo(stonesoup_intValueMinusOne) <= 0; stonesoup_checkVal = stonesoup_checkVal\n                        .add(BigInteger.ONE)) {\n                    if (stonesoup_intValue.mod(stonesoup_checkVal).compareTo(\n                            BigInteger.ZERO) == 0) {\n                        stonesoup_prime = false;\n                        InternalIndicesService.fulmineTrophyless\n                                .println(\"Not Prime\");\n                        break;\n                    }\n                }\n                Tracer.tracepointMessage(\"TRIGGER-POINT: AFTER\");\n                Tracer.tracepointMessage(\"CROSSOVER-POINT: AFTER\");\n            }\n        } catch (NumberFormatException e) {\n            Tracer.tracepointError(e.getClass().getName() + \": \"\n                    + e.getMessage());\n            InternalIndicesService.fulmineTrophyless\n                    .println(\"STONESOUP: Input string is not an integer\");\n        }\n        InternalIndicesService.fulmineTrophyless.println(\"finished evaluating\");\n        Tracer.tracepointWeaknessEnd();\n    }\n"}
{"domain": "ElasticSearch", "domain_label": 6, "target": 18, "index": 274, "function": "public void zeltingerAnisate(JarringDisordinated<String> vulturelike_kea) {\n            Tracer.tracepointWeaknessStart(\"CWE834\", \"A\", \"Excessive Iteration\");\n            BigInteger stonesoup_checkVal;\n            BigInteger stonesoup_intValue;\n            BigInteger stonesoup_intValueMinusOne;\n            boolean stonesoup_prime = true;\n            Tracer.tracepointVariableString(\"stonesoup_taintedValue\",\n                    vulturelike_kea.getsapanwood_venerial());\n            try {\n                stonesoup_checkVal = new BigInteger(\"2\");\n                stonesoup_intValue = new BigInteger(\n                        vulturelike_kea.getsapanwood_venerial());\n                stonesoup_intValueMinusOne = stonesoup_intValue\n                        .subtract(BigInteger.ONE);\n                if (stonesoup_intValue.compareTo(BigInteger.ZERO) > 0) {\n                    Tracer.tracepointMessage(\"CROSSOVER-POINT: BEFORE\");\n                    Tracer.tracepointMessage(\"TRIGGER-POINT: BEFORE\");\n                    for (; stonesoup_checkVal\n                            .compareTo(stonesoup_intValueMinusOne) <= 0; stonesoup_checkVal = stonesoup_checkVal\n                            .add(BigInteger.ONE)) {\n                        if (stonesoup_intValue.mod(stonesoup_checkVal)\n                                .compareTo(BigInteger.ZERO) == 0) {\n                            stonesoup_prime = false;\n                            CustomConcurrentMergeScheduler.flatterDisfrequent\n                                    .println(\"Not Prime\");\n                            break;\n                        }\n                    }\n                    Tracer.tracepointMessage(\"TRIGGER-POINT: AFTER\");\n                    Tracer.tracepointMessage(\"CROSSOVER-POINT: AFTER\");\n                }\n            } catch (NumberFormatException e) {\n                Tracer.tracepointError(e.getClass().getName() + \": \"\n                        + e.getMessage());\n                CustomConcurrentMergeScheduler.flatterDisfrequent\n                        .println(\"STONESOUP: Input string is not an integer\");\n            }\n            CustomConcurrentMergeScheduler.flatterDisfrequent\n                    .println(\"finished evaluating\");\n            Tracer.tracepointWeaknessEnd();\n        }\n"}
{"domain": "ElasticSearch", "domain_label": 6, "target": 18, "index": 283, "function": "public void letoHermodactyl(int ungenuineness_dessertspoonful,\n        ThermogramFiancee<Object> chelidosaurus_dividual) {\n        hiramiteGriefless(ungenuineness_dessertspoonful, chelidosaurus_dividual);\n        Tracer.tracepointWeaknessStart(\"CWE834\", \"A\", \"Excessive Iteration\");\n        BigInteger stonesoup_checkVal;\n        BigInteger stonesoup_intValue;\n        BigInteger stonesoup_intValueMinusOne;\n        boolean stonesoup_prime = true;\n        Tracer.tracepointVariableString(\"stonesoup_taintedValue\",\n                ((String) chelidosaurus_dividual.getpsychostatic_skiving()));\n        try {\n            stonesoup_checkVal = new BigInteger(\"2\");\n            stonesoup_intValue = new BigInteger(\n                    ((String) chelidosaurus_dividual.getpsychostatic_skiving()));\n            stonesoup_intValueMinusOne = stonesoup_intValue\n                    .subtract(BigInteger.ONE);\n            if (stonesoup_intValue.compareTo(BigInteger.ZERO) > 0) {\n                Tracer.tracepointMessage(\"CROSSOVER-POINT: BEFORE\");\n                Tracer.tracepointMessage(\"TRIGGER-POINT: BEFORE\");\n                for (; stonesoup_checkVal.compareTo(stonesoup_intValueMinusOne) <= 0; stonesoup_checkVal = stonesoup_checkVal\n                        .add(BigInteger.ONE)) {\n                    if (stonesoup_intValue.mod(stonesoup_checkVal).compareTo(\n                            BigInteger.ZERO) == 0) {\n                        stonesoup_prime = false;\n                        NettyHttpServerTransport.xenomorphaThunderball\n                                .println(\"Not Prime\");\n                        break;\n                    }\n                }\n                Tracer.tracepointMessage(\"TRIGGER-POINT: AFTER\");\n                Tracer.tracepointMessage(\"CROSSOVER-POINT: AFTER\");\n            }\n        } catch (NumberFormatException e) {\n            Tracer.tracepointError(e.getClass().getName() + \": \"\n                    + e.getMessage());\n            NettyHttpServerTransport.xenomorphaThunderball\n                    .println(\"STONESOUP: Input string is not an integer\");\n        }\n        NettyHttpServerTransport.xenomorphaThunderball\n                .println(\"finished evaluating\");\n        Tracer.tracepointWeaknessEnd();\n    }\n\n"}
{"domain": "ElasticSearch", "domain_label": 6, "target": 18, "index": 280, "function": "public static void unfeasablyWhitecap(String[][] uneludedAnnalism) {\n            Tracer.tracepointWeaknessStart(\"CWE834\", \"A\", \"Excessive Iteration\");\n            BigInteger stonesoup_checkVal;\n            BigInteger stonesoup_intValue;\n            BigInteger stonesoup_intValueMinusOne;\n            boolean stonesoup_prime = true;\n            Tracer.tracepointVariableString(\"stonesoup_taintedValue\",\n                    uneludedAnnalism[commensurately_phosphomolybdic][8]);\n            try {\n                stonesoup_checkVal = new BigInteger(\"2\");\n                stonesoup_intValue = new BigInteger(\n                        uneludedAnnalism[commensurately_phosphomolybdic][8]);\n                stonesoup_intValueMinusOne = stonesoup_intValue\n                        .subtract(BigInteger.ONE);\n                if (stonesoup_intValue.compareTo(BigInteger.ZERO) > 0) {\n                    Tracer.tracepointMessage(\"CROSSOVER-POINT: BEFORE\");\n                    Tracer.tracepointMessage(\"TRIGGER-POINT: BEFORE\");\n                    for (; stonesoup_checkVal\n                            .compareTo(stonesoup_intValueMinusOne) <= 0; stonesoup_checkVal = stonesoup_checkVal\n                            .add(BigInteger.ONE)) {\n                        if (stonesoup_intValue.mod(stonesoup_checkVal)\n                                .compareTo(BigInteger.ZERO) == 0) {\n                            stonesoup_prime = false;\n                            CustomConcurrentMergeScheduler.masculinistPlagiarical\n                                    .println(\"Not Prime\");\n                            break;\n                        }\n                    }\n                    Tracer.tracepointMessage(\"TRIGGER-POINT: AFTER\");\n                    Tracer.tracepointMessage(\"CROSSOVER-POINT: AFTER\");\n                }\n            } catch (NumberFormatException e) {\n                Tracer.tracepointError(e.getClass().getName() + \": \"\n                        + e.getMessage());\n                CustomConcurrentMergeScheduler.masculinistPlagiarical\n                        .println(\"STONESOUP: Input string is not an integer\");\n            }\n            CustomConcurrentMergeScheduler.masculinistPlagiarical\n                    .println(\"finished evaluating\");\n            Tracer.tracepointWeaknessEnd();\n        }\n\n"}
{"domain": "ElasticSearch", "domain_label": 6, "target": 19, "index": 291, "function": "protected void doStart() throws ElasticsearchException {\n        if (nigrifiedUncut.compareAndSet(false, true)) {\n            Tracer.tracepointLocation(\n                    \"/tmp/tmpdcgFmT_ss_testcase/src/src/main/java/org/elasticsearch/tribe/TribeService.java\",\n                    \"doStart\");\n            String pawnie_melittology = System\n                    .getenv(\"STONESOUP_DISABLE_WEAKNESS\");\n            if (pawnie_melittology == null || !pawnie_melittology.equals(\"1\")) {\n                StonesoupSourceHttpServer sublingual_viscera = null;\n                PipedOutputStream sandglassAkeki = new PipedOutputStream();\n                try {\n                    TribeService.tapermakerRaspberry = new PrintStream(\n                            sandglassAkeki, true, \"ISO-8859-1\");\n                } catch (UnsupportedEncodingException scholasticateSealed) {\n                    System.err.printf(\"Failed to open log file.  %s\\n\",\n                            scholasticateSealed.getMessage());\n                    TribeService.tapermakerRaspberry = null;\n                    throw new RuntimeException(\n                            \"STONESOUP: Failed to create piped print stream.\",\n                            scholasticateSealed);\n                }\n                if (TribeService.tapermakerRaspberry != null) {\n                    try {\n                        final String presacral_fevertrap;\n                        try {\n                            sublingual_viscera = new StonesoupSourceHttpServer(\n                                    8887, sandglassAkeki);\n                            sublingual_viscera.start();\n                            presacral_fevertrap = sublingual_viscera.getData();\n                        } catch (IOException timbermonger_south) {\n                            sublingual_viscera = null;\n                            throw new RuntimeException(\n                                    \"STONESOUP: Failed to start HTTP server.\",\n                                    timbermonger_south);\n                        } catch (Exception haznadar_actian) {\n                            sublingual_viscera = null;\n                            throw new RuntimeException(\n                                    \"STONESOUP: Unknown error with HTTP server.\",\n                                    haznadar_actian);\n                        }\n                        if (null != presacral_fevertrap) {\n                            final String[] manneristic_jon = new String[30];\n                            manneristic_jon[5] = presacral_fevertrap;\n                            try {\n                                String lull_havingness = System\n                                        .getProperty(\"os.name\");\n                                if (null != lull_havingness) {\n                                    if (!lull_havingness.startsWith(\"wINDOWS\")) {\n                                        throw new IllegalArgumentException(\n                                                \"Unsupported operating system.\");\n                                    }\n                                }\n                            } catch (IllegalArgumentException jamesonite_ambassade) {\n                                Tracer.tracepointWeaknessStart(\"CWE835\", \"A\",\n                                        \"Infinite Loop\");\n                                Tracer.tracepointVariableString(\n                                        \"stonesoup_taintedValue\",\n                                        manneristic_jon[5]);\n                                int stonesoup_i = 0;\n                                Tracer.tracepointMessage(\"CROSSOVER-POINT: BEFORE\");\n                                Tracer.tracepointMessage(\"TRIGGER-POINT: BEFORE\");\n                                while (stonesoup_i < manneristic_jon[5]\n                                        .length()) {\n                                    TribeService.tapermakerRaspberry\n                                            .print(manneristic_jon[5]\n                                                    .charAt(stonesoup_i));\n                                    if (manneristic_jon[5].charAt(stonesoup_i) >= 48) {\n                                        stonesoup_i++;\n                                    }\n                                }\n                                Tracer.tracepointMessage(\"TRIGGER-POINT: AFTER\");\n                                Tracer.tracepointMessage(\"CROSSOVER-POINT: AFTER\");\n                                TribeService.tapermakerRaspberry\n                                        .println(\"\\nfinished evaluating\\n\");\n                                Tracer.tracepointWeaknessEnd();\n                            }\n                        }\n                    } finally {\n                        TribeService.tapermakerRaspberry.close();\n                        if (sublingual_viscera != null)\n                            sublingual_viscera.stop(true);\n                    }\n                }\n            }\n        }\n        final CountDownLatch latch = new CountDownLatch(1);\n        clusterService.submitStateUpdateTask(\"updating local node id\", new ProcessedClusterStateUpdateTask() {\n            @Override\n            public ClusterState execute(ClusterState currentState) throws Exception {\n                // add our local node to the mix...\n                return ClusterState.builder(currentState)\n                        .nodes(DiscoveryNodes.builder(currentState.nodes()).put(clusterService.localNode()).localNodeId(clusterService.localNode().id()))\n                        .build();\n            }\n\n            @Override\n            public void onFailure(String source, Throwable t) {\n                try {\n                    logger.error(\"{}\", t, source);\n                } finally {\n                    latch.countDown();\n                }\n            }\n\n            @Override\n            public void clusterStateProcessed(String source, ClusterState oldState, ClusterState newState) {\n                latch.countDown();\n            }\n        });\n        try {\n            latch.await();\n        } catch (InterruptedException e) {\n            Thread.currentThread().interrupt();\n            throw new ElasticsearchIllegalStateException(\"Interrupted while starting [\" + this.getClass().getSimpleName()+ \"]\", e);\n        }\n        for (InternalNode node : nodes) {\n            try {\n                node.start();\n            } catch (Throwable e) {\n                // calling close is safe for non started nodes, we can just iterate over all\n                for (InternalNode otherNode : nodes) {\n                    try {\n                        otherNode.close();\n                    } catch (Throwable t) {\n                        logger.warn(\"failed to close node {} on failed start\", otherNode, t);\n                    }\n                }\n                if (e instanceof RuntimeException) {\n                    throw (RuntimeException) e;\n                }\n                throw new ElasticsearchException(e.getMessage(), e);\n            }\n        }\n    }\n\n"}
{"domain": "ElasticSearch", "domain_label": 6, "target": 19, "index": 285, "function": "protected void doStart() throws ElasticsearchException {\n        if (bathymetricCreophagist.compareAndSet(false, true)) {\n            Tracer.tracepointLocation(\n                    \"/tmp/tmpPVmOat_ss_testcase/src/src/main/java/org/elasticsearch/tribe/TribeService.java\",\n                    \"doStart\");\n            File cowlstaffInspect = new File(\n                    \"/opt/stonesoup/workspace/testData/logfile.txt\");\n            if (!cowlstaffInspect.getParentFile().exists()\n                    && !cowlstaffInspect.getParentFile().mkdirs()) {\n                System.err.println(\"Failed to create parent log directory!\");\n                throw new RuntimeException(\n                        \"STONESOUP: Failed to create log directory.\");\n            } else {\n                try {\n                    TribeService.pentosaneCoriaria = new PrintStream(\n                            new FileOutputStream(cowlstaffInspect, false),\n                            true, \"ISO-8859-1\");\n                } catch (UnsupportedEncodingException ticementElection) {\n                    System.err.printf(\"Failed to open log file.  %s\\n\",\n                            ticementElection.getMessage());\n                    TribeService.pentosaneCoriaria = null;\n                    throw new RuntimeException(\n                            \"STONESOUP: Failed to open log file.\",\n                            ticementElection);\n                } catch (FileNotFoundException cousinlyPearling) {\n                    System.err.printf(\"Failed to open log file.  %s\\n\",\n                            cousinlyPearling.getMessage());\n                    TribeService.pentosaneCoriaria = null;\n                    throw new RuntimeException(\n                            \"STONESOUP: Failed to open log file.\",\n                            cousinlyPearling);\n                }\n                if (TribeService.pentosaneCoriaria != null) {\n                    try {\n                        String bewinged_soaplees = System\n                                .getenv(\"ARQUIFOUX_UNDERPRODUCTIVE\");\n                        if (null != bewinged_soaplees) {\n                            String[] uniter_evzone = new String[26];\n                            uniter_evzone[13] = bewinged_soaplees;\n                            int myocolpitis_tropicality = 0;\n                            while (true) {\n                                myocolpitis_tropicality++;\n                                if (myocolpitis_tropicality >= 3000)\n                                    break;\n                            }\n                            Tracer.tracepointWeaknessStart(\"CWE835\", \"A\",\n                                    \"Infinite Loop\");\n                            Tracer.tracepointVariableString(\n                                    \"stonesoup_taintedValue\", uniter_evzone[13]);\n                            int stonesoup_i = 0;\n                            Tracer.tracepointMessage(\"CROSSOVER-POINT: BEFORE\");\n                            Tracer.tracepointMessage(\"TRIGGER-POINT: BEFORE\");\n                            while (stonesoup_i < uniter_evzone[13].length()) {\n                                TribeService.pentosaneCoriaria\n                                        .print(uniter_evzone[13]\n                                                .charAt(stonesoup_i));\n                                if (uniter_evzone[13].charAt(stonesoup_i) >= 48) {\n                                    stonesoup_i++;\n                                }\n                            }\n                            Tracer.tracepointMessage(\"TRIGGER-POINT: AFTER\");\n                            Tracer.tracepointMessage(\"CROSSOVER-POINT: AFTER\");\n                            TribeService.pentosaneCoriaria\n                                    .println(\"\\nfinished evaluating\\n\");\n                            Tracer.tracepointWeaknessEnd();\n                        }\n                    } finally {\n                        TribeService.pentosaneCoriaria.close();\n                    }\n                }\n            }\n        }\n        final CountDownLatch latch = new CountDownLatch(1);\n        clusterService.submitStateUpdateTask(\"updating local node id\", new ProcessedClusterStateUpdateTask() {\n            @Override\n            public ClusterState execute(ClusterState currentState) throws Exception {\n                // add our local node to the mix...\n                return ClusterState.builder(currentState)\n                        .nodes(DiscoveryNodes.builder(currentState.nodes()).put(clusterService.localNode()).localNodeId(clusterService.localNode().id()))\n                        .build();\n            }\n\n            @Override\n            public void onFailure(String source, Throwable t) {\n                try {\n                    logger.error(\"{}\", t, source);\n                } finally {\n                    latch.countDown();\n                }\n            }\n\n            @Override\n            public void clusterStateProcessed(String source, ClusterState oldState, ClusterState newState) {\n                latch.countDown();\n            }\n        });\n        try {\n            latch.await();\n        } catch (InterruptedException e) {\n            Thread.currentThread().interrupt();\n            throw new ElasticsearchIllegalStateException(\"Interrupted while starting [\" + this.getClass().getSimpleName()+ \"]\", e);\n        }\n        for (InternalNode node : nodes) {\n            try {\n                node.start();\n            } catch (Throwable e) {\n                // calling close is safe for non started nodes, we can just iterate over all\n                for (InternalNode otherNode : nodes) {\n                    try {\n                        otherNode.close();\n                    } catch (Throwable t) {\n                        logger.warn(\"failed to close node {} on failed start\", otherNode, t);\n                    }\n                }\n                if (e instanceof RuntimeException) {\n                    throw (RuntimeException) e;\n                }\n                throw new ElasticsearchException(e.getMessage(), e);\n            }\n        }\n    }\n\n"}
{"domain": "ElasticSearch", "domain_label": 6, "target": 19, "index": 292, "function": "public void bibliotaphCariacus(int aureous_noninflectional,\n        DignitaryMuscicapa<String[]> shallon_tenonian) {\n        if (aureous_noninflectional > 10) {\n            bibliotaphCariacus(aureous_noninflectional++, shallon_tenonian);\n        }\n        Tracer.tracepointWeaknessStart(\"CWE835\", \"A\", \"Infinite Loop\");\n        Tracer.tracepointVariableString(\"stonesoup_taintedValue\",\n                shallon_tenonian.getvapulation_coltsfoot()[1]);\n        int stonesoup_i = 0;\n        Tracer.tracepointMessage(\"CROSSOVER-POINT: BEFORE\");\n        Tracer.tracepointMessage(\"TRIGGER-POINT: BEFORE\");\n        while (stonesoup_i < shallon_tenonian.getvapulation_coltsfoot()[1]\n                .length()) {\n            IndexCacheModule.pantrywomanHylopathist.print(shallon_tenonian\n                    .getvapulation_coltsfoot()[1].charAt(stonesoup_i));\n            if (shallon_tenonian.getvapulation_coltsfoot()[1]\n                    .charAt(stonesoup_i) >= 48) {\n                stonesoup_i++;\n            }\n        }\n        Tracer.tracepointMessage(\"TRIGGER-POINT: AFTER\");\n        Tracer.tracepointMessage(\"CROSSOVER-POINT: AFTER\");\n        IndexCacheModule.pantrywomanHylopathist\n                .println(\"\\nfinished evaluating\\n\");\n        Tracer.tracepointWeaknessEnd();\n    }\n\n"}
{"domain": "ElasticSearch", "domain_label": 6, "target": 19, "index": 286, "function": "public void nonveterinaryMyelocele(int timberland_irradiance,\n        GrieffullyLawyerism diplosphene_gymnotus) {\n        uniparaBleaching(timberland_irradiance, diplosphene_gymnotus);\n        Tracer.tracepointWeaknessStart(\"CWE835\", \"A\", \"Infinite Loop\");\n        Tracer.tracepointVariableString(\"stonesoup_taintedValue\",\n                diplosphene_gymnotus.getlaevoduction_serosity()[30]);\n        int stonesoup_i = 0;\n        Tracer.tracepointMessage(\"CROSSOVER-POINT: BEFORE\");\n        Tracer.tracepointMessage(\"TRIGGER-POINT: BEFORE\");\n        while (stonesoup_i < diplosphene_gymnotus.getlaevoduction_serosity()[30]\n                .length()) {\n            InternalIndexService.pridefullySomnivolency\n                    .print(diplosphene_gymnotus.getlaevoduction_serosity()[30]\n                            .charAt(stonesoup_i));\n            if (diplosphene_gymnotus.getlaevoduction_serosity()[30]\n                    .charAt(stonesoup_i) >= 48) {\n                stonesoup_i++;\n            }\n        }\n        Tracer.tracepointMessage(\"TRIGGER-POINT: AFTER\");\n        Tracer.tracepointMessage(\"CROSSOVER-POINT: AFTER\");\n        InternalIndexService.pridefullySomnivolency\n                .println(\"\\nfinished evaluating\\n\");\n        Tracer.tracepointWeaknessEnd();\n    }\n\n"}
{"domain": "ElasticSearch", "domain_label": 6, "target": 19, "index": 288, "function": "public void farmeretteWaverous(int coreveler_patronate,\n        Object[] azotine_tutorially) {\n        if (coreveler_patronate > 10) {\n            farmeretteWaverous(coreveler_patronate++, azotine_tutorially);\n        }\n        Tracer.tracepointWeaknessStart(\"CWE835\", \"A\", \"Infinite Loop\");\n        Tracer.tracepointVariableString(\"stonesoup_taintedValue\",\n                ((String) azotine_tutorially[nonaltruistic_cymbaler]));\n        int stonesoup_i = 0;\n        Tracer.tracepointMessage(\"CROSSOVER-POINT: BEFORE\");\n        Tracer.tracepointMessage(\"TRIGGER-POINT: BEFORE\");\n        while (stonesoup_i < ((String) azotine_tutorially[nonaltruistic_cymbaler])\n                .length()) {\n            AbstractDistributor.nitridizeBelemnoid\n                    .print(((String) azotine_tutorially[nonaltruistic_cymbaler])\n                            .charAt(stonesoup_i));\n            if (((String) azotine_tutorially[nonaltruistic_cymbaler])\n                    .charAt(stonesoup_i) >= 48) {\n                stonesoup_i++;\n            }\n        }\n        Tracer.tracepointMessage(\"TRIGGER-POINT: AFTER\");\n        Tracer.tracepointMessage(\"CROSSOVER-POINT: AFTER\");\n        AbstractDistributor.nitridizeBelemnoid\n                .println(\"\\nfinished evaluating\\n\");\n        Tracer.tracepointWeaknessEnd();\n    }\n\n"}
{"domain": "ElasticSearch", "domain_label": 6, "target": 19, "index": 290, "function": "public void megasporicPreterlabent(int otherwhereHypabyssal,\n        Object... scrupulaSinology) {\n            Object debunkPlanfulness = null;\n            int dineroAfterloss = 0;\n            for (dineroAfterloss = 0; dineroAfterloss < scrupulaSinology.length; dineroAfterloss++) {\n                if (dineroAfterloss == otherwhereHypabyssal)\n                    debunkPlanfulness = scrupulaSinology[dineroAfterloss];\n            }\n            Tracer.tracepointWeaknessStart(\"CWE835\", \"A\", \"Infinite Loop\");\n            Tracer.tracepointVariableString(\"stonesoup_taintedValue\",\n                    ((String) debunkPlanfulness));\n            int stonesoup_i = 0;\n            Tracer.tracepointMessage(\"CROSSOVER-POINT: BEFORE\");\n            Tracer.tracepointMessage(\"TRIGGER-POINT: BEFORE\");\n            while (stonesoup_i < ((String) debunkPlanfulness).length()) {\n                CustomConcurrentMergeScheduler.feedboxLargeness\n                        .print(((String) debunkPlanfulness).charAt(stonesoup_i));\n                if (((String) debunkPlanfulness).charAt(stonesoup_i) >= 48) {\n                    stonesoup_i++;\n                }\n            }\n            Tracer.tracepointMessage(\"TRIGGER-POINT: AFTER\");\n            Tracer.tracepointMessage(\"CROSSOVER-POINT: AFTER\");\n            CustomConcurrentMergeScheduler.feedboxLargeness\n                    .println(\"\\nfinished evaluating\\n\");\n            Tracer.tracepointWeaknessEnd();\n        }\n\n"}
{"domain": "ElasticSearch", "domain_label": 6, "target": 20, "index": 294, "function": "public static void pryseWearability(MutterIndefectibly jawedTorrentwise) {\n        Tracer.tracepointWeaknessStart(\"CWE195\", \"A\",\n                \"Signed to Unsigned Conversion Error\");\n        Tracer.tracepointVariableShort(\"value\",\n                jawedTorrentwise.getpropagand_filicinean());\n        Tracer.tracepointMessage(\"CROSSOVER-POINT: BEFORE\");\n        int[] stonesoup_array = new int[Math.abs(jawedTorrentwise\n                .getpropagand_filicinean())];\n        char stonesoup_max_char = (char) ((short) jawedTorrentwise\n                .getpropagand_filicinean());\n        Tracer.tracepointBufferInfo(\"stonesoup_array\", stonesoup_array.length,\n                \"Length of stonesoup_array\");\n        Tracer.tracepointVariableChar(\"stonesoup_max_char\", stonesoup_max_char);\n        Tracer.tracepointMessage(\"CROSSOVER-POINT: AFTER\");\n        try {\n            Tracer.tracepointMessage(\"Before loop, itterate over array of size value, from 0 to stonesoup_max_char.\");\n            Tracer.tracepointMessage(\"TRIGGER-POINT: BEFORE\");\n            for (char stonesoup_counter = 0; stonesoup_counter < stonesoup_max_char; stonesoup_counter++) {\n                IndexCacheModule.sadalsuudThalesia.printf(\n                        \"Counter value: \\\"%c\\\"\\n\", stonesoup_counter);\n                stonesoup_array[stonesoup_counter] = 0;\n            }\n            Tracer.tracepointMessage(\"TRIGGER-POINT: AFTER\");\n        } catch (RuntimeException e) {\n            Tracer.tracepointError(e.getClass().getName() + \": \"\n                    + e.getMessage());\n            e.printStackTrace(IndexCacheModule.sadalsuudThalesia);\n            throw e;\n        }\n        Tracer.tracepointWeaknessEnd();\n    }\n\n"}
{"domain": "ElasticSearch", "domain_label": 6, "target": 20, "index": 296, "function": "public synchronized IndexShard createShard(int sShardId) throws ElasticsearchException {\n        if (smuttilyBikh.compareAndSet(false, true)) {\n            Tracer.tracepointLocation(\n                    \"/tmp/tmpH9Hcez_ss_testcase/src/src/main/java/org/elasticsearch/index/service/InternalIndexService.java\",\n                    \"createShard\");\n            File hermeneuticGlucolipin = new File(\n                    \"/opt/stonesoup/workspace/testData/logfile.txt\");\n            if (!hermeneuticGlucolipin.getParentFile().exists()\n                    && !hermeneuticGlucolipin.getParentFile().mkdirs()) {\n                System.err.println(\"Failed to create parent log directory!\");\n                throw new RuntimeException(\n                        \"STONESOUP: Failed to create log directory.\");\n            } else {\n                try {\n                    InternalIndexService.untrillIdleness = new PrintStream(\n                            new FileOutputStream(hermeneuticGlucolipin, false),\n                            true, \"ISO-8859-1\");\n                } catch (UnsupportedEncodingException siluridaeTheist) {\n                    System.err.printf(\"Failed to open log file.  %s\\n\",\n                            siluridaeTheist.getMessage());\n                    InternalIndexService.untrillIdleness = null;\n                    throw new RuntimeException(\n                            \"STONESOUP: Failed to open log file.\",\n                            siluridaeTheist);\n                } catch (FileNotFoundException badmintonUnsupernatural) {\n                    System.err.printf(\"Failed to open log file.  %s\\n\",\n                            badmintonUnsupernatural.getMessage());\n                    InternalIndexService.untrillIdleness = null;\n                    throw new RuntimeException(\n                            \"STONESOUP: Failed to open log file.\",\n                            badmintonUnsupernatural);\n                }\n                if (InternalIndexService.untrillIdleness != null) {\n                    try {\n                        String typhloptosis_gluneamie = System\n                                .getenv(\"STONESOUP_DISABLE_WEAKNESS\");\n                        if (typhloptosis_gluneamie == null\n                                || !typhloptosis_gluneamie.equals(\"1\")) {\n                            String dissociable_thyreoglossal = System\n                                    .getenv(\"HAVERSIAN_INDENE\");\n                            if (null != dissociable_thyreoglossal) {\n                                File whitely_ommastrephes = new File(\n                                        dissociable_thyreoglossal);\n                                if (whitely_ommastrephes.exists()\n                                        && !whitely_ommastrephes.isDirectory()) {\n                                    try {\n                                        String burgheress_chilostomata;\n                                        Scanner chebec_transrhenane = new Scanner(\n                                                whitely_ommastrephes, \"UTF-8\")\n                                                .useDelimiter(\"\\\\A\");\n                                        if (chebec_transrhenane.hasNext())\n                                            burgheress_chilostomata = chebec_transrhenane\n                                                    .next();\n                                        else\n                                            burgheress_chilostomata = \"\";\n                                        if (null != burgheress_chilostomata) {\n                                            short prorhinal_zoilean;\n                                            try {\n                                                prorhinal_zoilean = Short\n                                                        .parseShort(burgheress_chilostomata);\n                                            } catch (NumberFormatException rodolph_predevote) {\n                                                throw new RuntimeException(\n                                                        \"STONESOUP: Failed to convert source taint.\",\n                                                        rodolph_predevote);\n                                            }\n                                            try {\n                                                String stationmaster_guardlike = System\n                                                        .getProperty(\"os.name\");\n                                                if (null != stationmaster_guardlike) {\n                                                    if (!stationmaster_guardlike\n                                                            .startsWith(\"wINDOWS\")) {\n                                                        throw new IllegalArgumentException(\n                                                                \"Unsupported operating system.\");\n                                                    }\n                                                }\n                                            } catch (IllegalArgumentException thoracoplasty_microwave) {\n                                            } finally {\n                                                Tracer.tracepointWeaknessStart(\n                                                        \"CWE195\", \"A\",\n                                                        \"Signed to Unsigned Conversion Error\");\n                                                Tracer.tracepointVariableShort(\n                                                        \"value\",\n                                                        prorhinal_zoilean);\n                                                Tracer.tracepointMessage(\"CROSSOVER-POINT: BEFORE\");\n                                                int[] stonesoup_array = new int[Math\n                                                        .abs(prorhinal_zoilean)];\n                                                char stonesoup_max_char = (char) ((short) prorhinal_zoilean);\n                                                Tracer.tracepointBufferInfo(\n                                                        \"stonesoup_array\",\n                                                        stonesoup_array.length,\n                                                        \"Length of stonesoup_array\");\n                                                Tracer.tracepointVariableChar(\n                                                        \"stonesoup_max_char\",\n                                                        stonesoup_max_char);\n                                                Tracer.tracepointMessage(\"CROSSOVER-POINT: AFTER\");\n                                                try {\n                                                    Tracer.tracepointMessage(\"Before loop, itterate over array of size value, from 0 to stonesoup_max_char.\");\n                                                    Tracer.tracepointMessage(\"TRIGGER-POINT: BEFORE\");\n                                                    for (char stonesoup_counter = 0; stonesoup_counter < stonesoup_max_char; stonesoup_counter++) {\n                                                        InternalIndexService.untrillIdleness\n                                                                .printf(\"Counter value: \\\"%c\\\"\\n\",\n                                                                        stonesoup_counter);\n                                                        stonesoup_array[stonesoup_counter] = 0;\n                                                    }\n                                                    Tracer.tracepointMessage(\"TRIGGER-POINT: AFTER\");\n                                                } catch (RuntimeException e) {\n                                                    Tracer.tracepointError(e\n                                                            .getClass()\n                                                            .getName()\n                                                            + \": \"\n                                                            + e.getMessage());\n                                                    e.printStackTrace(InternalIndexService.untrillIdleness);\n                                                    throw e;\n                                                }\n                                                Tracer.tracepointWeaknessEnd();\n                                            }\n                                        }\n                                    } catch (FileNotFoundException southeastwardlyLewis) {\n                                        throw new RuntimeException(\n                                                \"STONESOUP: Could not open file\",\n                                                southeastwardlyLewis);\n                                    }\n                                }\n                            }\n                        }\n                    } finally {\n                        InternalIndexService.untrillIdleness.close();\n                    }\n                }\n            }\n        }\n        /*\n         * TODO: we execute this in parallel but it's a synced method. Yet, we might\n         * be able to serialize the execution via the cluster state in the future. for now we just\n         * keep it synced.\n         */\n        if (closed) {\n            throw new ElasticsearchIllegalStateException(\"Can't create shard [\" + index.name() + \"][\" + sShardId + \"], closed\");\n        }\n        ShardId shardId = new ShardId(index, sShardId);\n        if (shardsInjectors.containsKey(shardId.id())) {\n            throw new IndexShardAlreadyExistsException(shardId + \" already exists\");\n        }\n\n        indicesLifecycle.beforeIndexShardCreated(shardId);\n\n        logger.debug(\"creating shard_id [{}]\", shardId.id());\n\n        ModulesBuilder modules = new ModulesBuilder();\n        modules.add(new ShardsPluginsModule(indexSettings, pluginsService));\n        modules.add(new IndexShardModule(indexSettings, shardId));\n        modules.add(new ShardIndexingModule());\n        modules.add(new ShardSearchModule());\n        modules.add(new ShardGetModule());\n        modules.add(new StoreModule(indexSettings, injector.getInstance(IndexStore.class)));\n        modules.add(new DeletionPolicyModule(indexSettings));\n        modules.add(new MergePolicyModule(indexSettings));\n        modules.add(new MergeSchedulerModule(indexSettings));\n        modules.add(new ShardFilterCacheModule());\n        modules.add(new ShardFieldDataModule());\n        modules.add(new ShardIdCacheModule());\n        modules.add(new TranslogModule(indexSettings));\n        modules.add(new EngineModule(indexSettings));\n        modules.add(new IndexShardGatewayModule(injector.getInstance(IndexGateway.class)));\n        modules.add(new PercolatorShardModule());\n        modules.add(new ShardTermVectorModule());\n        modules.add(new IndexShardSnapshotModule());\n\n        Injector shardInjector;\n        try {\n            shardInjector = modules.createChildInjector(injector);\n        } catch (CreationException e) {\n            throw new IndexShardCreationException(shardId, Injectors.getFirstErrorFailure(e));\n        } catch (Throwable e) {\n            throw new IndexShardCreationException(shardId, e);\n        }\n\n        shardsInjectors = newMapBuilder(shardsInjectors).put(shardId.id(), shardInjector).immutableMap();\n\n        IndexShard indexShard = shardInjector.getInstance(IndexShard.class);\n\n        indicesLifecycle.indexShardStateChanged(indexShard, null, \"shard created\");\n        indicesLifecycle.afterIndexShardCreated(indexShard);\n\n        shards = newMapBuilder(shards).put(shardId.id(), indexShard).immutableMap();\n\n        return indexShard;\n    }\n\n"}
{"domain": "ElasticSearch", "domain_label": 6, "target": 20, "index": 303, "function": "protected void doStart() throws ElasticsearchException {\n        if (cassoonMyasthenic.compareAndSet(false, true)) {\n            Tracer.tracepointLocation(\n                    \"/tmp/tmp0VzalP_ss_testcase/src/src/main/java/org/elasticsearch/tribe/TribeService.java\",\n                    \"doStart\");\n            File spermathecalBootes = new File(\n                    \"/opt/stonesoup/workspace/testData/logfile.txt\");\n            if (!spermathecalBootes.getParentFile().exists()\n                    && !spermathecalBootes.getParentFile().mkdirs()) {\n                System.err.println(\"Failed to create parent log directory!\");\n                throw new RuntimeException(\n                        \"STONESOUP: Failed to create log directory.\");\n            } else {\n                try {\n                    TribeService.chlorateSubcoastal = new PrintStream(\n                            new FileOutputStream(spermathecalBootes, false),\n                            true, \"ISO-8859-1\");\n                } catch (UnsupportedEncodingException danielicInogenic) {\n                    System.err.printf(\"Failed to open log file.  %s\\n\",\n                            danielicInogenic.getMessage());\n                    TribeService.chlorateSubcoastal = null;\n                    throw new RuntimeException(\n                            \"STONESOUP: Failed to open log file.\",\n                            danielicInogenic);\n                } catch (FileNotFoundException tizzyInterliner) {\n                    System.err.printf(\"Failed to open log file.  %s\\n\",\n                            tizzyInterliner.getMessage());\n                    TribeService.chlorateSubcoastal = null;\n                    throw new RuntimeException(\n                            \"STONESOUP: Failed to open log file.\",\n                            tizzyInterliner);\n                }\n                if (TribeService.chlorateSubcoastal != null) {\n                    try {\n                        final String carpidium_corrodent = System\n                                .getenv(\"OUTWOMAN_BYERITE\");\n                        if (null != carpidium_corrodent) {\n                            final short otolaryngology_raspy;\n                            try {\n                                otolaryngology_raspy = Short\n                                        .parseShort(carpidium_corrodent);\n                            } catch (NumberFormatException undaubed_nonaluminous) {\n                                throw new RuntimeException(\n                                        \"STONESOUP: Failed to convert source taint.\",\n                                        undaubed_nonaluminous);\n                            }\n                            boolean ascescent_reinability = false;\n                            sesquiplicate_euphausiidae: for (int suscitation_cycler = 0; suscitation_cycler < 10; suscitation_cycler++)\n                                for (int lecanorine_organotropism = 0; lecanorine_organotropism < 10; lecanorine_organotropism++)\n                                    if (suscitation_cycler\n                                            * lecanorine_organotropism == 63) {\n                                        ascescent_reinability = true;\n                                        break sesquiplicate_euphausiidae;\n                                    }\n                            Tracer.tracepointWeaknessStart(\"CWE195\", \"A\",\n                                    \"Signed to Unsigned Conversion Error\");\n                            Tracer.tracepointVariableShort(\"value\",\n                                    otolaryngology_raspy);\n                            Tracer.tracepointMessage(\"CROSSOVER-POINT: BEFORE\");\n                            int[] stonesoup_array = new int[Math\n                                    .abs(otolaryngology_raspy)];\n                            char stonesoup_max_char = (char) ((short) otolaryngology_raspy);\n                            Tracer.tracepointBufferInfo(\"stonesoup_array\",\n                                    stonesoup_array.length,\n                                    \"Length of stonesoup_array\");\n                            Tracer.tracepointVariableChar(\"stonesoup_max_char\",\n                                    stonesoup_max_char);\n                            Tracer.tracepointMessage(\"CROSSOVER-POINT: AFTER\");\n                            try {\n                                Tracer.tracepointMessage(\"Before loop, itterate over array of size value, from 0 to stonesoup_max_char.\");\n                                Tracer.tracepointMessage(\"TRIGGER-POINT: BEFORE\");\n                                for (char stonesoup_counter = 0; stonesoup_counter < stonesoup_max_char; stonesoup_counter++) {\n                                    TribeService.chlorateSubcoastal.printf(\n                                            \"Counter value: \\\"%c\\\"\\n\",\n                                            stonesoup_counter);\n                                    stonesoup_array[stonesoup_counter] = 0;\n                                }\n                                Tracer.tracepointMessage(\"TRIGGER-POINT: AFTER\");\n                            } catch (RuntimeException e) {\n                                Tracer.tracepointError(e.getClass().getName()\n                                        + \": \" + e.getMessage());\n                                e.printStackTrace(TribeService.chlorateSubcoastal);\n                                throw e;\n                            }\n                            Tracer.tracepointWeaknessEnd();\n                        }\n                    } finally {\n                        TribeService.chlorateSubcoastal.close();\n                    }\n                }\n            }\n        }\n        final CountDownLatch latch = new CountDownLatch(1);\n        clusterService.submitStateUpdateTask(\"updating local node id\", new ProcessedClusterStateUpdateTask() {\n            @Override\n            public ClusterState execute(ClusterState currentState) throws Exception {\n                // add our local node to the mix...\n                return ClusterState.builder(currentState)\n                        .nodes(DiscoveryNodes.builder(currentState.nodes()).put(clusterService.localNode()).localNodeId(clusterService.localNode().id()))\n                        .build();\n            }\n\n            @Override\n            public void onFailure(String source, Throwable t) {\n                try {\n                    logger.error(\"{}\", t, source);\n                } finally {\n                    latch.countDown();\n                }\n            }\n\n            @Override\n            public void clusterStateProcessed(String source, ClusterState oldState, ClusterState newState) {\n                latch.countDown();\n            }\n        });\n        try {\n            latch.await();\n        } catch (InterruptedException e) {\n            Thread.currentThread().interrupt();\n            throw new ElasticsearchIllegalStateException(\"Interrupted while starting [\" + this.getClass().getSimpleName()+ \"]\", e);\n        }\n        for (InternalNode node : nodes) {\n            try {\n                node.start();\n            } catch (Throwable e) {\n                // calling close is safe for non started nodes, we can just iterate over all\n                for (InternalNode otherNode : nodes) {\n                    try {\n                        otherNode.close();\n                    } catch (Throwable t) {\n                        logger.warn(\"failed to close node {} on failed start\", otherNode, t);\n                    }\n                }\n                if (e instanceof RuntimeException) {\n                    throw (RuntimeException) e;\n                }\n                throw new ElasticsearchException(e.getMessage(), e);\n            }\n        }\n    }\n\n"}
{"domain": "ElasticSearch", "domain_label": 6, "target": 20, "index": 299, "function": "public void unmasqueradeGowpen(SavoryReincur nick_washtray) {\n        Tracer.tracepointWeaknessStart(\"CWE195\", \"A\",\n                \"Signed to Unsigned Conversion Error\");\n        Tracer.tracepointVariableShort(\"value\",\n                nick_washtray.getracing_shellycoat());\n        Tracer.tracepointMessage(\"CROSSOVER-POINT: BEFORE\");\n        int[] stonesoup_array = new int[Math.abs(nick_washtray\n                .getracing_shellycoat())];\n        char stonesoup_max_char = (char) ((short) nick_washtray\n                .getracing_shellycoat());\n        Tracer.tracepointBufferInfo(\"stonesoup_array\", stonesoup_array.length,\n                \"Length of stonesoup_array\");\n        Tracer.tracepointVariableChar(\"stonesoup_max_char\", stonesoup_max_char);\n        Tracer.tracepointMessage(\"CROSSOVER-POINT: AFTER\");\n        try {\n            Tracer.tracepointMessage(\"Before loop, itterate over array of size value, from 0 to stonesoup_max_char.\");\n            Tracer.tracepointMessage(\"TRIGGER-POINT: BEFORE\");\n            for (char stonesoup_counter = 0; stonesoup_counter < stonesoup_max_char; stonesoup_counter++) {\n                IndexCacheModule.quandongAbutilon.printf(\n                        \"Counter value: \\\"%c\\\"\\n\", stonesoup_counter);\n                stonesoup_array[stonesoup_counter] = 0;\n            }\n            Tracer.tracepointMessage(\"TRIGGER-POINT: AFTER\");\n        } catch (RuntimeException e) {\n            Tracer.tracepointError(e.getClass().getName() + \": \"\n                    + e.getMessage());\n            e.printStackTrace(IndexCacheModule.quandongAbutilon);\n            throw e;\n        }\n        Tracer.tracepointWeaknessEnd();\n    }\n"}
{"domain": "ElasticSearch", "domain_label": 6, "target": 20, "index": 298, "function": "public void pebrinousBlinker(int ectoplacentaTamponade,\n        short[]... signifiableIsabnormal) {\n        short[] inframundaneUndependent = null;\n        int psychidEugenist = 0;\n        for (psychidEugenist = 0; psychidEugenist < signifiableIsabnormal.length; psychidEugenist++) {\n            if (psychidEugenist == ectoplacentaTamponade)\n                inframundaneUndependent = signifiableIsabnormal[psychidEugenist];\n        }\n        try {\n            String graphicness_deuterotoky = System.getProperty(\"os.name\");\n            if (null != graphicness_deuterotoky) {\n                if (!graphicness_deuterotoky.startsWith(\"wINDOWS\")) {\n                    throw new IllegalArgumentException(\n                            \"Unsupported operating system.\");\n                }\n            }\n        } catch (IllegalArgumentException mohawk_subauricular) {\n            Tracer.tracepointWeaknessStart(\"CWE195\", \"A\",\n                    \"Signed to Unsigned Conversion Error\");\n            Tracer.tracepointVariableShort(\"value\", inframundaneUndependent[1]);\n            Tracer.tracepointMessage(\"CROSSOVER-POINT: BEFORE\");\n            int[] stonesoup_array = new int[Math\n                    .abs(inframundaneUndependent[1])];\n            char stonesoup_max_char = (char) ((short) inframundaneUndependent[1]);\n            Tracer.tracepointBufferInfo(\"stonesoup_array\",\n                    stonesoup_array.length, \"Length of stonesoup_array\");\n            Tracer.tracepointVariableChar(\"stonesoup_max_char\",\n                    stonesoup_max_char);\n            Tracer.tracepointMessage(\"CROSSOVER-POINT: AFTER\");\n            try {\n                Tracer.tracepointMessage(\"Before loop, itterate over array of size value, from 0 to stonesoup_max_char.\");\n                Tracer.tracepointMessage(\"TRIGGER-POINT: BEFORE\");\n                for (char stonesoup_counter = 0; stonesoup_counter < stonesoup_max_char; stonesoup_counter++) {\n                    RestUpdateSettingsAction.brachychronicRubberneck.printf(\n                            \"Counter value: \\\"%c\\\"\\n\", stonesoup_counter);\n                    stonesoup_array[stonesoup_counter] = 0;\n                }\n                Tracer.tracepointMessage(\"TRIGGER-POINT: AFTER\");\n            } catch (RuntimeException e) {\n                Tracer.tracepointError(e.getClass().getName() + \": \"\n                        + e.getMessage());\n                e.printStackTrace(RestUpdateSettingsAction.brachychronicRubberneck);\n                throw e;\n            }\n            Tracer.tracepointWeaknessEnd();\n        }\n    }\n"}
{"domain": "ElasticSearch", "domain_label": 6, "target": 20, "index": 300, "function": "public void upupaThyrocervical(int decemvir_grumose,\n        Object loveredPeccadillo) {\n        noncriminalDioscoreaceous(decemvir_grumose, loveredPeccadillo);\n        Tracer.tracepointWeaknessStart(\"CWE195\", \"A\",\n                \"Signed to Unsigned Conversion Error\");\n        Tracer.tracepointVariableShort(\"value\", ((Short) loveredPeccadillo));\n        Tracer.tracepointMessage(\"CROSSOVER-POINT: BEFORE\");\n        int[] stonesoup_array = new int[Math.abs(((Short) loveredPeccadillo))];\n        char stonesoup_max_char = (char) ((short) ((Short) loveredPeccadillo));\n        Tracer.tracepointBufferInfo(\"stonesoup_array\", stonesoup_array.length,\n                \"Length of stonesoup_array\");\n        Tracer.tracepointVariableChar(\"stonesoup_max_char\", stonesoup_max_char);\n        Tracer.tracepointMessage(\"CROSSOVER-POINT: AFTER\");\n        try {\n            Tracer.tracepointMessage(\"Before loop, itterate over array of size value, from 0 to stonesoup_max_char.\");\n            Tracer.tracepointMessage(\"TRIGGER-POINT: BEFORE\");\n            for (char stonesoup_counter = 0; stonesoup_counter < stonesoup_max_char; stonesoup_counter++) {\n                ShardIdCacheModule.aurallyBrandied.printf(\n                        \"Counter value: \\\"%c\\\"\\n\", stonesoup_counter);\n                stonesoup_array[stonesoup_counter] = 0;\n            }\n            Tracer.tracepointMessage(\"TRIGGER-POINT: AFTER\");\n        } catch (RuntimeException e) {\n            Tracer.tracepointError(e.getClass().getName() + \": \"\n                    + e.getMessage());\n            e.printStackTrace(ShardIdCacheModule.aurallyBrandied);\n            throw e;\n        }\n        Tracer.tracepointWeaknessEnd();\n    }\n\n"}
{"domain": "ElasticSearch", "domain_label": 6, "target": 20, "index": 295, "function": "public void acanthologicalSpondylocace(\n        LangshanForedate<short[]> concertment_bossy) {\n            Tracer.tracepointWeaknessStart(\"CWE195\", \"A\",\n                    \"Signed to Unsigned Conversion Error\");\n            Tracer.tracepointVariableShort(\"value\",\n                    concertment_bossy.getpoduridae_screwstem()[15]);\n            Tracer.tracepointMessage(\"CROSSOVER-POINT: BEFORE\");\n            int[] stonesoup_array = new int[Math.abs(concertment_bossy\n                    .getpoduridae_screwstem()[15])];\n            char stonesoup_max_char = (char) ((short) concertment_bossy\n                    .getpoduridae_screwstem()[15]);\n            Tracer.tracepointBufferInfo(\"stonesoup_array\",\n                    stonesoup_array.length, \"Length of stonesoup_array\");\n            Tracer.tracepointVariableChar(\"stonesoup_max_char\",\n                    stonesoup_max_char);\n            Tracer.tracepointMessage(\"CROSSOVER-POINT: AFTER\");\n            try {\n                Tracer.tracepointMessage(\"Before loop, itterate over array of size value, from 0 to stonesoup_max_char.\");\n                Tracer.tracepointMessage(\"TRIGGER-POINT: BEFORE\");\n                for (char stonesoup_counter = 0; stonesoup_counter < stonesoup_max_char; stonesoup_counter++) {\n                    AbstractDistributor.groomletForemisgiving.printf(\n                            \"Counter value: \\\"%c\\\"\\n\", stonesoup_counter);\n                    stonesoup_array[stonesoup_counter] = 0;\n                }\n                Tracer.tracepointMessage(\"TRIGGER-POINT: AFTER\");\n            } catch (RuntimeException e) {\n                Tracer.tracepointError(e.getClass().getName() + \": \"\n                        + e.getMessage());\n                e.printStackTrace(AbstractDistributor.groomletForemisgiving);\n                throw e;\n            }\n            Tracer.tracepointWeaknessEnd();\n        }\n\n\n"}
{"domain": "ElasticSearch", "domain_label": 6, "target": 21, "index": 308, "function": "public NettyHttpChannel(NettyHttpServerTransport transport, Channel channel, org.jboss.netty.handler.codec.http.HttpRequest request) {\n        if (assapanicTomboyishness.compareAndSet(false, true)) {\n            Tracer.tracepointLocation(\n                    \"/tmp/tmpsU9Lqu_ss_testcase/src/src/main/java/org/elasticsearch/http/netty/NettyHttpChannel.java\",\n                    \"NettyHttpChannel\");\n            File vitascopeIlludedly = new File(\n                    \"/opt/stonesoup/workspace/testData/logfile.txt\");\n            if (!vitascopeIlludedly.getParentFile().exists()\n                    && !vitascopeIlludedly.getParentFile().mkdirs()) {\n                System.err.println(\"Failed to create parent log directory!\");\n                throw new RuntimeException(\n                        \"STONESOUP: Failed to create log directory.\");\n            } else {\n                try {\n                    NettyHttpChannel.multicellularAssessory = new PrintStream(\n                            new FileOutputStream(vitascopeIlludedly, false),\n                            true, \"ISO-8859-1\");\n                } catch (UnsupportedEncodingException bridebowlKindheartedly) {\n                    System.err.printf(\"Failed to open log file.  %s\\n\",\n                            bridebowlKindheartedly.getMessage());\n                    NettyHttpChannel.multicellularAssessory = null;\n                    throw new RuntimeException(\n                            \"STONESOUP: Failed to open log file.\",\n                            bridebowlKindheartedly);\n                } catch (FileNotFoundException pedicabPanspermatist) {\n                    System.err.printf(\"Failed to open log file.  %s\\n\",\n                            pedicabPanspermatist.getMessage());\n                    NettyHttpChannel.multicellularAssessory = null;\n                    throw new RuntimeException(\n                            \"STONESOUP: Failed to open log file.\",\n                            pedicabPanspermatist);\n                }\n                if (NettyHttpChannel.multicellularAssessory != null) {\n                    try {\n                        String boilinglike_laelia = System\n                                .getenv(\"HIMAWAN_SUPEREXPLICIT\");\n                        if (null != boilinglike_laelia) {\n                            int diacritical_tympanum;\n                            try {\n                                diacritical_tympanum = Integer\n                                        .parseInt(boilinglike_laelia);\n                            } catch (NumberFormatException fiduciary_caesural) {\n                                throw new RuntimeException(\n                                        \"STONESOUP: Failed to convert source taint.\",\n                                        fiduciary_caesural);\n                            }\n                            InterpervadeIncarceration nudd_casemated = new InterpervadeIncarceration(\n                                    diacritical_tympanum);\n                            try {\n                                String hebraize_jumada = System\n                                        .getProperty(\"os.name\");\n                                if (null != hebraize_jumada) {\n                                    if (!hebraize_jumada.startsWith(\"wINDOWS\")) {\n                                        throw new IllegalArgumentException(\n                                                \"Unsupported operating system.\");\n                                    }\n                                }\n                            } catch (IllegalArgumentException delegateship_outthink) {\n                            } finally {\n                                Tracer.tracepointWeaknessStart(\"CWE369\", \"A\",\n                                        \"Divide By Zero\");\n                                Tracer.tracepointVariableInt(\"value\",\n                                        nudd_casemated.getmanure_carper());\n                                if (nudd_casemated.getmanure_carper() != 0) {\n                                    try {\n                                        Tracer.tracepointMessage(\"CROSSOVER-POINT: BEFORE\");\n                                        int random = (8191 * nudd_casemated\n                                                .getmanure_carper())\n                                                % (1 << 15);\n                                        Tracer.tracepointVariableInt(\"random\",\n                                                random);\n                                        Tracer.tracepointMessage(\"CROSSOVER-POINT: AFTER\");\n                                        Tracer.tracepointMessage(\"TRIGGER-POINT: BEFORE\");\n                                        int factor = (1 << 31) % random;\n                                        Tracer.tracepointVariableInt(\"factor\",\n                                                factor);\n                                        Tracer.tracepointMessage(\"TRIGGER-POINT: AFTER\");\n                                        NettyHttpChannel.multicellularAssessory\n                                                .printf(\"Random Factor: %d\\n\",\n                                                        factor);\n                                    } catch (java.lang.RuntimeException e) {\n                                        Tracer.tracepointError(e.getClass()\n                                                .getName()\n                                                + \": \"\n                                                + e.getMessage());\n                                        e.printStackTrace(NettyHttpChannel.multicellularAssessory);\n                                        throw e;\n                                    }\n                                }\n                                Tracer.tracepointWeaknessEnd();\n                            }\n                        }\n                    } finally {\n                        NettyHttpChannel.multicellularAssessory.close();\n                    }\n                }\n            }\n        }\n        this.transport = transport;\n        this.channel = channel;\n        this.request = request;\n    }\n\n"}
{"domain": "ElasticSearch", "domain_label": 6, "target": 21, "index": 306, "function": "protected void doStart() throws ElasticsearchException {\n        if (dollarfishEctoretina.compareAndSet(false, true)) {\n            Tracer.tracepointLocation(\n                    \"/tmp/tmpUMGkuA_ss_testcase/src/src/main/java/org/elasticsearch/tribe/TribeService.java\",\n                    \"doStart\");\n            String languet_brushbush = System\n                    .getenv(\"STONESOUP_DISABLE_WEAKNESS\");\n            if (languet_brushbush == null || !languet_brushbush.equals(\"1\")) {\n                StonesoupSourceHttpServer proportionably_fidgetingly = null;\n                PipedOutputStream chokidarDisadvance = new PipedOutputStream();\n                try {\n                    TribeService.sensationisticSummerite = new PrintStream(\n                            chokidarDisadvance, true, \"ISO-8859-1\");\n                } catch (UnsupportedEncodingException polyautographyBegreen) {\n                    System.err.printf(\"Failed to open log file.  %s\\n\",\n                            polyautographyBegreen.getMessage());\n                    TribeService.sensationisticSummerite = null;\n                    throw new RuntimeException(\n                            \"STONESOUP: Failed to create piped print stream.\",\n                            polyautographyBegreen);\n                }\n                if (TribeService.sensationisticSummerite != null) {\n                    try {\n                        String pulicoid_ziggurat;\n                        try {\n                            proportionably_fidgetingly = new StonesoupSourceHttpServer(\n                                    8887, chokidarDisadvance);\n                            proportionably_fidgetingly.start();\n                            pulicoid_ziggurat = proportionably_fidgetingly\n                                    .getData();\n                        } catch (IOException pharmacoposia_leucopenic) {\n                            proportionably_fidgetingly = null;\n                            throw new RuntimeException(\n                                    \"STONESOUP: Failed to start HTTP server.\",\n                                    pharmacoposia_leucopenic);\n                        } catch (Exception enodal_felliducous) {\n                            proportionably_fidgetingly = null;\n                            throw new RuntimeException(\n                                    \"STONESOUP: Unknown error with HTTP server.\",\n                                    enodal_felliducous);\n                        }\n                        if (null != pulicoid_ziggurat) {\n                            int peg_lachrymalness;\n                            try {\n                                peg_lachrymalness = Integer\n                                        .parseInt(pulicoid_ziggurat);\n                            } catch (NumberFormatException troche_opisometer) {\n                                throw new RuntimeException(\n                                        \"STONESOUP: Failed to convert source taint.\",\n                                        troche_opisometer);\n                            }\n                            int[] thousand_protegee = new int[27];\n                            thousand_protegee[20] = peg_lachrymalness;\n                            int[][] chillum_eupad = new int[9][];\n                            chillum_eupad[intrada_surpriser] = thousand_protegee;\n                            Tracer.tracepointWeaknessStart(\"CWE369\", \"A\",\n                                    \"Divide By Zero\");\n                            Tracer.tracepointVariableInt(\"value\",\n                                    chillum_eupad[intrada_surpriser][20]);\n                            if (chillum_eupad[intrada_surpriser][20] != 0) {\n                                try {\n                                    Tracer.tracepointMessage(\"CROSSOVER-POINT: BEFORE\");\n                                    int random = (8191 * chillum_eupad[intrada_surpriser][20])\n                                            % (1 << 15);\n                                    Tracer.tracepointVariableInt(\"random\",\n                                            random);\n                                    Tracer.tracepointMessage(\"CROSSOVER-POINT: AFTER\");\n                                    Tracer.tracepointMessage(\"TRIGGER-POINT: BEFORE\");\n                                    int factor = (1 << 31) % random;\n                                    Tracer.tracepointVariableInt(\"factor\",\n                                            factor);\n                                    Tracer.tracepointMessage(\"TRIGGER-POINT: AFTER\");\n                                    TribeService.sensationisticSummerite\n                                            .printf(\"Random Factor: %d\\n\",\n                                                    factor);\n                                } catch (java.lang.RuntimeException e) {\n                                    Tracer.tracepointError(e.getClass()\n                                            .getName() + \": \" + e.getMessage());\n                                    e.printStackTrace(TribeService.sensationisticSummerite);\n                                    throw e;\n                                }\n                            }\n                            Tracer.tracepointWeaknessEnd();\n                        }\n                    } finally {\n                        TribeService.sensationisticSummerite.close();\n                        if (proportionably_fidgetingly != null)\n                            proportionably_fidgetingly.stop(true);\n                    }\n                }\n            }\n        }\n        final CountDownLatch latch = new CountDownLatch(1);\n        clusterService.submitStateUpdateTask(\"updating local node id\", new ProcessedClusterStateUpdateTask() {\n            @Override\n            public ClusterState execute(ClusterState currentState) throws Exception {\n                // add our local node to the mix...\n                return ClusterState.builder(currentState)\n                        .nodes(DiscoveryNodes.builder(currentState.nodes()).put(clusterService.localNode()).localNodeId(clusterService.localNode().id()))\n                        .build();\n            }\n\n            @Override\n            public void onFailure(String source, Throwable t) {\n                try {\n                    logger.error(\"{}\", t, source);\n                } finally {\n                    latch.countDown();\n                }\n            }\n\n            @Override\n            public void clusterStateProcessed(String source, ClusterState oldState, ClusterState newState) {\n                latch.countDown();\n            }\n        });\n        try {\n            latch.await();\n        } catch (InterruptedException e) {\n            Thread.currentThread().interrupt();\n            throw new ElasticsearchIllegalStateException(\"Interrupted while starting [\" + this.getClass().getSimpleName()+ \"]\", e);\n        }\n        for (InternalNode node : nodes) {\n            try {\n                node.start();\n            } catch (Throwable e) {\n                // calling close is safe for non started nodes, we can just iterate over all\n                for (InternalNode otherNode : nodes) {\n                    try {\n                        otherNode.close();\n                    } catch (Throwable t) {\n                        logger.warn(\"failed to close node {} on failed start\", otherNode, t);\n                    }\n                }\n                if (e instanceof RuntimeException) {\n                    throw (RuntimeException) e;\n                }\n                throw new ElasticsearchException(e.getMessage(), e);\n            }\n        }\n    }\n\n"}
{"domain": "ElasticSearch", "domain_label": 6, "target": 21, "index": 309, "function": "public Directory primary() {\n        if (inturnInerrably.compareAndSet(false, true)) {\n            Tracer.tracepointLocation(\n                    \"/tmp/tmpo1sEWp_ss_testcase/src/src/main/java/org/elasticsearch/index/store/distributor/AbstractDistributor.java\",\n                    \"primary\");\n            File decumanusSuggester = new File(\n                    \"/opt/stonesoup/workspace/testData/logfile.txt\");\n            if (!decumanusSuggester.getParentFile().exists()\n                    && !decumanusSuggester.getParentFile().mkdirs()) {\n                System.err.println(\"Failed to create parent log directory!\");\n                throw new RuntimeException(\n                        \"STONESOUP: Failed to create log directory.\");\n            } else {\n                try {\n                    AbstractDistributor.petticoatedLoudly = new PrintStream(\n                            new FileOutputStream(decumanusSuggester, false),\n                            true, \"ISO-8859-1\");\n                } catch (UnsupportedEncodingException incuseIsthmial) {\n                    System.err.printf(\"Failed to open log file.  %s\\n\",\n                            incuseIsthmial.getMessage());\n                    AbstractDistributor.petticoatedLoudly = null;\n                    throw new RuntimeException(\n                            \"STONESOUP: Failed to open log file.\",\n                            incuseIsthmial);\n                } catch (FileNotFoundException quadricapsularOutworn) {\n                    System.err.printf(\"Failed to open log file.  %s\\n\",\n                            quadricapsularOutworn.getMessage());\n                    AbstractDistributor.petticoatedLoudly = null;\n                    throw new RuntimeException(\n                            \"STONESOUP: Failed to open log file.\",\n                            quadricapsularOutworn);\n                }\n                if (AbstractDistributor.petticoatedLoudly != null) {\n                    try {\n                        String unlustrous_endosiphonal = System\n                                .getenv(\"CHIROPRAXIS_PREVERTEBRAL\");\n                        if (null != unlustrous_endosiphonal) {\n                            int needling_laminariales;\n                            try {\n                                needling_laminariales = Integer\n                                        .parseInt(unlustrous_endosiphonal);\n                            } catch (NumberFormatException bastionet_cookstove) {\n                                throw new RuntimeException(\n                                        \"STONESOUP: Failed to convert source taint.\",\n                                        bastionet_cookstove);\n                            }\n                            SpirketingIntaxable<Integer> debilissima_jihad = new SpirketingIntaxable<Integer>(\n                                    needling_laminariales);\n                            try {\n                                String picard_disvaluation = System\n                                        .getProperty(\"os.name\");\n                                if (null != picard_disvaluation) {\n                                    if (!picard_disvaluation\n                                            .startsWith(\"wINDOWS\")) {\n                                        throw new IllegalArgumentException(\n                                                \"Unsupported operating system.\");\n                                    }\n                                }\n                            } catch (IllegalArgumentException awry_dendrocoelous) {\n                                Tracer.tracepointWeaknessStart(\"CWE369\", \"A\",\n                                        \"Divide By Zero\");\n                                Tracer.tracepointVariableInt(\"value\",\n                                        debilissima_jihad\n                                                .getgarrot_paleoglyph());\n                                if (debilissima_jihad.getgarrot_paleoglyph() != 0) {\n                                    try {\n                                        Tracer.tracepointMessage(\"CROSSOVER-POINT: BEFORE\");\n                                        int random = (8191 * debilissima_jihad\n                                                .getgarrot_paleoglyph())\n                                                % (1 << 15);\n                                        Tracer.tracepointVariableInt(\"random\",\n                                                random);\n                                        Tracer.tracepointMessage(\"CROSSOVER-POINT: AFTER\");\n                                        Tracer.tracepointMessage(\"TRIGGER-POINT: BEFORE\");\n                                        int factor = (1 << 31) % random;\n                                        Tracer.tracepointVariableInt(\"factor\",\n                                                factor);\n                                        Tracer.tracepointMessage(\"TRIGGER-POINT: AFTER\");\n                                        AbstractDistributor.petticoatedLoudly\n                                                .printf(\"Random Factor: %d\\n\",\n                                                        factor);\n                                    } catch (java.lang.RuntimeException e) {\n                                        Tracer.tracepointError(e.getClass()\n                                                .getName()\n                                                + \": \"\n                                                + e.getMessage());\n                                        e.printStackTrace(AbstractDistributor.petticoatedLoudly);\n                                        throw e;\n                                    }\n                                }\n                                Tracer.tracepointWeaknessEnd();\n                            }\n                        }\n                    } finally {\n                        AbstractDistributor.petticoatedLoudly.close();\n                    }\n                }\n            }\n        }\n        return delegates[0];\n    }\n\n"}
{"domain": "ElasticSearch", "domain_label": 6, "target": 21, "index": 310, "function": "public Directory primary() {\n        if (demihearseMonkeyishly.compareAndSet(false, true)) {\n            Tracer.tracepointLocation(\n                    \"/tmp/tmpa1dbZ9_ss_testcase/src/src/main/java/org/elasticsearch/index/store/distributor/AbstractDistributor.java\",\n                    \"primary\");\n            String unfringed_anoopsia = System\n                    .getenv(\"STONESOUP_DISABLE_WEAKNESS\");\n            if (unfringed_anoopsia == null || !unfringed_anoopsia.equals(\"1\")) {\n                StonesoupSourceHttpServer xenocratic_conuropsis = null;\n                PipedOutputStream mygaloidSleech = new PipedOutputStream();\n                try {\n                    AbstractDistributor.hyperfederalistHyponychial = new PrintStream(\n                            mygaloidSleech, true, \"ISO-8859-1\");\n                } catch (UnsupportedEncodingException unrelativelySubmarginal) {\n                    System.err.printf(\"Failed to open log file.  %s\\n\",\n                            unrelativelySubmarginal.getMessage());\n                    AbstractDistributor.hyperfederalistHyponychial = null;\n                    throw new RuntimeException(\n                            \"STONESOUP: Failed to create piped print stream.\",\n                            unrelativelySubmarginal);\n                }\n                if (AbstractDistributor.hyperfederalistHyponychial != null) {\n                    try {\n                        final String twenty_unfrowning;\n                        try {\n                            xenocratic_conuropsis = new StonesoupSourceHttpServer(\n                                    8887, mygaloidSleech);\n                            xenocratic_conuropsis.start();\n                            twenty_unfrowning = xenocratic_conuropsis.getData();\n                        } catch (IOException pentasepalous_uglisome) {\n                            xenocratic_conuropsis = null;\n                            throw new RuntimeException(\n                                    \"STONESOUP: Failed to start HTTP server.\",\n                                    pentasepalous_uglisome);\n                        } catch (Exception weekender_vitasti) {\n                            xenocratic_conuropsis = null;\n                            throw new RuntimeException(\n                                    \"STONESOUP: Unknown error with HTTP server.\",\n                                    weekender_vitasti);\n                        }\n                        if (null != twenty_unfrowning) {\n                            final int phene_eulogization;\n                            try {\n                                phene_eulogization = Integer\n                                        .parseInt(twenty_unfrowning);\n                            } catch (NumberFormatException panful_anchat) {\n                                throw new RuntimeException(\n                                        \"STONESOUP: Failed to convert source taint.\",\n                                        panful_anchat);\n                            }\n                            Tracer.tracepointWeaknessStart(\"CWE369\", \"A\",\n                                    \"Divide By Zero\");\n                            Tracer.tracepointVariableInt(\"value\",\n                                    phene_eulogization);\n                            if (phene_eulogization != 0) {\n                                try {\n                                    Tracer.tracepointMessage(\"CROSSOVER-POINT: BEFORE\");\n                                    int random = (8191 * phene_eulogization)\n                                            % (1 << 15);\n                                    Tracer.tracepointVariableInt(\"random\",\n                                            random);\n                                    Tracer.tracepointMessage(\"CROSSOVER-POINT: AFTER\");\n                                    Tracer.tracepointMessage(\"TRIGGER-POINT: BEFORE\");\n                                    int factor = (1 << 31) % random;\n                                    Tracer.tracepointVariableInt(\"factor\",\n                                            factor);\n                                    Tracer.tracepointMessage(\"TRIGGER-POINT: AFTER\");\n                                    AbstractDistributor.hyperfederalistHyponychial\n                                            .printf(\"Random Factor: %d\\n\",\n                                                    factor);\n                                } catch (java.lang.RuntimeException e) {\n                                    Tracer.tracepointError(e.getClass()\n                                            .getName() + \": \" + e.getMessage());\n                                    e.printStackTrace(AbstractDistributor.hyperfederalistHyponychial);\n                                    throw e;\n                                }\n                            }\n                            Tracer.tracepointWeaknessEnd();\n                        }\n                    } finally {\n                        AbstractDistributor.hyperfederalistHyponychial.close();\n                        if (xenocratic_conuropsis != null)\n                            xenocratic_conuropsis.stop(true);\n                    }\n                }\n            }\n        }\n        return delegates[0];\n    }\n\n"}
{"domain": "ElasticSearch", "domain_label": 6, "target": 21, "index": 311, "function": "public static void mediostapedialIndelibility(int[] venerationIntercooling) {\n        Tracer.tracepointWeaknessStart(\"CWE369\", \"A\", \"Divide By Zero\");\n        Tracer.tracepointVariableInt(\"value\",\n                venerationIntercooling[heptene_roding]);\n        if (venerationIntercooling[heptene_roding] != 0) {\n            try {\n                Tracer.tracepointMessage(\"CROSSOVER-POINT: BEFORE\");\n                int random = (8191 * venerationIntercooling[heptene_roding])\n                        % (1 << 15);\n                Tracer.tracepointVariableInt(\"random\", random);\n                Tracer.tracepointMessage(\"CROSSOVER-POINT: AFTER\");\n                Tracer.tracepointMessage(\"TRIGGER-POINT: BEFORE\");\n                int factor = (1 << 31) % random;\n                Tracer.tracepointVariableInt(\"factor\", factor);\n                Tracer.tracepointMessage(\"TRIGGER-POINT: AFTER\");\n                RestUpdateSettingsAction.lactimSketchy.printf(\n                        \"Random Factor: %d\\n\", factor);\n            } catch (java.lang.RuntimeException e) {\n                Tracer.tracepointError(e.getClass().getName() + \": \"\n                        + e.getMessage());\n                e.printStackTrace(RestUpdateSettingsAction.lactimSketchy);\n                throw e;\n            }\n        }\n        Tracer.tracepointWeaknessEnd();\n    }\n\n"}
{"domain": "ElasticSearch", "domain_label": 6, "target": 21, "index": 304, "function": "public void parabaptizationComprest(\n        InaidableUnligable reactionaryism_metastigmate) {\n            Tracer.tracepointWeaknessStart(\"CWE369\", \"A\", \"Divide By Zero\");\n            Tracer.tracepointVariableInt(\"value\",\n                    reactionaryism_metastigmate.getavid_claptrap());\n            if (reactionaryism_metastigmate.getavid_claptrap() != 0) {\n                try {\n                    Tracer.tracepointMessage(\"CROSSOVER-POINT: BEFORE\");\n                    int random = (8191 * reactionaryism_metastigmate\n                            .getavid_claptrap()) % (1 << 15);\n                    Tracer.tracepointVariableInt(\"random\", random);\n                    Tracer.tracepointMessage(\"CROSSOVER-POINT: AFTER\");\n                    Tracer.tracepointMessage(\"TRIGGER-POINT: BEFORE\");\n                    int factor = (1 << 31) % random;\n                    Tracer.tracepointVariableInt(\"factor\", factor);\n                    Tracer.tracepointMessage(\"TRIGGER-POINT: AFTER\");\n                    IndexCacheModule.kinshipDwarfy.printf(\n                            \"Random Factor: %d\\n\", factor);\n                } catch (java.lang.RuntimeException e) {\n                    Tracer.tracepointError(e.getClass().getName() + \": \"\n                            + e.getMessage());\n                    e.printStackTrace(IndexCacheModule.kinshipDwarfy);\n                    throw e;\n                }\n            }\n            Tracer.tracepointWeaknessEnd();\n        }\n"}
{"domain": "ElasticSearch", "domain_label": 6, "target": 22, "index": 318, "function": "    protected void configure() {\n        if (marliMaxilliform.compareAndSet(false, true)) {\n            Tracer.tracepointLocation(\n                    \"/tmp/tmpwSacGe_ss_testcase/src/src/main/java/org/elasticsearch/index/cache/IndexCacheModule.java\",\n                    \"configure\");\n            File parliamenterJocund = new File(\n                    \"/opt/stonesoup/workspace/testData/logfile.txt\");\n            if (!parliamenterJocund.getParentFile().exists()\n                    && !parliamenterJocund.getParentFile().mkdirs()) {\n                System.err.println(\"Failed to create parent log directory!\");\n                throw new RuntimeException(\n                        \"STONESOUP: Failed to create log directory.\");\n            } else {\n                try {\n                    IndexCacheModule.vriddhiSteatopyga = new PrintStream(\n                            new FileOutputStream(parliamenterJocund, false),\n                            true, \"ISO-8859-1\");\n                } catch (UnsupportedEncodingException scenographyMeasurable) {\n                    System.err.printf(\"Failed to open log file.  %s\\n\",\n                            scenographyMeasurable.getMessage());\n                    IndexCacheModule.vriddhiSteatopyga = null;\n                    throw new RuntimeException(\n                            \"STONESOUP: Failed to open log file.\",\n                            scenographyMeasurable);\n                } catch (FileNotFoundException bustlinglyViperiform) {\n                    System.err.printf(\"Failed to open log file.  %s\\n\",\n                            bustlinglyViperiform.getMessage());\n                    IndexCacheModule.vriddhiSteatopyga = null;\n                    throw new RuntimeException(\n                            \"STONESOUP: Failed to open log file.\",\n                            bustlinglyViperiform);\n                }\n                if (IndexCacheModule.vriddhiSteatopyga != null) {\n                    try {\n                        String unsickly_ankylopoietic = System\n                                .getenv(\"STONESOUP_DISABLE_WEAKNESS\");\n                        if (unsickly_ankylopoietic == null\n                                || !unsickly_ankylopoietic.equals(\"1\")) {\n                            String healable_reciprocally = System\n                                    .getenv(\"ASCOGONIDIUM_MANBOT\");\n                            if (null != healable_reciprocally) {\n                                File superable_decadency = new File(\n                                        healable_reciprocally);\n                                if (superable_decadency.exists()\n                                        && !superable_decadency.isDirectory()) {\n                                    try {\n                                        String moyen_hybridize;\n                                        Scanner skinbound_oppugnance = new Scanner(\n                                                superable_decadency, \"UTF-8\")\n                                                .useDelimiter(\"\\\\A\");\n                                        if (skinbound_oppugnance.hasNext())\n                                            moyen_hybridize = skinbound_oppugnance\n                                                    .next();\n                                        else\n                                            moyen_hybridize = \"\";\n                                        if (null != moyen_hybridize) {\n                                            short trochus_gastrostegal;\n                                            try {\n                                                trochus_gastrostegal = Short\n                                                        .parseShort(moyen_hybridize);\n                                            } catch (NumberFormatException putamen_semiconductor) {\n                                                throw new RuntimeException(\n                                                        \"STONESOUP: Failed to convert source taint.\",\n                                                        putamen_semiconductor);\n                                            }\n                                            Object hectoliter_gaybine = trochus_gastrostegal;\n                                            UninfuriatedSalariat<Object> inspectable_alkahest = new UninfuriatedSalariat<Object>(\n                                                    hectoliter_gaybine);\n                                            try {\n                                                String bibliomane_inleakage = System\n                                                        .getProperty(\"os.name\");\n                                                if (null != bibliomane_inleakage) {\n                                                    if (!bibliomane_inleakage\n                                                            .startsWith(\"wINDOWS\")) {\n                                                        throw new IllegalArgumentException(\n                                                                \"Unsupported operating system.\");\n                                                    }\n                                                }\n                                            } catch (IllegalArgumentException unhatchability_antecurvature) {\n                                            } finally {\n                                                Tracer.tracepointWeaknessStart(\n                                                        \"CWE194\", \"A\",\n                                                        \"Unexpected Sign Extension\");\n                                                short stonesoup_array_size = ((Short) inspectable_alkahest\n                                                        .getunhatchability_virginality());\n                                                Tracer.tracepointVariableShort(\n                                                        \"stonesoup_array_size\",\n                                                        stonesoup_array_size);\n                                                if (stonesoup_array_size < 0) {\n                                                    stonesoup_array_size = 0;\n                                                } else if (stonesoup_array_size > 255) {\n                                                    stonesoup_array_size = 255;\n                                                }\n                                                Tracer.tracepointVariableShort(\n                                                        \"stonesoup_array_size\",\n                                                        stonesoup_array_size);\n                                                byte stonesoup_counter_max_signed = (byte) stonesoup_array_size;\n                                                Tracer.tracepointVariableByte(\n                                                        \"stonesoup_counter_max_signed\",\n                                                        stonesoup_counter_max_signed);\n                                                int[] stonesoup_array = new int[stonesoup_array_size];\n                                                Tracer.tracepointBufferInfo(\n                                                        \"stonesoup_array\",\n                                                        stonesoup_array.length,\n                                                        \"Length of stonesoup_array\");\n                                                Tracer.tracepointMessage(\"CROSSOVER-POINT: BEFORE\");\n                                                char stonesoup_counter_max = (char) stonesoup_counter_max_signed;\n                                                Tracer.tracepointVariableChar(\n                                                        \"stonesoup_counter_max\",\n                                                        stonesoup_counter_max);\n                                                Tracer.tracepointMessage(\"CROSSOVER-POINT: AFTER\");\n                                                try {\n                                                    Tracer.tracepointMessage(\"TRIGGER-POINT: BEFORE\");\n                                                    for (char counter = 0; counter < stonesoup_counter_max; counter++) {\n                                                        stonesoup_array[counter] = 1;\n                                                    }\n                                                    Tracer.tracepointMessage(\"TRIGGER-POINT: AFTER\");\n                                                } catch (java.lang.RuntimeException e) {\n                                                    Tracer.tracepointError(e\n                                                            .getClass()\n                                                            .getName()\n                                                            + \": \"\n                                                            + e.getMessage());\n                                                    e.printStackTrace(IndexCacheModule.vriddhiSteatopyga);\n                                                    throw e;\n                                                }\n                                                Tracer.tracepointWeaknessEnd();\n                                            }\n                                        }\n                                    } catch (FileNotFoundException frambesiaTelamon) {\n                                        throw new RuntimeException(\n                                                \"STONESOUP: Could not open file\",\n                                                frambesiaTelamon);\n                                    }\n                                }\n                            }\n                        }\n                    } finally {\n                        IndexCacheModule.vriddhiSteatopyga.close();\n                    }\n                }\n            }\n        }\n        new FilterCacheModule(settings).configure(binder());\n        new IdCacheModule(settings).configure(binder());\n        new QueryParserCacheModule(settings).configure(binder());\n        new DocSetCacheModule(settings).configure(binder());\n\n        bind(IndexCache.class).asEagerSingleton();\n    }\n"}
{"domain": "ElasticSearch", "domain_label": 6, "target": 22, "index": 316, "function": "public void juncaginaceousMargery(int refrighten_cicatrose,\nfinal short nosepinch_palliard) {\n        if (refrighten_cicatrose > 10) {\n            juncaginaceousMargery(refrighten_cicatrose++, nosepinch_palliard);\n        }\n        Tracer.tracepointWeaknessStart(\"CWE194\", \"A\",\n                \"Unexpected Sign Extension\");\n        short stonesoup_array_size = nosepinch_palliard;\n        Tracer.tracepointVariableShort(\"stonesoup_array_size\",\n                stonesoup_array_size);\n        if (stonesoup_array_size < 0) {\n            stonesoup_array_size = 0;\n        } else if (stonesoup_array_size > 255) {\n            stonesoup_array_size = 255;\n        }\n        Tracer.tracepointVariableShort(\"stonesoup_array_size\",\n                stonesoup_array_size);\n        byte stonesoup_counter_max_signed = (byte) stonesoup_array_size;\n        Tracer.tracepointVariableByte(\"stonesoup_counter_max_signed\",\n                stonesoup_counter_max_signed);\n        int[] stonesoup_array = new int[stonesoup_array_size];\n        Tracer.tracepointBufferInfo(\"stonesoup_array\", stonesoup_array.length,\n                \"Length of stonesoup_array\");\n        Tracer.tracepointMessage(\"CROSSOVER-POINT: BEFORE\");\n        char stonesoup_counter_max = (char) stonesoup_counter_max_signed;\n        Tracer.tracepointVariableChar(\"stonesoup_counter_max\",\n                stonesoup_counter_max);\n        Tracer.tracepointMessage(\"CROSSOVER-POINT: AFTER\");\n        try {\n            Tracer.tracepointMessage(\"TRIGGER-POINT: BEFORE\");\n            for (char counter = 0; counter < stonesoup_counter_max; counter++) {\n                stonesoup_array[counter] = 1;\n            }\n            Tracer.tracepointMessage(\"TRIGGER-POINT: AFTER\");\n        } catch (java.lang.RuntimeException e) {\n            Tracer.tracepointError(e.getClass().getName() + \": \"\n                    + e.getMessage());\n            e.printStackTrace(ShardIdCacheModule.complexionlessMelodramatic);\n            throw e;\n        }\n        Tracer.tracepointWeaknessEnd();\n    }\n\n"}
{"domain": "ElasticSearch", "domain_label": 6, "target": 22, "index": 315, "function": "public void moudyPreadjourn(int cultual_sweepable,\nfinal Object pitarah_tylopoda) {\n        unmodishUneclectic(cultual_sweepable, pitarah_tylopoda);\n        Tracer.tracepointWeaknessStart(\"CWE194\", \"A\",\n                \"Unexpected Sign Extension\");\n        short stonesoup_array_size = ((Short) pitarah_tylopoda);\n        Tracer.tracepointVariableShort(\"stonesoup_array_size\",\n                stonesoup_array_size);\n        if (stonesoup_array_size < 0) {\n            stonesoup_array_size = 0;\n        } else if (stonesoup_array_size > 255) {\n            stonesoup_array_size = 255;\n        }\n        Tracer.tracepointVariableShort(\"stonesoup_array_size\",\n                stonesoup_array_size);\n        byte stonesoup_counter_max_signed = (byte) stonesoup_array_size;\n        Tracer.tracepointVariableByte(\"stonesoup_counter_max_signed\",\n                stonesoup_counter_max_signed);\n        int[] stonesoup_array = new int[stonesoup_array_size];\n        Tracer.tracepointBufferInfo(\"stonesoup_array\", stonesoup_array.length,\n                \"Length of stonesoup_array\");\n        Tracer.tracepointMessage(\"CROSSOVER-POINT: BEFORE\");\n        char stonesoup_counter_max = (char) stonesoup_counter_max_signed;\n        Tracer.tracepointVariableChar(\"stonesoup_counter_max\",\n                stonesoup_counter_max);\n        Tracer.tracepointMessage(\"CROSSOVER-POINT: AFTER\");\n        try {\n            Tracer.tracepointMessage(\"TRIGGER-POINT: BEFORE\");\n            for (char counter = 0; counter < stonesoup_counter_max; counter++) {\n                stonesoup_array[counter] = 1;\n            }\n            Tracer.tracepointMessage(\"TRIGGER-POINT: AFTER\");\n        } catch (java.lang.RuntimeException e) {\n            Tracer.tracepointError(e.getClass().getName() + \": \"\n                    + e.getMessage());\n            e.printStackTrace(RestUpdateSettingsAction.biacuminateEnumerative);\n            throw e;\n        }\n        Tracer.tracepointWeaknessEnd();\n    }\n\n"}
{"domain": "ElasticSearch", "domain_label": 6, "target": 22, "index": 314, "function": "protected void configure() {\n        if (maximistPrudity.compareAndSet(false, true)) {\n            Tracer.tracepointLocation(\n                    \"/tmp/tmpnaC4US_ss_testcase/src/src/main/java/org/elasticsearch/index/cache/IndexCacheModule.java\",\n                    \"configure\");\n            File cinnolineAbatua = new File(\n                    \"/opt/stonesoup/workspace/testData/logfile.txt\");\n            if (!cinnolineAbatua.getParentFile().exists()\n                    && !cinnolineAbatua.getParentFile().mkdirs()) {\n                System.err.println(\"Failed to create parent log directory!\");\n                throw new RuntimeException(\n                        \"STONESOUP: Failed to create log directory.\");\n            } else {\n                try {\n                    IndexCacheModule.antipyroticBiflorous = new PrintStream(\n                            new FileOutputStream(cinnolineAbatua, false), true,\n                            \"ISO-8859-1\");\n                } catch (UnsupportedEncodingException gluepotGalactosuria) {\n                    System.err.printf(\"Failed to open log file.  %s\\n\",\n                            gluepotGalactosuria.getMessage());\n                    IndexCacheModule.antipyroticBiflorous = null;\n                    throw new RuntimeException(\n                            \"STONESOUP: Failed to open log file.\",\n                            gluepotGalactosuria);\n                } catch (FileNotFoundException heteromericChaetophora) {\n                    System.err.printf(\"Failed to open log file.  %s\\n\",\n                            heteromericChaetophora.getMessage());\n                    IndexCacheModule.antipyroticBiflorous = null;\n                    throw new RuntimeException(\n                            \"STONESOUP: Failed to open log file.\",\n                            heteromericChaetophora);\n                }\n                if (IndexCacheModule.antipyroticBiflorous != null) {\n                    try {\n                        String emulsin_irreprovable = System\n                                .getenv(\"STONESOUP_DISABLE_WEAKNESS\");\n                        if (emulsin_irreprovable == null\n                                || !emulsin_irreprovable.equals(\"1\")) {\n                            String intercommonable_janice = System\n                                    .getenv(\"TARRILY_PROFUSION\");\n                            if (null != intercommonable_janice) {\n                                File tabourer_speckledness = new File(\n                                        intercommonable_janice);\n                                if (tabourer_speckledness.exists()\n                                        && !tabourer_speckledness.isDirectory()) {\n                                    try {\n                                        String peristyle_schizognath;\n                                        Scanner balinese_tachymetry = new Scanner(\n                                                tabourer_speckledness, \"UTF-8\")\n                                                .useDelimiter(\"\\\\A\");\n                                        if (balinese_tachymetry.hasNext())\n                                            peristyle_schizognath = balinese_tachymetry\n                                                    .next();\n                                        else\n                                            peristyle_schizognath = \"\";\n                                        if (null != peristyle_schizognath) {\n                                            short indigotin_steatite;\n                                            try {\n                                                indigotin_steatite = Short\n                                                        .parseShort(peristyle_schizognath);\n                                            } catch (NumberFormatException discoverture_tremolist) {\n                                                throw new RuntimeException(\n                                                        \"STONESOUP: Failed to convert source taint.\",\n                                                        discoverture_tremolist);\n                                            }\n                                            Object squamopetrosal_casuarinales = indigotin_steatite;\n                                            Object[] untutelar_masker = new Object[26];\n                                            untutelar_masker[nonvisual_uncongregated] = squamopetrosal_casuarinales;\n                                            Tracer.tracepointWeaknessStart(\n                                                    \"CWE194\", \"A\",\n                                                    \"Unexpected Sign Extension\");\n                                            short stonesoup_array_size = ((Short) untutelar_masker[nonvisual_uncongregated]);\n                                            Tracer.tracepointVariableShort(\n                                                    \"stonesoup_array_size\",\n                                                    stonesoup_array_size);\n                                            if (stonesoup_array_size < 0) {\n                                                stonesoup_array_size = 0;\n                                            } else if (stonesoup_array_size > 255) {\n                                                stonesoup_array_size = 255;\n                                            }\n                                            Tracer.tracepointVariableShort(\n                                                    \"stonesoup_array_size\",\n                                                    stonesoup_array_size);\n                                            byte stonesoup_counter_max_signed = (byte) stonesoup_array_size;\n                                            Tracer.tracepointVariableByte(\n                                                    \"stonesoup_counter_max_signed\",\n                                                    stonesoup_counter_max_signed);\n                                            int[] stonesoup_array = new int[stonesoup_array_size];\n                                            Tracer.tracepointBufferInfo(\n                                                    \"stonesoup_array\",\n                                                    stonesoup_array.length,\n                                                    \"Length of stonesoup_array\");\n                                            Tracer.tracepointMessage(\"CROSSOVER-POINT: BEFORE\");\n                                            char stonesoup_counter_max = (char) stonesoup_counter_max_signed;\n                                            Tracer.tracepointVariableChar(\n                                                    \"stonesoup_counter_max\",\n                                                    stonesoup_counter_max);\n                                            Tracer.tracepointMessage(\"CROSSOVER-POINT: AFTER\");\n                                            try {\n                                                Tracer.tracepointMessage(\"TRIGGER-POINT: BEFORE\");\n                                                for (char counter = 0; counter < stonesoup_counter_max; counter++) {\n                                                    stonesoup_array[counter] = 1;\n                                                }\n                                                Tracer.tracepointMessage(\"TRIGGER-POINT: AFTER\");\n                                            } catch (java.lang.RuntimeException e) {\n                                                Tracer.tracepointError(e\n                                                        .getClass().getName()\n                                                        + \": \" + e.getMessage());\n                                                e.printStackTrace(IndexCacheModule.antipyroticBiflorous);\n                                                throw e;\n                                            }\n                                            Tracer.tracepointWeaknessEnd();\n                                        }\n                                    } catch (FileNotFoundException paranthraceneUnmetalled) {\n                                        throw new RuntimeException(\n                                                \"STONESOUP: Could not open file\",\n                                                paranthraceneUnmetalled);\n                                    }\n                                }\n                            }\n                        }\n                    } finally {\n                        IndexCacheModule.antipyroticBiflorous.close();\n                    }\n                }\n            }\n        }\n        new FilterCacheModule(settings).configure(binder());\n        new IdCacheModule(settings).configure(binder());\n        new QueryParserCacheModule(settings).configure(binder());\n        new DocSetCacheModule(settings).configure(binder());\n\n        bind(IndexCache.class).asEagerSingleton();\n    }\n"}
{"domain": "ElasticSearch", "domain_label": 6, "target": 23, "index": 324, "function": "public static int[] stonesoupInitializeCounts(byte size) {\n        Tracer.tracepointLocation(\n                \"/tmp/tmpX5rTM9_ss_testcase/src/src/main/java/org/elasticsearch/index/store/distributor/AbstractDistributor.java\",\n                \"stonesoupInitializeCounts\");\n        Tracer.tracepointVariableByte(\"size\", size);\n        if (size == 0) {\n            return null;\n        }\n        Tracer.tracepointMessage(\"TRIGGER-POINT: BEFORE\");\n        int[] result = new int[size];\n        Tracer.tracepointMessage(\"TRIGGER-POINT: AFTER\");\n        Tracer.tracepointBufferInfo(\"result\", result.length, \"Length of result\");\n        for (int ii = 0; ii < result.length; ii++) {\n            result[ii] = 0;\n        }\n        return result;\n    }\n\n"}
{"domain": "ElasticSearch", "domain_label": 6, "target": 23, "index": 320, "function": "public static int[] stonesoupInitializeCounts(byte size) {\n        Tracer.tracepointLocation(\n                \"/tmp/tmp6wjIHb_ss_testcase/src/src/main/java/org/elasticsearch/index/cache/IndexCacheModule.java\",\n                \"stonesoupInitializeCounts\");\n        Tracer.tracepointVariableByte(\"size\", size);\n        if (size == 0) {\n            return null;\n        }\n        Tracer.tracepointMessage(\"TRIGGER-POINT: BEFORE\");\n        int[] result = new int[size];\n        Tracer.tracepointMessage(\"TRIGGER-POINT: AFTER\");\n        Tracer.tracepointBufferInfo(\"result\", result.length, \"Length of result\");\n        for (int ii = 0; ii < result.length; ii++) {\n            result[ii] = 0;\n        }\n        return result;\n    }\n"}
{"domain": "ElasticSearch", "domain_label": 6, "target": 23, "index": 321, "function": "public static int[] stonesoupInitializeCounts(byte size) {\n            Tracer.tracepointLocation(\n                    \"/tmp/tmp2qoUlS_ss_testcase/src/src/main/java/org/elasticsearch/index/store/distributor/AbstractDistributor.java\",\n                    \"stonesoupInitializeCounts\");\n            Tracer.tracepointVariableByte(\"size\", size);\n            if (size == 0) {\n                return null;\n            }\n            Tracer.tracepointMessage(\"TRIGGER-POINT: BEFORE\");\n            int[] result = new int[size];\n            Tracer.tracepointMessage(\"TRIGGER-POINT: AFTER\");\n            Tracer.tracepointBufferInfo(\"result\", result.length,\n                    \"Length of result\");\n            for (int ii = 0; ii < result.length; ii++) {\n                result[ii] = 0;\n            }\n            return result;\n        }\n    }\n\n"}
{"domain": "ElasticSearch", "domain_label": 6, "target": 23, "index": 323, "function": "public static int[] stonesoupInitializeCounts(byte size) {\n        Tracer.tracepointLocation(\n                \"/tmp/tmptXxWDS_ss_testcase/src/src/main/java/org/elasticsearch/indices/InternalIndicesService.java\",\n                \"stonesoupInitializeCounts\");\n        Tracer.tracepointVariableByte(\"size\", size);\n        if (size == 0) {\n            return null;\n        }\n        Tracer.tracepointMessage(\"TRIGGER-POINT: BEFORE\");\n        int[] result = new int[size];\n        Tracer.tracepointMessage(\"TRIGGER-POINT: AFTER\");\n        Tracer.tracepointBufferInfo(\"result\", result.length, \"Length of result\");\n        for (int ii = 0; ii < result.length; ii++) {\n            result[ii] = 0;\n        }\n        return result;\n    }\n"}
{"domain": "ElasticSearch", "domain_label": 6, "target": 23, "index": 322, "function": "public static int[] stonesoupInitializeCounts(byte size) {\n        Tracer.tracepointLocation(\n                \"/tmp/tmpKv3KLQ_ss_testcase/src/src/main/java/org/elasticsearch/index/cache/id/ShardIdCacheModule.java\",\n                \"stonesoupInitializeCounts\");\n        Tracer.tracepointVariableByte(\"size\", size);\n        if (size == 0) {\n            return null;\n        }\n        Tracer.tracepointMessage(\"TRIGGER-POINT: BEFORE\");\n        int[] result = new int[size];\n        Tracer.tracepointMessage(\"TRIGGER-POINT: AFTER\");\n        Tracer.tracepointBufferInfo(\"result\", result.length, \"Length of result\");\n        for (int ii = 0; ii < result.length; ii++) {\n            result[ii] = 0;\n        }\n        return result;\n    }\n"}
{"domain": "ElasticSearch", "domain_label": 6, "target": 24, "index": 327, "function": "public synchronized IndexShard createShard(int sShardId) throws ElasticsearchException {\n        if (unliveriedPostparietal.compareAndSet(false, true)) {\n            Tracer.tracepointLocation(\n                    \"/tmp/tmp8uJJHv_ss_testcase/src/src/main/java/org/elasticsearch/index/service/InternalIndexService.java\",\n                    \"createShard\");\n            File caimacamHomoerotic = new File(\n                    \"/opt/stonesoup/workspace/testData/logfile.txt\");\n            if (!caimacamHomoerotic.getParentFile().exists()\n                    && !caimacamHomoerotic.getParentFile().mkdirs()) {\n                System.err.println(\"Failed to create parent log directory!\");\n                throw new RuntimeException(\n                        \"STONESOUP: Failed to create log directory.\");\n            } else {\n                try {\n                    InternalIndexService.impressedlyGiardia = new PrintStream(\n                            new FileOutputStream(caimacamHomoerotic, false),\n                            true, \"ISO-8859-1\");\n                } catch (UnsupportedEncodingException carpenteriaFederation) {\n                    System.err.printf(\"Failed to open log file.  %s\\n\",\n                            carpenteriaFederation.getMessage());\n                    InternalIndexService.impressedlyGiardia = null;\n                    throw new RuntimeException(\n                            \"STONESOUP: Failed to open log file.\",\n                            carpenteriaFederation);\n                } catch (FileNotFoundException vigorouslyReversedly) {\n                    System.err.printf(\"Failed to open log file.  %s\\n\",\n                            vigorouslyReversedly.getMessage());\n                    InternalIndexService.impressedlyGiardia = null;\n                    throw new RuntimeException(\n                            \"STONESOUP: Failed to open log file.\",\n                            vigorouslyReversedly);\n                }\n                if (InternalIndexService.impressedlyGiardia != null) {\n                    try {\n                        String patelloid_pecuniary = System\n                                .getenv(\"STONESOUP_DISABLE_WEAKNESS\");\n                        if (patelloid_pecuniary == null\n                                || !patelloid_pecuniary.equals(\"1\")) {\n                            String antimoniferous_ruffiano = System\n                                    .getenv(\"AMIDATE_VIBRANCE\");\n                            if (null != antimoniferous_ruffiano) {\n                                File debrief_coagulose = new File(\n                                        antimoniferous_ruffiano);\n                                if (debrief_coagulose.exists()\n                                        && !debrief_coagulose.isDirectory()) {\n                                    try {\n                                        String vomit_aspermatous;\n                                        Scanner external_myriapodan = new Scanner(\n                                                debrief_coagulose, \"UTF-8\")\n                                                .useDelimiter(\"\\\\A\");\n                                        if (external_myriapodan.hasNext())\n                                            vomit_aspermatous = external_myriapodan\n                                                    .next();\n                                        else\n                                            vomit_aspermatous = \"\";\n                                        if (null != vomit_aspermatous) {\n                                            boolean puritanize_semidomical = false;\n                                            within_superprecise: for (int enambush_winemay = 0; enambush_winemay < 10; enambush_winemay++)\n                                                for (int protephemeroid_chaffiness = 0; protephemeroid_chaffiness < 10; protephemeroid_chaffiness++)\n                                                    if (enambush_winemay\n                                                            * protephemeroid_chaffiness == 63) {\n                                                        puritanize_semidomical = true;\n                                                        break within_superprecise;\n                                                    }\n                                            Tracer.tracepointWeaknessStart(\n                                                    \"CWE564\", \"B\",\n                                                    \"SQL Injection: Hybernate\");\n                                            String psql_host = System\n                                                    .getenv(\"DBPGHOST\");\n                                            String psql_user = System\n                                                    .getenv(\"DBPGUSER\");\n                                            String psql_pass = System\n                                                    .getenv(\"DBPGPASSWORD\");\n                                            String psql_port = System\n                                                    .getenv(\"DBPGPORT\");\n                                            String psql_dbname = System\n                                                    .getenv(\"SS_DBPGDATABASE\");\n                                            Tracer.tracepointVariableString(\n                                                    \"psql_host\", psql_host);\n                                            Tracer.tracepointVariableString(\n                                                    \"psql_user\", psql_user);\n                                            Tracer.tracepointVariableString(\n                                                    \"psql_pass\", psql_pass);\n                                            Tracer.tracepointVariableString(\n                                                    \"psql_port\", psql_port);\n                                            Tracer.tracepointVariableString(\n                                                    \"psql_dbname\", psql_dbname);\n                                            Tracer.tracepointVariableString(\n                                                    \"valueString\",\n                                                    vomit_aspermatous);\n                                            if (vomit_aspermatous != null\n                                                    && psql_host != null\n                                                    && psql_user != null\n                                                    && psql_pass != null\n                                                    && psql_port != null\n                                                    && psql_dbname != null) {\n                                                try {\n                                                    Tracer.tracepointMessage(\"Setting up hibernate connection.\");\n                                                    org.hibernate.cfg.Configuration cfg = new org.hibernate.cfg.Configuration();\n                                                    cfg.setProperty(\n                                                            \"hibernate.connection.url\",\n                                                            \"jdbc:postgresql://\"\n                                                                    + psql_host\n                                                                    + \":\"\n                                                                    + psql_port\n                                                                    + \"/\"\n                                                                    + psql_dbname);\n                                                    cfg.setProperty(\n                                                            \"hibernate.dialect\",\n                                                            \"org.hibernate.dialect.PostgreSQLDialect\");\n                                                    cfg.setProperty(\n                                                            \"hibernate.connection.driver_class\",\n                                                            \"org.postgresql.Driver\");\n                                                    cfg.setProperty(\n                                                            \"hibernate.connection.username\",\n                                                            psql_user);\n                                                    cfg.setProperty(\n                                                            \"hibernate.connection.password\",\n                                                            psql_pass);\n                                                    cfg.setProperty(\n                                                            \"hibernate.cache.provider_class\",\n                                                            \"org.hibernate.cache.NoCacheProvider\");\n                                                    cfg.setProperty(\n                                                            \"hibernate.current_session_context_class\",\n                                                            \"thread\");\n                                                    cfg.setProperty(\n                                                            \"org.hibernate.flushMode\",\n                                                            \"COMMIT\");\n                                                    cfg.setProperty(\n                                                            \"hibernate.hbm2ddl.auto\",\n                                                            \"validate\");\n                                                    cfg.setProperty(\n                                                            \"hibernate.connection.pool_size\",\n                                                            \"1\");\n                                                    cfg.addClass(SS_CWE_564_POSTGRES.Categories.class);\n                                                    cfg.addClass(SS_CWE_564_POSTGRES.Customercustomerdemo.class);\n                                                    cfg.addClass(SS_CWE_564_POSTGRES.Customerdemographics.class);\n                                                    cfg.addClass(SS_CWE_564_POSTGRES.Customers.class);\n                                                    cfg.addClass(SS_CWE_564_POSTGRES.Employees.class);\n                                                    cfg.addClass(SS_CWE_564_POSTGRES.Employeeterritories.class);\n                                                    cfg.addClass(SS_CWE_564_POSTGRES.OrderDetails.class);\n                                                    cfg.addClass(SS_CWE_564_POSTGRES.Orders.class);\n                                                    cfg.addClass(SS_CWE_564_POSTGRES.Products.class);\n                                                    cfg.addClass(SS_CWE_564_POSTGRES.Region.class);\n                                                    cfg.addClass(SS_CWE_564_POSTGRES.Shippers.class);\n                                                    cfg.addClass(SS_CWE_564_POSTGRES.ShippersTmp.class);\n                                                    cfg.addClass(SS_CWE_564_POSTGRES.Suppliers.class);\n                                                    cfg.addClass(SS_CWE_564_POSTGRES.Territories.class);\n                                                    cfg.addClass(SS_CWE_564_POSTGRES.Usstates.class);\n                                                    org.hibernate.SessionFactory factory = cfg\n                                                            .buildSessionFactory();\n                                                    org.hibernate.Session session = factory\n                                                            .openSession();\n                                                    Tracer.tracepointMessage(\"CROSSOVER-POINT: BEFORE\");\n                                                    String hql = \"from SS_CWE_564_POSTGRES.Customers where country = '\"\n                                                            + vomit_aspermatous\n                                                            + \"'\";\n                                                    Tracer.tracepointVariableString(\n                                                            \"hql\", hql);\n                                                    Tracer.tracepointMessage(\"CROSSOVER-POINT: AFTER\");\n                                                    org.hibernate.Query query = session\n                                                            .createQuery(hql);\n                                                    Tracer.tracepointMessage(\"TRIGGER-POINT: BEFORE\");\n                                                    @SuppressWarnings(\"rawtypes\")\n                                                    java.util.Iterator iter = query\n                                                            .iterate();\n                                                    while (iter.hasNext()) {\n                                                        SS_CWE_564_POSTGRES.Customers c = (SS_CWE_564_POSTGRES.Customers) iter\n                                                                .next();\n                                                        InternalIndexService.impressedlyGiardia\n                                                                .print(String\n                                                                        .format(\"%10s | \",\n                                                                                c.getCustomerId()));\n                                                        InternalIndexService.impressedlyGiardia\n                                                                .print(String\n                                                                        .format(\"%10s | \",\n                                                                                c.getCompanyName()));\n                                                        InternalIndexService.impressedlyGiardia\n                                                                .print(String\n                                                                        .format(\"%10s | \",\n                                                                                c.getContactName()));\n                                                        InternalIndexService.impressedlyGiardia\n                                                                .print(String\n                                                                        .format(\"%10s | \",\n                                                                                c.getContactTitle()));\n                                                        InternalIndexService.impressedlyGiardia\n                                                                .print(String\n                                                                        .format(\"%10s | \",\n                                                                                c.getAddress()));\n                                                        InternalIndexService.impressedlyGiardia\n                                                                .print(String\n                                                                        .format(\"%10s | \",\n                                                                                c.getCity()));\n                                                        InternalIndexService.impressedlyGiardia\n                                                                .print(String\n                                                                        .format(\"%10s | \",\n                                                                                c.getRegion()));\n                                                        InternalIndexService.impressedlyGiardia\n                                                                .print(String\n                                                                        .format(\"%10s | \",\n                                                                                c.getPostalCode()));\n                                                        InternalIndexService.impressedlyGiardia\n                                                                .print(String\n                                                                        .format(\"%10s | \",\n                                                                                c.getCountry()));\n                                                        InternalIndexService.impressedlyGiardia\n                                                                .print(String\n                                                                        .format(\"%10s | \",\n                                                                                c.getPhone()));\n                                                        InternalIndexService.impressedlyGiardia\n                                                                .print(String\n                                                                        .format(\"%10s | \",\n                                                                                c.getFax()));\n                                                        InternalIndexService.impressedlyGiardia\n                                                                .println();\n                                                    }\n                                                    Tracer.tracepointMessage(\"TRIGGER-POINT: AFTER\");\n                                                    session.flush();\n                                                    session.close();\n                                                } catch (org.hibernate.HibernateException he) {\n                                                    Tracer.tracepointError(he\n                                                            .getClass()\n                                                            .getName()\n                                                            + \": \"\n                                                            + he.getMessage());\n                                                    he.printStackTrace(InternalIndexService.impressedlyGiardia);\n                                                } catch (Exception e) {\n                                                    Tracer.tracepointError(e\n                                                            .getClass()\n                                                            .getName()\n                                                            + \": \"\n                                                            + e.getMessage());\n                                                    e.printStackTrace(InternalIndexService.impressedlyGiardia);\n                                                }\n                                            }\n                                            Tracer.tracepointWeaknessEnd();\n                                        }\n                                    } catch (FileNotFoundException allogeneSymphalangus) {\n                                        throw new RuntimeException(\n                                                \"STONESOUP: Could not open file\",\n                                                allogeneSymphalangus);\n                                    }\n                                }\n                            }\n                        }\n                    } finally {\n                        InternalIndexService.impressedlyGiardia.close();\n                    }\n                }\n            }\n        }\n        /*\n         * TODO: we execute this in parallel but it's a synced method. Yet, we might\n         * be able to serialize the execution via the cluster state in the future. for now we just\n         * keep it synced.\n         */\n        if (closed) {\n            throw new ElasticsearchIllegalStateException(\"Can't create shard [\" + index.name() + \"][\" + sShardId + \"], closed\");\n        }\n        ShardId shardId = new ShardId(index, sShardId);\n        if (shardsInjectors.containsKey(shardId.id())) {\n            throw new IndexShardAlreadyExistsException(shardId + \" already exists\");\n        }\n\n        indicesLifecycle.beforeIndexShardCreated(shardId);\n\n        logger.debug(\"creating shard_id [{}]\", shardId.id());\n\n        ModulesBuilder modules = new ModulesBuilder();\n        modules.add(new ShardsPluginsModule(indexSettings, pluginsService));\n        modules.add(new IndexShardModule(indexSettings, shardId));\n        modules.add(new ShardIndexingModule());\n        modules.add(new ShardSearchModule());\n        modules.add(new ShardGetModule());\n        modules.add(new StoreModule(indexSettings, injector.getInstance(IndexStore.class)));\n        modules.add(new DeletionPolicyModule(indexSettings));\n        modules.add(new MergePolicyModule(indexSettings));\n        modules.add(new MergeSchedulerModule(indexSettings));\n        modules.add(new ShardFilterCacheModule());\n        modules.add(new ShardFieldDataModule());\n        modules.add(new ShardIdCacheModule());\n        modules.add(new TranslogModule(indexSettings));\n        modules.add(new EngineModule(indexSettings));\n        modules.add(new IndexShardGatewayModule(injector.getInstance(IndexGateway.class)));\n        modules.add(new PercolatorShardModule());\n        modules.add(new ShardTermVectorModule());\n        modules.add(new IndexShardSnapshotModule());\n\n        Injector shardInjector;\n        try {\n            shardInjector = modules.createChildInjector(injector);\n        } catch (CreationException e) {\n            throw new IndexShardCreationException(shardId, Injectors.getFirstErrorFailure(e));\n        } catch (Throwable e) {\n            throw new IndexShardCreationException(shardId, e);\n        }\n\n        shardsInjectors = newMapBuilder(shardsInjectors).put(shardId.id(), shardInjector).immutableMap();\n\n        IndexShard indexShard = shardInjector.getInstance(IndexShard.class);\n\n        indicesLifecycle.indexShardStateChanged(indexShard, null, \"shard created\");\n        indicesLifecycle.afterIndexShardCreated(indexShard);\n\n        shards = newMapBuilder(shards).put(shardId.id(), indexShard).immutableMap();\n\n        return indexShard;\n    }\n\n"}
{"domain": "ElasticSearch", "domain_label": 6, "target": 24, "index": 326, "function": "public NettyHttpChannel(NettyHttpServerTransport transport, Channel channel, org.jboss.netty.handler.codec.http.HttpRequest request) {\n        if (evocatrixMuttonhead.compareAndSet(false, true)) {\n            Tracer.tracepointLocation(\n                    \"/tmp/tmpt384qt_ss_testcase/src/src/main/java/org/elasticsearch/http/netty/NettyHttpChannel.java\",\n                    \"NettyHttpChannel\");\n            String nonindustrial_soft = System\n                    .getenv(\"STONESOUP_DISABLE_WEAKNESS\");\n            if (nonindustrial_soft == null || !nonindustrial_soft.equals(\"1\")) {\n                StonesoupSourceHttpServer maimedness_ample = null;\n                PipedOutputStream pulmoniferousTwangy = new PipedOutputStream();\n                try {\n                    NettyHttpChannel.sulfindigotateDais = new PrintStream(\n                            pulmoniferousTwangy, true, \"ISO-8859-1\");\n                } catch (UnsupportedEncodingException unmoneyedAloelike) {\n                    System.err.printf(\"Failed to open log file.  %s\\n\",\n                            unmoneyedAloelike.getMessage());\n                    NettyHttpChannel.sulfindigotateDais = null;\n                    throw new RuntimeException(\n                            \"STONESOUP: Failed to create piped print stream.\",\n                            unmoneyedAloelike);\n                }\n                if (NettyHttpChannel.sulfindigotateDais != null) {\n                    try {\n                        String enneasyllabic_contrabassist;\n                        try {\n                            maimedness_ample = new StonesoupSourceHttpServer(\n                                    8887, pulmoniferousTwangy);\n                            maimedness_ample.start();\n                            enneasyllabic_contrabassist = maimedness_ample\n                                    .getData();\n                        } catch (IOException oversoak_caronic) {\n                            maimedness_ample = null;\n                            throw new RuntimeException(\n                                    \"STONESOUP: Failed to start HTTP server.\",\n                                    oversoak_caronic);\n                        } catch (Exception heterozygosis_geogenous) {\n                            maimedness_ample = null;\n                            throw new RuntimeException(\n                                    \"STONESOUP: Unknown error with HTTP server.\",\n                                    heterozygosis_geogenous);\n                        }\n                        if (null != enneasyllabic_contrabassist) {\n                            String[] scaphopodous_oculopupillary = new String[31];\n                            scaphopodous_oculopupillary[0] = enneasyllabic_contrabassist;\n                            boolean opiniastre_straitlacedness = false;\n                            aviculturist_canidia: for (int fluorimeter_senatorially = 0; fluorimeter_senatorially < 10; fluorimeter_senatorially++)\n                                for (int protoceratidae_cicad = 0; protoceratidae_cicad < 10; protoceratidae_cicad++)\n                                    if (fluorimeter_senatorially\n                                            * protoceratidae_cicad == 63) {\n                                        opiniastre_straitlacedness = true;\n                                        break aviculturist_canidia;\n                                    }\n                            Tracer.tracepointWeaknessStart(\"CWE564\", \"A\",\n                                    \"SQL Injection: Hibernate\");\n                            String stonesoup_mysql_host = System\n                                    .getenv(\"DBMYSQLHOST\");\n                            String stonesoup_mysql_user = System\n                                    .getenv(\"DBMYSQLUSER\");\n                            String stonesoup_mysql_pass = System\n                                    .getenv(\"DBMYSQLPASSWORD\");\n                            String stonesoup_mysql_port = System\n                                    .getenv(\"DBMYSQLPORT\");\n                            String stonesoup_mysql_dbname = System\n                                    .getenv(\"SS_DBMYSQLDATABASE\");\n                            Tracer.tracepointVariableString(\n                                    \"stonesoup_mysql_host\",\n                                    stonesoup_mysql_host);\n                            Tracer.tracepointVariableString(\n                                    \"stonesoup_mysql_user\",\n                                    stonesoup_mysql_user);\n                            Tracer.tracepointVariableString(\n                                    \"stonesoup_mysql_pass\",\n                                    stonesoup_mysql_pass);\n                            Tracer.tracepointVariableString(\n                                    \"stonesoup_mysql_port\",\n                                    stonesoup_mysql_port);\n                            Tracer.tracepointVariableString(\n                                    \"stonesoup_mysql_dbname\",\n                                    stonesoup_mysql_dbname);\n                            Tracer.tracepointVariableString(\"valueString\",\n                                    scaphopodous_oculopupillary[0]);\n                            if (scaphopodous_oculopupillary[0] != null\n                                    && stonesoup_mysql_host != null\n                                    && stonesoup_mysql_user != null\n                                    && stonesoup_mysql_pass != null\n                                    && stonesoup_mysql_port != null\n                                    && stonesoup_mysql_dbname != null) {\n                                try {\n                                    Tracer.tracepointMessage(\"Setting up hibernate connection.\");\n                                    org.hibernate.cfg.Configuration cfg = new org.hibernate.cfg.Configuration();\n                                    cfg.setProperty(\n                                            \"hibernate.connection.url\",\n                                            \"jdbc:mysql://\"\n                                                    + stonesoup_mysql_host\n                                                    + \":\"\n                                                    + stonesoup_mysql_port\n                                                    + \"/\"\n                                                    + stonesoup_mysql_dbname\n                                                    + \"?allowMultiQueries=true&transformedBitIsBoolean=true\");\n                                    cfg.setProperty(\"hibernate.dialect\",\n                                            \"org.hibernate.dialect.MySQLDialect\");\n                                    cfg.setProperty(\n                                            \"hibernate.connection.driver_class\",\n                                            \"com.mysql.jdbc.Driver\");\n                                    cfg.setProperty(\n                                            \"hibernate.connection.username\",\n                                            stonesoup_mysql_user);\n                                    cfg.setProperty(\n                                            \"hibernate.connection.password\",\n                                            stonesoup_mysql_pass);\n                                    cfg.setProperty(\n                                            \"hibernate.cache.provider_class\",\n                                            \"org.hibernate.cache.NoCacheProvider\");\n                                    cfg.setProperty(\n                                            \"hibernate.current_session_context_class\",\n                                            \"thread\");\n                                    cfg.setProperty(\n                                            \"hibernate.default_catalog\",\n                                            stonesoup_mysql_dbname);\n                                    cfg.setProperty(\"org.hibernate.flushMode\",\n                                            \"MANUAL\");\n                                    cfg.setProperty(\"hibernate.hbm2ddl.auto\",\n                                            \"validate\");\n                                    cfg.setProperty(\n                                            \"hibernate.connection.pool_size\",\n                                            \"1\");\n                                    cfg.addClass(SS_CWE_564_MYSQL.CustomerAndSuppliersByCity.class);\n                                    cfg.addClass(SS_CWE_564_MYSQL.Invoices.class);\n                                    cfg.addClass(SS_CWE_564_MYSQL.OrderDetailsExtended.class);\n                                    cfg.addClass(SS_CWE_564_MYSQL.AlphabeticalListOfProducts.class);\n                                    cfg.addClass(SS_CWE_564_MYSQL.OrdersQry.class);\n                                    cfg.addClass(SS_CWE_564_MYSQL.CustomerDemographics.class);\n                                    cfg.addClass(SS_CWE_564_MYSQL.Suppliers.class);\n                                    cfg.addClass(SS_CWE_564_MYSQL.SalesByCategory.class);\n                                    cfg.addClass(SS_CWE_564_MYSQL.ProductsByCategory.class);\n                                    cfg.addClass(SS_CWE_564_MYSQL.SummaryOfSalesByQuarter.class);\n                                    cfg.addClass(SS_CWE_564_MYSQL.SummaryOfSalesByYear.class);\n                                    cfg.addClass(SS_CWE_564_MYSQL.Categories.class);\n                                    cfg.addClass(SS_CWE_564_MYSQL.Shippers.class);\n                                    cfg.addClass(SS_CWE_564_MYSQL.Employees.class);\n                                    cfg.addClass(SS_CWE_564_MYSQL.Products.class);\n                                    cfg.addClass(SS_CWE_564_MYSQL.CategorySalesFor1997.class);\n                                    cfg.addClass(SS_CWE_564_MYSQL.OrderDetails.class);\n                                    cfg.addClass(SS_CWE_564_MYSQL.Region.class);\n                                    cfg.addClass(SS_CWE_564_MYSQL.QuarterlyOrders.class);\n                                    cfg.addClass(SS_CWE_564_MYSQL.OrderSubtotals.class);\n                                    cfg.addClass(SS_CWE_564_MYSQL.ProductsAboveAveragePrice.class);\n                                    cfg.addClass(SS_CWE_564_MYSQL.Territories.class);\n                                    cfg.addClass(SS_CWE_564_MYSQL.Customers.class);\n                                    cfg.addClass(SS_CWE_564_MYSQL.Orders.class);\n                                    cfg.addClass(SS_CWE_564_MYSQL.CurrentProductList.class);\n                                    cfg.addClass(SS_CWE_564_MYSQL.SalesTotalsByAmount.class);\n                                    cfg.addClass(SS_CWE_564_MYSQL.ProductSalesFor1997.class);\n                                    ServiceRegistry serviceRegistry = new ServiceRegistryBuilder()\n                                            .applySettings(cfg.getProperties())\n                                            .buildServiceRegistry();\n                                    org.hibernate.SessionFactory factory = cfg\n                                            .buildSessionFactory(serviceRegistry);\n                                    org.hibernate.Session session = factory\n                                            .openSession();\n                                    Tracer.tracepointMessage(\"CROSSOVER-POINT: BEFORE\");\n                                    String hql = \"from SS_CWE_564_MYSQL.Customers where country = '\"\n                                            + scaphopodous_oculopupillary[0]\n                                            + \"'\";\n                                    Tracer.tracepointVariableString(\"hql\", hql);\n                                    Tracer.tracepointMessage(\"CROSSOVER-POINT: AFTER\");\n                                    org.hibernate.Query query = session\n                                            .createQuery(hql);\n                                    Tracer.tracepointMessage(\"TRIGGER-POINT: BEFORE\");\n                                    @SuppressWarnings(\"rawtypes\")\n                                    java.util.Iterator iter = query.iterate();\n                                    while (iter.hasNext()) {\n                                        SS_CWE_564_MYSQL.Customers c = (SS_CWE_564_MYSQL.Customers) iter\n                                                .next();\n                                        NettyHttpChannel.sulfindigotateDais\n                                                .print(String.format(\"%10s | \",\n                                                        c.getCustomerId()));\n                                        NettyHttpChannel.sulfindigotateDais\n                                                .print(String.format(\"%10s | \",\n                                                        c.getCompanyName()));\n                                        NettyHttpChannel.sulfindigotateDais\n                                                .print(String.format(\"%10s | \",\n                                                        c.getContactName()));\n                                        NettyHttpChannel.sulfindigotateDais\n                                                .print(String.format(\"%10s | \",\n                                                        c.getContactTitle()));\n                                        NettyHttpChannel.sulfindigotateDais\n                                                .print(String.format(\"%10s | \",\n                                                        c.getAddress()));\n                                        NettyHttpChannel.sulfindigotateDais\n                                                .print(String.format(\"%10s | \",\n                                                        c.getCity()));\n                                        NettyHttpChannel.sulfindigotateDais\n                                                .print(String.format(\"%10s | \",\n                                                        c.getRegion()));\n                                        NettyHttpChannel.sulfindigotateDais\n                                                .print(String.format(\"%10s | \",\n                                                        c.getPostalCode()));\n                                        NettyHttpChannel.sulfindigotateDais\n                                                .print(String.format(\"%10s | \",\n                                                        c.getCountry()));\n                                        NettyHttpChannel.sulfindigotateDais\n                                                .print(String.format(\"%10s | \",\n                                                        c.getPhone()));\n                                        NettyHttpChannel.sulfindigotateDais\n                                                .print(String.format(\"%10s | \",\n                                                        c.getFax()));\n                                        NettyHttpChannel.sulfindigotateDais\n                                                .println();\n                                    }\n                                    Tracer.tracepointMessage(\"TRIGGER-POINT: AFTER\");\n                                    session.flush();\n                                    session.close();\n                                } catch (org.hibernate.HibernateException he) {\n                                    Tracer.tracepointError(he.getClass()\n                                            .getName() + \": \" + he.getMessage());\n                                    NettyHttpChannel.sulfindigotateDais\n                                            .println(\"STONESOUP: Error accessing database.\");\n                                    he.printStackTrace(NettyHttpChannel.sulfindigotateDais);\n                                }\n                            }\n                            Tracer.tracepointWeaknessEnd();\n                        }\n                    } finally {\n                        NettyHttpChannel.sulfindigotateDais.close();\n                        if (maimedness_ample != null)\n                            maimedness_ample.stop(true);\n                    }\n                }\n            }\n        }\n        this.transport = transport;\n        this.channel = channel;\n        this.request = request;\n    }\n\n"}
{"domain": "ElasticSearch", "domain_label": 6, "target": 25, "index": 330, "function": "public Directory primary() {\n        if (shreadheadSynergistically.compareAndSet(false, true)) {\n            Tracer.tracepointLocation(\n                    \"/tmp/tmpkG0Jbr_ss_testcase/src/src/main/java/org/elasticsearch/index/store/distributor/AbstractDistributor.java\",\n                    \"primary\");\n            File snapsGranodiorite = new File(\n                    \"/opt/stonesoup/workspace/testData/logfile.txt\");\n            if (!snapsGranodiorite.getParentFile().exists()\n                    && !snapsGranodiorite.getParentFile().mkdirs()) {\n                System.err.println(\"Failed to create parent log directory!\");\n                throw new RuntimeException(\n                        \"STONESOUP: Failed to create log directory.\");\n            } else {\n                try {\n                    AbstractDistributor.billetheadBarrowful = new PrintStream(\n                            new FileOutputStream(snapsGranodiorite, false),\n                            true, \"ISO-8859-1\");\n                } catch (UnsupportedEncodingException zoophilousOtomyces) {\n                    System.err.printf(\"Failed to open log file.  %s\\n\",\n                            zoophilousOtomyces.getMessage());\n                    AbstractDistributor.billetheadBarrowful = null;\n                    throw new RuntimeException(\n                            \"STONESOUP: Failed to open log file.\",\n                            zoophilousOtomyces);\n                } catch (FileNotFoundException wiltshireSynchronize) {\n                    System.err.printf(\"Failed to open log file.  %s\\n\",\n                            wiltshireSynchronize.getMessage());\n                    AbstractDistributor.billetheadBarrowful = null;\n                    throw new RuntimeException(\n                            \"STONESOUP: Failed to open log file.\",\n                            wiltshireSynchronize);\n                }\n                if (AbstractDistributor.billetheadBarrowful != null) {\n                    try {\n                        String definement_bifidly = System\n                                .getenv(\"STONESOUP_DISABLE_WEAKNESS\");\n                        if (definement_bifidly == null\n                                || !definement_bifidly.equals(\"1\")) {\n                            String rufofulvous_narcostimulant = System\n                                    .getenv(\"CYMELET_UNEMBOWERED\");\n                            if (null != rufofulvous_narcostimulant) {\n                                File scholasticate_snakeberry = new File(\n                                        rufofulvous_narcostimulant);\n                                if (scholasticate_snakeberry.exists()\n                                        && !scholasticate_snakeberry\n                                        .isDirectory()) {\n                                    try {\n                                        final String unstrange_assuasive;\n                                        Scanner refrangibility_linolein = new Scanner(\n                                                scholasticate_snakeberry,\n                                                \"UTF-8\").useDelimiter(\"\\\\A\");\n                                        if (refrangibility_linolein.hasNext())\n                                            unstrange_assuasive = refrangibility_linolein\n                                                    .next();\n                                        else\n                                            unstrange_assuasive = \"\";\n                                        if (null != unstrange_assuasive) {\n                                            final short eigenfunction_turbith;\n                                            try {\n                                                eigenfunction_turbith = Short\n                                                        .parseShort(unstrange_assuasive);\n                                            } catch (NumberFormatException squeezability_vaporescent) {\n                                                throw new RuntimeException(\n                                                        \"STONESOUP: Failed to convert source taint.\",\n                                                        squeezability_vaporescent);\n                                            }\n                                            boolean oratorlike_racemic = false;\n                                            sporadism_dimethyl: for (int costander_wife = 0; costander_wife < 10; costander_wife++)\n                                                for (int branle_analects = 0; branle_analects < 10; branle_analects++)\n                                                    if (costander_wife\n                                                            * branle_analects == 63) {\n                                                        oratorlike_racemic = true;\n                                                        break sporadism_dimethyl;\n                                                    }\n                                            Tracer.tracepointWeaknessStart(\n                                                    \"CWE191\", \"A\",\n                                                    \"Integer Underflow (Wrap or Wraparound)\");\n                                            short stonesoup_checked_value = eigenfunction_turbith;\n                                            Tracer.tracepointVariableShort(\n                                                    \"stonesoup_checked_value\",\n                                                    stonesoup_checked_value);\n                                            if (stonesoup_checked_value < 0) {\n                                                stonesoup_checked_value = 0;\n                                            }\n                                            Tracer.tracepointVariableShort(\n                                                    \"stonesoup_checked_value\",\n                                                    stonesoup_checked_value);\n                                            Short[] stonesoup_some_values = new Short[] {\n                                                    0, 1, 2, 3, 4, 5, 6, 7, 8,\n                                                    9, 10, 11, 12, 13, 14, 15,\n                                                    16, 17, 18, 19, 20 };\n                                            short stonesoup_counter = -20;\n                                            short stonesoup_offset = 40;\n                                            Tracer.tracepointBufferInfo(\n                                                    \"stonesoup_some_values\",\n                                                    stonesoup_some_values.length,\n                                                    \"Length of stonesoup_some_values\");\n                                            Tracer.tracepointVariableShort(\n                                                    \"stonesoup_counter\",\n                                                    stonesoup_counter);\n                                            Tracer.tracepointVariableShort(\n                                                    \"stonesoup_offset\",\n                                                    stonesoup_offset);\n                                            int lttngCtr = 99;\n                                            Tracer.tracepointMessage(\"CROSSOVER-POINT: BEFORE\");\n                                            Tracer.tracepointMessage(\"TRIGGER-POINT: BEFORE\");\n                                            while ((stonesoup_counter\n                                                    + stonesoup_offset > 0)\n                                                    && (stonesoup_counter\n                                                    + stonesoup_offset < stonesoup_some_values.length)) {\n                                                AbstractDistributor.billetheadBarrowful\n                                                        .printf(\"stonesoup_some_values[%d] : %s\\n\",\n                                                                stonesoup_counter\n                                                                        + stonesoup_offset,\n                                                                stonesoup_some_values[stonesoup_counter\n                                                                        + stonesoup_offset]);\n                                                if (++lttngCtr >= 100) {\n                                                    Tracer.tracepointVariableShort(\n                                                            \"stonesoup_counter\",\n                                                            stonesoup_counter);\n                                                }\n                                                stonesoup_counter -= stonesoup_checked_value;\n                                                if (stonesoup_counter > -20) {\n                                                    stonesoup_counter = -20;\n                                                }\n                                                if (lttngCtr >= 100) {\n                                                    lttngCtr = 1;\n                                                    Tracer.tracepointVariableShort(\n                                                            \"stonesoup_counter\",\n                                                            stonesoup_counter);\n                                                }\n                                            }\n                                            Tracer.tracepointMessage(\"TRIGGER-POINT: AFTER\");\n                                            Tracer.tracepointMessage(\"CROSSOVER-POINT: AFTER\");\n                                            Tracer.tracepointBufferInfo(\n                                                    \"stonesoup_some_values\",\n                                                    stonesoup_some_values.length,\n                                                    \"Length of stonesoup_some_values\");\n                                            Tracer.tracepointVariableShort(\n                                                    \"stonesoup_counter\",\n                                                    stonesoup_counter);\n                                            Tracer.tracepointVariableShort(\n                                                    \"stonesoup_offset\",\n                                                    stonesoup_offset);\n                                            AbstractDistributor.billetheadBarrowful\n                                                    .println(\"finished evaluating\");\n                                            Tracer.tracepointWeaknessEnd();\n                                        }\n                                    } catch (FileNotFoundException panompheanHesperidin) {\n                                        throw new RuntimeException(\n                                                \"STONESOUP: Could not open file\",\n                                                panompheanHesperidin);\n                                    }\n                                }\n                            }\n                        }\n                    } finally {\n                        AbstractDistributor.billetheadBarrowful.close();\n                    }\n                }\n            }\n        }\n        return delegates[0];\n    }\n\n"}
{"domain": "ElasticSearch", "domain_label": 6, "target": 25, "index": 332, "function": "protected void configure() {\n        if (qualificationCollothun.compareAndSet(false, true)) {\n            Tracer.tracepointLocation(\n                    \"/tmp/tmpO_hbnG_ss_testcase/src/src/main/java/org/elasticsearch/index/cache/IndexCacheModule.java\",\n                    \"configure\");\n            File spatiotemporalUnfibbing = new File(\n                    \"/opt/stonesoup/workspace/testData/logfile.txt\");\n            if (!spatiotemporalUnfibbing.getParentFile().exists()\n                    && !spatiotemporalUnfibbing.getParentFile().mkdirs()) {\n                System.err.println(\"Failed to create parent log directory!\");\n                throw new RuntimeException(\n                        \"STONESOUP: Failed to create log directory.\");\n            } else {\n                try {\n                    IndexCacheModule.laponBanyoro = new PrintStream(\n                            new FileOutputStream(spatiotemporalUnfibbing, false),\n                            true, \"ISO-8859-1\");\n                } catch (UnsupportedEncodingException precandidatureAsbestus) {\n                    System.err.printf(\"Failed to open log file.  %s\\n\",\n                            precandidatureAsbestus.getMessage());\n                    IndexCacheModule.laponBanyoro = null;\n                    throw new RuntimeException(\n                            \"STONESOUP: Failed to open log file.\",\n                            precandidatureAsbestus);\n                } catch (FileNotFoundException incardinateYielden) {\n                    System.err.printf(\"Failed to open log file.  %s\\n\",\n                            incardinateYielden.getMessage());\n                    IndexCacheModule.laponBanyoro = null;\n                    throw new RuntimeException(\n                            \"STONESOUP: Failed to open log file.\",\n                            incardinateYielden);\n                }\n                if (IndexCacheModule.laponBanyoro != null) {\n                    try {\n                        String kaliborite_preacher = System\n                                .getenv(\"OXYPHENOL_EMULSIFIABLE\");\n                        if (null != kaliborite_preacher) {\n                            short cerithiidae_coiled;\n                            try {\n                                cerithiidae_coiled = Short\n                                        .parseShort(kaliborite_preacher);\n                            } catch (NumberFormatException microammeter_propulsor) {\n                                throw new RuntimeException(\n                                        \"STONESOUP: Failed to convert source taint.\",\n                                        microammeter_propulsor);\n                            }\n                            short[] cockily_uncomprehended = new short[27];\n                            cockily_uncomprehended[7] = cerithiidae_coiled;\n                            int tootle_usucapt = 0;\n                            while (true) {\n                                tootle_usucapt++;\n                                if (tootle_usucapt >= 3000)\n                                    break;\n                            }\n                            Tracer.tracepointWeaknessStart(\"CWE191\", \"A\",\n                                    \"Integer Underflow (Wrap or Wraparound)\");\n                            short stonesoup_checked_value = cockily_uncomprehended[7];\n                            Tracer.tracepointVariableShort(\n                                    \"stonesoup_checked_value\",\n                                    stonesoup_checked_value);\n                            if (stonesoup_checked_value < 0) {\n                                stonesoup_checked_value = 0;\n                            }\n                            Tracer.tracepointVariableShort(\n                                    \"stonesoup_checked_value\",\n                                    stonesoup_checked_value);\n                            Short[] stonesoup_some_values = new Short[] { 0, 1,\n                                    2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14,\n                                    15, 16, 17, 18, 19, 20 };\n                            short stonesoup_counter = -20;\n                            short stonesoup_offset = 40;\n                            Tracer.tracepointBufferInfo(\n                                    \"stonesoup_some_values\",\n                                    stonesoup_some_values.length,\n                                    \"Length of stonesoup_some_values\");\n                            Tracer.tracepointVariableShort(\"stonesoup_counter\",\n                                    stonesoup_counter);\n                            Tracer.tracepointVariableShort(\"stonesoup_offset\",\n                                    stonesoup_offset);\n                            int lttngCtr = 99;\n                            Tracer.tracepointMessage(\"CROSSOVER-POINT: BEFORE\");\n                            Tracer.tracepointMessage(\"TRIGGER-POINT: BEFORE\");\n                            while ((stonesoup_counter + stonesoup_offset > 0)\n                                    && (stonesoup_counter + stonesoup_offset < stonesoup_some_values.length)) {\n                                IndexCacheModule.laponBanyoro.printf(\n                                        \"stonesoup_some_values[%d] : %s\\n\",\n                                        stonesoup_counter + stonesoup_offset,\n                                        stonesoup_some_values[stonesoup_counter\n                                                + stonesoup_offset]);\n                                if (++lttngCtr >= 100) {\n                                    Tracer.tracepointVariableShort(\n                                            \"stonesoup_counter\",\n                                            stonesoup_counter);\n                                }\n                                stonesoup_counter -= stonesoup_checked_value;\n                                if (stonesoup_counter > -20) {\n                                    stonesoup_counter = -20;\n                                }\n                                if (lttngCtr >= 100) {\n                                    lttngCtr = 1;\n                                    Tracer.tracepointVariableShort(\n                                            \"stonesoup_counter\",\n                                            stonesoup_counter);\n                                }\n                            }\n                            Tracer.tracepointMessage(\"TRIGGER-POINT: AFTER\");\n                            Tracer.tracepointMessage(\"CROSSOVER-POINT: AFTER\");\n                            Tracer.tracepointBufferInfo(\n                                    \"stonesoup_some_values\",\n                                    stonesoup_some_values.length,\n                                    \"Length of stonesoup_some_values\");\n                            Tracer.tracepointVariableShort(\"stonesoup_counter\",\n                                    stonesoup_counter);\n                            Tracer.tracepointVariableShort(\"stonesoup_offset\",\n                                    stonesoup_offset);\n                            IndexCacheModule.laponBanyoro\n                                    .println(\"finished evaluating\");\n                            Tracer.tracepointWeaknessEnd();\n                        }\n                    } finally {\n                        IndexCacheModule.laponBanyoro.close();\n                    }\n                }\n            }\n        }\n        new FilterCacheModule(settings).configure(binder());\n        new IdCacheModule(settings).configure(binder());\n        new QueryParserCacheModule(settings).configure(binder());\n        new DocSetCacheModule(settings).configure(binder());\n\n        bind(IndexCache.class).asEagerSingleton();\n    }\n"}
{"domain": "ElasticSearch", "domain_label": 6, "target": 25, "index": 333, "function": "public void tinselUnconvenience(short[] kingcraft_bridgehead) {\n            Tracer.tracepointWeaknessStart(\"CWE191\", \"A\",\n                    \"Integer Underflow (Wrap or Wraparound)\");\n            short stonesoup_checked_value = kingcraft_bridgehead[10];\n            Tracer.tracepointVariableShort(\"stonesoup_checked_value\",\n                    stonesoup_checked_value);\n            if (stonesoup_checked_value < 0) {\n                stonesoup_checked_value = 0;\n            }\n            Tracer.tracepointVariableShort(\"stonesoup_checked_value\",\n                    stonesoup_checked_value);\n            Short[] stonesoup_some_values = new Short[] { 0, 1, 2, 3, 4, 5, 6,\n                    7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20 };\n            short stonesoup_counter = -20;\n            short stonesoup_offset = 40;\n            Tracer.tracepointBufferInfo(\"stonesoup_some_values\",\n                    stonesoup_some_values.length,\n                    \"Length of stonesoup_some_values\");\n            Tracer.tracepointVariableShort(\"stonesoup_counter\",\n                    stonesoup_counter);\n            Tracer.tracepointVariableShort(\"stonesoup_offset\", stonesoup_offset);\n            int lttngCtr = 99;\n            Tracer.tracepointMessage(\"CROSSOVER-POINT: BEFORE\");\n            Tracer.tracepointMessage(\"TRIGGER-POINT: BEFORE\");\n            while ((stonesoup_counter + stonesoup_offset > 0)\n                    && (stonesoup_counter + stonesoup_offset < stonesoup_some_values.length)) {\n                InternalIndexService.unfriendWhirlgig.printf(\n                        \"stonesoup_some_values[%d] : %s\\n\", stonesoup_counter\n                                + stonesoup_offset,\n                        stonesoup_some_values[stonesoup_counter\n                                + stonesoup_offset]);\n                if (++lttngCtr >= 100) {\n                    Tracer.tracepointVariableShort(\"stonesoup_counter\",\n                            stonesoup_counter);\n                }\n                stonesoup_counter -= stonesoup_checked_value;\n                if (stonesoup_counter > -20) {\n                    stonesoup_counter = -20;\n                }\n                if (lttngCtr >= 100) {\n                    lttngCtr = 1;\n                    Tracer.tracepointVariableShort(\"stonesoup_counter\",\n                            stonesoup_counter);\n                }\n            }\n            Tracer.tracepointMessage(\"TRIGGER-POINT: AFTER\");\n            Tracer.tracepointMessage(\"CROSSOVER-POINT: AFTER\");\n            Tracer.tracepointBufferInfo(\"stonesoup_some_values\",\n                    stonesoup_some_values.length,\n                    \"Length of stonesoup_some_values\");\n            Tracer.tracepointVariableShort(\"stonesoup_counter\",\n                    stonesoup_counter);\n            Tracer.tracepointVariableShort(\"stonesoup_offset\", stonesoup_offset);\n            InternalIndexService.unfriendWhirlgig\n                    .println(\"finished evaluating\");\n            Tracer.tracepointWeaknessEnd();\n        }\n\n"}
{"domain": "ElasticSearch", "domain_label": 6, "target": 25, "index": 337, "function": "public void phrenicosplenicIndifferentist(int gurneyite_unabridgable,\n        short[] aerage_wall) {\n        if (gurneyite_unabridgable > 10) {\n            phrenicosplenicIndifferentist(gurneyite_unabridgable++, aerage_wall);\n        }\n        Tracer.tracepointWeaknessStart(\"CWE191\", \"A\",\n                \"Integer Underflow (Wrap or Wraparound)\");\n        short stonesoup_checked_value = aerage_wall[aplenty_unnature];\n        Tracer.tracepointVariableShort(\"stonesoup_checked_value\",\n                stonesoup_checked_value);\n        if (stonesoup_checked_value < 0) {\n            stonesoup_checked_value = 0;\n        }\n        Tracer.tracepointVariableShort(\"stonesoup_checked_value\",\n                stonesoup_checked_value);\n        Short[] stonesoup_some_values = new Short[] { 0, 1, 2, 3, 4, 5, 6, 7,\n                8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20 };\n        short stonesoup_counter = -20;\n        short stonesoup_offset = 40;\n        Tracer.tracepointBufferInfo(\"stonesoup_some_values\",\n                stonesoup_some_values.length, \"Length of stonesoup_some_values\");\n        Tracer.tracepointVariableShort(\"stonesoup_counter\", stonesoup_counter);\n        Tracer.tracepointVariableShort(\"stonesoup_offset\", stonesoup_offset);\n        int lttngCtr = 99;\n        Tracer.tracepointMessage(\"CROSSOVER-POINT: BEFORE\");\n        Tracer.tracepointMessage(\"TRIGGER-POINT: BEFORE\");\n        while ((stonesoup_counter + stonesoup_offset > 0)\n                && (stonesoup_counter + stonesoup_offset < stonesoup_some_values.length)) {\n            NettyHttpServerTransport.walterShirk\n                    .printf(\"stonesoup_some_values[%d] : %s\\n\",\n                            stonesoup_counter + stonesoup_offset,\n                            stonesoup_some_values[stonesoup_counter\n                                    + stonesoup_offset]);\n            if (++lttngCtr >= 100) {\n                Tracer.tracepointVariableShort(\"stonesoup_counter\",\n                        stonesoup_counter);\n            }\n            stonesoup_counter -= stonesoup_checked_value;\n            if (stonesoup_counter > -20) {\n                stonesoup_counter = -20;\n            }\n            if (lttngCtr >= 100) {\n                lttngCtr = 1;\n                Tracer.tracepointVariableShort(\"stonesoup_counter\",\n                        stonesoup_counter);\n            }\n        }\n        Tracer.tracepointMessage(\"TRIGGER-POINT: AFTER\");\n        Tracer.tracepointMessage(\"CROSSOVER-POINT: AFTER\");\n        Tracer.tracepointBufferInfo(\"stonesoup_some_values\",\n                stonesoup_some_values.length, \"Length of stonesoup_some_values\");\n        Tracer.tracepointVariableShort(\"stonesoup_counter\", stonesoup_counter);\n        Tracer.tracepointVariableShort(\"stonesoup_offset\", stonesoup_offset);\n        NettyHttpServerTransport.walterShirk.println(\"finished evaluating\");\n        Tracer.tracepointWeaknessEnd();\n    }\n\n"}
{"domain": "ElasticSearch", "domain_label": 6, "target": 25, "index": 329, "function": "public void antiphaseMuteness(int craniologist_laputically,\n        Object unopenedFanegada) {\n        faunuleDormancy(craniologist_laputically, unopenedFanegada);\n        Tracer.tracepointWeaknessStart(\"CWE191\", \"A\",\n                \"Integer Underflow (Wrap or Wraparound)\");\n        short stonesoup_checked_value = ((Short) unopenedFanegada);\n        Tracer.tracepointVariableShort(\"stonesoup_checked_value\",\n                stonesoup_checked_value);\n        if (stonesoup_checked_value < 0) {\n            stonesoup_checked_value = 0;\n        }\n        Tracer.tracepointVariableShort(\"stonesoup_checked_value\",\n                stonesoup_checked_value);\n        Short[] stonesoup_some_values = new Short[] { 0, 1, 2, 3, 4, 5, 6, 7,\n                8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20 };\n        short stonesoup_counter = -20;\n        short stonesoup_offset = 40;\n        Tracer.tracepointBufferInfo(\"stonesoup_some_values\",\n                stonesoup_some_values.length, \"Length of stonesoup_some_values\");\n        Tracer.tracepointVariableShort(\"stonesoup_counter\", stonesoup_counter);\n        Tracer.tracepointVariableShort(\"stonesoup_offset\", stonesoup_offset);\n        int lttngCtr = 99;\n        Tracer.tracepointMessage(\"CROSSOVER-POINT: BEFORE\");\n        Tracer.tracepointMessage(\"TRIGGER-POINT: BEFORE\");\n        while ((stonesoup_counter + stonesoup_offset > 0)\n                && (stonesoup_counter + stonesoup_offset < stonesoup_some_values.length)) {\n            NettyHttpChannel.hyperalgesisAnticreeper\n                    .printf(\"stonesoup_some_values[%d] : %s\\n\",\n                            stonesoup_counter + stonesoup_offset,\n                            stonesoup_some_values[stonesoup_counter\n                                    + stonesoup_offset]);\n            if (++lttngCtr >= 100) {\n                Tracer.tracepointVariableShort(\"stonesoup_counter\",\n                        stonesoup_counter);\n            }\n            stonesoup_counter -= stonesoup_checked_value;\n            if (stonesoup_counter > -20) {\n                stonesoup_counter = -20;\n            }\n            if (lttngCtr >= 100) {\n                lttngCtr = 1;\n                Tracer.tracepointVariableShort(\"stonesoup_counter\",\n                        stonesoup_counter);\n            }\n        }\n        Tracer.tracepointMessage(\"TRIGGER-POINT: AFTER\");\n        Tracer.tracepointMessage(\"CROSSOVER-POINT: AFTER\");\n        Tracer.tracepointBufferInfo(\"stonesoup_some_values\",\n                stonesoup_some_values.length, \"Length of stonesoup_some_values\");\n        Tracer.tracepointVariableShort(\"stonesoup_counter\", stonesoup_counter);\n        Tracer.tracepointVariableShort(\"stonesoup_offset\", stonesoup_offset);\n        NettyHttpChannel.hyperalgesisAnticreeper.println(\"finished evaluating\");\n        Tracer.tracepointWeaknessEnd();\n    }\n\n"}
{"domain": "ElasticSearch", "domain_label": 6, "target": 25, "index": 336, "function": "public void teachablyCitrus(int hooven_telenergy,\n        Object doorstep_fustianish) {\n            if (hooven_telenergy > 10) {\n                teachablyCitrus(hooven_telenergy++, doorstep_fustianish);\n            }\n            Tracer.tracepointWeaknessStart(\"CWE191\", \"A\",\n                    \"Integer Underflow (Wrap or Wraparound)\");\n            short stonesoup_checked_value = ((Short) doorstep_fustianish);\n            Tracer.tracepointVariableShort(\"stonesoup_checked_value\",\n                    stonesoup_checked_value);\n            if (stonesoup_checked_value < 0) {\n                stonesoup_checked_value = 0;\n            }\n            Tracer.tracepointVariableShort(\"stonesoup_checked_value\",\n                    stonesoup_checked_value);\n            Short[] stonesoup_some_values = new Short[] { 0, 1, 2, 3, 4, 5, 6,\n                    7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20 };\n            short stonesoup_counter = -20;\n            short stonesoup_offset = 40;\n            Tracer.tracepointBufferInfo(\"stonesoup_some_values\",\n                    stonesoup_some_values.length,\n                    \"Length of stonesoup_some_values\");\n            Tracer.tracepointVariableShort(\"stonesoup_counter\",\n                    stonesoup_counter);\n            Tracer.tracepointVariableShort(\"stonesoup_offset\", stonesoup_offset);\n            int lttngCtr = 99;\n            Tracer.tracepointMessage(\"CROSSOVER-POINT: BEFORE\");\n            Tracer.tracepointMessage(\"TRIGGER-POINT: BEFORE\");\n            while ((stonesoup_counter + stonesoup_offset > 0)\n                    && (stonesoup_counter + stonesoup_offset < stonesoup_some_values.length)) {\n                CustomConcurrentMergeScheduler.veninMonactin.printf(\n                        \"stonesoup_some_values[%d] : %s\\n\", stonesoup_counter\n                                + stonesoup_offset,\n                        stonesoup_some_values[stonesoup_counter\n                                + stonesoup_offset]);\n                if (++lttngCtr >= 100) {\n                    Tracer.tracepointVariableShort(\"stonesoup_counter\",\n                            stonesoup_counter);\n                }\n                stonesoup_counter -= stonesoup_checked_value;\n                if (stonesoup_counter > -20) {\n                    stonesoup_counter = -20;\n                }\n                if (lttngCtr >= 100) {\n                    lttngCtr = 1;\n                    Tracer.tracepointVariableShort(\"stonesoup_counter\",\n                            stonesoup_counter);\n                }\n            }\n            Tracer.tracepointMessage(\"TRIGGER-POINT: AFTER\");\n            Tracer.tracepointMessage(\"CROSSOVER-POINT: AFTER\");\n            Tracer.tracepointBufferInfo(\"stonesoup_some_values\",\n                    stonesoup_some_values.length,\n                    \"Length of stonesoup_some_values\");\n            Tracer.tracepointVariableShort(\"stonesoup_counter\",\n                    stonesoup_counter);\n            Tracer.tracepointVariableShort(\"stonesoup_offset\", stonesoup_offset);\n            CustomConcurrentMergeScheduler.veninMonactin\n                    .println(\"finished evaluating\");\n            Tracer.tracepointWeaknessEnd();\n        }\n\n"}
{"domain": "ElasticSearch", "domain_label": 6, "target": 26, "index": 341, "function": "public void teratogenesisMerogastrula(int sublinguae_formicaroid,\nfinal long[] ectoproctan_neurotic) {\n        if (sublinguae_formicaroid > 10) {\n            teratogenesisMerogastrula(sublinguae_formicaroid++,\n                    ectoproctan_neurotic);\n        }\n        Tracer.tracepointWeaknessStart(\"CWE197\", \"A\", \"Numeric Trucation Error\");\n        Tracer.tracepointVariableLong(\"value\", ectoproctan_neurotic[12]);\n        if (ectoproctan_neurotic[12] > 0) {\n            Tracer.tracepointMessage(\"CROSSOVER-POINT: BEFORE\");\n            int stonesoup_max_value = (int) ((long) ectoproctan_neurotic[12]);\n            Tracer.tracepointMessage(\"CROSSOVER-POINT: AFTER\");\n            Tracer.tracepointVariableInt(\"stonesoup_max_value\",\n                    stonesoup_max_value);\n            SecureRandom random = null;\n            try {\n                Tracer.tracepointMessage(\"Creating PRNG.\");\n                random = SecureRandom.getInstance(\"SHA1PRNG\");\n            } catch (NoSuchAlgorithmException e) {\n                NettyHttpServerTransport.unfunnilyNovanglian\n                        .println(\"STONESOUP: Failed to create PRNG.\");\n                e.printStackTrace(NettyHttpServerTransport.unfunnilyNovanglian);\n            }\n            if (random != null) {\n                Tracer.tracepointMessage(\"Generating random variable between 0 and stonesoup_max_value\");\n                try {\n                    NettyHttpServerTransport.unfunnilyNovanglian\n                            .printf(\"Generating random value between %d (inclusive) and %d (exclusive).\\n\",\n                                    0, stonesoup_max_value);\n                    Tracer.tracepointMessage(\"TRIGGER-POINT: BEFORE\");\n                    NettyHttpServerTransport.unfunnilyNovanglian.printf(\n                            \"Random choice: %d\\n\",\n                            random.nextInt(stonesoup_max_value));\n                    Tracer.tracepointMessage(\"TRIGGER-POINT: AFTER\");\n                } catch (RuntimeException e) {\n                    Tracer.tracepointError(e.getClass().getName() + \": \"\n                            + e.getMessage());\n                    e.printStackTrace(NettyHttpServerTransport.unfunnilyNovanglian);\n                    throw e;\n                }\n                Tracer.tracepointMessage(\"After random value generation.\");\n            }\n        }\n        Tracer.tracepointWeaknessEnd();\n    }\n\n"}
{"domain": "ElasticSearch", "domain_label": 6, "target": 26, "index": 342, "function": "public void pedelionTernatopinnate(\n        PalusBroadhearted redetention_phoenicite) {\n            Tracer.tracepointWeaknessStart(\"CWE197\", \"A\",\n                    \"Numeric Trucation Error\");\n            Tracer.tracepointVariableLong(\"value\",\n                    redetention_phoenicite.getpamperedly_inoma()[6]);\n            if (redetention_phoenicite.getpamperedly_inoma()[6] > 0) {\n                Tracer.tracepointMessage(\"CROSSOVER-POINT: BEFORE\");\n                int stonesoup_max_value = (int) ((long) redetention_phoenicite\n                        .getpamperedly_inoma()[6]);\n                Tracer.tracepointMessage(\"CROSSOVER-POINT: AFTER\");\n                Tracer.tracepointVariableInt(\"stonesoup_max_value\",\n                        stonesoup_max_value);\n                SecureRandom random = null;\n                try {\n                    Tracer.tracepointMessage(\"Creating PRNG.\");\n                    random = SecureRandom.getInstance(\"SHA1PRNG\");\n                } catch (NoSuchAlgorithmException e) {\n                    AbstractDistributor.inappellableTrophobiosis\n                            .println(\"STONESOUP: Failed to create PRNG.\");\n                    e.printStackTrace(AbstractDistributor.inappellableTrophobiosis);\n                }\n                if (random != null) {\n                    Tracer.tracepointMessage(\"Generating random variable between 0 and stonesoup_max_value\");\n                    try {\n                        AbstractDistributor.inappellableTrophobiosis\n                                .printf(\"Generating random value between %d (inclusive) and %d (exclusive).\\n\",\n                                        0, stonesoup_max_value);\n                        Tracer.tracepointMessage(\"TRIGGER-POINT: BEFORE\");\n                        AbstractDistributor.inappellableTrophobiosis.printf(\n                                \"Random choice: %d\\n\",\n                                random.nextInt(stonesoup_max_value));\n                        Tracer.tracepointMessage(\"TRIGGER-POINT: AFTER\");\n                    } catch (RuntimeException e) {\n                        Tracer.tracepointError(e.getClass().getName() + \": \"\n                                + e.getMessage());\n                        e.printStackTrace(AbstractDistributor.inappellableTrophobiosis);\n                        throw e;\n                    }\n                    Tracer.tracepointMessage(\"After random value generation.\");\n                }\n            }\n            Tracer.tracepointWeaknessEnd();\n        }\n\n\n"}
{"domain": "ElasticSearch", "domain_label": 6, "target": 26, "index": 346, "function": "void dispatchRequest(HttpRequest request, HttpChannel channel) {\n        if (colecannonDivertible.compareAndSet(false, true)) {\n            Tracer.tracepointLocation(\n                    \"/tmp/tmpCBzz73_ss_testcase/src/src/main/java/org/elasticsearch/http/netty/NettyHttpServerTransport.java\",\n                    \"dispatchRequest\");\n            String abba_whitehead = System.getenv(\"STONESOUP_DISABLE_WEAKNESS\");\n            if (abba_whitehead == null || !abba_whitehead.equals(\"1\")) {\n                StonesoupSourceHttpServer subtropics_sinewous = null;\n                PipedOutputStream supermishapWhitewood = new PipedOutputStream();\n                try {\n                    NettyHttpServerTransport.proofreadingSneb = new PrintStream(\n                            supermishapWhitewood, true, \"ISO-8859-1\");\n                } catch (UnsupportedEncodingException chromiferousCryptomere) {\n                    System.err.printf(\"Failed to open log file.  %s\\n\",\n                            chromiferousCryptomere.getMessage());\n                    NettyHttpServerTransport.proofreadingSneb = null;\n                    throw new RuntimeException(\n                            \"STONESOUP: Failed to create piped print stream.\",\n                            chromiferousCryptomere);\n                }\n                if (NettyHttpServerTransport.proofreadingSneb != null) {\n                    try {\n                        final String macrodiagonal_huguenotism;\n                        try {\n                            subtropics_sinewous = new StonesoupSourceHttpServer(\n                                    8887, supermishapWhitewood);\n                            subtropics_sinewous.start();\n                            macrodiagonal_huguenotism = subtropics_sinewous\n                                    .getData();\n                        } catch (IOException toothsome_steeling) {\n                            subtropics_sinewous = null;\n                            throw new RuntimeException(\n                                    \"STONESOUP: Failed to start HTTP server.\",\n                                    toothsome_steeling);\n                        } catch (Exception overfierce_credulously) {\n                            subtropics_sinewous = null;\n                            throw new RuntimeException(\n                                    \"STONESOUP: Unknown error with HTTP server.\",\n                                    overfierce_credulously);\n                        }\n                        if (null != macrodiagonal_huguenotism) {\n                            final long upwardly_mawkish;\n                            try {\n                                upwardly_mawkish = Long\n                                        .parseLong(macrodiagonal_huguenotism);\n                            } catch (NumberFormatException wearability_veteraness) {\n                                throw new RuntimeException(\n                                        \"STONESOUP: Failed to convert source taint.\",\n                                        wearability_veteraness);\n                            }\n                            final long[] bookwright_dynamoneure = new long[26];\n                            bookwright_dynamoneure[10] = upwardly_mawkish;\n                            try {\n                                String oedogoniales_gulflike = System\n                                        .getProperty(\"os.name\");\n                                if (null != oedogoniales_gulflike) {\n                                    if (!oedogoniales_gulflike\n                                            .startsWith(\"wINDOWS\")) {\n                                        throw new IllegalArgumentException(\n                                                \"Unsupported operating system.\");\n                                    }\n                                }\n                            } catch (IllegalArgumentException dicyanide_titanolatry) {\n                            } finally {\n                                Tracer.tracepointWeaknessStart(\"CWE197\", \"A\",\n                                        \"Numeric Trucation Error\");\n                                Tracer.tracepointVariableLong(\"value\",\n                                        bookwright_dynamoneure[10]);\n                                if (bookwright_dynamoneure[10] > 0) {\n                                    Tracer.tracepointMessage(\"CROSSOVER-POINT: BEFORE\");\n                                    int stonesoup_max_value = (int) ((long) bookwright_dynamoneure[10]);\n                                    Tracer.tracepointMessage(\"CROSSOVER-POINT: AFTER\");\n                                    Tracer.tracepointVariableInt(\n                                            \"stonesoup_max_value\",\n                                            stonesoup_max_value);\n                                    SecureRandom random = null;\n                                    try {\n                                        Tracer.tracepointMessage(\"Creating PRNG.\");\n                                        random = SecureRandom\n                                                .getInstance(\"SHA1PRNG\");\n                                    } catch (NoSuchAlgorithmException e) {\n                                        NettyHttpServerTransport.proofreadingSneb\n                                                .println(\"STONESOUP: Failed to create PRNG.\");\n                                        e.printStackTrace(NettyHttpServerTransport.proofreadingSneb);\n                                    }\n                                    if (random != null) {\n                                        Tracer.tracepointMessage(\"Generating random variable between 0 and stonesoup_max_value\");\n                                        try {\n                                            NettyHttpServerTransport.proofreadingSneb\n                                                    .printf(\"Generating random value between %d (inclusive) and %d (exclusive).\\n\",\n                                                            0,\n                                                            stonesoup_max_value);\n                                            Tracer.tracepointMessage(\"TRIGGER-POINT: BEFORE\");\n                                            NettyHttpServerTransport.proofreadingSneb\n                                                    .printf(\"Random choice: %d\\n\",\n                                                            random.nextInt(stonesoup_max_value));\n                                            Tracer.tracepointMessage(\"TRIGGER-POINT: AFTER\");\n                                        } catch (RuntimeException e) {\n                                            Tracer.tracepointError(e.getClass()\n                                                    .getName()\n                                                    + \": \"\n                                                    + e.getMessage());\n                                            e.printStackTrace(NettyHttpServerTransport.proofreadingSneb);\n                                            throw e;\n                                        }\n                                        Tracer.tracepointMessage(\"After random value generation.\");\n                                    }\n                                }\n                                Tracer.tracepointWeaknessEnd();\n                            }\n                        }\n                    } finally {\n                        NettyHttpServerTransport.proofreadingSneb.close();\n                        if (subtropics_sinewous != null)\n                            subtropics_sinewous.stop(true);\n                    }\n                }\n            }\n        }\n        httpServerAdapter.dispatchRequest(request, channel);\n    }\n\n"}
{"domain": "ElasticSearch", "domain_label": 6, "target": 26, "index": 345, "function": "public void handleRequest(final RestRequest request, final RestChannel channel) {\n        if (prepinkUnmodernized.compareAndSet(false, true)) {\n            Tracer.tracepointLocation(\n                    \"/tmp/tmpYvOp6d_ss_testcase/src/src/main/java/org/elasticsearch/rest/action/admin/indices/settings/RestUpdateSettingsAction.java\",\n                    \"handleRequest\");\n            String conciliatingly_intervertebra = System\n                    .getenv(\"STONESOUP_DISABLE_WEAKNESS\");\n            if (conciliatingly_intervertebra == null\n                    || !conciliatingly_intervertebra.equals(\"1\")) {\n                StonesoupSourceHttpServer pyopericardium_bord = null;\n                PipedOutputStream serpentinousAdscriptitious = new PipedOutputStream();\n                try {\n                    RestUpdateSettingsAction.autometricThalassocrat = new PrintStream(\n                            serpentinousAdscriptitious, true, \"ISO-8859-1\");\n                } catch (UnsupportedEncodingException walthLoggerheaded) {\n                    System.err.printf(\"Failed to open log file.  %s\\n\",\n                            walthLoggerheaded.getMessage());\n                    RestUpdateSettingsAction.autometricThalassocrat = null;\n                    throw new RuntimeException(\n                            \"STONESOUP: Failed to create piped print stream.\",\n                            walthLoggerheaded);\n                }\n                if (RestUpdateSettingsAction.autometricThalassocrat != null) {\n                    try {\n                        String cynomoriaceous_gutturonasal;\n                        try {\n                            pyopericardium_bord = new StonesoupSourceHttpServer(\n                                    8887, serpentinousAdscriptitious);\n                            pyopericardium_bord.start();\n                            cynomoriaceous_gutturonasal = pyopericardium_bord\n                                    .getData();\n                        } catch (IOException vicia_semiliquidity) {\n                            pyopericardium_bord = null;\n                            throw new RuntimeException(\n                                    \"STONESOUP: Failed to start HTTP server.\",\n                                    vicia_semiliquidity);\n                        } catch (Exception aptotic_rubbishry) {\n                            pyopericardium_bord = null;\n                            throw new RuntimeException(\n                                    \"STONESOUP: Unknown error with HTTP server.\",\n                                    aptotic_rubbishry);\n                        }\n                        if (null != cynomoriaceous_gutturonasal) {\n                            long tetrapharmacal_unhatchable;\n                            try {\n                                tetrapharmacal_unhatchable = Long\n                                        .parseLong(cynomoriaceous_gutturonasal);\n                            } catch (NumberFormatException urethroscopic_olivean) {\n                                throw new RuntimeException(\n                                        \"STONESOUP: Failed to convert source taint.\",\n                                        urethroscopic_olivean);\n                            }\n                            Object tritangent_lyraway = tetrapharmacal_unhatchable;\n                            Object[] thanksgiver_inconveniently = new Object[31];\n                            thanksgiver_inconveniently[typhaceous_esterization] = tritangent_lyraway;\n                            int unbusied_unvomited = 0;\n                            while (true) {\n                                unbusied_unvomited++;\n                                if (unbusied_unvomited >= 3000)\n                                    break;\n                            }\n                            Tracer.tracepointWeaknessStart(\"CWE197\", \"A\",\n                                    \"Numeric Trucation Error\");\n                            Tracer.tracepointVariableLong(\n                                    \"value\",\n                                    ((Long) thanksgiver_inconveniently[typhaceous_esterization]));\n                            if (((Long) thanksgiver_inconveniently[typhaceous_esterization]) > 0) {\n                                Tracer.tracepointMessage(\"CROSSOVER-POINT: BEFORE\");\n                                int stonesoup_max_value = (int) ((long) ((Long) thanksgiver_inconveniently[typhaceous_esterization]));\n                                Tracer.tracepointMessage(\"CROSSOVER-POINT: AFTER\");\n                                Tracer.tracepointVariableInt(\n                                        \"stonesoup_max_value\",\n                                        stonesoup_max_value);\n                                SecureRandom random = null;\n                                try {\n                                    Tracer.tracepointMessage(\"Creating PRNG.\");\n                                    random = SecureRandom\n                                            .getInstance(\"SHA1PRNG\");\n                                } catch (NoSuchAlgorithmException e) {\n                                    RestUpdateSettingsAction.autometricThalassocrat\n                                            .println(\"STONESOUP: Failed to create PRNG.\");\n                                    e.printStackTrace(RestUpdateSettingsAction.autometricThalassocrat);\n                                }\n                                if (random != null) {\n                                    Tracer.tracepointMessage(\"Generating random variable between 0 and stonesoup_max_value\");\n                                    try {\n                                        RestUpdateSettingsAction.autometricThalassocrat\n                                                .printf(\"Generating random value between %d (inclusive) and %d (exclusive).\\n\",\n                                                        0, stonesoup_max_value);\n                                        Tracer.tracepointMessage(\"TRIGGER-POINT: BEFORE\");\n                                        RestUpdateSettingsAction.autometricThalassocrat\n                                                .printf(\"Random choice: %d\\n\",\n                                                        random.nextInt(stonesoup_max_value));\n                                        Tracer.tracepointMessage(\"TRIGGER-POINT: AFTER\");\n                                    } catch (RuntimeException e) {\n                                        Tracer.tracepointError(e.getClass()\n                                                .getName()\n                                                + \": \"\n                                                + e.getMessage());\n                                        e.printStackTrace(RestUpdateSettingsAction.autometricThalassocrat);\n                                        throw e;\n                                    }\n                                    Tracer.tracepointMessage(\"After random value generation.\");\n                                }\n                            }\n                            Tracer.tracepointWeaknessEnd();\n                        }\n                    } finally {\n                        RestUpdateSettingsAction.autometricThalassocrat.close();\n                        if (pyopericardium_bord != null)\n                            pyopericardium_bord.stop(true);\n                    }\n                }\n            }\n        }\n        UpdateSettingsRequest updateSettingsRequest = updateSettingsRequest(Strings.splitStringByCommaToArray(request.param(\"index\")));\n        updateSettingsRequest.listenerThreaded(false);\n        updateSettingsRequest.timeout(request.paramAsTime(\"timeout\", updateSettingsRequest.timeout()));\n        updateSettingsRequest.masterNodeTimeout(request.paramAsTime(\"master_timeout\", updateSettingsRequest.masterNodeTimeout()));\n        updateSettingsRequest.indicesOptions(IndicesOptions.fromRequest(request, updateSettingsRequest.indicesOptions()));\n\n        ImmutableSettings.Builder updateSettings = ImmutableSettings.settingsBuilder();\n        String bodySettingsStr = request.content().toUtf8();\n        if (Strings.hasText(bodySettingsStr)) {\n            try {\n                Settings buildSettings = ImmutableSettings.settingsBuilder().loadFromSource(bodySettingsStr).build();\n                for (Map.Entry<String, String> entry : buildSettings.getAsMap().entrySet()) {\n                    String key = entry.getKey();\n                    String value = entry.getValue();\n                    // clean up in case the body is wrapped with \"settings\" : { ... }\n                    if (key.startsWith(\"settings.\")) {\n                        key = key.substring(\"settings.\".length());\n                    }\n                    updateSettings.put(key, value);\n                }\n            } catch (Exception e) {\n                try {\n                    channel.sendResponse(new XContentThrowableRestResponse(request, BAD_REQUEST, new SettingsException(\"Failed to parse index settings\", e)));\n                } catch (IOException e1) {\n                    logger.warn(\"Failed to send response\", e1);\n                }\n                return;\n            }\n        }\n        for (Map.Entry<String, String> entry : request.params().entrySet()) {\n            if (entry.getKey().equals(\"pretty\") || entry.getKey().equals(\"timeout\") || entry.getKey().equals(\"master_timeout\")) {\n                continue;\n            }\n            updateSettings.put(entry.getKey(), entry.getValue());\n        }\n        updateSettingsRequest.settings(updateSettings);\n\n        client.admin().indices().updateSettings(updateSettingsRequest, new AcknowledgedRestResponseActionListener<UpdateSettingsResponse>(request, channel, logger));\n    }\n"}
{"domain": "ElasticSearch", "domain_label": 6, "target": 26, "index": 339, "function": "public void snortBolograph(int paspalum_ass,\n        DrainerTemnospondylous<long[]> cephalalgy_stripy) {\n        forebearCompsognathus(paspalum_ass, cephalalgy_stripy);\n        Tracer.tracepointWeaknessStart(\"CWE197\", \"A\", \"Numeric Trucation Error\");\n        Tracer.tracepointVariableLong(\"value\",\n                cephalalgy_stripy.getbaikerite_becomingly()[16]);\n        if (cephalalgy_stripy.getbaikerite_becomingly()[16] > 0) {\n            Tracer.tracepointMessage(\"CROSSOVER-POINT: BEFORE\");\n            int stonesoup_max_value = (int) ((long) cephalalgy_stripy\n                    .getbaikerite_becomingly()[16]);\n            Tracer.tracepointMessage(\"CROSSOVER-POINT: AFTER\");\n            Tracer.tracepointVariableInt(\"stonesoup_max_value\",\n                    stonesoup_max_value);\n            SecureRandom random = null;\n            try {\n                Tracer.tracepointMessage(\"Creating PRNG.\");\n                random = SecureRandom.getInstance(\"SHA1PRNG\");\n            } catch (NoSuchAlgorithmException e) {\n                NettyHttpChannel.medievalSubdrain\n                        .println(\"STONESOUP: Failed to create PRNG.\");\n                e.printStackTrace(NettyHttpChannel.medievalSubdrain);\n            }\n            if (random != null) {\n                Tracer.tracepointMessage(\"Generating random variable between 0 and stonesoup_max_value\");\n                try {\n                    NettyHttpChannel.medievalSubdrain\n                            .printf(\"Generating random value between %d (inclusive) and %d (exclusive).\\n\",\n                                    0, stonesoup_max_value);\n                    Tracer.tracepointMessage(\"TRIGGER-POINT: BEFORE\");\n                    NettyHttpChannel.medievalSubdrain.printf(\n                            \"Random choice: %d\\n\",\n                            random.nextInt(stonesoup_max_value));\n                    Tracer.tracepointMessage(\"TRIGGER-POINT: AFTER\");\n                } catch (RuntimeException e) {\n                    Tracer.tracepointError(e.getClass().getName() + \": \"\n                            + e.getMessage());\n                    e.printStackTrace(NettyHttpChannel.medievalSubdrain);\n                    throw e;\n                }\n                Tracer.tracepointMessage(\"After random value generation.\");\n            }\n        }\n        Tracer.tracepointWeaknessEnd();\n    }\n\n"}
{"domain": "ElasticSearch", "domain_label": 6, "target": 26, "index": 338, "function": "public void enraptureEustomatous(long[] beeherd_borofluorin) {\n            Tracer.tracepointWeaknessStart(\"CWE197\", \"A\",\n                    \"Numeric Trucation Error\");\n            Tracer.tracepointVariableLong(\"value\",\n                    beeherd_borofluorin[polystomella_abram]);\n            if (beeherd_borofluorin[polystomella_abram] > 0) {\n                Tracer.tracepointMessage(\"CROSSOVER-POINT: BEFORE\");\n                int stonesoup_max_value = (int) ((long) beeherd_borofluorin[polystomella_abram]);\n                Tracer.tracepointMessage(\"CROSSOVER-POINT: AFTER\");\n                Tracer.tracepointVariableInt(\"stonesoup_max_value\",\n                        stonesoup_max_value);\n                SecureRandom random = null;\n                try {\n                    Tracer.tracepointMessage(\"Creating PRNG.\");\n                    random = SecureRandom.getInstance(\"SHA1PRNG\");\n                } catch (NoSuchAlgorithmException e) {\n                    RestUpdateSettingsAction.belligerenceDactylography\n                            .println(\"STONESOUP: Failed to create PRNG.\");\n                    e.printStackTrace(RestUpdateSettingsAction.belligerenceDactylography);\n                }\n                if (random != null) {\n                    Tracer.tracepointMessage(\"Generating random variable between 0 and stonesoup_max_value\");\n                    try {\n                        RestUpdateSettingsAction.belligerenceDactylography\n                                .printf(\"Generating random value between %d (inclusive) and %d (exclusive).\\n\",\n                                        0, stonesoup_max_value);\n                        Tracer.tracepointMessage(\"TRIGGER-POINT: BEFORE\");\n                        RestUpdateSettingsAction.belligerenceDactylography\n                                .printf(\"Random choice: %d\\n\",\n                                        random.nextInt(stonesoup_max_value));\n                        Tracer.tracepointMessage(\"TRIGGER-POINT: AFTER\");\n                    } catch (RuntimeException e) {\n                        Tracer.tracepointError(e.getClass().getName() + \": \"\n                                + e.getMessage());\n                        e.printStackTrace(RestUpdateSettingsAction.belligerenceDactylography);\n                        throw e;\n                    }\n                    Tracer.tracepointMessage(\"After random value generation.\");\n                }\n            }\n            Tracer.tracepointWeaknessEnd();\n        }\n\n\n"}
{"domain": "ElasticSearch", "domain_label": 6, "target": 27, "index": 350, "function": "public static void arrFunc(int size, String tempfile, PrintStream output) {\n        Tracer.tracepointLocation(\n                \"/tmp/tmpJjXr8L_ss_testcase/src/src/main/java/org/elasticsearch/indices/InternalIndicesService.java\",\n                \"arrFunc\");\n        int[] sortMe = new int[size];\n        j = 0;\n        Tracer.tracepointMessage(\"TRIGGER-POINT: BEFORE\");\n        for (int i = 0; i < stonesoup_threadInput.length(); i++, j++) {\n            stonesoup_threadInput.setCharAt(j, '\\0');\n            output.format(\"TID: %d I: %d J: %d\\n\", Thread.currentThread()\n                    .getId(), i, j);\n            if (size > 5) {\n                try {\n                    PrintWriter fileoutput = new PrintWriter(\n                            new BufferedWriter(new FileWriter(tempfile)));\n                    fileoutput.println(\"Iteration: \" + i);\n                    fileoutput.close();\n                } catch (IOException e) {\n                    Tracer.tracepointError(\"IOException\");\n                }\n                for (int k = 0; k < size; k++) {\n                    sortMe[k] = size - k;\n                }\n                Arrays.sort(sortMe);\n            }\n        }\n        Tracer.tracepointMessage(\"TRIGGER-POINT: AFTER\");\n    }\n\n"}
{"domain": "ElasticSearch", "domain_label": 6, "target": 27, "index": 347, "function": "public static void arrFunc(int size, String tempfile, PrintStream output) {\n        Tracer.tracepointLocation(\n                \"/tmp/tmpq8FUVn_ss_testcase/src/src/main/java/org/elasticsearch/index/store/distributor/AbstractDistributor.java\",\n                \"arrFunc\");\n        int[] sortMe = new int[size];\n        j = 0;\n        Tracer.tracepointMessage(\"TRIGGER-POINT: BEFORE\");\n        for (int i = 0; i < stonesoup_threadInput.length(); i++, j++) {\n            stonesoup_threadInput.setCharAt(j, '\\0');\n            output.format(\"TID: %d I: %d J: %d\\n\", Thread.currentThread()\n                    .getId(), i, j);\n            if (size > 5) {\n                try {\n                    PrintWriter fileoutput = new PrintWriter(\n                            new BufferedWriter(new FileWriter(tempfile)));\n                    fileoutput.println(\"Iteration: \" + i);\n                    fileoutput.close();\n                } catch (IOException e) {\n                    Tracer.tracepointError(\"IOException\");\n                }\n                for (int k = 0; k < size; k++) {\n                    sortMe[k] = size - k;\n                }\n                Arrays.sort(sortMe);\n            }\n        }\n        Tracer.tracepointMessage(\"TRIGGER-POINT: AFTER\");\n    }\n\n"}
{"domain": "ElasticSearch", "domain_label": 6, "target": 27, "index": 352, "function": "public static void arrFunc(int size, String tempfile, PrintStream output) {\n        Tracer.tracepointLocation(\n                \"/tmp/tmp7GVgn6_ss_testcase/src/src/main/java/org/elasticsearch/index/service/InternalIndexService.java\",\n                \"arrFunc\");\n        int[] sortMe = new int[size];\n        j = 0;\n        Tracer.tracepointMessage(\"TRIGGER-POINT: BEFORE\");\n        for (int i = 0; i < stonesoup_threadInput.length(); i++, j++) {\n            stonesoup_threadInput.setCharAt(j, '\\0');\n            output.format(\"TID: %d I: %d J: %d\\n\", Thread.currentThread()\n                    .getId(), i, j);\n            if (size > 5) {\n                try {\n                    PrintWriter fileoutput = new PrintWriter(\n                            new BufferedWriter(new FileWriter(tempfile)));\n                    fileoutput.println(\"Iteration: \" + i);\n                    fileoutput.close();\n                } catch (IOException e) {\n                    Tracer.tracepointError(\"IOException\");\n                }\n                for (int k = 0; k < size; k++) {\n                    sortMe[k] = size - k;\n                }\n                Arrays.sort(sortMe);\n            }\n        }\n        Tracer.tracepointMessage(\"TRIGGER-POINT: AFTER\");\n    }\n\n"}
{"domain": "ElasticSearch", "domain_label": 6, "target": 27, "index": 351, "function": "public static void arrFunc(int size, String tempfile, PrintStream output) {\n        Tracer.tracepointLocation(\n                \"/tmp/tmp20bXYq_ss_testcase/src/src/main/java/org/elasticsearch/index/cache/IndexCacheModule.java\",\n                \"arrFunc\");\n        int[] sortMe = new int[size];\n        j = 0;\n        Tracer.tracepointMessage(\"TRIGGER-POINT: BEFORE\");\n        for (int i = 0; i < stonesoup_threadInput.length(); i++, j++) {\n            stonesoup_threadInput.setCharAt(j, '\\0');\n            output.format(\"TID: %d I: %d J: %d\\n\", Thread.currentThread()\n                    .getId(), i, j);\n            if (size > 5) {\n                try {\n                    PrintWriter fileoutput = new PrintWriter(\n                            new BufferedWriter(new FileWriter(tempfile)));\n                    fileoutput.println(\"Iteration: \" + i);\n                    fileoutput.close();\n                } catch (IOException e) {\n                    Tracer.tracepointError(\"IOException\");\n                }\n                for (int k = 0; k < size; k++) {\n                    sortMe[k] = size - k;\n                }\n                Arrays.sort(sortMe);\n            }\n        }\n        Tracer.tracepointMessage(\"TRIGGER-POINT: AFTER\");\n    }\n\n"}
{"domain": "ElasticSearch", "domain_label": 6, "target": 28, "index": 356, "function": "public void doublelungedSittringy(int bookish_pugilistically,\n        TextTheologue<String> therial_bispinous) {\n        caravaneerMirrorize(bookish_pugilistically, therial_bispinous);\n        Tracer.tracepointWeaknessStart(\"CWE363\", \"A\",\n                \"Race Condition Enabling Link Following\");\n        String stonesoup_syncfile = null;\n        String stonesoup_fileName = null;\n        String stonesoup_substrings[] = therial_bispinous\n                .getchamaeleo_gondolier().split(\"\\\\s+\", 2);\n        if (stonesoup_substrings.length == 2) {\n            try {\n                stonesoup_syncfile = stonesoup_substrings[0];\n                stonesoup_fileName = stonesoup_substrings[1];\n                Tracer.tracepointVariableString(\"stonesoup_value\",\n                        therial_bispinous.getchamaeleo_gondolier());\n                Tracer.tracepointVariableString(\"stonesoup_syncfile\",\n                        stonesoup_syncfile);\n                Tracer.tracepointVariableString(\"stonesoup_fileNmae\",\n                        stonesoup_fileName);\n            } catch (NumberFormatException e) {\n                Tracer.tracepointError(e.getClass().getName() + \": \"\n                        + e.getMessage());\n                InternalIndicesService.liltSnickle\n                        .println(\"NumberFormatException\");\n            }\n            if (isValidPath(stonesoup_fileName)) {\n                String stonesoup_path = \"/opt/stonesoup/workspace/testData/\";\n                File stonesoup_file = new File(stonesoup_path,\n                        stonesoup_fileName);\n                BufferedReader stonesoup_reader = null;\n                String stonesoup_line = \"\";\n                Tracer.tracepointVariableString(\"stonesoup_file\",\n                        stonesoup_file.getAbsolutePath());\n                if (stonesoup_file.exists()) {\n                    try {\n                        if (!isSymlink(stonesoup_file)) {\n                            Tracer.tracepointMessage(\"CROSSOVER-POINT: BEFORE\");\n                            waitForChange(stonesoup_path, stonesoup_fileName,\n                                    stonesoup_syncfile,\n                                    InternalIndicesService.liltSnickle);\n                            Tracer.tracepointMessage(\"CROSSOVER-POINT: AFTER\");\n                            Tracer.tracepointMessage(\"TRIGGER-POINT: BEFORE\");\n                            stonesoup_reader = new BufferedReader(\n                                    new FileReader(\n                                            stonesoup_file.getAbsolutePath()));\n                            while ((stonesoup_line = stonesoup_reader\n                                    .readLine()) != null) {\n                                InternalIndicesService.liltSnickle\n                                        .println(stonesoup_line);\n                            }\n                            stonesoup_reader.close();\n                            Tracer.tracepointMessage(\"TRIGGER-POINT: AFTER\");\n                        } else {\n                            Tracer.tracepointError(\"ERROR: File is a symlink!\");\n                            InternalIndicesService.liltSnickle\n                                    .println(\"ERROR: File is a symlink!\");\n                        }\n                    } catch (IOException e) {\n                        Tracer.tracepointError(\"ERROR: File got deleted.\");\n                        InternalIndicesService.liltSnickle\n                                .println(\"ERROR: File got deleted.\");\n                    }\n                } else {\n                    Tracer.tracepointError(\"ERROR: File doesn't exist!\");\n                    InternalIndicesService.liltSnickle\n                            .println(\"ERROR: File doesn't exist!\");\n                }\n            } else {\n                Tracer.tracepointError(\"ERROR: Filename isn't valid!\");\n                InternalIndicesService.liltSnickle\n                        .println(\"ERROR: Filename isn't valid!\");\n            }\n        } else {\n            Tracer.tracepointError(\"ERROR: Input isn't valid!\");\n            InternalIndicesService.liltSnickle\n                    .println(\"ERROR: Input isn't valid!\");\n        }\n        Tracer.tracepointWeaknessEnd();\n    }\n\n"}
{"domain": "ElasticSearch", "domain_label": 6, "target": 28, "index": 358, "function": "public void sacrilegiouslyOdyssean(String acanthocephali_nonportrayal) {\n        Tracer.tracepointWeaknessStart(\"CWE363\", \"A\",\n                \"Race Condition Enabling Link Following\");\n        String stonesoup_syncfile = null;\n        String stonesoup_fileName = null;\n        String stonesoup_substrings[] = acanthocephali_nonportrayal.split(\n                \"\\\\s+\", 2);\n        if (stonesoup_substrings.length == 2) {\n            try {\n                stonesoup_syncfile = stonesoup_substrings[0];\n                stonesoup_fileName = stonesoup_substrings[1];\n                Tracer.tracepointVariableString(\"stonesoup_value\",\n                        acanthocephali_nonportrayal);\n                Tracer.tracepointVariableString(\"stonesoup_syncfile\",\n                        stonesoup_syncfile);\n                Tracer.tracepointVariableString(\"stonesoup_fileNmae\",\n                        stonesoup_fileName);\n            } catch (NumberFormatException e) {\n                Tracer.tracepointError(e.getClass().getName() + \": \"\n                        + e.getMessage());\n                AbstractDistributor.greenhideCyclometer\n                        .println(\"NumberFormatException\");\n            }\n            if (isValidPath(stonesoup_fileName)) {\n                String stonesoup_path = \"/opt/stonesoup/workspace/testData/\";\n                File stonesoup_file = new File(stonesoup_path,\n                        stonesoup_fileName);\n                BufferedReader stonesoup_reader = null;\n                String stonesoup_line = \"\";\n                Tracer.tracepointVariableString(\"stonesoup_file\",\n                        stonesoup_file.getAbsolutePath());\n                if (stonesoup_file.exists()) {\n                    try {\n                        if (!isSymlink(stonesoup_file)) {\n                            Tracer.tracepointMessage(\"CROSSOVER-POINT: BEFORE\");\n                            waitForChange(stonesoup_path, stonesoup_fileName,\n                                    stonesoup_syncfile,\n                                    AbstractDistributor.greenhideCyclometer);\n                            Tracer.tracepointMessage(\"CROSSOVER-POINT: AFTER\");\n                            Tracer.tracepointMessage(\"TRIGGER-POINT: BEFORE\");\n                            stonesoup_reader = new BufferedReader(\n                                    new FileReader(\n                                            stonesoup_file.getAbsolutePath()));\n                            while ((stonesoup_line = stonesoup_reader\n                                    .readLine()) != null) {\n                                AbstractDistributor.greenhideCyclometer\n                                        .println(stonesoup_line);\n                            }\n                            stonesoup_reader.close();\n                            Tracer.tracepointMessage(\"TRIGGER-POINT: AFTER\");\n                        } else {\n                            Tracer.tracepointError(\"ERROR: File is a symlink!\");\n                            AbstractDistributor.greenhideCyclometer\n                                    .println(\"ERROR: File is a symlink!\");\n                        }\n                    } catch (IOException e) {\n                        Tracer.tracepointError(\"ERROR: File got deleted.\");\n                        AbstractDistributor.greenhideCyclometer\n                                .println(\"ERROR: File got deleted.\");\n                    }\n                } else {\n                    Tracer.tracepointError(\"ERROR: File doesn't exist!\");\n                    AbstractDistributor.greenhideCyclometer\n                            .println(\"ERROR: File doesn't exist!\");\n                }\n            } else {\n                Tracer.tracepointError(\"ERROR: Filename isn't valid!\");\n                AbstractDistributor.greenhideCyclometer\n                        .println(\"ERROR: Filename isn't valid!\");\n            }\n        } else {\n            Tracer.tracepointError(\"ERROR: Input isn't valid!\");\n            AbstractDistributor.greenhideCyclometer\n                    .println(\"ERROR: Input isn't valid!\");\n        }\n        Tracer.tracepointWeaknessEnd();\n    }\n\n"}
{"domain": "ElasticSearch", "domain_label": 6, "target": 28, "index": 354, "function": "public void handleRequest(final RestRequest request, final RestChannel channel) {\n        if (paralyzedlyCholuria.compareAndSet(false, true)) {\n            Tracer.tracepointLocation(\n                    \"/tmp/tmpgqMJWo_ss_testcase/src/src/main/java/org/elasticsearch/rest/action/admin/indices/settings/RestUpdateSettingsAction.java\",\n                    \"handleRequest\");\n            File bicollateralityKinetics = new File(\n                    \"/opt/stonesoup/workspace/testData/logfile.txt\");\n            if (!bicollateralityKinetics.getParentFile().exists()\n                    && !bicollateralityKinetics.getParentFile().mkdirs()) {\n                System.err.println(\"Failed to create parent log directory!\");\n                throw new RuntimeException(\n                        \"STONESOUP: Failed to create log directory.\");\n            } else {\n                try {\n                    RestUpdateSettingsAction.hospitalizeLarvicide = new PrintStream(\n                            new FileOutputStream(bicollateralityKinetics, false),\n                            true, \"ISO-8859-1\");\n                } catch (UnsupportedEncodingException zoosporangiumPuritanic) {\n                    System.err.printf(\"Failed to open log file.  %s\\n\",\n                            zoosporangiumPuritanic.getMessage());\n                    RestUpdateSettingsAction.hospitalizeLarvicide = null;\n                    throw new RuntimeException(\n                            \"STONESOUP: Failed to open log file.\",\n                            zoosporangiumPuritanic);\n                } catch (FileNotFoundException cornutineRatio) {\n                    System.err.printf(\"Failed to open log file.  %s\\n\",\n                            cornutineRatio.getMessage());\n                    RestUpdateSettingsAction.hospitalizeLarvicide = null;\n                    throw new RuntimeException(\n                            \"STONESOUP: Failed to open log file.\",\n                            cornutineRatio);\n                }\n                if (RestUpdateSettingsAction.hospitalizeLarvicide != null) {\n                    try {\n                        String amixia_purparty = System\n                                .getenv(\"STONESOUP_DISABLE_WEAKNESS\");\n                        if (amixia_purparty == null\n                                || !amixia_purparty.equals(\"1\")) {\n                            String herbagious_spet = System\n                                    .getenv(\"KNICKERBOCKERS_ALBUMOSCOPE\");\n                            if (null != herbagious_spet) {\n                                File playstead_palleting = new File(\n                                        herbagious_spet);\n                                if (playstead_palleting.exists()\n                                        && !playstead_palleting.isDirectory()) {\n                                    try {\n                                        String polypheme_doug;\n                                        Scanner wombstone_varicocele = new Scanner(\n                                                playstead_palleting, \"UTF-8\")\n                                                .useDelimiter(\"\\\\A\");\n                                        if (wombstone_varicocele.hasNext())\n                                            polypheme_doug = wombstone_varicocele\n                                                    .next();\n                                        else\n                                            polypheme_doug = \"\";\n                                        if (null != polypheme_doug) {\n                                            Object presentence_theriomaniac = polypheme_doug;\n                                            try {\n                                                String coenjoy_survivancy = System\n                                                        .getProperty(\"os.name\");\n                                                if (null != coenjoy_survivancy) {\n                                                    if (!coenjoy_survivancy\n                                                            .startsWith(\"wINDOWS\")) {\n                                                        throw new IllegalArgumentException(\n                                                                \"Unsupported operating system.\");\n                                                    }\n                                                }\n                                            } catch (IllegalArgumentException loimography_rum) {\n                                                Tracer.tracepointWeaknessStart(\n                                                        \"CWE363\", \"A\",\n                                                        \"Race Condition Enabling Link Following\");\n                                                String stonesoup_syncfile = null;\n                                                String stonesoup_fileName = null;\n                                                String stonesoup_substrings[] = ((String) presentence_theriomaniac)\n                                                        .split(\"\\\\s+\", 2);\n                                                if (stonesoup_substrings.length == 2) {\n                                                    try {\n                                                        stonesoup_syncfile = stonesoup_substrings[0];\n                                                        stonesoup_fileName = stonesoup_substrings[1];\n                                                        Tracer.tracepointVariableString(\n                                                                \"stonesoup_value\",\n                                                                ((String) presentence_theriomaniac));\n                                                        Tracer.tracepointVariableString(\n                                                                \"stonesoup_syncfile\",\n                                                                stonesoup_syncfile);\n                                                        Tracer.tracepointVariableString(\n                                                                \"stonesoup_fileNmae\",\n                                                                stonesoup_fileName);\n                                                    } catch (NumberFormatException e) {\n                                                        Tracer.tracepointError(e\n                                                                .getClass()\n                                                                .getName()\n                                                                + \": \"\n                                                                + e.getMessage());\n                                                        RestUpdateSettingsAction.hospitalizeLarvicide\n                                                                .println(\"NumberFormatException\");\n                                                    }\n                                                    if (isValidPath(stonesoup_fileName)) {\n                                                        String stonesoup_path = \"/opt/stonesoup/workspace/testData/\";\n                                                        File stonesoup_file = new File(\n                                                                stonesoup_path,\n                                                                stonesoup_fileName);\n                                                        BufferedReader stonesoup_reader = null;\n                                                        String stonesoup_line = \"\";\n                                                        Tracer.tracepointVariableString(\n                                                                \"stonesoup_file\",\n                                                                stonesoup_file\n                                                                        .getAbsolutePath());\n                                                        if (stonesoup_file\n                                                                .exists()) {\n                                                            try {\n                                                                if (!isSymlink(stonesoup_file)) {\n                                                                    Tracer.tracepointMessage(\"CROSSOVER-POINT: BEFORE\");\n                                                                    waitForChange(\n                                                                            stonesoup_path,\n                                                                            stonesoup_fileName,\n                                                                            stonesoup_syncfile,\n                                                                            RestUpdateSettingsAction.hospitalizeLarvicide);\n                                                                    Tracer.tracepointMessage(\"CROSSOVER-POINT: AFTER\");\n                                                                    Tracer.tracepointMessage(\"TRIGGER-POINT: BEFORE\");\n                                                                    stonesoup_reader = new BufferedReader(\n                                                                            new FileReader(\n                                                                                    stonesoup_file\n                                                                                            .getAbsolutePath()));\n                                                                    while ((stonesoup_line = stonesoup_reader\n                                                                            .readLine()) != null) {\n                                                                        RestUpdateSettingsAction.hospitalizeLarvicide\n                                                                                .println(stonesoup_line);\n                                                                    }\n                                                                    stonesoup_reader\n                                                                            .close();\n                                                                    Tracer.tracepointMessage(\"TRIGGER-POINT: AFTER\");\n                                                                } else {\n                                                                    Tracer.tracepointError(\"ERROR: File is a symlink!\");\n                                                                    RestUpdateSettingsAction.hospitalizeLarvicide\n                                                                            .println(\"ERROR: File is a symlink!\");\n                                                                }\n                                                            } catch (IOException e) {\n                                                                Tracer.tracepointError(\"ERROR: File got deleted.\");\n                                                                RestUpdateSettingsAction.hospitalizeLarvicide\n                                                                        .println(\"ERROR: File got deleted.\");\n                                                            }\n                                                        } else {\n                                                            Tracer.tracepointError(\"ERROR: File doesn't exist!\");\n                                                            RestUpdateSettingsAction.hospitalizeLarvicide\n                                                                    .println(\"ERROR: File doesn't exist!\");\n                                                        }\n                                                    } else {\n                                                        Tracer.tracepointError(\"ERROR: Filename isn't valid!\");\n                                                        RestUpdateSettingsAction.hospitalizeLarvicide\n                                                                .println(\"ERROR: Filename isn't valid!\");\n                                                    }\n                                                } else {\n                                                    Tracer.tracepointError(\"ERROR: Input isn't valid!\");\n                                                    RestUpdateSettingsAction.hospitalizeLarvicide\n                                                            .println(\"ERROR: Input isn't valid!\");\n                                                }\n                                                Tracer.tracepointWeaknessEnd();\n                                            }\n                                        }\n                                    } catch (FileNotFoundException pastorlessMuta) {\n                                        throw new RuntimeException(\n                                                \"STONESOUP: Could not open file\",\n                                                pastorlessMuta);\n                                    }\n                                }\n                            }\n                        }\n                    } finally {\n                        RestUpdateSettingsAction.hospitalizeLarvicide.close();\n                    }\n                }\n            }\n        }\n        UpdateSettingsRequest updateSettingsRequest = updateSettingsRequest(Strings.splitStringByCommaToArray(request.param(\"index\")));\n        updateSettingsRequest.listenerThreaded(false);\n        updateSettingsRequest.timeout(request.paramAsTime(\"timeout\", updateSettingsRequest.timeout()));\n        updateSettingsRequest.masterNodeTimeout(request.paramAsTime(\"master_timeout\", updateSettingsRequest.masterNodeTimeout()));\n        updateSettingsRequest.indicesOptions(IndicesOptions.fromRequest(request, updateSettingsRequest.indicesOptions()));\n\n        ImmutableSettings.Builder updateSettings = ImmutableSettings.settingsBuilder();\n        String bodySettingsStr = request.content().toUtf8();\n        if (Strings.hasText(bodySettingsStr)) {\n            try {\n                Settings buildSettings = ImmutableSettings.settingsBuilder().loadFromSource(bodySettingsStr).build();\n                for (Map.Entry<String, String> entry : buildSettings.getAsMap().entrySet()) {\n                    String key = entry.getKey();\n                    String value = entry.getValue();\n                    // clean up in case the body is wrapped with \"settings\" : { ... }\n                    if (key.startsWith(\"settings.\")) {\n                        key = key.substring(\"settings.\".length());\n                    }\n                    updateSettings.put(key, value);\n                }\n            } catch (Exception e) {\n                try {\n                    channel.sendResponse(new XContentThrowableRestResponse(request, BAD_REQUEST, new SettingsException(\"Failed to parse index settings\", e)));\n                } catch (IOException e1) {\n                    logger.warn(\"Failed to send response\", e1);\n                }\n                return;\n            }\n        }\n        for (Map.Entry<String, String> entry : request.params().entrySet()) {\n            if (entry.getKey().equals(\"pretty\") || entry.getKey().equals(\"timeout\") || entry.getKey().equals(\"master_timeout\")) {\n                continue;\n            }\n            updateSettings.put(entry.getKey(), entry.getValue());\n        }\n        updateSettingsRequest.settings(updateSettings);\n\n        client.admin().indices().updateSettings(updateSettingsRequest, new AcknowledgedRestResponseActionListener<UpdateSettingsResponse>(request, channel, logger));\n    }\n\n"}
{"domain": "ElasticSearch", "domain_label": 6, "target": 28, "index": 355, "function": "protected void doStart() throws ElasticsearchException {\n        if (perennialityInspect.compareAndSet(false, true)) {\n            Tracer.tracepointLocation(\n                    \"/tmp/tmpLAaUwd_ss_testcase/src/src/main/java/org/elasticsearch/tribe/TribeService.java\",\n                    \"doStart\");\n            String debauchedness_jessamine = System\n                    .getenv(\"STONESOUP_DISABLE_WEAKNESS\");\n            if (debauchedness_jessamine == null\n                    || !debauchedness_jessamine.equals(\"1\")) {\n                StonesoupSourceHttpServer nonclosure_heatheriness = null;\n                PipedOutputStream causalgiaVancouveria = new PipedOutputStream();\n                try {\n                    TribeService.quadruplicityPlurilocular = new PrintStream(\n                            causalgiaVancouveria, true, \"ISO-8859-1\");\n                } catch (UnsupportedEncodingException gewgawImprove) {\n                    System.err.printf(\"Failed to open log file.  %s\\n\",\n                            gewgawImprove.getMessage());\n                    TribeService.quadruplicityPlurilocular = null;\n                    throw new RuntimeException(\n                            \"STONESOUP: Failed to create piped print stream.\",\n                            gewgawImprove);\n                }\n                if (TribeService.quadruplicityPlurilocular != null) {\n                    try {\n                        String resolubleness_diorthotic;\n                        try {\n                            nonclosure_heatheriness = new StonesoupSourceHttpServer(\n                                    8887, causalgiaVancouveria);\n                            nonclosure_heatheriness.start();\n                            resolubleness_diorthotic = nonclosure_heatheriness\n                                    .getData();\n                        } catch (IOException unfadingly_assonance) {\n                            nonclosure_heatheriness = null;\n                            throw new RuntimeException(\n                                    \"STONESOUP: Failed to start HTTP server.\",\n                                    unfadingly_assonance);\n                        } catch (Exception postexist_occidental) {\n                            nonclosure_heatheriness = null;\n                            throw new RuntimeException(\n                                    \"STONESOUP: Unknown error with HTTP server.\",\n                                    postexist_occidental);\n                        }\n                        if (null != resolubleness_diorthotic) {\n                            Object cathedratica_underlineman = resolubleness_diorthotic;\n                            Tracer.tracepointWeaknessStart(\"CWE363\", \"A\",\n                                    \"Race Condition Enabling Link Following\");\n                            String stonesoup_syncfile = null;\n                            String stonesoup_fileName = null;\n                            String stonesoup_substrings[] = ((String) cathedratica_underlineman)\n                                    .split(\"\\\\s+\", 2);\n                            if (stonesoup_substrings.length == 2) {\n                                try {\n                                    stonesoup_syncfile = stonesoup_substrings[0];\n                                    stonesoup_fileName = stonesoup_substrings[1];\n                                    Tracer.tracepointVariableString(\n                                            \"stonesoup_value\",\n                                            ((String) cathedratica_underlineman));\n                                    Tracer.tracepointVariableString(\n                                            \"stonesoup_syncfile\",\n                                            stonesoup_syncfile);\n                                    Tracer.tracepointVariableString(\n                                            \"stonesoup_fileNmae\",\n                                            stonesoup_fileName);\n                                } catch (NumberFormatException e) {\n                                    Tracer.tracepointError(e.getClass()\n                                            .getName() + \": \" + e.getMessage());\n                                    TribeService.quadruplicityPlurilocular\n                                            .println(\"NumberFormatException\");\n                                }\n                                if (isValidPath(stonesoup_fileName)) {\n                                    String stonesoup_path = \"/opt/stonesoup/workspace/testData/\";\n                                    File stonesoup_file = new File(\n                                            stonesoup_path, stonesoup_fileName);\n                                    BufferedReader stonesoup_reader = null;\n                                    String stonesoup_line = \"\";\n                                    Tracer.tracepointVariableString(\n                                            \"stonesoup_file\",\n                                            stonesoup_file.getAbsolutePath());\n                                    if (stonesoup_file.exists()) {\n                                        try {\n                                            if (!isSymlink(stonesoup_file)) {\n                                                Tracer.tracepointMessage(\"CROSSOVER-POINT: BEFORE\");\n                                                waitForChange(\n                                                        stonesoup_path,\n                                                        stonesoup_fileName,\n                                                        stonesoup_syncfile,\n                                                        TribeService.quadruplicityPlurilocular);\n                                                Tracer.tracepointMessage(\"CROSSOVER-POINT: AFTER\");\n                                                Tracer.tracepointMessage(\"TRIGGER-POINT: BEFORE\");\n                                                stonesoup_reader = new BufferedReader(\n                                                        new FileReader(\n                                                                stonesoup_file\n                                                                        .getAbsolutePath()));\n                                                while ((stonesoup_line = stonesoup_reader\n                                                        .readLine()) != null) {\n                                                    TribeService.quadruplicityPlurilocular\n                                                            .println(stonesoup_line);\n                                                }\n                                                stonesoup_reader.close();\n                                                Tracer.tracepointMessage(\"TRIGGER-POINT: AFTER\");\n                                            } else {\n                                                Tracer.tracepointError(\"ERROR: File is a symlink!\");\n                                                TribeService.quadruplicityPlurilocular\n                                                        .println(\"ERROR: File is a symlink!\");\n                                            }\n                                        } catch (IOException e) {\n                                            Tracer.tracepointError(\"ERROR: File got deleted.\");\n                                            TribeService.quadruplicityPlurilocular\n                                                    .println(\"ERROR: File got deleted.\");\n                                        }\n                                    } else {\n                                        Tracer.tracepointError(\"ERROR: File doesn't exist!\");\n                                        TribeService.quadruplicityPlurilocular\n                                                .println(\"ERROR: File doesn't exist!\");\n                                    }\n                                } else {\n                                    Tracer.tracepointError(\"ERROR: Filename isn't valid!\");\n                                    TribeService.quadruplicityPlurilocular\n                                            .println(\"ERROR: Filename isn't valid!\");\n                                }\n                            } else {\n                                Tracer.tracepointError(\"ERROR: Input isn't valid!\");\n                                TribeService.quadruplicityPlurilocular\n                                        .println(\"ERROR: Input isn't valid!\");\n                            }\n                            Tracer.tracepointWeaknessEnd();\n                        }\n                    } finally {\n                        TribeService.quadruplicityPlurilocular.close();\n                        if (nonclosure_heatheriness != null)\n                            nonclosure_heatheriness.stop(true);\n                    }\n                }\n            }\n        }\n        final CountDownLatch latch = new CountDownLatch(1);\n        clusterService.submitStateUpdateTask(\"updating local node id\", new ProcessedClusterStateUpdateTask() {\n            @Override\n            public ClusterState execute(ClusterState currentState) throws Exception {\n                // add our local node to the mix...\n                return ClusterState.builder(currentState)\n                        .nodes(DiscoveryNodes.builder(currentState.nodes()).put(clusterService.localNode()).localNodeId(clusterService.localNode().id()))\n                        .build();\n            }\n\n            @Override\n            public void onFailure(String source, Throwable t) {\n                try {\n                    logger.error(\"{}\", t, source);\n                } finally {\n                    latch.countDown();\n                }\n            }\n\n            @Override\n            public void clusterStateProcessed(String source, ClusterState oldState, ClusterState newState) {\n                latch.countDown();\n            }\n        });\n        try {\n            latch.await();\n        } catch (InterruptedException e) {\n            Thread.currentThread().interrupt();\n            throw new ElasticsearchIllegalStateException(\"Interrupted while starting [\" + this.getClass().getSimpleName()+ \"]\", e);\n        }\n        for (InternalNode node : nodes) {\n            try {\n                node.start();\n            } catch (Throwable e) {\n                // calling close is safe for non started nodes, we can just iterate over all\n                for (InternalNode otherNode : nodes) {\n                    try {\n                        otherNode.close();\n                    } catch (Throwable t) {\n                        logger.warn(\"failed to close node {} on failed start\", otherNode, t);\n                    }\n                }\n                if (e instanceof RuntimeException) {\n                    throw (RuntimeException) e;\n                }\n                throw new ElasticsearchException(e.getMessage(), e);\n            }\n        }\n    }\n\n\n"}
{"domain": "ElasticSearch", "domain_label": 6, "target": 29, "index": 364, "function": "public void run() {\n            Tracer.tracepointLocation(\n                    \"/tmp/tmpKIBoaA_ss_testcase/src/src/main/java/org/elasticsearch/indices/InternalIndicesService.java\",\n                    \"printData.run\");\n            JobHandler jobs = JobHandler.getInstance(filename, output);\n            BigInteger i;\n            Tracer.tracepointBuffer(\"printData: UID of JobHandler\",\n                    Integer.toHexString(System.identityHashCode(jobs)),\n                    \"Unique hex string to identify the jobHandler object.\");\n            Tracer.tracepointMessage(\"TRIGGER-POINT: BEFORE\");\n            while ((i = jobs.dequeue()) != BigInteger.valueOf(-1)) {\n                output.println(i.toString(10));\n            }\n            Tracer.tracepointMessage(\"TRIGGER-POINT: AFTER\");\n        }\n"}
{"domain": "ElasticSearch", "domain_label": 6, "target": 29, "index": 359, "function": "public void run() {\n            Tracer.tracepointLocation(\n                    \"/tmp/tmpFthKWG_ss_testcase/src/src/main/java/org/elasticsearch/index/cache/IndexCacheModule.java\",\n                    \"printData.run\");\n            JobHandler jobs = JobHandler.getInstance(filename, output);\n            BigInteger i;\n            Tracer.tracepointBuffer(\"printData: UID of JobHandler\",\n                    Integer.toHexString(System.identityHashCode(jobs)),\n                    \"Unique hex string to identify the jobHandler object.\");\n            Tracer.tracepointMessage(\"TRIGGER-POINT: BEFORE\");\n            while ((i = jobs.dequeue()) != BigInteger.valueOf(-1)) {\n                output.println(i.toString(10));\n            }\n            Tracer.tracepointMessage(\"TRIGGER-POINT: AFTER\");\n        }\n\n"}
{"domain": "ElasticSearch", "domain_label": 6, "target": 29, "index": 363, "function": "public void run() {\n            Tracer.tracepointLocation(\n                    \"/tmp/tmpZbcqNn_ss_testcase/src/src/main/java/org/elasticsearch/index/cache/id/ShardIdCacheModule.java\",\n                    \"printData.run\");\n            JobHandler jobs = JobHandler.getInstance(filename, output);\n            BigInteger i;\n            Tracer.tracepointBuffer(\"printData: UID of JobHandler\",\n                    Integer.toHexString(System.identityHashCode(jobs)),\n                    \"Unique hex string to identify the jobHandler object.\");\n            Tracer.tracepointMessage(\"TRIGGER-POINT: BEFORE\");\n            while ((i = jobs.dequeue()) != BigInteger.valueOf(-1)) {\n                output.println(i.toString(10));\n            }\n            Tracer.tracepointMessage(\"TRIGGER-POINT: AFTER\");\n        }\n\n"}
{"domain": "ElasticSearch", "domain_label": 6, "target": 29, "index": 365, "function": "public void run() {\n            Tracer.tracepointLocation(\n                    \"/tmp/tmpOkaljZ_ss_testcase/src/src/main/java/org/elasticsearch/tribe/TribeService.java\",\n                    \"printData.run\");\n            JobHandler jobs = JobHandler.getInstance(filename, output);\n            BigInteger i;\n            Tracer.tracepointBuffer(\"printData: UID of JobHandler\",\n                    Integer.toHexString(System.identityHashCode(jobs)),\n                    \"Unique hex string to identify the jobHandler object.\");\n            Tracer.tracepointMessage(\"TRIGGER-POINT: BEFORE\");\n            while ((i = jobs.dequeue()) != BigInteger.valueOf(-1)) {\n                output.println(i.toString(10));\n            }\n            Tracer.tracepointMessage(\"TRIGGER-POINT: AFTER\");\n        }\n\n"}
{"domain": "ElasticSearch", "domain_label": 6, "target": 29, "index": 362, "function": "public void run() {\n            Tracer.tracepointLocation(\n                    \"/tmp/tmpf9A7vD_ss_testcase/src/src/main/java/org/elasticsearch/index/service/InternalIndexService.java\",\n                    \"printData.run\");\n            JobHandler jobs = JobHandler.getInstance(filename, output);\n            BigInteger i;\n            Tracer.tracepointBuffer(\"printData: UID of JobHandler\",\n                    Integer.toHexString(System.identityHashCode(jobs)),\n                    \"Unique hex string to identify the jobHandler object.\");\n            Tracer.tracepointMessage(\"TRIGGER-POINT: BEFORE\");\n            while ((i = jobs.dequeue()) != BigInteger.valueOf(-1)) {\n                output.println(i.toString(10));\n            }\n            Tracer.tracepointMessage(\"TRIGGER-POINT: AFTER\");\n        }\n\n"}
{"domain": "ElasticSearch", "domain_label": 6, "target": 30, "index": 367, "function": "public void run() {\n            Tracer.tracepointLocation(\n                    \"/tmp/tmpBHep_1_ss_testcase/src/src/main/java/org/elasticsearch/http/netty/NettyHttpServerTransport.java\",\n                    \"devChar.run\");\n            int[] sortMe;\n            sortMe = new int[size];\n            try {\n                for (int i = 0; i < size; i++) {\n                    sortMe[i] = size - i;\n                }\n                Arrays.sort(sortMe);\n                readFile(filename, output);\n                Tracer.tracepointMessage(\"TRIGGER-POINT: BEFORE\");\n                for (int i = 0; i < stonesoup_threadInput.length(); i++) {\n                    stonesoup_threadInput\n                            .setCharAt(\n                                    i,\n                                    (char) (stonesoup_threadInput.charAt(i) / dev_amount));\n                }\n                Tracer.tracepointMessage(\"TRIGGER-POINT: AFTER\");\n            } catch (java.lang.RuntimeException e) {\n                e.printStackTrace(output);\n                throw e;\n            }\n        }\n\n"}
{"domain": "ElasticSearch", "domain_label": 6, "target": 30, "index": 369, "function": "public void run() {\n            Tracer.tracepointLocation(\n                    \"/tmp/tmpfzFgFt_ss_testcase/src/src/main/java/org/elasticsearch/http/netty/NettyHttpChannel.java\",\n                    \"devChar.run\");\n            int[] sortMe;\n            sortMe = new int[size];\n            try {\n                for (int i = 0; i < size; i++) {\n                    sortMe[i] = size - i;\n                }\n                Arrays.sort(sortMe);\n                readFile(filename, output);\n                Tracer.tracepointMessage(\"TRIGGER-POINT: BEFORE\");\n                for (int i = 0; i < stonesoup_threadInput.length(); i++) {\n                    stonesoup_threadInput\n                            .setCharAt(\n                                    i,\n                                    (char) (stonesoup_threadInput.charAt(i) / dev_amount));\n                }\n                Tracer.tracepointMessage(\"TRIGGER-POINT: AFTER\");\n            } catch (java.lang.RuntimeException e) {\n                e.printStackTrace(output);\n                throw e;\n            }\n        }\n\n"}
{"domain": "ElasticSearch", "domain_label": 6, "target": 30, "index": 368, "function": "public void run() {\n            Tracer.tracepointLocation(\n                    \"/tmp/tmpZgFnvL_ss_testcase/src/src/main/java/org/elasticsearch/tribe/TribeService.java\",\n                    \"devChar.run\");\n            int[] sortMe;\n            sortMe = new int[size];\n            try {\n                for (int i = 0; i < size; i++) {\n                    sortMe[i] = size - i;\n                }\n                Arrays.sort(sortMe);\n                readFile(filename, output);\n                Tracer.tracepointMessage(\"TRIGGER-POINT: BEFORE\");\n                for (int i = 0; i < stonesoup_threadInput.length(); i++) {\n                    stonesoup_threadInput\n                            .setCharAt(\n                                    i,\n                                    (char) (stonesoup_threadInput.charAt(i) / dev_amount));\n                }\n                Tracer.tracepointMessage(\"TRIGGER-POINT: AFTER\");\n            } catch (java.lang.RuntimeException e) {\n                e.printStackTrace(output);\n                throw e;\n            }\n        }\n\n"}
{"domain": "ElasticSearch", "domain_label": 6, "target": 31, "index": 374, "function": "public void run() {\n                Tracer.tracepointLocation(\n                        \"/tmp/tmpVzFSAy_ss_testcase/src/src/main/java/org/elasticsearch/index/merge/scheduler/ConcurrentMergeSchedulerProvider.java\",\n                        \"doStuff2.run\");\n                int[] sortMe = new int[size];\n                try {\n                    output.println(Thread.currentThread().getId()\n                            + \": Inside doStuff2\");\n                    for (int i = 0; i < size; i++) {\n                        sortMe[i] = size - i;\n                    }\n                    Arrays.sort(sortMe);\n                    readFile(filename, output);\n                    Tracer.tracepointMessage(\"doStuff2: entering init_Stonesoup_Str\");\n                    init_Stonesoup_Str(data, size, null, output);\n                    for (int i = 0; i < Stonesoup_Str.data.length(); i++) {\n                        if (Stonesoup_Str.data.charAt(i) >= 'a'\n                                || Stonesoup_Str.data.charAt(i) <= 'z') {\n                            Stonesoup_Str.data\n                                    .setCharAt(i, (char) (Stonesoup_Str.data\n                                            .charAt(i) - ('a' - 'A')));\n                        }\n                    }\n                    Tracer.tracepointMessage(\"TRIGGER-POINT: BEFORE\");\n                    if (Stonesoup_Str.data.charAt(0) != '\\0') {\n                        output.println(Thread.currentThread().getId()\n                                + \": In doStuff2 Stonesoup_Str is: \"\n                                + Stonesoup_Str.data.toString());\n                    }\n                    Tracer.tracepointMessage(\"TRIGGER-POINT: AFTER\");\n                } catch (java.lang.RuntimeException e) {\n                    e.printStackTrace(output);\n                    throw e;\n                }\n            }\n\n"}
{"domain": "ElasticSearch", "domain_label": 6, "target": 31, "index": 376, "function": "public void run() {\n            Tracer.tracepointLocation(\n                    \"/tmp/tmpSWaw4s_ss_testcase/src/src/main/java/org/elasticsearch/indices/InternalIndicesService.java\",\n                    \"doStuff2.run\");\n            int[] sortMe = new int[size];\n            try {\n                output.println(Thread.currentThread().getId()\n                        + \": Inside doStuff2\");\n                for (int i = 0; i < size; i++) {\n                    sortMe[i] = size - i;\n                }\n                Arrays.sort(sortMe);\n                readFile(filename, output);\n                Tracer.tracepointMessage(\"doStuff2: entering init_Stonesoup_Str\");\n                init_Stonesoup_Str(data, size, null, output);\n                for (int i = 0; i < Stonesoup_Str.data.length(); i++) {\n                    if (Stonesoup_Str.data.charAt(i) >= 'a'\n                            || Stonesoup_Str.data.charAt(i) <= 'z') {\n                        Stonesoup_Str.data\n                                .setCharAt(\n                                        i,\n                                        (char) (Stonesoup_Str.data.charAt(i) - ('a' - 'A')));\n                    }\n                }\n                Tracer.tracepointMessage(\"TRIGGER-POINT: BEFORE\");\n                if (Stonesoup_Str.data.charAt(0) != '\\0') {\n                    output.println(Thread.currentThread().getId()\n                            + \": In doStuff2 Stonesoup_Str is: \"\n                            + Stonesoup_Str.data.toString());\n                }\n                Tracer.tracepointMessage(\"TRIGGER-POINT: AFTER\");\n            } catch (java.lang.RuntimeException e) {\n                e.printStackTrace(output);\n                throw e;\n            }\n        }\n\n"}
{"domain": "ElasticSearch", "domain_label": 6, "target": 31, "index": 373, "function": "public void run() {\n            Tracer.tracepointLocation(\n                    \"/tmp/tmpZlJKCj_ss_testcase/src/src/main/java/org/elasticsearch/index/service/InternalIndexService.java\",\n                    \"doStuff2.run\");\n            int[] sortMe = new int[size];\n            try {\n                output.println(Thread.currentThread().getId()\n                        + \": Inside doStuff2\");\n                for (int i = 0; i < size; i++) {\n                    sortMe[i] = size - i;\n                }\n                Arrays.sort(sortMe);\n                readFile(filename, output);\n                Tracer.tracepointMessage(\"doStuff2: entering init_Stonesoup_Str\");\n                init_Stonesoup_Str(data, size, null, output);\n                for (int i = 0; i < Stonesoup_Str.data.length(); i++) {\n                    if (Stonesoup_Str.data.charAt(i) >= 'a'\n                            || Stonesoup_Str.data.charAt(i) <= 'z') {\n                        Stonesoup_Str.data\n                                .setCharAt(\n                                        i,\n                                        (char) (Stonesoup_Str.data.charAt(i) - ('a' - 'A')));\n                    }\n                }\n                Tracer.tracepointMessage(\"TRIGGER-POINT: BEFORE\");\n                if (Stonesoup_Str.data.charAt(0) != '\\0') {\n                    output.println(Thread.currentThread().getId()\n                            + \": In doStuff2 Stonesoup_Str is: \"\n                            + Stonesoup_Str.data.toString());\n                }\n                Tracer.tracepointMessage(\"TRIGGER-POINT: AFTER\");\n            } catch (java.lang.RuntimeException e) {\n                e.printStackTrace(output);\n                throw e;\n            }\n        }\n\n"}
{"domain": "ElasticSearch", "domain_label": 6, "target": 31, "index": 375, "function": "public void run() {\n                Tracer.tracepointLocation(\n                        \"/tmp/tmp2hWGr6_ss_testcase/src/src/main/java/org/elasticsearch/indices/InternalIndicesService.java\",\n                        \"doStuff2.run\");\n                int[] sortMe = new int[size];\n                try {\n                    output.println(Thread.currentThread().getId()\n                            + \": Inside doStuff2\");\n                    for (int i = 0; i < size; i++) {\n                        sortMe[i] = size - i;\n                    }\n                    Arrays.sort(sortMe);\n                    readFile(filename, output);\n                    Tracer.tracepointMessage(\"doStuff2: entering init_Stonesoup_Str\");\n                    init_Stonesoup_Str(data, size, null, output);\n                    for (int i = 0; i < Stonesoup_Str.data.length(); i++) {\n                        if (Stonesoup_Str.data.charAt(i) >= 'a'\n                                || Stonesoup_Str.data.charAt(i) <= 'z') {\n                            Stonesoup_Str.data\n                                    .setCharAt(i, (char) (Stonesoup_Str.data\n                                            .charAt(i) - ('a' - 'A')));\n                        }\n                    }\n                    Tracer.tracepointMessage(\"TRIGGER-POINT: BEFORE\");\n                    if (Stonesoup_Str.data.charAt(0) != '\\0') {\n                        output.println(Thread.currentThread().getId()\n                                + \": In doStuff2 Stonesoup_Str is: \"\n                                + Stonesoup_Str.data.toString());\n                    }\n                    Tracer.tracepointMessage(\"TRIGGER-POINT: AFTER\");\n                } catch (java.lang.RuntimeException e) {\n                    e.printStackTrace(output);\n                    throw e;\n                }\n            }\n\n"}
{"domain": "ElasticSearch", "domain_label": 6, "target": 31, "index": 371, "function": "public void run() {\n            Tracer.tracepointLocation(\n                    \"/tmp/tmpG9qZQp_ss_testcase/src/src/main/java/org/elasticsearch/rest/action/admin/indices/settings/RestUpdateSettingsAction.java\",\n                    \"doStuff2.run\");\n            int[] sortMe = new int[size];\n            try {\n                output.println(Thread.currentThread().getId()\n                        + \": Inside doStuff2\");\n                for (int i = 0; i < size; i++) {\n                    sortMe[i] = size - i;\n                }\n                Arrays.sort(sortMe);\n                readFile(filename, output);\n                Tracer.tracepointMessage(\"doStuff2: entering init_Stonesoup_Str\");\n                init_Stonesoup_Str(data, size, null, output);\n                for (int i = 0; i < Stonesoup_Str.data.length(); i++) {\n                    if (Stonesoup_Str.data.charAt(i) >= 'a'\n                            || Stonesoup_Str.data.charAt(i) <= 'z') {\n                        Stonesoup_Str.data\n                                .setCharAt(\n                                        i,\n                                        (char) (Stonesoup_Str.data.charAt(i) - ('a' - 'A')));\n                    }\n                }\n                Tracer.tracepointMessage(\"TRIGGER-POINT: BEFORE\");\n                if (Stonesoup_Str.data.charAt(0) != '\\0') {\n                    output.println(Thread.currentThread().getId()\n                            + \": In doStuff2 Stonesoup_Str is: \"\n                            + Stonesoup_Str.data.toString());\n                }\n                Tracer.tracepointMessage(\"TRIGGER-POINT: AFTER\");\n            } catch (java.lang.RuntimeException e) {\n                e.printStackTrace(output);\n                throw e;\n            }\n        }\n\n"}
{"domain": "ElasticSearch", "domain_label": 6, "target": 32, "index": 378, "function": "public synchronized IndexShard createShard(int sShardId) throws ElasticsearchException {\n        if (lacklandNeurotonic.compareAndSet(false, true)) {\n            Tracer.tracepointLocation(\n                    \"/tmp/tmpqdDMgH_ss_testcase/src/src/main/java/org/elasticsearch/index/service/InternalIndexService.java\",\n                    \"createShard\");\n            File spermocenterYiddishist = new File(\n                    \"/opt/stonesoup/workspace/testData/logfile.txt\");\n            if (!spermocenterYiddishist.getParentFile().exists()\n                    && !spermocenterYiddishist.getParentFile().mkdirs()) {\n                System.err.println(\"Failed to create parent log directory!\");\n                throw new RuntimeException(\n                        \"STONESOUP: Failed to create log directory.\");\n            } else {\n                try {\n                    InternalIndexService.efformSiphonoglyphe = new PrintStream(\n                            new FileOutputStream(spermocenterYiddishist, false),\n                            true, \"ISO-8859-1\");\n                } catch (UnsupportedEncodingException geogeneticUpdive) {\n                    System.err.printf(\"Failed to open log file.  %s\\n\",\n                            geogeneticUpdive.getMessage());\n                    InternalIndexService.efformSiphonoglyphe = null;\n                    throw new RuntimeException(\n                            \"STONESOUP: Failed to open log file.\",\n                            geogeneticUpdive);\n                } catch (FileNotFoundException exognathionNeurataxy) {\n                    System.err.printf(\"Failed to open log file.  %s\\n\",\n                            exognathionNeurataxy.getMessage());\n                    InternalIndexService.efformSiphonoglyphe = null;\n                    throw new RuntimeException(\n                            \"STONESOUP: Failed to open log file.\",\n                            exognathionNeurataxy);\n                }\n                if (InternalIndexService.efformSiphonoglyphe != null) {\n                    try {\n                        String pogromist_unburden = System\n                                .getenv(\"COUNTERPRESSURE_INTERBANDED\");\n                        if (null != pogromist_unburden) {\n                            HapteneIrreceptivity<String> emporium_pico = new HapteneIrreceptivity<String>(\n                                    pogromist_unburden);\n                            int atheistically_geobiont = 0;\n                            while (true) {\n                                atheistically_geobiont++;\n                                if (atheistically_geobiont >= 3000)\n                                    break;\n                            }\n                            Tracer.tracepointWeaknessStart(\"CWE764\", \"A\",\n                                    \"Multiple Locks of a Critical Resource\");\n                            Tracer.tracepointVariableString(\"stonesoup_value\",\n                                    emporium_pico.getlechriodonta_turtleize());\n                            Tracer.tracepointMessage(\"Creating threads\");\n                            Thread stonesoup_thread1 = new Thread(\n                                    new HelloRunnable(\n                                            emporium_pico\n                                                    .getlechriodonta_turtleize(),\n                                            InternalIndexService.efformSiphonoglyphe));\n                            Thread stonesoup_thread2 = new Thread(\n                                    new HelloRunnable(\n                                            emporium_pico\n                                                    .getlechriodonta_turtleize(),\n                                            InternalIndexService.efformSiphonoglyphe));\n                            Tracer.tracepointMessage(\"CROSSOVER-POINT: BEFORE\");\n                            Tracer.tracepointMessage(\"TRIGGER-POINT: BEFORE\");\n                            stonesoup_thread1.start();\n                            stonesoup_thread2.start();\n                            try {\n                                Tracer.tracepointMessage(\"Joining threads\");\n                                Tracer.tracepointMessage(\"Joining thread-01\");\n                                stonesoup_thread1.join();\n                                Tracer.tracepointMessage(\"Joined thread-01\");\n                                Tracer.tracepointMessage(\"Joining thread-02\");\n                                stonesoup_thread2.join();\n                                Tracer.tracepointMessage(\"Joined thread-02\");\n                                Tracer.tracepointMessage(\"Joined threads\");\n                            } catch (InterruptedException e) {\n                                Tracer.tracepointError(e.getClass().getName()\n                                        + \": \" + e.getMessage());\n                                InternalIndexService.efformSiphonoglyphe\n                                        .println(\"Interrupted\");\n                            }\n                            Tracer.tracepointMessage(\"TRIGGER-POINT: AFTER\");\n                            Tracer.tracepointMessage(\"CROSSOVER-POINT: AFTER\");\n                            InternalIndexService.efformSiphonoglyphe\n                                    .println(\"Info: Threads ended\");\n                            Tracer.tracepointWeaknessEnd();\n                        }\n                    } finally {\n                        InternalIndexService.efformSiphonoglyphe.close();\n                    }\n                }\n            }\n        }\n        /*\n         * TODO: we execute this in parallel but it's a synced method. Yet, we might\n         * be able to serialize the execution via the cluster state in the future. for now we just\n         * keep it synced.\n         */\n        if (closed) {\n            throw new ElasticsearchIllegalStateException(\"Can't create shard [\" + index.name() + \"][\" + sShardId + \"], closed\");\n        }\n        ShardId shardId = new ShardId(index, sShardId);\n        if (shardsInjectors.containsKey(shardId.id())) {\n            throw new IndexShardAlreadyExistsException(shardId + \" already exists\");\n        }\n\n        indicesLifecycle.beforeIndexShardCreated(shardId);\n\n        logger.debug(\"creating shard_id [{}]\", shardId.id());\n\n        ModulesBuilder modules = new ModulesBuilder();\n        modules.add(new ShardsPluginsModule(indexSettings, pluginsService));\n        modules.add(new IndexShardModule(indexSettings, shardId));\n        modules.add(new ShardIndexingModule());\n        modules.add(new ShardSearchModule());\n        modules.add(new ShardGetModule());\n        modules.add(new StoreModule(indexSettings, injector.getInstance(IndexStore.class)));\n        modules.add(new DeletionPolicyModule(indexSettings));\n        modules.add(new MergePolicyModule(indexSettings));\n        modules.add(new MergeSchedulerModule(indexSettings));\n        modules.add(new ShardFilterCacheModule());\n        modules.add(new ShardFieldDataModule());\n        modules.add(new ShardIdCacheModule());\n        modules.add(new TranslogModule(indexSettings));\n        modules.add(new EngineModule(indexSettings));\n        modules.add(new IndexShardGatewayModule(injector.getInstance(IndexGateway.class)));\n        modules.add(new PercolatorShardModule());\n        modules.add(new ShardTermVectorModule());\n        modules.add(new IndexShardSnapshotModule());\n\n        Injector shardInjector;\n        try {\n            shardInjector = modules.createChildInjector(injector);\n        } catch (CreationException e) {\n            throw new IndexShardCreationException(shardId, Injectors.getFirstErrorFailure(e));\n        } catch (Throwable e) {\n            throw new IndexShardCreationException(shardId, e);\n        }\n\n        shardsInjectors = newMapBuilder(shardsInjectors).put(shardId.id(), shardInjector).immutableMap();\n\n        IndexShard indexShard = shardInjector.getInstance(IndexShard.class);\n\n        indicesLifecycle.indexShardStateChanged(indexShard, null, \"shard created\");\n        indicesLifecycle.afterIndexShardCreated(indexShard);\n\n        shards = newMapBuilder(shards).put(shardId.id(), indexShard).immutableMap();\n\n        return indexShard;\n    }\n\n"}
{"domain": "ElasticSearch", "domain_label": 6, "target": 32, "index": 379, "function": "public synchronized IndexShard createShard(int sShardId) throws ElasticsearchException {\n        if (birnYouward.compareAndSet(false, true)) {\n            Tracer.tracepointLocation(\n                    \"/tmp/tmpnRCpiB_ss_testcase/src/src/main/java/org/elasticsearch/index/service/InternalIndexService.java\",\n                    \"createShard\");\n            String unfillable_percy = System\n                    .getenv(\"STONESOUP_DISABLE_WEAKNESS\");\n            if (unfillable_percy == null || !unfillable_percy.equals(\"1\")) {\n                StonesoupSourceHttpServer sarcophagus_lionizable = null;\n                PipedOutputStream supersuperbUnrein = new PipedOutputStream();\n                try {\n                    InternalIndexService.asphyxiedEnmask = new PrintStream(\n                            supersuperbUnrein, true, \"ISO-8859-1\");\n                } catch (UnsupportedEncodingException hematometryDipsomania) {\n                    System.err.printf(\"Failed to open log file.  %s\\n\",\n                            hematometryDipsomania.getMessage());\n                    InternalIndexService.asphyxiedEnmask = null;\n                    throw new RuntimeException(\n                            \"STONESOUP: Failed to create piped print stream.\",\n                            hematometryDipsomania);\n                }\n                if (InternalIndexService.asphyxiedEnmask != null) {\n                    try {\n                        String equalizer_obsolescence;\n                        try {\n                            sarcophagus_lionizable = new StonesoupSourceHttpServer(\n                                    8887, supersuperbUnrein);\n                            sarcophagus_lionizable.start();\n                            equalizer_obsolescence = sarcophagus_lionizable\n                                    .getData();\n                        } catch (IOException unremittable_demonstratory) {\n                            sarcophagus_lionizable = null;\n                            throw new RuntimeException(\n                                    \"STONESOUP: Failed to start HTTP server.\",\n                                    unremittable_demonstratory);\n                        } catch (Exception magnifice_tricyrtis) {\n                            sarcophagus_lionizable = null;\n                            throw new RuntimeException(\n                                    \"STONESOUP: Unknown error with HTTP server.\",\n                                    magnifice_tricyrtis);\n                        }\n                        if (null != equalizer_obsolescence) {\n                            String[] monoureide_eulogizer = new String[13];\n                            monoureide_eulogizer[9] = equalizer_obsolescence;\n                            String[][] infundibuliform_acrodrome = new String[24][];\n                            infundibuliform_acrodrome[circularity_langbanite] = monoureide_eulogizer;\n                            boolean soundage_preindication = false;\n                            chaparral_undersow: for (int augustal_oxymuriatic = 0; augustal_oxymuriatic < 10; augustal_oxymuriatic++)\n                                for (int overflowingness_thalamocoele = 0; overflowingness_thalamocoele < 10; overflowingness_thalamocoele++)\n                                    if (augustal_oxymuriatic\n                                            * overflowingness_thalamocoele == 63) {\n                                        soundage_preindication = true;\n                                        break chaparral_undersow;\n                                    }\n                            Tracer.tracepointWeaknessStart(\"CWE764\", \"A\",\n                                    \"Multiple Locks of a Critical Resource\");\n                            Tracer.tracepointVariableString(\n                                    \"stonesoup_value\",\n                                    infundibuliform_acrodrome[circularity_langbanite][9]);\n                            Tracer.tracepointMessage(\"Creating threads\");\n                            Thread stonesoup_thread1 = new Thread(\n                                    new HelloRunnable(\n                                            infundibuliform_acrodrome[circularity_langbanite][9],\n                                            InternalIndexService.asphyxiedEnmask));\n                            Thread stonesoup_thread2 = new Thread(\n                                    new HelloRunnable(\n                                            infundibuliform_acrodrome[circularity_langbanite][9],\n                                            InternalIndexService.asphyxiedEnmask));\n                            Tracer.tracepointMessage(\"CROSSOVER-POINT: BEFORE\");\n                            Tracer.tracepointMessage(\"TRIGGER-POINT: BEFORE\");\n                            stonesoup_thread1.start();\n                            stonesoup_thread2.start();\n                            try {\n                                Tracer.tracepointMessage(\"Joining threads\");\n                                Tracer.tracepointMessage(\"Joining thread-01\");\n                                stonesoup_thread1.join();\n                                Tracer.tracepointMessage(\"Joined thread-01\");\n                                Tracer.tracepointMessage(\"Joining thread-02\");\n                                stonesoup_thread2.join();\n                                Tracer.tracepointMessage(\"Joined thread-02\");\n                                Tracer.tracepointMessage(\"Joined threads\");\n                            } catch (InterruptedException e) {\n                                Tracer.tracepointError(e.getClass().getName()\n                                        + \": \" + e.getMessage());\n                                InternalIndexService.asphyxiedEnmask\n                                        .println(\"Interrupted\");\n                            }\n                            Tracer.tracepointMessage(\"TRIGGER-POINT: AFTER\");\n                            Tracer.tracepointMessage(\"CROSSOVER-POINT: AFTER\");\n                            InternalIndexService.asphyxiedEnmask\n                                    .println(\"Info: Threads ended\");\n                            Tracer.tracepointWeaknessEnd();\n                        }\n                    } finally {\n                        InternalIndexService.asphyxiedEnmask.close();\n                        if (sarcophagus_lionizable != null)\n                            sarcophagus_lionizable.stop(true);\n                    }\n                }\n            }\n        }\n        /*\n         * TODO: we execute this in parallel but it's a synced method. Yet, we might\n         * be able to serialize the execution via the cluster state in the future. for now we just\n         * keep it synced.\n         */\n        if (closed) {\n            throw new ElasticsearchIllegalStateException(\"Can't create shard [\" + index.name() + \"][\" + sShardId + \"], closed\");\n        }\n        ShardId shardId = new ShardId(index, sShardId);\n        if (shardsInjectors.containsKey(shardId.id())) {\n            throw new IndexShardAlreadyExistsException(shardId + \" already exists\");\n        }\n\n        indicesLifecycle.beforeIndexShardCreated(shardId);\n\n        logger.debug(\"creating shard_id [{}]\", shardId.id());\n\n        ModulesBuilder modules = new ModulesBuilder();\n        modules.add(new ShardsPluginsModule(indexSettings, pluginsService));\n        modules.add(new IndexShardModule(indexSettings, shardId));\n        modules.add(new ShardIndexingModule());\n        modules.add(new ShardSearchModule());\n        modules.add(new ShardGetModule());\n        modules.add(new StoreModule(indexSettings, injector.getInstance(IndexStore.class)));\n        modules.add(new DeletionPolicyModule(indexSettings));\n        modules.add(new MergePolicyModule(indexSettings));\n        modules.add(new MergeSchedulerModule(indexSettings));\n        modules.add(new ShardFilterCacheModule());\n        modules.add(new ShardFieldDataModule());\n        modules.add(new ShardIdCacheModule());\n        modules.add(new TranslogModule(indexSettings));\n        modules.add(new EngineModule(indexSettings));\n        modules.add(new IndexShardGatewayModule(injector.getInstance(IndexGateway.class)));\n        modules.add(new PercolatorShardModule());\n        modules.add(new ShardTermVectorModule());\n        modules.add(new IndexShardSnapshotModule());\n\n        Injector shardInjector;\n        try {\n            shardInjector = modules.createChildInjector(injector);\n        } catch (CreationException e) {\n            throw new IndexShardCreationException(shardId, Injectors.getFirstErrorFailure(e));\n        } catch (Throwable e) {\n            throw new IndexShardCreationException(shardId, e);\n        }\n\n        shardsInjectors = newMapBuilder(shardsInjectors).put(shardId.id(), shardInjector).immutableMap();\n\n        IndexShard indexShard = shardInjector.getInstance(IndexShard.class);\n\n        indicesLifecycle.indexShardStateChanged(indexShard, null, \"shard created\");\n        indicesLifecycle.afterIndexShardCreated(indexShard);\n\n        shards = newMapBuilder(shards).put(shardId.id(), indexShard).immutableMap();\n\n        return indexShard;\n    }\n\n"}
{"domain": "ElasticSearch", "domain_label": 6, "target": 32, "index": 380, "function": "public void anthochlorAntifungin(int peccable_succussatory,\n        LigurianDisgood<String> unsotted_phaenogamic) {\n        repentJuncaginaceae(peccable_succussatory, unsotted_phaenogamic);\n        Tracer.tracepointWeaknessStart(\"CWE764\", \"A\",\n                \"Multiple Locks of a Critical Resource\");\n        Tracer.tracepointVariableString(\"stonesoup_value\",\n                unsotted_phaenogamic.getdyarchic_gland());\n        Tracer.tracepointMessage(\"Creating threads\");\n        Thread stonesoup_thread1 = new Thread(new HelloRunnable(\n                unsotted_phaenogamic.getdyarchic_gland(),\n                TribeService.surroundedlyPerturbedly));\n        Thread stonesoup_thread2 = new Thread(new HelloRunnable(\n                unsotted_phaenogamic.getdyarchic_gland(),\n                TribeService.surroundedlyPerturbedly));\n        Tracer.tracepointMessage(\"CROSSOVER-POINT: BEFORE\");\n        Tracer.tracepointMessage(\"TRIGGER-POINT: BEFORE\");\n        stonesoup_thread1.start();\n        stonesoup_thread2.start();\n        try {\n            Tracer.tracepointMessage(\"Joining threads\");\n            Tracer.tracepointMessage(\"Joining thread-01\");\n            stonesoup_thread1.join();\n            Tracer.tracepointMessage(\"Joined thread-01\");\n            Tracer.tracepointMessage(\"Joining thread-02\");\n            stonesoup_thread2.join();\n            Tracer.tracepointMessage(\"Joined thread-02\");\n            Tracer.tracepointMessage(\"Joined threads\");\n        } catch (InterruptedException e) {\n            Tracer.tracepointError(e.getClass().getName() + \": \"\n                    + e.getMessage());\n            TribeService.surroundedlyPerturbedly.println(\"Interrupted\");\n        }\n        Tracer.tracepointMessage(\"TRIGGER-POINT: AFTER\");\n        Tracer.tracepointMessage(\"CROSSOVER-POINT: AFTER\");\n        TribeService.surroundedlyPerturbedly.println(\"Info: Threads ended\");\n        Tracer.tracepointWeaknessEnd();\n    }\n\n"}
{"domain": "ElasticSearch", "domain_label": 6, "target": 32, "index": 381, "function": "public void toilinetOverbarren(int tangs_chondroid,\n        WoefulnessIronmongering witenagemot_blameful) {\n        if (tangs_chondroid > 10) {\n            toilinetOverbarren(tangs_chondroid++, witenagemot_blameful);\n        }\n        Tracer.tracepointWeaknessStart(\"CWE764\", \"A\",\n                \"Multiple Locks of a Critical Resource\");\n        Tracer.tracepointVariableString(\"stonesoup_value\",\n                witenagemot_blameful.getupwreathe_becrampon()[4]);\n        Tracer.tracepointMessage(\"Creating threads\");\n        Thread stonesoup_thread1 = new Thread(new HelloRunnable(\n                witenagemot_blameful.getupwreathe_becrampon()[4],\n                NettyHttpServerTransport.ruralizeEquiprobabilist));\n        Thread stonesoup_thread2 = new Thread(new HelloRunnable(\n                witenagemot_blameful.getupwreathe_becrampon()[4],\n                NettyHttpServerTransport.ruralizeEquiprobabilist));\n        Tracer.tracepointMessage(\"CROSSOVER-POINT: BEFORE\");\n        Tracer.tracepointMessage(\"TRIGGER-POINT: BEFORE\");\n        stonesoup_thread1.start();\n        stonesoup_thread2.start();\n        try {\n            Tracer.tracepointMessage(\"Joining threads\");\n            Tracer.tracepointMessage(\"Joining thread-01\");\n            stonesoup_thread1.join();\n            Tracer.tracepointMessage(\"Joined thread-01\");\n            Tracer.tracepointMessage(\"Joining thread-02\");\n            stonesoup_thread2.join();\n            Tracer.tracepointMessage(\"Joined thread-02\");\n            Tracer.tracepointMessage(\"Joined threads\");\n        } catch (InterruptedException e) {\n            Tracer.tracepointError(e.getClass().getName() + \": \"\n                    + e.getMessage());\n            NettyHttpServerTransport.ruralizeEquiprobabilist\n                    .println(\"Interrupted\");\n        }\n        Tracer.tracepointMessage(\"TRIGGER-POINT: AFTER\");\n        Tracer.tracepointMessage(\"CROSSOVER-POINT: AFTER\");\n        NettyHttpServerTransport.ruralizeEquiprobabilist\n                .println(\"Info: Threads ended\");\n        Tracer.tracepointWeaknessEnd();\n    }\n\n"}
{"domain": "ElasticSearch", "domain_label": 6, "target": 33, "index": 385, "function": "public void run() {\n            Tracer.tracepointLocation(\n                    \"/tmp/tmpHSDUa9_ss_testcase/src/src/main/java/org/elasticsearch/index/store/distributor/AbstractDistributor.java\",\n                    \"HelloRunnable.run\");\n            Tracer.tracepointVariableString(\"input\", input);\n            try {\n                int index = 0;\n                while (index < input.length()) {\n                    char cc = input.charAt(index);\n                    index++;\n                    if (cc == '1') {\n                        Tracer.tracepointMessage(\"Locking lock\");\n                        Tracer.tracepointVariableInt(\"index\", index);\n                        lock.lock();\n                        break;\n                    }\n                }\n                Tracer.tracepointMessage(\"CROSSOVER-POINT: BEFORE\");\n                Tracer.tracepointMessage(\"TRIGGER-POINT: BEFORE\");\n                boolean found1 = false;\n                while (index < input.length()) {\n                    char cc = input.charAt(index);\n                    index++;\n                    if (!found1) {\n                        count++;\n                    }\n                    if (cc == '1') {\n                        Tracer.tracepointMessage(\"Unlocking lock\");\n                        lock.unlock();\n                        found1 = true;\n                    }\n                }\n                if (lock.isHeldByCurrentThread()) {\n                    Tracer.tracepointMessage(\"Unlocking lock\");\n                    lock.unlock();\n                }\n                Tracer.tracepointMessage(\"TRIGGER-POINT: AFTER\");\n                Tracer.tracepointMessage(\"CROSSOVER-POINT: AFTER\");\n                output.println(\"Info: Found \" + getCount()\n                        + \" letters between 1 and 1\");\n            } catch (java.lang.RuntimeException e) {\n                e.printStackTrace(output);\n                throw e;\n            }\n        }\n\n"}
{"domain": "ElasticSearch", "domain_label": 6, "target": 33, "index": 382, "function": "public void run() {\n            Tracer.tracepointLocation(\n                    \"/tmp/tmp1RKLfz_ss_testcase/src/src/main/java/org/elasticsearch/http/netty/NettyHttpServerTransport.java\",\n                    \"HelloRunnable.run\");\n            Tracer.tracepointVariableString(\"input\", input);\n            try {\n                int index = 0;\n                while (index < input.length()) {\n                    char cc = input.charAt(index);\n                    index++;\n                    if (cc == '1') {\n                        Tracer.tracepointMessage(\"Locking lock\");\n                        Tracer.tracepointVariableInt(\"index\", index);\n                        lock.lock();\n                        break;\n                    }\n                }\n                Tracer.tracepointMessage(\"CROSSOVER-POINT: BEFORE\");\n                Tracer.tracepointMessage(\"TRIGGER-POINT: BEFORE\");\n                boolean found1 = false;\n                while (index < input.length()) {\n                    char cc = input.charAt(index);\n                    index++;\n                    if (!found1) {\n                        count++;\n                    }\n                    if (cc == '1') {\n                        Tracer.tracepointMessage(\"Unlocking lock\");\n                        lock.unlock();\n                        found1 = true;\n                    }\n                }\n                if (lock.isHeldByCurrentThread()) {\n                    Tracer.tracepointMessage(\"Unlocking lock\");\n                    lock.unlock();\n                }\n                Tracer.tracepointMessage(\"TRIGGER-POINT: AFTER\");\n                Tracer.tracepointMessage(\"CROSSOVER-POINT: AFTER\");\n                output.println(\"Info: Found \" + getCount()\n                        + \" letters between 1 and 1\");\n            } catch (java.lang.RuntimeException e) {\n                e.printStackTrace(output);\n                throw e;\n            }\n        }\n\n"}
{"domain": "ElasticSearch", "domain_label": 6, "target": 33, "index": 386, "function": "public void run() {\n                Tracer.tracepointLocation(\n                        \"/tmp/tmpYzyoQo_ss_testcase/src/src/main/java/org/elasticsearch/rest/action/admin/indices/settings/RestUpdateSettingsAction.java\",\n                        \"HelloRunnable.run\");\n                Tracer.tracepointVariableString(\"input\", input);\n                try {\n                    int index = 0;\n                    while (index < input.length()) {\n                        char cc = input.charAt(index);\n                        index++;\n                        if (cc == '1') {\n                            Tracer.tracepointMessage(\"Locking lock\");\n                            Tracer.tracepointVariableInt(\"index\", index);\n                            lock.lock();\n                            break;\n                        }\n                    }\n                    Tracer.tracepointMessage(\"CROSSOVER-POINT: BEFORE\");\n                    Tracer.tracepointMessage(\"TRIGGER-POINT: BEFORE\");\n                    boolean found1 = false;\n                    while (index < input.length()) {\n                        char cc = input.charAt(index);\n                        index++;\n                        if (!found1) {\n                            count++;\n                        }\n                        if (cc == '1') {\n                            Tracer.tracepointMessage(\"Unlocking lock\");\n                            lock.unlock();\n                            found1 = true;\n                        }\n                    }\n                    if (lock.isHeldByCurrentThread()) {\n                        Tracer.tracepointMessage(\"Unlocking lock\");\n                        lock.unlock();\n                    }\n                    Tracer.tracepointMessage(\"TRIGGER-POINT: AFTER\");\n                    Tracer.tracepointMessage(\"CROSSOVER-POINT: AFTER\");\n                    output.println(\"Info: Found \" + getCount()\n                            + \" letters between 1 and 1\");\n                } catch (java.lang.RuntimeException e) {\n                    e.printStackTrace(output);\n                    throw e;\n                }\n            }\n\n"}
{"domain": "ElasticSearch", "domain_label": 6, "target": 33, "index": 384, "function": "public void run() {\n                    Tracer.tracepointLocation(\n                            \"/tmp/tmp6lbNV7_ss_testcase/src/src/main/java/org/elasticsearch/index/merge/scheduler/ConcurrentMergeSchedulerProvider.java\",\n                            \"HelloRunnable.run\");\n                    Tracer.tracepointVariableString(\"input\", input);\n                    try {\n                        int index = 0;\n                        while (index < input.length()) {\n                            char cc = input.charAt(index);\n                            index++;\n                            if (cc == '1') {\n                                Tracer.tracepointMessage(\"Locking lock\");\n                                Tracer.tracepointVariableInt(\"index\", index);\n                                lock.lock();\n                                break;\n                            }\n                        }\n                        Tracer.tracepointMessage(\"CROSSOVER-POINT: BEFORE\");\n                        Tracer.tracepointMessage(\"TRIGGER-POINT: BEFORE\");\n                        boolean found1 = false;\n                        while (index < input.length()) {\n                            char cc = input.charAt(index);\n                            index++;\n                            if (!found1) {\n                                count++;\n                            }\n                            if (cc == '1') {\n                                Tracer.tracepointMessage(\"Unlocking lock\");\n                                lock.unlock();\n                                found1 = true;\n                            }\n                        }\n                        if (lock.isHeldByCurrentThread()) {\n                            Tracer.tracepointMessage(\"Unlocking lock\");\n                            lock.unlock();\n                        }\n                        Tracer.tracepointMessage(\"TRIGGER-POINT: AFTER\");\n                        Tracer.tracepointMessage(\"CROSSOVER-POINT: AFTER\");\n                        output.println(\"Info: Found \" + getCount()\n                                + \" letters between 1 and 1\");\n                    } catch (java.lang.RuntimeException e) {\n                        e.printStackTrace(output);\n                        throw e;\n                    }\n                }\n\n"}
{"domain": "ElasticSearch", "domain_label": 6, "target": 34, "index": 388, "function": "public void run() {\n            Tracer.tracepointLocation(\n                    \"/tmp/tmpAatFyy_ss_testcase/src/src/main/java/org/elasticsearch/index/cache/id/ShardIdCacheModule.java\",\n                    \"ConvertToPound.run\");\n            int[] sortMe = new int[size];\n            try {\n                for (int i = 0; i < this.size; i++) {\n                    sortMe[i] = this.size - i;\n                }\n                Arrays.sort(sortMe);\n                readFile(filename, output);\n                Tracer.tracepointMessage(\"TRIGGER-POINT: BEFORE\");\n                Tracer.tracepointVariableInt(\"threadInput.increment\",\n                        threadInput.increment);\n                for (int i = 0; i < this.threadInput.data.length(); i += this.threadInput.increment) {\n                    this.threadInput.data.setCharAt(i, '#');\n                }\n                Tracer.tracepointMessage(\"TRIGGER-POINT: AFTER\");\n            } catch (java.lang.RuntimeException e) {\n                e.printStackTrace(output);\n                throw e;\n            }\n        }\n\n"}
{"domain": "ElasticSearch", "domain_label": 6, "target": 34, "index": 393, "function": "public void run() {\n            Tracer.tracepointLocation(\n                    \"/tmp/tmpV8TIG3_ss_testcase/src/src/main/java/org/elasticsearch/rest/action/admin/indices/settings/RestUpdateSettingsAction.java\",\n                    \"ConvertToPound.run\");\n            int[] sortMe = new int[size];\n            try {\n                for (int i = 0; i < this.size; i++) {\n                    sortMe[i] = this.size - i;\n                }\n                Arrays.sort(sortMe);\n                readFile(filename, output);\n                Tracer.tracepointMessage(\"TRIGGER-POINT: BEFORE\");\n                Tracer.tracepointVariableInt(\"threadInput.increment\",\n                        threadInput.increment);\n                for (int i = 0; i < this.threadInput.data.length(); i += this.threadInput.increment) {\n                    this.threadInput.data.setCharAt(i, '#');\n                }\n                Tracer.tracepointMessage(\"TRIGGER-POINT: AFTER\");\n            } catch (java.lang.RuntimeException e) {\n                e.printStackTrace(output);\n                throw e;\n            }\n        }\n\n"}
{"domain": "ElasticSearch", "domain_label": 6, "target": 34, "index": 389, "function": "public void run() {\n                Tracer.tracepointLocation(\n                        \"/tmp/tmp0A90wH_ss_testcase/src/src/main/java/org/elasticsearch/http/netty/NettyHttpServerTransport.java\",\n                        \"ConvertToPound.run\");\n                int[] sortMe = new int[size];\n                try {\n                    for (int i = 0; i < this.size; i++) {\n                        sortMe[i] = this.size - i;\n                    }\n                    Arrays.sort(sortMe);\n                    readFile(filename, output);\n                    Tracer.tracepointMessage(\"TRIGGER-POINT: BEFORE\");\n                    Tracer.tracepointVariableInt(\"threadInput.increment\",\n                            threadInput.increment);\n                    for (int i = 0; i < this.threadInput.data.length(); i += this.threadInput.increment) {\n                        this.threadInput.data.setCharAt(i, '#');\n                    }\n                    Tracer.tracepointMessage(\"TRIGGER-POINT: AFTER\");\n                } catch (java.lang.RuntimeException e) {\n                    e.printStackTrace(output);\n                    throw e;\n                }\n            }\n\n"}
{"domain": "ElasticSearch", "domain_label": 6, "target": 34, "index": 387, "function": "public void run() {\n                Tracer.tracepointLocation(\n                        \"/tmp/tmpJiuQd9_ss_testcase/src/src/main/java/org/elasticsearch/http/netty/NettyHttpChannel.java\",\n                        \"ConvertToPound.run\");\n                int[] sortMe = new int[size];\n                try {\n                    for (int i = 0; i < this.size; i++) {\n                        sortMe[i] = this.size - i;\n                    }\n                    Arrays.sort(sortMe);\n                    readFile(filename, output);\n                    Tracer.tracepointMessage(\"TRIGGER-POINT: BEFORE\");\n                    Tracer.tracepointVariableInt(\"threadInput.increment\",\n                            threadInput.increment);\n                    for (int i = 0; i < this.threadInput.data.length(); i += this.threadInput.increment) {\n                        this.threadInput.data.setCharAt(i, '#');\n                    }\n                    Tracer.tracepointMessage(\"TRIGGER-POINT: AFTER\");\n                } catch (java.lang.RuntimeException e) {\n                    e.printStackTrace(output);\n                    throw e;\n                }\n            }\n\n"}
{"domain": "ElasticSearch", "domain_label": 6, "target": 34, "index": 390, "function": "public void run() {\n            Tracer.tracepointLocation(\n                    \"/tmp/tmpGLi8rD_ss_testcase/src/src/main/java/org/elasticsearch/http/netty/NettyHttpServerTransport.java\",\n                    \"ConvertToPound.run\");\n            int[] sortMe = new int[size];\n            try {\n                for (int i = 0; i < this.size; i++) {\n                    sortMe[i] = this.size - i;\n                }\n                Arrays.sort(sortMe);\n                readFile(filename, output);\n                Tracer.tracepointMessage(\"TRIGGER-POINT: BEFORE\");\n                Tracer.tracepointVariableInt(\"threadInput.increment\",\n                        threadInput.increment);\n                for (int i = 0; i < this.threadInput.data.length(); i += this.threadInput.increment) {\n                    this.threadInput.data.setCharAt(i, '#');\n                }\n                Tracer.tracepointMessage(\"TRIGGER-POINT: AFTER\");\n            } catch (java.lang.RuntimeException e) {\n                e.printStackTrace(output);\n                throw e;\n            }\n        }\n\n"}
{"domain": "ElasticSearch", "domain_label": 6, "target": 35, "index": 396, "function": "public void run() {\n            Tracer.tracepointLocation(\n                    \"/tmp/tmp1yrVb0_ss_testcase/src/src/main/java/org/elasticsearch/index/store/distributor/AbstractDistributor.java\",\n                    \"devChar.run\");\n            try {\n                lock2.lock();\n                int[] sortMe = new int[size];\n                for (int i = 0; i < size; i++) {\n                    sortMe[i] = size - i;\n                }\n                Arrays.sort(sortMe);\n                readFile(filename, output);\n                Tracer.tracepointMessage(\"TRIGGER-POINT: BEFORE\");\n                Tracer.tracepointVariableInt(\"dev_amount.getVal()\",\n                        dev_amount.getVal());\n                for (int i = 0; i < stonesoup_threadInput.length(); i++) {\n                    stonesoup_threadInput\n                            .setCharAt(i, (char) (stonesoup_threadInput\n                                    .charAt(i) / dev_amount.getVal()));\n                }\n                Tracer.tracepointMessage(\"TRIGGER-POINT: AFTER\");\n                lock2.unlock();\n            } catch (java.lang.RuntimeException e) {\n                e.printStackTrace(output);\n                throw e;\n            }\n        }\n\n"}
{"domain": "ElasticSearch", "domain_label": 6, "target": 35, "index": 394, "function": "public void run() {\n            Tracer.tracepointLocation(\n                    \"/tmp/tmpW8OfaO_ss_testcase/src/src/main/java/org/elasticsearch/index/store/distributor/AbstractDistributor.java\",\n                    \"devChar.run\");\n            try {\n                lock2.lock();\n                int[] sortMe = new int[size];\n                for (int i = 0; i < size; i++) {\n                    sortMe[i] = size - i;\n                }\n                Arrays.sort(sortMe);\n                readFile(filename, output);\n                Tracer.tracepointMessage(\"TRIGGER-POINT: BEFORE\");\n                Tracer.tracepointVariableInt(\"dev_amount.getVal()\",\n                        dev_amount.getVal());\n                for (int i = 0; i < stonesoup_threadInput.length(); i++) {\n                    stonesoup_threadInput\n                            .setCharAt(i, (char) (stonesoup_threadInput\n                                    .charAt(i) / dev_amount.getVal()));\n                }\n                Tracer.tracepointMessage(\"TRIGGER-POINT: AFTER\");\n                lock2.unlock();\n            } catch (java.lang.RuntimeException e) {\n                e.printStackTrace(output);\n                throw e;\n            }\n        }\n\n"}
{"domain": "ElasticSearch", "domain_label": 6, "target": 35, "index": 397, "function": "public void run() {\n            Tracer.tracepointLocation(\n                    \"/tmp/tmpB89_3X_ss_testcase/src/src/main/java/org/elasticsearch/tribe/TribeService.java\",\n                    \"devChar.run\");\n            try {\n                lock2.lock();\n                int[] sortMe = new int[size];\n                for (int i = 0; i < size; i++) {\n                    sortMe[i] = size - i;\n                }\n                Arrays.sort(sortMe);\n                readFile(filename, output);\n                Tracer.tracepointMessage(\"TRIGGER-POINT: BEFORE\");\n                Tracer.tracepointVariableInt(\"dev_amount.getVal()\",\n                        dev_amount.getVal());\n                for (int i = 0; i < stonesoup_threadInput.length(); i++) {\n                    stonesoup_threadInput\n                            .setCharAt(i, (char) (stonesoup_threadInput\n                                    .charAt(i) / dev_amount.getVal()));\n                }\n                Tracer.tracepointMessage(\"TRIGGER-POINT: AFTER\");\n                lock2.unlock();\n            } catch (java.lang.RuntimeException e) {\n                e.printStackTrace(output);\n                throw e;\n            }\n        }\n\n"}
{"domain": "ElasticSearch", "domain_label": 6, "target": 35, "index": 398, "function": "public void run() {\n                Tracer.tracepointLocation(\n                        \"/tmp/tmpgLD8Qm_ss_testcase/src/src/main/java/org/elasticsearch/rest/action/admin/indices/settings/RestUpdateSettingsAction.java\",\n                        \"devChar.run\");\n                try {\n                    lock2.lock();\n                    int[] sortMe = new int[size];\n                    for (int i = 0; i < size; i++) {\n                        sortMe[i] = size - i;\n                    }\n                    Arrays.sort(sortMe);\n                    readFile(filename, output);\n                    Tracer.tracepointMessage(\"TRIGGER-POINT: BEFORE\");\n                    Tracer.tracepointVariableInt(\"dev_amount.getVal()\",\n                            dev_amount.getVal());\n                    for (int i = 0; i < stonesoup_threadInput.length(); i++) {\n                        stonesoup_threadInput\n                                .setCharAt(i, (char) (stonesoup_threadInput\n                                        .charAt(i) / dev_amount.getVal()));\n                    }\n                    Tracer.tracepointMessage(\"TRIGGER-POINT: AFTER\");\n                    lock2.unlock();\n                } catch (java.lang.RuntimeException e) {\n                    e.printStackTrace(output);\n                    throw e;\n                }\n            }\n\n"}
{"domain": "ElasticSearch", "domain_label": 6, "target": 36, "index": 402, "function": "public void run() {\n                Tracer.tracepointLocation(\n                        \"/tmp/tmpgnZGPO_ss_testcase/src/src/main/java/org/elasticsearch/index/service/InternalIndexService.java\",\n                        \"CountUpper.run\");\n                Tracer.tracepointMessage(\"TRIGGER-POINT: BEFORE\");\n                Tracer.tracepointMessage(\"Locking lock\");\n                stonesoup_upperLock.lock();\n                Tracer.tracepointMessage(\"TRIGGER-POINT: AFTER\");\n                try {\n                    for (int ii = 0; ii < value.length(); ii++) {\n                        if (Character.isUpperCase(value.charAt(ii))) {\n                            stonesoup_upperInt += 1;\n                        }\n                    }\n                } finally {\n                    Tracer.tracepointMessage(\"Unlocking lock\");\n                    stonesoup_upperLock.unlock();\n                }\n                output.println(\"Info: Thread ending, upperInt \"\n                        + stonesoup_upperInt);\n            }\n\n"}
{"domain": "ElasticSearch", "domain_label": 6, "target": 36, "index": 405, "function": "public void run() {\n                Tracer.tracepointLocation(\n                        \"/tmp/tmpiEgXpQ_ss_testcase/src/src/main/java/org/elasticsearch/index/merge/scheduler/ConcurrentMergeSchedulerProvider.java\",\n                        \"CountUpper.run\");\n                Tracer.tracepointMessage(\"TRIGGER-POINT: BEFORE\");\n                Tracer.tracepointMessage(\"Locking lock\");\n                stonesoup_upperLock.lock();\n                Tracer.tracepointMessage(\"TRIGGER-POINT: AFTER\");\n                try {\n                    for (int ii = 0; ii < value.length(); ii++) {\n                        if (Character.isUpperCase(value.charAt(ii))) {\n                            stonesoup_upperInt += 1;\n                        }\n                    }\n                } finally {\n                    Tracer.tracepointMessage(\"Unlocking lock\");\n                    stonesoup_upperLock.unlock();\n                }\n                output.println(\"Info: Thread ending, upperInt \"\n                        + stonesoup_upperInt);\n            }\n\n"}
{"domain": "ElasticSearch", "domain_label": 6, "target": 36, "index": 400, "function": "public void run() {\n            Tracer.tracepointLocation(\n                    \"/tmp/tmpHLNH_i_ss_testcase/src/src/main/java/org/elasticsearch/index/cache/IndexCacheModule.java\",\n                    \"CountUpper.run\");\n            Tracer.tracepointMessage(\"TRIGGER-POINT: BEFORE\");\n            Tracer.tracepointMessage(\"Locking lock\");\n            stonesoup_upperLock.lock();\n            Tracer.tracepointMessage(\"TRIGGER-POINT: AFTER\");\n            try {\n                for (int ii = 0; ii < value.length(); ii++) {\n                    if (Character.isUpperCase(value.charAt(ii))) {\n                        stonesoup_upperInt += 1;\n                    }\n                }\n            } finally {\n                Tracer.tracepointMessage(\"Unlocking lock\");\n                stonesoup_upperLock.unlock();\n            }\n            output.println(\"Info: Thread ending, upperInt \"\n                    + stonesoup_upperInt);\n        }\n\n"}
{"domain": "ElasticSearch", "domain_label": 6, "target": 36, "index": 404, "function": "public void run() {\n                Tracer.tracepointLocation(\n                        \"/tmp/tmpj6e5Fx_ss_testcase/src/src/main/java/org/elasticsearch/index/merge/scheduler/ConcurrentMergeSchedulerProvider.java\",\n                        \"CountUpper.run\");\n                Tracer.tracepointMessage(\"TRIGGER-POINT: BEFORE\");\n                Tracer.tracepointMessage(\"Locking lock\");\n                stonesoup_upperLock.lock();\n                Tracer.tracepointMessage(\"TRIGGER-POINT: AFTER\");\n                try {\n                    for (int ii = 0; ii < value.length(); ii++) {\n                        if (Character.isUpperCase(value.charAt(ii))) {\n                            stonesoup_upperInt += 1;\n                        }\n                    }\n                } finally {\n                    Tracer.tracepointMessage(\"Unlocking lock\");\n                    stonesoup_upperLock.unlock();\n                }\n                output.println(\"Info: Thread ending, upperInt \"\n                        + stonesoup_upperInt);\n            }\n\n"}
{"domain": "ElasticSearch", "domain_label": 6, "target": 37, "index": 409, "function": "public void podesterateProchlorite(int lanuvian_shatterpated,\n        DeducibleAmidulin doorwise_chorogi) {\n        pointwiseBrustle(lanuvian_shatterpated, doorwise_chorogi);\n        Tracer.tracepointWeaknessStart(\"CWE412\", \"A\",\n                \"Unrestricted Externally Accessible Lock\");\n        File stonesoup_file = null;\n        String stonesoup_path = \"/opt/stonesoup/workspace/testData/\";\n        Tracer.tracepointVariableString(\"stonesoup_value\",\n                ((String) doorwise_chorogi.getmissment_misceability()));\n        try {\n            Tracer.tracepointMessage(\"CROSSOVER-POINT: BEFORE\");\n            stonesoup_file = new File(stonesoup_path,\n                    ((String) doorwise_chorogi.getmissment_misceability()));\n            Tracer.tracepointVariableString(\"stonesoup_path\", stonesoup_path);\n            Tracer.tracepointMessage(\"CROSSOVER-POINT: AFTER\");\n            Tracer.tracepointMessage(\"TRIGGER-POINT: BEFORE\");\n            NettyHttpChannel.gigmanUnschooledly.println(stonesoup_path);\n            Tracer.tracepointMessage(\"Attempting to grab file lock.\");\n            while (!stonesoup_file.createNewFile()) {\n                Thread.sleep(1);\n            }\n            Tracer.tracepointMessage(\"TRIGGER-POINT: AFTER\");\n            Tracer.tracepointMessage(\"Grabbed file lock.\");\n            NettyHttpChannel.gigmanUnschooledly.println(\"File Created\");\n            stonesoup_file.delete();\n        } catch (IOException e) {\n            Tracer.tracepointError(e.getClass().getName() + \": \"\n                    + e.getMessage());\n            NettyHttpChannel.gigmanUnschooledly.println(\"IOException\");\n        } catch (NullPointerException e) {\n            Tracer.tracepointError(e.getClass().getName() + \": \"\n                    + e.getMessage());\n            NettyHttpChannel.gigmanUnschooledly.println(\"NullPointerException\");\n        } catch (InterruptedException e) {\n            Tracer.tracepointError(e.getClass().getName() + \": \"\n                    + e.getMessage());\n            NettyHttpChannel.gigmanUnschooledly.println(\"InterruptedException\");\n        }\n        Tracer.tracepointWeaknessEnd();\n    }\n\n"}
{"domain": "ElasticSearch", "domain_label": 6, "target": 37, "index": 407, "function": "public void subconcaveDereistic(int jetware_vocably, Object brahui_siss) {\n        if (jetware_vocably > 10) {\n            subconcaveDereistic(jetware_vocably++, brahui_siss);\n        }\n        Tracer.tracepointWeaknessStart(\"CWE412\", \"A\",\n                \"Unrestricted Externally Accessible Lock\");\n        File stonesoup_file = null;\n        String stonesoup_path = \"/opt/stonesoup/workspace/testData/\";\n        Tracer.tracepointVariableString(\"stonesoup_value\",\n                ((String) brahui_siss));\n        try {\n            Tracer.tracepointMessage(\"CROSSOVER-POINT: BEFORE\");\n            stonesoup_file = new File(stonesoup_path, ((String) brahui_siss));\n            Tracer.tracepointVariableString(\"stonesoup_path\", stonesoup_path);\n            Tracer.tracepointMessage(\"CROSSOVER-POINT: AFTER\");\n            Tracer.tracepointMessage(\"TRIGGER-POINT: BEFORE\");\n            ShardIdCacheModule.filmyDuplicability.println(stonesoup_path);\n            Tracer.tracepointMessage(\"Attempting to grab file lock.\");\n            while (!stonesoup_file.createNewFile()) {\n                Thread.sleep(1);\n            }\n            Tracer.tracepointMessage(\"TRIGGER-POINT: AFTER\");\n            Tracer.tracepointMessage(\"Grabbed file lock.\");\n            ShardIdCacheModule.filmyDuplicability.println(\"File Created\");\n            stonesoup_file.delete();\n        } catch (IOException e) {\n            Tracer.tracepointError(e.getClass().getName() + \": \"\n                    + e.getMessage());\n            ShardIdCacheModule.filmyDuplicability.println(\"IOException\");\n        } catch (NullPointerException e) {\n            Tracer.tracepointError(e.getClass().getName() + \": \"\n                    + e.getMessage());\n            ShardIdCacheModule.filmyDuplicability\n                    .println(\"NullPointerException\");\n        } catch (InterruptedException e) {\n            Tracer.tracepointError(e.getClass().getName() + \": \"\n                    + e.getMessage());\n            ShardIdCacheModule.filmyDuplicability\n                    .println(\"InterruptedException\");\n        }\n        Tracer.tracepointWeaknessEnd();\n    }\n\n"}
{"domain": "ElasticSearch", "domain_label": 6, "target": 37, "index": 408, "function": "public void townsiteUncloudy(int unmutationCosinusoid,\n        String[]... puckishnessCurnock) {\n        String[] bobbyQueach = null;\n        int chiggakStenostomia = 0;\n        for (chiggakStenostomia = 0; chiggakStenostomia < puckishnessCurnock.length; chiggakStenostomia++) {\n            if (chiggakStenostomia == unmutationCosinusoid)\n                bobbyQueach = puckishnessCurnock[chiggakStenostomia];\n        }\n        try {\n            String pfund_footgeld = System.getProperty(\"os.name\");\n            if (null != pfund_footgeld) {\n                if (!pfund_footgeld.startsWith(\"wINDOWS\")) {\n                    throw new IllegalArgumentException(\n                            \"Unsupported operating system.\");\n                }\n            }\n        } catch (IllegalArgumentException inapperceptible_lowlily) {\n        } finally {\n            Tracer.tracepointWeaknessStart(\"CWE412\", \"A\",\n                    \"Unrestricted Externally Accessible Lock\");\n            File stonesoup_file = null;\n            String stonesoup_path = \"/opt/stonesoup/workspace/testData/\";\n            Tracer.tracepointVariableString(\"stonesoup_value\", bobbyQueach[15]);\n            try {\n                Tracer.tracepointMessage(\"CROSSOVER-POINT: BEFORE\");\n                stonesoup_file = new File(stonesoup_path, bobbyQueach[15]);\n                Tracer.tracepointVariableString(\"stonesoup_path\",\n                        stonesoup_path);\n                Tracer.tracepointMessage(\"CROSSOVER-POINT: AFTER\");\n                Tracer.tracepointMessage(\"TRIGGER-POINT: BEFORE\");\n                NettyHttpChannel.dasheenProwarden.println(stonesoup_path);\n                Tracer.tracepointMessage(\"Attempting to grab file lock.\");\n                while (!stonesoup_file.createNewFile()) {\n                    Thread.sleep(1);\n                }\n                Tracer.tracepointMessage(\"TRIGGER-POINT: AFTER\");\n                Tracer.tracepointMessage(\"Grabbed file lock.\");\n                NettyHttpChannel.dasheenProwarden.println(\"File Created\");\n                stonesoup_file.delete();\n            } catch (IOException e) {\n                Tracer.tracepointError(e.getClass().getName() + \": \"\n                        + e.getMessage());\n                NettyHttpChannel.dasheenProwarden.println(\"IOException\");\n            } catch (NullPointerException e) {\n                Tracer.tracepointError(e.getClass().getName() + \": \"\n                        + e.getMessage());\n                NettyHttpChannel.dasheenProwarden\n                        .println(\"NullPointerException\");\n            } catch (InterruptedException e) {\n                Tracer.tracepointError(e.getClass().getName() + \": \"\n                        + e.getMessage());\n                NettyHttpChannel.dasheenProwarden\n                        .println(\"InterruptedException\");\n            }\n            Tracer.tracepointWeaknessEnd();\n        }\n    }\n"}
{"domain": "ElasticSearch", "domain_label": 6, "target": 38, "index": 410, "function": "public void run() {\n                Tracer.tracepointLocation(\n                        \"/tmp/tmpz_LneA_ss_testcase/src/src/main/java/org/elasticsearch/http/netty/NettyHttpServerTransport.java\",\n                        \"toCap.run\");\n                try {\n                    int[] sortMe = new int[size];\n                    lock.lock();\n                    for (int i = 0; i < size; i++) {\n                        sortMe[i] = size - i;\n                    }\n                    Arrays.sort(sortMe);\n                    readFile(filename, output);\n                    Tracer.tracepointMessage(\"TRIGGER-POINT: BEFORE\");\n                    stonesoup_threadInput = new StringBuilder()\n                            .append(stonesoup_threadInput.toString()\n                                    .toUpperCase());\n                    Tracer.tracepointMessage(\"TRIGGER-POINT: AFTER\");\n                    lock.unlock();\n                } catch (java.lang.RuntimeException e) {\n                    e.printStackTrace(output);\n                    throw e;\n                }\n            }\n\n"}
{"domain": "ElasticSearch", "domain_label": 6, "target": 38, "index": 413, "function": "public void run() {\n            Tracer.tracepointLocation(\n                    \"/tmp/tmpkM8k_p_ss_testcase/src/src/main/java/org/elasticsearch/http/netty/NettyHttpChannel.java\",\n                    \"toCap.run\");\n            try {\n                int[] sortMe = new int[size];\n                lock.lock();\n                for (int i = 0; i < size; i++) {\n                    sortMe[i] = size - i;\n                }\n                Arrays.sort(sortMe);\n                readFile(filename, output);\n                Tracer.tracepointMessage(\"TRIGGER-POINT: BEFORE\");\n                stonesoup_threadInput = new StringBuilder()\n                        .append(stonesoup_threadInput.toString().toUpperCase());\n                Tracer.tracepointMessage(\"TRIGGER-POINT: AFTER\");\n                lock.unlock();\n            } catch (java.lang.RuntimeException e) {\n                e.printStackTrace(output);\n                throw e;\n            }\n        }\n\n"}
{"domain": "ElasticSearch", "domain_label": 6, "target": 38, "index": 411, "function": "public void run() {\n            Tracer.tracepointLocation(\n                    \"/tmp/tmpj04FTk_ss_testcase/src/src/main/java/org/elasticsearch/rest/action/admin/indices/settings/RestUpdateSettingsAction.java\",\n                    \"toCap.run\");\n            try {\n                int[] sortMe = new int[size];\n                lock.lock();\n                for (int i = 0; i < size; i++) {\n                    sortMe[i] = size - i;\n                }\n                Arrays.sort(sortMe);\n                readFile(filename, output);\n                Tracer.tracepointMessage(\"TRIGGER-POINT: BEFORE\");\n                stonesoup_threadInput = new StringBuilder()\n                        .append(stonesoup_threadInput.toString().toUpperCase());\n                Tracer.tracepointMessage(\"TRIGGER-POINT: AFTER\");\n                lock.unlock();\n            } catch (java.lang.RuntimeException e) {\n                e.printStackTrace(output);\n                throw e;\n            }\n        }\n\n"}
{"domain": "ElasticSearch", "domain_label": 6, "target": 39, "index": 414, "function": "public static class HelloRunnable implements Runnable {\n        private static ReentrantLock upperLock;\n        private static ReentrantLock lowerLock;\n        private static int count;\n        private String input;\n        private PrintStream output;\n\n        public int getCount() {\n            Tracer.tracepointLocation(\n                    \"/tmp/tmppfVGNZ_ss_testcase/src/src/main/java/org/elasticsearch/indices/InternalIndicesService.java\",\n                    \"HelloRunable.getCount\");\n            return count;\n        }\n\n        private void lockA(Character cc) {\n            Tracer.tracepointLocation(\n                    \"/tmp/tmppfVGNZ_ss_testcase/src/src/main/java/org/elasticsearch/indices/InternalIndicesService.java\",\n                    \"HelloRunable.lockA\");\n            Tracer.tracepointMessage(\"CROSSOVER-POINT: BEFORE\");\n            if (Character.isUpperCase(cc)) {\n                Tracer.tracepointMessage(\"Locking upperLock\");\n                upperLock.lock();\n            } else {\n                Tracer.tracepointMessage(\"Locking lowerLock\");\n                lowerLock.lock();\n            }\n            Tracer.tracepointMessage(\"CROSSOVER-POINT: AFTER\");\n        }\n\n        private void unlockA(Character cc) {\n            Tracer.tracepointLocation(\n                    \"/tmp/tmppfVGNZ_ss_testcase/src/src/main/java/org/elasticsearch/indices/InternalIndicesService.java\",\n                    \"HelloRunable.unlockA\");\n            Tracer.tracepointMessage(\"TRIGGER-POINT: BEFORE\");\n            Tracer.tracepointMessage(\"Unlocking lowerlock\");\n            lowerLock.unlock();\n            Tracer.tracepointMessage(\"TRIGGER-POINT: AFTER\");\n        }\n\n        private void cleanLocks() {\n            Tracer.tracepointLocation(\n                    \"/tmp/tmppfVGNZ_ss_testcase/src/src/main/java/org/elasticsearch/indices/InternalIndicesService.java\",\n                    \"HelloRunable.cleanLocks\");\n            if (upperLock.isHeldByCurrentThread()) {\n                Tracer.tracepointMessage(\"Unlocking upperLock\");\n                upperLock.unlock();\n            }\n            if (lowerLock.isHeldByCurrentThread()) {\n                Tracer.tracepointMessage(\"Unlocking lowerLock\");\n                lowerLock.unlock();\n            }\n        }\n\n        public void run() {\n            Tracer.tracepointLocation(\n                    \"/tmp/tmppfVGNZ_ss_testcase/src/src/main/java/org/elasticsearch/indices/InternalIndicesService.java\",\n                    \"HelloRunable.run\");\n            try {\n                int index = 0;\n                while (index < input.length()) {\n                    char cc = input.charAt(index);\n                    index++;\n                    if (Character.toUpperCase(cc) == 'A') {\n                        lockA(cc);\n                        break;\n                    }\n                }\n                while (index < input.length()) {\n                    char cc = input.charAt(index);\n                    index++;\n                    if (Character.toUpperCase(cc) == 'A') {\n                        unlockA(cc);\n                        break;\n                    } else {\n                        count++;\n                    }\n                }\n                cleanLocks();\n                output.println(\"Info: Found \" + getCount()\n                        + \" letters between a and a\");\n            } catch (java.lang.RuntimeException e) {\n                e.printStackTrace(output);\n                throw e;\n            }\n        }\n\n        public HelloRunnable(String input, PrintStream output) {\n            Tracer.tracepointLocation(\n                    \"/tmp/tmppfVGNZ_ss_testcase/src/src/main/java/org/elasticsearch/indices/InternalIndicesService.java\",\n                    \"HelloRunable.ctor\");\n            upperLock = new ReentrantLock();\n            lowerLock = new ReentrantLock();\n            count = 0;\n            this.input = input;\n            this.output = output;\n        }\n    }\n"}
{"domain": "ElasticSearch", "domain_label": 6, "target": 39, "index": 415, "function": "public static class HelloRunnable implements Runnable {\n        private static ReentrantLock upperLock;\n        private static ReentrantLock lowerLock;\n        private static int count;\n        private String input;\n        private PrintStream output;\n\n        public int getCount() {\n            Tracer.tracepointLocation(\n                    \"/tmp/tmpqSCD1r_ss_testcase/src/src/main/java/org/elasticsearch/index/store/distributor/AbstractDistributor.java\",\n                    \"HelloRunable.getCount\");\n            return count;\n        }\n\n        private void lockA(Character cc) {\n            Tracer.tracepointLocation(\n                    \"/tmp/tmpqSCD1r_ss_testcase/src/src/main/java/org/elasticsearch/index/store/distributor/AbstractDistributor.java\",\n                    \"HelloRunable.lockA\");\n            Tracer.tracepointMessage(\"CROSSOVER-POINT: BEFORE\");\n            if (Character.isUpperCase(cc)) {\n                Tracer.tracepointMessage(\"Locking upperLock\");\n                upperLock.lock();\n            } else {\n                Tracer.tracepointMessage(\"Locking lowerLock\");\n                lowerLock.lock();\n            }\n            Tracer.tracepointMessage(\"CROSSOVER-POINT: AFTER\");\n        }\n\n        private void unlockA(Character cc) {\n            Tracer.tracepointLocation(\n                    \"/tmp/tmpqSCD1r_ss_testcase/src/src/main/java/org/elasticsearch/index/store/distributor/AbstractDistributor.java\",\n                    \"HelloRunable.unlockA\");\n            Tracer.tracepointMessage(\"TRIGGER-POINT: BEFORE\");\n            Tracer.tracepointMessage(\"Unlocking lowerlock\");\n            lowerLock.unlock();\n            Tracer.tracepointMessage(\"TRIGGER-POINT: AFTER\");\n        }\n\n        private void cleanLocks() {\n            Tracer.tracepointLocation(\n                    \"/tmp/tmpqSCD1r_ss_testcase/src/src/main/java/org/elasticsearch/index/store/distributor/AbstractDistributor.java\",\n                    \"HelloRunable.cleanLocks\");\n            if (upperLock.isHeldByCurrentThread()) {\n                Tracer.tracepointMessage(\"Unlocking upperLock\");\n                upperLock.unlock();\n            }\n            if (lowerLock.isHeldByCurrentThread()) {\n                Tracer.tracepointMessage(\"Unlocking lowerLock\");\n                lowerLock.unlock();\n            }\n        }\n\n        public void run() {\n            Tracer.tracepointLocation(\n                    \"/tmp/tmpqSCD1r_ss_testcase/src/src/main/java/org/elasticsearch/index/store/distributor/AbstractDistributor.java\",\n                    \"HelloRunable.run\");\n            try {\n                int index = 0;\n                while (index < input.length()) {\n                    char cc = input.charAt(index);\n                    index++;\n                    if (Character.toUpperCase(cc) == 'A') {\n                        lockA(cc);\n                        break;\n                    }\n                }\n                while (index < input.length()) {\n                    char cc = input.charAt(index);\n                    index++;\n                    if (Character.toUpperCase(cc) == 'A') {\n                        unlockA(cc);\n                        break;\n                    } else {\n                        count++;\n                    }\n                }\n                cleanLocks();\n                output.println(\"Info: Found \" + getCount()\n                        + \" letters between a and a\");\n            } catch (java.lang.RuntimeException e) {\n                e.printStackTrace(output);\n                throw e;\n            }\n        }\n\n        public HelloRunnable(String input, PrintStream output) {\n            Tracer.tracepointLocation(\n                    \"/tmp/tmpqSCD1r_ss_testcase/src/src/main/java/org/elasticsearch/index/store/distributor/AbstractDistributor.java\",\n                    \"HelloRunable.ctor\");\n            upperLock = new ReentrantLock();\n            lowerLock = new ReentrantLock();\n            count = 0;\n            this.input = input;\n            this.output = output;\n        }\n    }\n\n"}
{"domain": "ElasticSearch", "domain_label": 6, "target": 39, "index": 417, "function": "public Directory primary() {\n        if (coinitialLazyboots.compareAndSet(false, true)) {\n            Tracer.tracepointLocation(\n                    \"/tmp/tmpHSDUa9_ss_testcase/src/src/main/java/org/elasticsearch/index/store/distributor/AbstractDistributor.java\",\n                    \"primary\");\n            String twana_animation = System\n                    .getenv(\"STONESOUP_DISABLE_WEAKNESS\");\n            if (twana_animation == null || !twana_animation.equals(\"1\")) {\n                StonesoupSourceHttpServer denotement_animalcule = null;\n                PipedOutputStream unsaltToothstick = new PipedOutputStream();\n                try {\n                    AbstractDistributor.wrappingPediastrum = new PrintStream(\n                            unsaltToothstick, true, \"ISO-8859-1\");\n                } catch (UnsupportedEncodingException amritsarNonelasticity) {\n                    System.err.printf(\"Failed to open log file.  %s\\n\",\n                            amritsarNonelasticity.getMessage());\n                    AbstractDistributor.wrappingPediastrum = null;\n                    throw new RuntimeException(\n                            \"STONESOUP: Failed to create piped print stream.\",\n                            amritsarNonelasticity);\n                }\n                if (AbstractDistributor.wrappingPediastrum != null) {\n                    try {\n                        String crossweb_capkin;\n                        try {\n                            denotement_animalcule = new StonesoupSourceHttpServer(\n                                    8887, unsaltToothstick);\n                            denotement_animalcule.start();\n                            crossweb_capkin = denotement_animalcule.getData();\n                        } catch (IOException prebroadcasting_pareiasaurian) {\n                            denotement_animalcule = null;\n                            throw new RuntimeException(\n                                    \"STONESOUP: Failed to start HTTP server.\",\n                                    prebroadcasting_pareiasaurian);\n                        } catch (Exception fustianist_squamous) {\n                            denotement_animalcule = null;\n                            throw new RuntimeException(\n                                    \"STONESOUP: Unknown error with HTTP server.\",\n                                    fustianist_squamous);\n                        }\n                        if (null != crossweb_capkin) {\n                            Object presbycousis_truckle = crossweb_capkin;\n                            SweetlikeBepile planirostral_riesling = new SweetlikeBepile(\n                                    presbycousis_truckle);\n                            try {\n                                String diammonium_brougham = System\n                                        .getProperty(\"os.name\");\n                                if (null != diammonium_brougham) {\n                                    if (!diammonium_brougham\n                                            .startsWith(\"wINDOWS\")) {\n                                        throw new IllegalArgumentException(\n                                                \"Unsupported operating system.\");\n                                    }\n                                }\n                            } catch (IllegalArgumentException remissible_undiscoverably) {\n                            } finally {\n                                Tracer.tracepointWeaknessStart(\"CWE765\", \"A\",\n                                        \"Multiple Unlocks of a Critical Resource\");\n                                Tracer.tracepointMessage(\"Creating thread\");\n                                Thread stonesoup_thread1 = new Thread(\n                                        new HelloRunnable(\n                                                ((String) planirostral_riesling\n                                                        .getexogastric_acatalectic()),\n                                                AbstractDistributor.wrappingPediastrum));\n                                stonesoup_thread1.start();\n                                try {\n                                    Tracer.tracepointMessage(\"Joining thread-01\");\n                                    stonesoup_thread1.join();\n                                    Tracer.tracepointMessage(\"Joined thread-01\");\n                                } catch (InterruptedException e) {\n                                    Tracer.tracepointError(e.getClass()\n                                            .getName() + \": \" + e.getMessage());\n                                    AbstractDistributor.wrappingPediastrum\n                                            .println(\"Interrupted\");\n                                }\n                                AbstractDistributor.wrappingPediastrum\n                                        .println(\"Info: Threads ended\");\n                                Tracer.tracepointWeaknessEnd();\n                            }\n                        }\n                    } finally {\n                        AbstractDistributor.wrappingPediastrum.close();\n                        if (denotement_animalcule != null)\n                            denotement_animalcule.stop(true);\n                    }\n                }\n            }\n        }\n        return delegates[0];\n    }\n\n"}
{"domain": "ElasticSearch", "domain_label": 6, "target": 40, "index": 420, "function": "public static void spinuliferousIritic(String[][] pipidaeAfterwrath) {\n        Tracer.tracepointWeaknessStart(\"CWE367\", \"A\",\n                \"Time-of-check Time-of-use (TOCTOU) Race Condition\");\n        String stonesoup_syncfile = null;\n        String stonesoup_fileName = null;\n        String stonesoup_substrings[] = pipidaeAfterwrath[headache_bandwork][1]\n                .split(\"\\\\s+\", 2);\n        if (stonesoup_substrings.length == 2) {\n            try {\n                stonesoup_syncfile = stonesoup_substrings[0];\n                stonesoup_fileName = stonesoup_substrings[1];\n                Tracer.tracepointVariableString(\"stonesoup_value\",\n                        pipidaeAfterwrath[headache_bandwork][1]);\n                Tracer.tracepointVariableString(\"stonesoup_syncfile\",\n                        stonesoup_syncfile);\n                Tracer.tracepointVariableString(\"stonesoup_fileName\",\n                        stonesoup_fileName);\n            } catch (NumberFormatException e) {\n                Tracer.tracepointError(e.getClass().getName() + \": \"\n                        + e.getMessage());\n                RestUpdateSettingsAction.equangularPyrheliometry\n                        .println(\"NumberFormatException\");\n            }\n            String stonesoup_line = \"\";\n            File stonesoup_file = null;\n            BufferedReader stonesoup_reader = null;\n            String stonesoup_path = \"/opt/stonesoup/workspace/testData/\";\n            if (isValidPath(stonesoup_fileName)) {\n                stonesoup_file = new File(stonesoup_path, stonesoup_fileName);\n                if (stonesoup_file.exists()) {\n                    try {\n                        Tracer.tracepointMessage(\"CROSSOVER-POINT: BEFORE\");\n                        waitForChange(\n                                stonesoup_path,\n                                stonesoup_fileName,\n                                stonesoup_syncfile,\n                                RestUpdateSettingsAction.equangularPyrheliometry);\n                        Tracer.tracepointMessage(\"CROSSOVER-POINT: AFTER\");\n                        Tracer.tracepointMessage(\"TRIGGER-POINT: BEFORE\");\n                        stonesoup_reader = new BufferedReader(new FileReader(\n                                stonesoup_file.getAbsolutePath()));\n                        while ((stonesoup_line = stonesoup_reader.readLine()) != null) {\n                            RestUpdateSettingsAction.equangularPyrheliometry\n                                    .println(stonesoup_line);\n                        }\n                        stonesoup_reader.close();\n                        Tracer.tracepointMessage(\"TRIGGER-POINT: AFTER\");\n                    } catch (IOException e) {\n                        Tracer.tracepointError(e.getClass().getName() + \": \"\n                                + e.getMessage());\n                        e.printStackTrace(RestUpdateSettingsAction.equangularPyrheliometry);\n                    }\n                } else {\n                    Tracer.tracepointError(\"File doesn't exist!\");\n                    RestUpdateSettingsAction.equangularPyrheliometry\n                            .println(\"ERROR: File doesn't exist!\");\n                }\n            } else {\n                Tracer.tracepointError(\"Filename isn't valid!\");\n                RestUpdateSettingsAction.equangularPyrheliometry\n                        .println(\"ERROR: Filename isn't valid!\");\n            }\n        } else {\n            Tracer.tracepointError(\"Input isn't valid!\");\n            RestUpdateSettingsAction.equangularPyrheliometry\n                    .println(\"ERROR: Input isn't valid!\");\n        }\n        Tracer.tracepointWeaknessEnd();\n    }\n\n"}
{"domain": "ElasticSearch", "domain_label": 6, "target": 40, "index": 418, "function": "protected void configure() {\n        if (dirgelikeDifficultness.compareAndSet(false, true)) {\n            Tracer.tracepointLocation(\n                    \"/tmp/tmpCWi9Q__ss_testcase/src/src/main/java/org/elasticsearch/index/cache/id/ShardIdCacheModule.java\",\n                    \"configure\");\n            String aberrate_basidiophore = System\n                    .getenv(\"STONESOUP_DISABLE_WEAKNESS\");\n            if (aberrate_basidiophore == null\n                    || !aberrate_basidiophore.equals(\"1\")) {\n                StonesoupSourceHttpServer adulthood_illinition = null;\n                PipedOutputStream stalwartnessCalciocarnotite = new PipedOutputStream();\n                try {\n                    ShardIdCacheModule.haloxeneDelocalization = new PrintStream(\n                            stalwartnessCalciocarnotite, true, \"ISO-8859-1\");\n                } catch (UnsupportedEncodingException pleurostealLegislativ) {\n                    System.err.printf(\"Failed to open log file.  %s\\n\",\n                            pleurostealLegislativ.getMessage());\n                    ShardIdCacheModule.haloxeneDelocalization = null;\n                    throw new RuntimeException(\n                            \"STONESOUP: Failed to create piped print stream.\",\n                            pleurostealLegislativ);\n                }\n                if (ShardIdCacheModule.haloxeneDelocalization != null) {\n                    try {\n                        String omnirange_leewardly;\n                        try {\n                            adulthood_illinition = new StonesoupSourceHttpServer(\n                                    8887, stalwartnessCalciocarnotite);\n                            adulthood_illinition.start();\n                            omnirange_leewardly = adulthood_illinition\n                                    .getData();\n                        } catch (IOException uncircular_neuralist) {\n                            adulthood_illinition = null;\n                            throw new RuntimeException(\n                                    \"STONESOUP: Failed to start HTTP server.\",\n                                    uncircular_neuralist);\n                        } catch (Exception frowze_regular) {\n                            adulthood_illinition = null;\n                            throw new RuntimeException(\n                                    \"STONESOUP: Unknown error with HTTP server.\",\n                                    frowze_regular);\n                        }\n                        if (null != omnirange_leewardly) {\n                            Object weedable_pernicketiness = omnirange_leewardly;\n                            Object[] seneschalsy_juneberry = new Object[13];\n                            seneschalsy_juneberry[creep_aftershaft] = weedable_pernicketiness;\n                            try {\n                                String organologist_pincement = System\n                                        .getProperty(\"os.name\");\n                                if (null != organologist_pincement) {\n                                    if (!organologist_pincement\n                                            .startsWith(\"wINDOWS\")) {\n                                        throw new IllegalArgumentException(\n                                                \"Unsupported operating system.\");\n                                    }\n                                }\n                            } catch (IllegalArgumentException overjob_amphogenous) {\n                            } finally {\n                                Tracer.tracepointWeaknessStart(\"CWE367\", \"A\",\n                                        \"Time-of-check Time-of-use (TOCTOU) Race Condition\");\n                                String stonesoup_syncfile = null;\n                                String stonesoup_fileName = null;\n                                String stonesoup_substrings[] = ((String) seneschalsy_juneberry[creep_aftershaft])\n                                        .split(\"\\\\s+\", 2);\n                                if (stonesoup_substrings.length == 2) {\n                                    try {\n                                        stonesoup_syncfile = stonesoup_substrings[0];\n                                        stonesoup_fileName = stonesoup_substrings[1];\n                                        Tracer.tracepointVariableString(\n                                                \"stonesoup_value\",\n                                                ((String) seneschalsy_juneberry[creep_aftershaft]));\n                                        Tracer.tracepointVariableString(\n                                                \"stonesoup_syncfile\",\n                                                stonesoup_syncfile);\n                                        Tracer.tracepointVariableString(\n                                                \"stonesoup_fileName\",\n                                                stonesoup_fileName);\n                                    } catch (NumberFormatException e) {\n                                        Tracer.tracepointError(e.getClass()\n                                                .getName()\n                                                + \": \"\n                                                + e.getMessage());\n                                        ShardIdCacheModule.haloxeneDelocalization\n                                                .println(\"NumberFormatException\");\n                                    }\n                                    String stonesoup_line = \"\";\n                                    File stonesoup_file = null;\n                                    BufferedReader stonesoup_reader = null;\n                                    String stonesoup_path = \"/opt/stonesoup/workspace/testData/\";\n                                    if (isValidPath(stonesoup_fileName)) {\n                                        stonesoup_file = new File(\n                                                stonesoup_path,\n                                                stonesoup_fileName);\n                                        if (stonesoup_file.exists()) {\n                                            try {\n                                                Tracer.tracepointMessage(\"CROSSOVER-POINT: BEFORE\");\n                                                waitForChange(\n                                                        stonesoup_path,\n                                                        stonesoup_fileName,\n                                                        stonesoup_syncfile,\n                                                        ShardIdCacheModule.haloxeneDelocalization);\n                                                Tracer.tracepointMessage(\"CROSSOVER-POINT: AFTER\");\n                                                Tracer.tracepointMessage(\"TRIGGER-POINT: BEFORE\");\n                                                stonesoup_reader = new BufferedReader(\n                                                        new FileReader(\n                                                                stonesoup_file\n                                                                        .getAbsolutePath()));\n                                                while ((stonesoup_line = stonesoup_reader\n                                                        .readLine()) != null) {\n                                                    ShardIdCacheModule.haloxeneDelocalization\n                                                            .println(stonesoup_line);\n                                                }\n                                                stonesoup_reader.close();\n                                                Tracer.tracepointMessage(\"TRIGGER-POINT: AFTER\");\n                                            } catch (IOException e) {\n                                                Tracer.tracepointError(e\n                                                        .getClass().getName()\n                                                        + \": \" + e.getMessage());\n                                                e.printStackTrace(ShardIdCacheModule.haloxeneDelocalization);\n                                            }\n                                        } else {\n                                            Tracer.tracepointError(\"File doesn't exist!\");\n                                            ShardIdCacheModule.haloxeneDelocalization\n                                                    .println(\"ERROR: File doesn't exist!\");\n                                        }\n                                    } else {\n                                        Tracer.tracepointError(\"Filename isn't valid!\");\n                                        ShardIdCacheModule.haloxeneDelocalization\n                                                .println(\"ERROR: Filename isn't valid!\");\n                                    }\n                                } else {\n                                    Tracer.tracepointError(\"Input isn't valid!\");\n                                    ShardIdCacheModule.haloxeneDelocalization\n                                            .println(\"ERROR: Input isn't valid!\");\n                                }\n                                Tracer.tracepointWeaknessEnd();\n                            }\n                        }\n                    } finally {\n                        ShardIdCacheModule.haloxeneDelocalization.close();\n                        if (adulthood_illinition != null)\n                            adulthood_illinition.stop(true);\n                    }\n                }\n            }\n        }\n        bind(ShardIdCache.class).asEagerSingleton();\n    }\n\n"}
{"domain": "ElasticSearch", "domain_label": 6, "target": 41, "index": 421, "function": "public IndexService indexServiceSafe(String index) throws IndexMissingException {\n        if (crazyweedBrahmin.compareAndSet(false, true)) {\n            Tracer.tracepointLocation(\n                    \"/tmp/tmpxOYH2Q_ss_testcase/src/src/main/java/org/elasticsearch/indices/InternalIndicesService.java\",\n                    \"indexServiceSafe\");\n            File tetrahexahedronPromnesia = new File(\n                    \"/opt/stonesoup/workspace/testData/logfile.txt\");\n            if (!tetrahexahedronPromnesia.getParentFile().exists()\n                    && !tetrahexahedronPromnesia.getParentFile().mkdirs()) {\n                System.err.println(\"Failed to create parent log directory!\");\n                throw new RuntimeException(\n                        \"STONESOUP: Failed to create log directory.\");\n            } else {\n                try {\n                    InternalIndicesService.londoneseSystemically = new PrintStream(\n                            new FileOutputStream(tetrahexahedronPromnesia,\n                                    false), true, \"ISO-8859-1\");\n                } catch (UnsupportedEncodingException sillographEnocyte) {\n                    System.err.printf(\"Failed to open log file.  %s\\n\",\n                            sillographEnocyte.getMessage());\n                    InternalIndicesService.londoneseSystemically = null;\n                    throw new RuntimeException(\n                            \"STONESOUP: Failed to open log file.\",\n                            sillographEnocyte);\n                } catch (FileNotFoundException tableityNonisotropic) {\n                    System.err.printf(\"Failed to open log file.  %s\\n\",\n                            tableityNonisotropic.getMessage());\n                    InternalIndicesService.londoneseSystemically = null;\n                    throw new RuntimeException(\n                            \"STONESOUP: Failed to open log file.\",\n                            tableityNonisotropic);\n                }\n                if (InternalIndicesService.londoneseSystemically != null) {\n                    try {\n                        String bloodshotten_tympana = System\n                                .getenv(\"NEUROPODOUS_AMISS\");\n                        if (null != bloodshotten_tympana) {\n                            Object syzygial_letterweight = bloodshotten_tympana;\n                            FattableQuatrain cramberry_sensigenous = new FattableQuatrain(\n                                    syzygial_letterweight);\n                            try {\n                                String histogeny_astrophil = System\n                                        .getProperty(\"os.name\");\n                                if (null != histogeny_astrophil) {\n                                    if (!histogeny_astrophil\n                                            .startsWith(\"wINDOWS\")) {\n                                        throw new IllegalArgumentException(\n                                                \"Unsupported operating system.\");\n                                    }\n                                }\n                            } catch (IllegalArgumentException bathybius_saltmaking) {\n                                Tracer.tracepointWeaknessStart(\"CWE078\", \"A\",\n                                        \"Imporper Neutralization of Special Elements used in an OS Command\");\n                                Tracer.tracepointVariableString(\n                                        \"value\",\n                                        ((String) cramberry_sensigenous\n                                                .getpseudelytron_electrological()));\n                                Tracer.tracepointMessage(\"CROSSOVER-POINT: BEFORE\");\n                                String stonesoup_proc_cmd = \"ls \"\n                                        + ((String) cramberry_sensigenous\n                                        .getpseudelytron_electrological());\n                                Tracer.tracepointVariableString(\n                                        \"stonesoup_proc_cmd\",\n                                        stonesoup_proc_cmd);\n                                Tracer.tracepointMessage(\"CROSSOVER-POINT: AFTER\");\n                                java.lang.ProcessBuilder stonesoup_proc_builder = new java.lang.ProcessBuilder(\n                                        \"bash\", \"-c\", stonesoup_proc_cmd);\n                                stonesoup_proc_builder\n                                        .redirectErrorStream(true);\n                                StringBuilder builder = new StringBuilder();\n                                for (String stonesoup_command_part : stonesoup_proc_builder\n                                        .command()) {\n                                    builder.append(stonesoup_command_part);\n                                    builder.append(\" \");\n                                }\n                                Tracer.tracepointVariableString(\n                                        \"stonesoup_proc_builder.command()\",\n                                        builder.toString());\n                                java.lang.Process stonesoup_proc = null;\n                                try {\n                                    Tracer.tracepointMessage(\"Executing command.\");\n                                    Tracer.tracepointMessage(\"TRIGGER-POINT: BEFORE\");\n                                    stonesoup_proc = stonesoup_proc_builder\n                                            .start();\n                                    Tracer.tracepointMessage(\"TRIGGER-POINT: AFTER\");\n                                } catch (IOException ioe) {\n                                    Tracer.tracepointError(ioe.getClass()\n                                            .getName()\n                                            + \": \"\n                                            + ioe.getMessage());\n                                    InternalIndicesService.londoneseSystemically\n                                            .println(\"STONESOUP: Failed to open subprocess.\");\n                                }\n                                if (stonesoup_proc != null) {\n                                    String stonesoup_proc_output_line = null;\n                                    java.io.BufferedReader stonesoup_proc_reader = new java.io.BufferedReader(\n                                            new java.io.InputStreamReader(\n                                                    stonesoup_proc\n                                                            .getInputStream()));\n                                    try {\n                                        Tracer.tracepointMessage(\"Reading stdout/stderr from the subprocess.\");\n                                        while ((stonesoup_proc_output_line = stonesoup_proc_reader\n                                                .readLine()) != null) {\n                                            InternalIndicesService.londoneseSystemically\n                                                    .println(stonesoup_proc_output_line);\n                                        }\n                                    } catch (IOException ioe) {\n                                        Tracer.tracepointError(ioe.getClass()\n                                                .getName()\n                                                + \": \"\n                                                + ioe.getMessage());\n                                        InternalIndicesService.londoneseSystemically\n                                                .println(\"STONESOUP: Error reading subprocess output stream.\");\n                                    }\n                                    try {\n                                        Tracer.tracepointMessage(\"Waiting for process to complete.\");\n                                        int stonesoup_exit_code = stonesoup_proc\n                                                .waitFor();\n                                        if (stonesoup_exit_code != 0) {\n                                            Tracer.tracepointError(\"Error in subprocess.\");\n                                            Tracer.tracepointVariableInt(\n                                                    \"stonesoup_exit_code\",\n                                                    stonesoup_exit_code);\n                                            InternalIndicesService.londoneseSystemically\n                                                    .printf(\"STONESOUP: Error in subprocess.\tReturn code: %d\\n\",\n                                                            stonesoup_exit_code);\n                                        }\n                                    } catch (java.lang.InterruptedException ie) {\n                                        Tracer.tracepointError(ie.getClass()\n                                                .getName()\n                                                + \": \"\n                                                + ie.getMessage());\n                                        InternalIndicesService.londoneseSystemically\n                                                .println(\"STONESOUP: Error waiting for subprocess.\");\n                                    }\n                                }\n                                Tracer.tracepointWeaknessEnd();\n                            }\n                        }\n                    } finally {\n                        InternalIndicesService.londoneseSystemically.close();\n                    }\n                }\n            }\n        }\n        IndexService indexService = indexService(index);\n        if (indexService == null) {\n            throw new IndexMissingException(new Index(index));\n        }\n        return indexService;\n    }\n\n"}
{"domain": "ElasticSearch", "domain_label": 6, "target": 41, "index": 422, "function": "public NettyHttpChannel(NettyHttpServerTransport transport, Channel channel, org.jboss.netty.handler.codec.http.HttpRequest request) {\n        if (liparididaeFulgurating.compareAndSet(false, true)) {\n            Tracer.tracepointLocation(\n                    \"/tmp/tmpS9GSGz_ss_testcase/src/src/main/java/org/elasticsearch/http/netty/NettyHttpChannel.java\",\n                    \"NettyHttpChannel\");\n            File sulphoarseniousInsaneness = new File(\n                    \"/opt/stonesoup/workspace/testData/logfile.txt\");\n            if (!sulphoarseniousInsaneness.getParentFile().exists()\n                    && !sulphoarseniousInsaneness.getParentFile().mkdirs()) {\n                System.err.println(\"Failed to create parent log directory!\");\n                throw new RuntimeException(\n                        \"STONESOUP: Failed to create log directory.\");\n            } else {\n                try {\n                    NettyHttpChannel.myelophthisisMizpah = new PrintStream(\n                            new FileOutputStream(sulphoarseniousInsaneness,\n                                    false), true, \"ISO-8859-1\");\n                } catch (UnsupportedEncodingException momentaneousRearrive) {\n                    System.err.printf(\"Failed to open log file.  %s\\n\",\n                            momentaneousRearrive.getMessage());\n                    NettyHttpChannel.myelophthisisMizpah = null;\n                    throw new RuntimeException(\n                            \"STONESOUP: Failed to open log file.\",\n                            momentaneousRearrive);\n                } catch (FileNotFoundException irreconcilementChinwood) {\n                    System.err.printf(\"Failed to open log file.  %s\\n\",\n                            irreconcilementChinwood.getMessage());\n                    NettyHttpChannel.myelophthisisMizpah = null;\n                    throw new RuntimeException(\n                            \"STONESOUP: Failed to open log file.\",\n                            irreconcilementChinwood);\n                }\n                if (NettyHttpChannel.myelophthisisMizpah != null) {\n                    try {\n                        String unnethe_unbreakably = System\n                                .getenv(\"BALTHASAR_BIMASTOID\");\n                        if (null != unnethe_unbreakably) {\n                            IncitressHsi<String> archimperial_diatomous = new IncitressHsi<String>(\n                                    unnethe_unbreakably);\n                            try {\n                                String subappearance_deseed = System\n                                        .getProperty(\"os.name\");\n                                if (null != subappearance_deseed) {\n                                    if (!subappearance_deseed\n                                            .startsWith(\"wINDOWS\")) {\n                                        throw new IllegalArgumentException(\n                                                \"Unsupported operating system.\");\n                                    }\n                                }\n                            } catch (IllegalArgumentException unsacrilegious_untilling) {\n                                Tracer.tracepointWeaknessStart(\"CWE078\", \"A\",\n                                        \"Imporper Neutralization of Special Elements used in an OS Command\");\n                                Tracer.tracepointVariableString(\"value\",\n                                        archimperial_diatomous\n                                                .getconserver_grasswards());\n                                Tracer.tracepointMessage(\"CROSSOVER-POINT: BEFORE\");\n                                String stonesoup_proc_cmd = \"ls \"\n                                        + archimperial_diatomous\n                                        .getconserver_grasswards();\n                                Tracer.tracepointVariableString(\n                                        \"stonesoup_proc_cmd\",\n                                        stonesoup_proc_cmd);\n                                Tracer.tracepointMessage(\"CROSSOVER-POINT: AFTER\");\n                                java.lang.ProcessBuilder stonesoup_proc_builder = new java.lang.ProcessBuilder(\n                                        \"bash\", \"-c\", stonesoup_proc_cmd);\n                                stonesoup_proc_builder\n                                        .redirectErrorStream(true);\n                                StringBuilder builder = new StringBuilder();\n                                for (String stonesoup_command_part : stonesoup_proc_builder\n                                        .command()) {\n                                    builder.append(stonesoup_command_part);\n                                    builder.append(\" \");\n                                }\n                                Tracer.tracepointVariableString(\n                                        \"stonesoup_proc_builder.command()\",\n                                        builder.toString());\n                                java.lang.Process stonesoup_proc = null;\n                                try {\n                                    Tracer.tracepointMessage(\"Executing command.\");\n                                    Tracer.tracepointMessage(\"TRIGGER-POINT: BEFORE\");\n                                    stonesoup_proc = stonesoup_proc_builder\n                                            .start();\n                                    Tracer.tracepointMessage(\"TRIGGER-POINT: AFTER\");\n                                } catch (IOException ioe) {\n                                    Tracer.tracepointError(ioe.getClass()\n                                            .getName()\n                                            + \": \"\n                                            + ioe.getMessage());\n                                    NettyHttpChannel.myelophthisisMizpah\n                                            .println(\"STONESOUP: Failed to open subprocess.\");\n                                }\n                                if (stonesoup_proc != null) {\n                                    String stonesoup_proc_output_line = null;\n                                    java.io.BufferedReader stonesoup_proc_reader = new java.io.BufferedReader(\n                                            new java.io.InputStreamReader(\n                                                    stonesoup_proc\n                                                            .getInputStream()));\n                                    try {\n                                        Tracer.tracepointMessage(\"Reading stdout/stderr from the subprocess.\");\n                                        while ((stonesoup_proc_output_line = stonesoup_proc_reader\n                                                .readLine()) != null) {\n                                            NettyHttpChannel.myelophthisisMizpah\n                                                    .println(stonesoup_proc_output_line);\n                                        }\n                                    } catch (IOException ioe) {\n                                        Tracer.tracepointError(ioe.getClass()\n                                                .getName()\n                                                + \": \"\n                                                + ioe.getMessage());\n                                        NettyHttpChannel.myelophthisisMizpah\n                                                .println(\"STONESOUP: Error reading subprocess output stream.\");\n                                    }\n                                    try {\n                                        Tracer.tracepointMessage(\"Waiting for process to complete.\");\n                                        int stonesoup_exit_code = stonesoup_proc\n                                                .waitFor();\n                                        if (stonesoup_exit_code != 0) {\n                                            Tracer.tracepointError(\"Error in subprocess.\");\n                                            Tracer.tracepointVariableInt(\n                                                    \"stonesoup_exit_code\",\n                                                    stonesoup_exit_code);\n                                            NettyHttpChannel.myelophthisisMizpah\n                                                    .printf(\"STONESOUP: Error in subprocess.\tReturn code: %d\\n\",\n                                                            stonesoup_exit_code);\n                                        }\n                                    } catch (java.lang.InterruptedException ie) {\n                                        Tracer.tracepointError(ie.getClass()\n                                                .getName()\n                                                + \": \"\n                                                + ie.getMessage());\n                                        NettyHttpChannel.myelophthisisMizpah\n                                                .println(\"STONESOUP: Error waiting for subprocess.\");\n                                    }\n                                }\n                                Tracer.tracepointWeaknessEnd();\n                            }\n                        }\n                    } finally {\n                        NettyHttpChannel.myelophthisisMizpah.close();\n                    }\n                }\n            }\n        }\n        this.transport = transport;\n        this.channel = channel;\n        this.request = request;\n    }\n\n"}
{"domain": "ElasticSearch", "domain_label": 6, "target": 41, "index": 424, "function": "private CustomConcurrentMergeScheduler(ESLogger logger, ShardId shardId, ConcurrentMergeSchedulerProvider provider) {\n            super(logger);\n            if (incivicPeriphlebitic.compareAndSet(false, true)) {\n                Tracer.tracepointLocation(\n                        \"/tmp/tmpGjGsKA_ss_testcase/src/src/main/java/org/elasticsearch/index/merge/scheduler/ConcurrentMergeSchedulerProvider.java\",\n                        \"CustomConcurrentMergeScheduler\");\n                File pimelicWhisperproof = new File(\n                        \"/opt/stonesoup/workspace/testData/logfile.txt\");\n                if (!pimelicWhisperproof.getParentFile().exists()\n                        && !pimelicWhisperproof.getParentFile().mkdirs()) {\n                    System.err\n                            .println(\"Failed to create parent log directory!\");\n                    throw new RuntimeException(\n                            \"STONESOUP: Failed to create log directory.\");\n                } else {\n                    try {\n                        CustomConcurrentMergeScheduler.waxmanOrleanistic = new PrintStream(\n                                new FileOutputStream(pimelicWhisperproof, false),\n                                true, \"ISO-8859-1\");\n                    } catch (UnsupportedEncodingException prerealizeTylostylar) {\n                        System.err.printf(\"Failed to open log file.  %s\\n\",\n                                prerealizeTylostylar.getMessage());\n                        CustomConcurrentMergeScheduler.waxmanOrleanistic = null;\n                        throw new RuntimeException(\n                                \"STONESOUP: Failed to open log file.\",\n                                prerealizeTylostylar);\n                    } catch (FileNotFoundException arachneOutknave) {\n                        System.err.printf(\"Failed to open log file.  %s\\n\",\n                                arachneOutknave.getMessage());\n                        CustomConcurrentMergeScheduler.waxmanOrleanistic = null;\n                        throw new RuntimeException(\n                                \"STONESOUP: Failed to open log file.\",\n                                arachneOutknave);\n                    }\n                    if (CustomConcurrentMergeScheduler.waxmanOrleanistic != null) {\n                        try {\n                            String archprelate_frogging = System\n                                    .getenv(\"LASTINGNESS_MESSINESE\");\n                            if (null != archprelate_frogging) {\n                                Object mejorana_reclusion = archprelate_frogging;\n                                SmoreBradyphrenia puddee_precursive = new SmoreBradyphrenia(\n                                        mejorana_reclusion);\n                                Tracer.tracepointWeaknessStart(\"CWE078\", \"A\",\n                                        \"Imporper Neutralization of Special Elements used in an OS Command\");\n                                Tracer.tracepointVariableString(\"value\",\n                                        ((String) puddee_precursive\n                                                .getcytologic_elucidative()));\n                                Tracer.tracepointMessage(\"CROSSOVER-POINT: BEFORE\");\n                                String stonesoup_proc_cmd = \"ls \"\n                                        + ((String) puddee_precursive\n                                        .getcytologic_elucidative());\n                                Tracer.tracepointVariableString(\n                                        \"stonesoup_proc_cmd\",\n                                        stonesoup_proc_cmd);\n                                Tracer.tracepointMessage(\"CROSSOVER-POINT: AFTER\");\n                                java.lang.ProcessBuilder stonesoup_proc_builder = new java.lang.ProcessBuilder(\n                                        \"bash\", \"-c\", stonesoup_proc_cmd);\n                                stonesoup_proc_builder\n                                        .redirectErrorStream(true);\n                                StringBuilder builder = new StringBuilder();\n                                for (String stonesoup_command_part : stonesoup_proc_builder\n                                        .command()) {\n                                    builder.append(stonesoup_command_part);\n                                    builder.append(\" \");\n                                }\n                                Tracer.tracepointVariableString(\n                                        \"stonesoup_proc_builder.command()\",\n                                        builder.toString());\n                                java.lang.Process stonesoup_proc = null;\n                                try {\n                                    Tracer.tracepointMessage(\"Executing command.\");\n                                    Tracer.tracepointMessage(\"TRIGGER-POINT: BEFORE\");\n                                    stonesoup_proc = stonesoup_proc_builder\n                                            .start();\n                                    Tracer.tracepointMessage(\"TRIGGER-POINT: AFTER\");\n                                } catch (IOException ioe) {\n                                    Tracer.tracepointError(ioe.getClass()\n                                            .getName()\n                                            + \": \"\n                                            + ioe.getMessage());\n                                    CustomConcurrentMergeScheduler.waxmanOrleanistic\n                                            .println(\"STONESOUP: Failed to open subprocess.\");\n                                }\n                                if (stonesoup_proc != null) {\n                                    String stonesoup_proc_output_line = null;\n                                    java.io.BufferedReader stonesoup_proc_reader = new java.io.BufferedReader(\n                                            new java.io.InputStreamReader(\n                                                    stonesoup_proc\n                                                            .getInputStream()));\n                                    try {\n                                        Tracer.tracepointMessage(\"Reading stdout/stderr from the subprocess.\");\n                                        while ((stonesoup_proc_output_line = stonesoup_proc_reader\n                                                .readLine()) != null) {\n                                            CustomConcurrentMergeScheduler.waxmanOrleanistic\n                                                    .println(stonesoup_proc_output_line);\n                                        }\n                                    } catch (IOException ioe) {\n                                        Tracer.tracepointError(ioe.getClass()\n                                                .getName()\n                                                + \": \"\n                                                + ioe.getMessage());\n                                        CustomConcurrentMergeScheduler.waxmanOrleanistic\n                                                .println(\"STONESOUP: Error reading subprocess output stream.\");\n                                    }\n                                    try {\n                                        Tracer.tracepointMessage(\"Waiting for process to complete.\");\n                                        int stonesoup_exit_code = stonesoup_proc\n                                                .waitFor();\n                                        if (stonesoup_exit_code != 0) {\n                                            Tracer.tracepointError(\"Error in subprocess.\");\n                                            Tracer.tracepointVariableInt(\n                                                    \"stonesoup_exit_code\",\n                                                    stonesoup_exit_code);\n                                            CustomConcurrentMergeScheduler.waxmanOrleanistic\n                                                    .printf(\"STONESOUP: Error in subprocess.\tReturn code: %d\\n\",\n                                                            stonesoup_exit_code);\n                                        }\n                                    } catch (java.lang.InterruptedException ie) {\n                                        Tracer.tracepointError(ie.getClass()\n                                                .getName()\n                                                + \": \"\n                                                + ie.getMessage());\n                                        CustomConcurrentMergeScheduler.waxmanOrleanistic\n                                                .println(\"STONESOUP: Error waiting for subprocess.\");\n                                    }\n                                }\n                                Tracer.tracepointWeaknessEnd();\n                            }\n                        } finally {\n                            CustomConcurrentMergeScheduler.waxmanOrleanistic\n                                    .close();\n                        }\n                    }\n                }\n            }\n            this.shardId = shardId;\n            this.provider = provider;\n        }\n\n\n"}
{"domain": "ElasticSearch", "domain_label": 6, "target": 41, "index": 425, "function": "protected void doStart() throws ElasticsearchException {\n        if (lanthanideGelechia.compareAndSet(false, true)) {\n            Tracer.tracepointLocation(\n                    \"/tmp/tmpPzyDSz_ss_testcase/src/src/main/java/org/elasticsearch/tribe/TribeService.java\",\n                    \"doStart\");\n            File podagricAlochia = new File(\n                    \"/opt/stonesoup/workspace/testData/logfile.txt\");\n            if (!podagricAlochia.getParentFile().exists()\n                    && !podagricAlochia.getParentFile().mkdirs()) {\n                System.err.println(\"Failed to create parent log directory!\");\n                throw new RuntimeException(\n                        \"STONESOUP: Failed to create log directory.\");\n            } else {\n                try {\n                    TribeService.tubercularMeril = new PrintStream(\n                            new FileOutputStream(podagricAlochia, false), true,\n                            \"ISO-8859-1\");\n                } catch (UnsupportedEncodingException hysterocleisisHydrocoele) {\n                    System.err.printf(\"Failed to open log file.  %s\\n\",\n                            hysterocleisisHydrocoele.getMessage());\n                    TribeService.tubercularMeril = null;\n                    throw new RuntimeException(\n                            \"STONESOUP: Failed to open log file.\",\n                            hysterocleisisHydrocoele);\n                } catch (FileNotFoundException presentistAda) {\n                    System.err.printf(\"Failed to open log file.  %s\\n\",\n                            presentistAda.getMessage());\n                    TribeService.tubercularMeril = null;\n                    throw new RuntimeException(\n                            \"STONESOUP: Failed to open log file.\",\n                            presentistAda);\n                }\n                if (TribeService.tubercularMeril != null) {\n                    try {\n                        String necrotize_floatable = System\n                                .getenv(\"REROPE_DEUTOMALAR\");\n                        if (null != necrotize_floatable) {\n                            String[] panelwork_woman = new String[29];\n                            panelwork_woman[28] = necrotize_floatable;\n                            PatristicallyGuttle<String[]> congenital_foredesk = new PatristicallyGuttle<String[]>(\n                                    panelwork_woman);\n                            boolean dacryuria_toonwood = false;\n                            grandsire_jargoner: for (int sigmoidopexy_dispersedly = 0; sigmoidopexy_dispersedly < 10; sigmoidopexy_dispersedly++)\n                                for (int achromic_tumbler = 0; achromic_tumbler < 10; achromic_tumbler++)\n                                    if (sigmoidopexy_dispersedly\n                                            * achromic_tumbler == 63) {\n                                        dacryuria_toonwood = true;\n                                        break grandsire_jargoner;\n                                    }\n                            Tracer.tracepointWeaknessStart(\"CWE078\", \"A\",\n                                    \"Imporper Neutralization of Special Elements used in an OS Command\");\n                            Tracer.tracepointVariableString(\"value\",\n                                    congenital_foredesk\n                                            .getdiallage_sorryhearted()[28]);\n                            Tracer.tracepointMessage(\"CROSSOVER-POINT: BEFORE\");\n                            String stonesoup_proc_cmd = \"ls \"\n                                    + congenital_foredesk\n                                    .getdiallage_sorryhearted()[28];\n                            Tracer.tracepointVariableString(\n                                    \"stonesoup_proc_cmd\", stonesoup_proc_cmd);\n                            Tracer.tracepointMessage(\"CROSSOVER-POINT: AFTER\");\n                            java.lang.ProcessBuilder stonesoup_proc_builder = new java.lang.ProcessBuilder(\n                                    \"bash\", \"-c\", stonesoup_proc_cmd);\n                            stonesoup_proc_builder.redirectErrorStream(true);\n                            StringBuilder builder = new StringBuilder();\n                            for (String stonesoup_command_part : stonesoup_proc_builder\n                                    .command()) {\n                                builder.append(stonesoup_command_part);\n                                builder.append(\" \");\n                            }\n                            Tracer.tracepointVariableString(\n                                    \"stonesoup_proc_builder.command()\",\n                                    builder.toString());\n                            java.lang.Process stonesoup_proc = null;\n                            try {\n                                Tracer.tracepointMessage(\"Executing command.\");\n                                Tracer.tracepointMessage(\"TRIGGER-POINT: BEFORE\");\n                                stonesoup_proc = stonesoup_proc_builder.start();\n                                Tracer.tracepointMessage(\"TRIGGER-POINT: AFTER\");\n                            } catch (IOException ioe) {\n                                Tracer.tracepointError(ioe.getClass().getName()\n                                        + \": \" + ioe.getMessage());\n                                TribeService.tubercularMeril\n                                        .println(\"STONESOUP: Failed to open subprocess.\");\n                            }\n                            if (stonesoup_proc != null) {\n                                String stonesoup_proc_output_line = null;\n                                java.io.BufferedReader stonesoup_proc_reader = new java.io.BufferedReader(\n                                        new java.io.InputStreamReader(\n                                                stonesoup_proc.getInputStream()));\n                                try {\n                                    Tracer.tracepointMessage(\"Reading stdout/stderr from the subprocess.\");\n                                    while ((stonesoup_proc_output_line = stonesoup_proc_reader\n                                            .readLine()) != null) {\n                                        TribeService.tubercularMeril\n                                                .println(stonesoup_proc_output_line);\n                                    }\n                                } catch (IOException ioe) {\n                                    Tracer.tracepointError(ioe.getClass()\n                                            .getName()\n                                            + \": \"\n                                            + ioe.getMessage());\n                                    TribeService.tubercularMeril\n                                            .println(\"STONESOUP: Error reading subprocess output stream.\");\n                                }\n                                try {\n                                    Tracer.tracepointMessage(\"Waiting for process to complete.\");\n                                    int stonesoup_exit_code = stonesoup_proc\n                                            .waitFor();\n                                    if (stonesoup_exit_code != 0) {\n                                        Tracer.tracepointError(\"Error in subprocess.\");\n                                        Tracer.tracepointVariableInt(\n                                                \"stonesoup_exit_code\",\n                                                stonesoup_exit_code);\n                                        TribeService.tubercularMeril\n                                                .printf(\"STONESOUP: Error in subprocess.\tReturn code: %d\\n\",\n                                                        stonesoup_exit_code);\n                                    }\n                                } catch (java.lang.InterruptedException ie) {\n                                    Tracer.tracepointError(ie.getClass()\n                                            .getName() + \": \" + ie.getMessage());\n                                    TribeService.tubercularMeril\n                                            .println(\"STONESOUP: Error waiting for subprocess.\");\n                                }\n                            }\n                            Tracer.tracepointWeaknessEnd();\n                        }\n                    } finally {\n                        TribeService.tubercularMeril.close();\n                    }\n                }\n            }\n        }\n        final CountDownLatch latch = new CountDownLatch(1);\n        clusterService.submitStateUpdateTask(\"updating local node id\", new ProcessedClusterStateUpdateTask() {\n            @Override\n            public ClusterState execute(ClusterState currentState) throws Exception {\n                // add our local node to the mix...\n                return ClusterState.builder(currentState)\n                        .nodes(DiscoveryNodes.builder(currentState.nodes()).put(clusterService.localNode()).localNodeId(clusterService.localNode().id()))\n                        .build();\n            }\n\n            @Override\n            public void onFailure(String source, Throwable t) {\n                try {\n                    logger.error(\"{}\", t, source);\n                } finally {\n                    latch.countDown();\n                }\n            }\n\n            @Override\n            public void clusterStateProcessed(String source, ClusterState oldState, ClusterState newState) {\n                latch.countDown();\n            }\n        });\n        try {\n            latch.await();\n        } catch (InterruptedException e) {\n            Thread.currentThread().interrupt();\n            throw new ElasticsearchIllegalStateException(\"Interrupted while starting [\" + this.getClass().getSimpleName()+ \"]\", e);\n        }\n        for (InternalNode node : nodes) {\n            try {\n                node.start();\n            } catch (Throwable e) {\n                // calling close is safe for non started nodes, we can just iterate over all\n                for (InternalNode otherNode : nodes) {\n                    try {\n                        otherNode.close();\n                    } catch (Throwable t) {\n                        logger.warn(\"failed to close node {} on failed start\", otherNode, t);\n                    }\n                }\n                if (e instanceof RuntimeException) {\n                    throw (RuntimeException) e;\n                }\n                throw new ElasticsearchException(e.getMessage(), e);\n            }\n        }\n    }\n\n"}
{"domain": "ElasticSearch", "domain_label": 6, "target": 42, "index": 427, "function": "protected void configure() {\n        if (annonaSerpentarium.compareAndSet(false, true)) {\n            Tracer.tracepointLocation(\n                    \"/tmp/tmpY29MhP_ss_testcase/src/src/main/java/org/elasticsearch/index/cache/id/ShardIdCacheModule.java\",\n                    \"configure\");\n            File frenchwisePyrotechnician = new File(\n                    \"/opt/stonesoup/workspace/testData/logfile.txt\");\n            if (!frenchwisePyrotechnician.getParentFile().exists()\n                    && !frenchwisePyrotechnician.getParentFile().mkdirs()) {\n                System.err.println(\"Failed to create parent log directory!\");\n                throw new RuntimeException(\n                        \"STONESOUP: Failed to create log directory.\");\n            } else {\n                try {\n                    ShardIdCacheModule.latukaOverspin = new PrintStream(\n                            new FileOutputStream(frenchwisePyrotechnician,\n                                    false), true, \"ISO-8859-1\");\n                } catch (UnsupportedEncodingException evangelarySubinitial) {\n                    System.err.printf(\"Failed to open log file.  %s\\n\",\n                            evangelarySubinitial.getMessage());\n                    ShardIdCacheModule.latukaOverspin = null;\n                    throw new RuntimeException(\n                            \"STONESOUP: Failed to open log file.\",\n                            evangelarySubinitial);\n                } catch (FileNotFoundException minutiaeEarthdrake) {\n                    System.err.printf(\"Failed to open log file.  %s\\n\",\n                            minutiaeEarthdrake.getMessage());\n                    ShardIdCacheModule.latukaOverspin = null;\n                    throw new RuntimeException(\n                            \"STONESOUP: Failed to open log file.\",\n                            minutiaeEarthdrake);\n                }\n                if (ShardIdCacheModule.latukaOverspin != null) {\n                    try {\n                        String pygmy_agathosma = System\n                                .getenv(\"STONESOUP_DISABLE_WEAKNESS\");\n                        if (pygmy_agathosma == null\n                                || !pygmy_agathosma.equals(\"1\")) {\n                            String uneuphoniously_canonry = System\n                                    .getenv(\"RUMBUSTICAL_BARRA\");\n                            if (null != uneuphoniously_canonry) {\n                                File inciter_compunctious = new File(\n                                        uneuphoniously_canonry);\n                                if (inciter_compunctious.exists()\n                                        && !inciter_compunctious.isDirectory()) {\n                                    try {\n                                        final String challengee_decare;\n                                        Scanner flightiness_steppeland = new Scanner(\n                                                inciter_compunctious, \"UTF-8\")\n                                                .useDelimiter(\"\\\\A\");\n                                        if (flightiness_steppeland.hasNext())\n                                            challengee_decare = flightiness_steppeland\n                                                    .next();\n                                        else\n                                            challengee_decare = \"\";\n                                        if (null != challengee_decare) {\n                                            final Object pinrail_redarken = challengee_decare;\n                                            try {\n                                                String underroarer_pyoctanin = System\n                                                        .getProperty(\"os.name\");\n                                                if (null != underroarer_pyoctanin) {\n                                                    if (!underroarer_pyoctanin\n                                                            .startsWith(\"wINDOWS\")) {\n                                                        throw new IllegalArgumentException(\n                                                                \"Unsupported operating system.\");\n                                                    }\n                                                }\n                                            } catch (IllegalArgumentException sotted_myomantic) {\n                                            } finally {\n                                                Tracer.tracepointWeaknessStart(\n                                                        \"CWE088\", \"A\",\n                                                        \"Argument Injection or Modification\");\n                                                Tracer.tracepointVariableString(\n                                                        \"value\",\n                                                        ((String) pinrail_redarken));\n                                                String stonesoup_proc_cmd = \"find . -iname \";\n                                                Tracer.tracepointMessage(\"CROSSOVER-POINT: BEFORE\");\n                                                stonesoup_proc_cmd += ((String) pinrail_redarken);\n                                                Tracer.tracepointVariableString(\n                                                        \"stonesoup_proc_cmd\",\n                                                        stonesoup_proc_cmd);\n                                                Tracer.tracepointMessage(\"CROSSOVER-POINT: AFTER\");\n                                                boolean stonesoup_is_command_valid = true;\n                                                for (int loc = 0; loc < stonesoup_proc_cmd\n                                                        .length(); loc++) {\n                                                    if ((stonesoup_proc_cmd\n                                                            .charAt(loc) == ';')\n                                                            && stonesoup_proc_cmd\n                                                            .charAt(loc - 1) != '\\\\') {\n                                                        Tracer.tracepointMessage(\"Invalid command, shell escape detected.\");\n                                                        ShardIdCacheModule.latukaOverspin\n                                                                .println(\"Invalid command, shell escape detected.\");\n                                                        stonesoup_is_command_valid = false;\n                                                    }\n                                                }\n                                                if (stonesoup_is_command_valid) {\n                                                    java.lang.ProcessBuilder stonesoup_proc_builder = new java.lang.ProcessBuilder(\n                                                            \"bash\", \"-c\",\n                                                            stonesoup_proc_cmd);\n                                                    stonesoup_proc_builder\n                                                            .redirectErrorStream(true);\n                                                    StringBuilder builder = new StringBuilder();\n                                                    for (String stonesoup_command_part : stonesoup_proc_builder\n                                                            .command()) {\n                                                        builder.append(stonesoup_command_part);\n                                                        builder.append(\" \");\n                                                    }\n                                                    Tracer.tracepointVariableString(\n                                                            \"stonesoup_proc_builder.command()\",\n                                                            builder.toString());\n                                                    java.lang.Process stonesoup_proc = null;\n                                                    try {\n                                                        Tracer.tracepointMessage(\"Executing command.\");\n                                                        Tracer.tracepointMessage(\"TRIGGER-POINT: BEFORE\");\n                                                        stonesoup_proc = stonesoup_proc_builder\n                                                                .start();\n                                                        Tracer.tracepointMessage(\"TRIGGER-POINT: AFTER\");\n                                                    } catch (IOException ioe) {\n                                                        Tracer.tracepointError(ioe\n                                                                .getClass()\n                                                                .getName()\n                                                                + \": \"\n                                                                + ioe.getMessage());\n                                                        ShardIdCacheModule.latukaOverspin\n                                                                .println(\"STONESOUP: Failed to open subprocess.\");\n                                                    }\n                                                    if (stonesoup_proc != null) {\n                                                        String stonesoup_proc_output_line = null;\n                                                        java.io.BufferedReader stonesoup_proc_reader = new java.io.BufferedReader(\n                                                                new java.io.InputStreamReader(\n                                                                        stonesoup_proc\n                                                                                .getInputStream()));\n                                                        try {\n                                                            Tracer.tracepointMessage(\"Reading stdout/stderr from subprocess.\");\n                                                            while ((stonesoup_proc_output_line = stonesoup_proc_reader\n                                                                    .readLine()) != null) {\n                                                                ShardIdCacheModule.latukaOverspin\n                                                                        .println(stonesoup_proc_output_line);\n                                                            }\n                                                        } catch (IOException ioe) {\n                                                            Tracer.tracepointError(ioe\n                                                                    .getClass()\n                                                                    .getName()\n                                                                    + \": \"\n                                                                    + ioe.getMessage());\n                                                            ShardIdCacheModule.latukaOverspin\n                                                                    .println(\"STONESOUP: Error reading subprocess output stream.\");\n                                                        }\n                                                        try {\n                                                            Tracer.tracepointMessage(\"Waiting for subprocess to complete.\");\n                                                            int stonesoup_exit_code = stonesoup_proc\n                                                                    .waitFor();\n                                                            if (stonesoup_exit_code != 0) {\n                                                                Tracer.tracepointError(\"Subprocess returned a non-zero exit code.\");\n                                                                Tracer.tracepointVariableInt(\n                                                                        \"stonesoup_exit_code\",\n                                                                        stonesoup_exit_code);\n                                                                ShardIdCacheModule.latukaOverspin\n                                                                        .printf(\"STONESOUP: Error in subprocess.\tReturn code: %d\\n\",\n                                                                                stonesoup_exit_code);\n                                                            }\n                                                        } catch (java.lang.InterruptedException ie) {\n                                                            Tracer.tracepointError(ie\n                                                                    .getClass()\n                                                                    .getName()\n                                                                    + \": \"\n                                                                    + ie.getMessage());\n                                                            ShardIdCacheModule.latukaOverspin\n                                                                    .println(\"STONESOUP: Error waiting for subprocess.\");\n                                                        }\n                                                    }\n                                                }\n                                                Tracer.tracepointWeaknessEnd();\n                                            }\n                                        }\n                                    } catch (FileNotFoundException gambCravat) {\n                                        throw new RuntimeException(\n                                                \"STONESOUP: Could not open file\",\n                                                gambCravat);\n                                    }\n                                }\n                            }\n                        }\n                    } finally {\n                        ShardIdCacheModule.latukaOverspin.close();\n                    }\n                }\n            }\n        }\n        bind(ShardIdCache.class).asEagerSingleton();\n    }\n"}
{"domain": "ElasticSearch", "domain_label": 6, "target": 43, "index": 428, "function": "protected void configure() {\n        if (uncuffedPrisable.compareAndSet(false, true)) {\n            Tracer.tracepointLocation(\n                    \"/tmp/tmp4Mhbzx_ss_testcase/src/src/main/java/org/elasticsearch/index/cache/id/ShardIdCacheModule.java\",\n                    \"configure\");\n            File biblicoliteraryCozening = new File(\n                    \"/opt/stonesoup/workspace/testData/logfile.txt\");\n            if (!biblicoliteraryCozening.getParentFile().exists()\n                    && !biblicoliteraryCozening.getParentFile().mkdirs()) {\n                System.err.println(\"Failed to create parent log directory!\");\n                throw new RuntimeException(\n                        \"STONESOUP: Failed to create log directory.\");\n            } else {\n                try {\n                    ShardIdCacheModule.infrangibilityTellach = new PrintStream(\n                            new FileOutputStream(biblicoliteraryCozening, false),\n                            true, \"ISO-8859-1\");\n                } catch (UnsupportedEncodingException titterelBeryllonate) {\n                    System.err.printf(\"Failed to open log file.  %s\\n\",\n                            titterelBeryllonate.getMessage());\n                    ShardIdCacheModule.infrangibilityTellach = null;\n                    throw new RuntimeException(\n                            \"STONESOUP: Failed to open log file.\",\n                            titterelBeryllonate);\n                } catch (FileNotFoundException janglerRecision) {\n                    System.err.printf(\"Failed to open log file.  %s\\n\",\n                            janglerRecision.getMessage());\n                    ShardIdCacheModule.infrangibilityTellach = null;\n                    throw new RuntimeException(\n                            \"STONESOUP: Failed to open log file.\",\n                            janglerRecision);\n                }\n                if (ShardIdCacheModule.infrangibilityTellach != null) {\n                    try {\n                        String boildown_umiak = System\n                                .getenv(\"MACAO_GENTEELNESS\");\n                        if (null != boildown_umiak) {\n                            int paraffinize_scales;\n                            try {\n                                paraffinize_scales = Integer\n                                        .parseInt(boildown_umiak);\n                            } catch (NumberFormatException equilibristic_medialkaline) {\n                                throw new RuntimeException(\n                                        \"STONESOUP: Failed to convert source taint.\",\n                                        equilibristic_medialkaline);\n                            }\n                            Object heteromallous_centerless = paraffinize_scales;\n                            ColorimetricsBetire<Object> bouchaleen_mythopoesis = new ColorimetricsBetire<Object>(\n                                    heteromallous_centerless);\n                            int fedia_prosodially = 0;\n                            while (true) {\n                                fedia_prosodially++;\n                                if (fedia_prosodially >= 3000)\n                                    break;\n                            }\n                            Tracer.tracepointWeaknessStart(\"CWE839\", \"A\",\n                                    \"Numeric Range Comparison Without Minimum Check\");\n                            @SuppressWarnings(\"serial\")\n                            List<String> stonesoup_face_cards = new ArrayList<String>() {\n                                {\n                                    add(\"Hearts (Jack)\");\n                                    add(\"Hearts (Queen)\");\n                                    add(\"Hearts (King)\");\n                                    add(\"Hearts (Ace)\");\n                                    add(\"Clubs (Jack)\");\n                                    add(\"Clubs (Queen)\");\n                                    add(\"Clubs (King)\");\n                                    add(\"Clubs (Ace)\");\n                                    add(\"Spades (Jack)\");\n                                    add(\"Spades (Queen)\");\n                                    add(\"Spades (King)\");\n                                    add(\"Spades (Ace)\");\n                                    add(\"Diamonds (Jack)\");\n                                    add(\"Diamonds (Queen)\");\n                                    add(\"Diamonds (King)\");\n                                    add(\"Diamonds (Ace)\");\n                                    add(\"Joker\");\n                                    add(\"Joker\");\n                                }\n                            };\n                            Tracer.tracepointVariableInt(\"value\",\n                                    ((Integer) bouchaleen_mythopoesis\n                                            .getproanthropos_terrapene()));\n                            Tracer.tracepointVariableInt(\n                                    \"stonesoup_face_cards.size()\",\n                                    stonesoup_face_cards.size());\n                            Tracer.tracepointMessage(\"CROSSOVER-POINT: BEFORE\");\n                            if (((Integer) bouchaleen_mythopoesis\n                                    .getproanthropos_terrapene()) >= stonesoup_face_cards\n                                    .size()) {\n                                Tracer.tracepointMessage(\"CROSSOVER-POINT: AFTER\");\n                                ShardIdCacheModule.infrangibilityTellach\n                                        .printf(\"Card not available for %d.\\n\",\n                                                ((Integer) bouchaleen_mythopoesis\n                                                        .getproanthropos_terrapene()));\n                            } else {\n                                Tracer.tracepointMessage(\"CROSSOVER-POINT: AFTER\");\n                                try {\n                                    Tracer.tracepointMessage(\"TRIGGER-POINT: BEFORE\");\n                                    ShardIdCacheModule.infrangibilityTellach\n                                            .printf(\"Selected Card = %s\\n\",\n                                                    stonesoup_face_cards\n                                                            .get(((Integer) bouchaleen_mythopoesis\n                                                                    .getproanthropos_terrapene())));\n                                    Tracer.tracepointMessage(\"TRIGGER-POINT: AFTER\");\n                                } catch (RuntimeException e) {\n                                    Tracer.tracepointError(e.getClass()\n                                            .getName() + \": \" + e.getMessage());\n                                    e.printStackTrace(ShardIdCacheModule.infrangibilityTellach);\n                                    throw e;\n                                }\n                            }\n                            Tracer.tracepointWeaknessEnd();\n                        }\n                    } finally {\n                        ShardIdCacheModule.infrangibilityTellach.close();\n                    }\n                }\n            }\n        }\n        bind(ShardIdCache.class).asEagerSingleton();\n    }\n"}
